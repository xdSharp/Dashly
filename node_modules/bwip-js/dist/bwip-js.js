// This file is part of the bwip-js project available at:
//
//    http://metafloor.github.io/bwip-js
//
// Copyright (c) 2011-2025 Mark Warren
//
// This file contains code automatically generated from:
// Barcode Writer in Pure PostScript - Version 2025-04-19
// Copyright (c) 2004-2024 Terry Burton
//
// The MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
"use strict";

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        root.bwipjs = factory();
    }
}(typeof self !== 'undefined' ? self : this, function () {

// exports.js
const BWIPJS_VERSION = '4.6.0 (2025-04-20)';

// bwipjs.toCanvas(canvas, options)
// bwipjs.toCanvas(options, canvas)
//
// Uses the built-in canvas drawing.
//
// `canvas` can be an HTMLCanvasElement or an ID string or unique selector string.
// `options` are a bwip-js/BWIPP options object.
//
// This function is synchronous and throws on error.
//
// Returns the HTMLCanvasElement.
function ToCanvas(cvs, opts) {
    if (typeof opts == 'string' || opts instanceof HTMLCanvasElement) {
        let tmp = cvs;
        cvs = opts;
        opts = tmp;
    }
    return _ToAny(bwipp_lookup(opts.bcid), opts, cvs);
}
// Entry point for the symbol-specific exports
//
// Polymorphic internal interface
// _ToAny(encoder, string, opts) : HTMLCanvasElement
// _ToAny(encoder, HTMLCanvasElement, opts) : HTMLCanvasElement
// _ToAny(encoder, opts, string) : HTMLCanvasElement
// _ToAny(encoder, opts, HTMLCanvasElement) : HTMLCanvasElement
// _ToAny(encoder, opts, drawing) : any
//
// 'string` can be either an `id` or query selector returning a single canvas element.
function _ToAny(encoder, opts, drawing) {
    if (typeof opts == 'string') {
        var canvas = document.getElementById(opts) || document.querySelector(opts);
        if (!(canvas instanceof HTMLCanvasElement)) {
            throw new Error('bwipjs: `' + opts + '`: not a canvas');
        }
        opts = drawing;
        drawing = DrawingCanvas(canvas);
    } else if (opts instanceof HTMLCanvasElement) {
        var canvas = opts;
        opts = drawing;
        drawing = DrawingCanvas(canvas);
    } else if (typeof drawing == 'string') {
        var canvas = document.getElementById(drawing) || document.querySelector(drawing);
        if (!(canvas instanceof HTMLCanvasElement)) {
            throw new Error('bwipjs: `' + drawing + '`: not a canvas');
        }
        drawing = DrawingCanvas(canvas);
    } else if (drawing instanceof HTMLCanvasElement) {
        drawing = DrawingCanvas(drawing);
    } else if (!drawing || typeof drawing != 'object' || !drawing.init) {
        throw new Error('bwipjs: not a canvas or drawing object');
    }
    return _Render(encoder, opts, drawing);
}

// bwipjs.toSVG(options)
//
// Uses the built-in svg drawing interface.
//
// `options` are a bwip-js/BWIPP options object.
//
// This function is synchronous and throws on error.
//
// Returns a string containing a fully qualified SVG definition,
// including the natural width and height of the image, in pixels:
//
//  <svg viewBox="0 0 242 200" xmlns="http://www.w3.org/2000/svg">
//   ...
//  </svg>
//
// Available on all platforms.
function ToSVG(opts) {
    return _Render(bwipp_lookup(opts.bcid), opts, DrawingSVG());
}

function FixupOptions(opts) {
    var scale   = opts.scale || 2;
    var scaleX  = +opts.scaleX || scale;
    var scaleY  = +opts.scaleY || scaleX;

    // Fix up padding.
    opts.paddingleft = padding(opts.paddingleft, opts.paddingwidth, opts.padding, scaleX);
    opts.paddingright = padding(opts.paddingright, opts.paddingwidth, opts.padding, scaleX);
    opts.paddingtop = padding(opts.paddingtop, opts.paddingheight, opts.padding, scaleY);
    opts.paddingbottom = padding(opts.paddingbottom, opts.paddingheight, opts.padding, scaleY);

    // We override BWIPP's background color functionality.  If in CMYK, convert to RRGGBB so
    // the drawing interface is consistent.  Likewise, if in CSS-style #rgb or #rrggbb.
    if (opts.backgroundcolor) {
        var bgc = ''+opts.backgroundcolor;
        if (/^[0-9a-fA-F]{8}$/.test(bgc)) {
            var c = parseInt(bgc.substr(0,2), 16) / 255;
            var m = parseInt(bgc.substr(2,2), 16) / 255;
            var y = parseInt(bgc.substr(4,2), 16) / 255;
            var k = parseInt(bgc.substr(6,2), 16) / 255;
            var r = Math.floor((1-c) * (1-k) * 255).toString(16);
            var g = Math.floor((1-m) * (1-k) * 255).toString(16);
            var b = Math.floor((1-y) * (1-k) * 255).toString(16);
            opts.backgroundcolor = (r.length == 1 ? '0' : '') + r +
                                   (g.length == 1 ? '0' : '') + g +
                                   (b.length == 1 ? '0' : '') + b;
        } else {
            if (bgc[0] == '#') {
                bgc = bgc.substr(1);
            }
            if (/^[0-9a-fA-F]{6}$/.test(bgc)) {
                opts.backgroundcolor = bgc;
            } else if (/^[0-9a-fA-F]{3}$/.test(bgc)) {
                opts.backgroundcolor = bgc[0] + bgc[0] + bgc[1] + bgc[1] + bgc[2] + bgc[2];
            } else {
                throw new Error('bwip-js: invalid backgroundcolor: ' + opts.backgroundcolor);
            }
        }
    }

    return opts;

    // a is the most specific padding value, e.g. paddingleft
    // b is the next most specific value, e.g. paddingwidth
    // c is the general padding value.
    // s is the scale, either scalex or scaley
    function padding(a, b, c, s) {
        if (a != null) {
            a = a >>> 0;
            return a*s >>> 0;
        }
        if (b != null) {
            b = b >>> 0;
            return b*s >>> 0;
        }
        c = c >>> 0;
        return (c*s >>> 0) || 0;
    }
}

var BWIPJS_OPTIONS = {
    bcid:1,
    text:1,
    scale:1,
    scaleX:1,
    scaleY:1,
    rotate:1,
    padding:1,
    paddingwidth:1,
    paddingheight:1,
    paddingtop:1,
    paddingleft:1,
    paddingright:1,
    paddingbottom:1,
    backgroundcolor:1,
};

// bwipjs.render(options, drawing)
//
// Renders a barcode using the provided drawing object.
//
// This function is synchronous and throws on error.
//
// Browser and nodejs usage.
function Render(options, drawing) {
    return _Render(bwipp_lookup(options.bcid), options, drawing);
}

// Called by the public exports
function _Render(encoder, options, drawing) {
    var text = options.text;
    if (!text) {
        throw new ReferenceError('bwip-js: bar code text not specified.');
    }

    // setopts() is optional on the drawing object.
    FixupOptions(options);
    drawing.setopts && drawing.setopts(options);

    // Set the bwip-js defaults
    var scale   = options.scale || 2;
    var scaleX  = +options.scaleX || scale;
    var scaleY  = +options.scaleY || scaleX;
    var rotate  = options.rotate || 'N';

    // Create a barcode writer object.  This is the interface between
    // the low-level BWIPP code, the bwip-js graphics context, and the
    // drawing interface.
    var bw = new BWIPJS(drawing);

    // Set the BWIPP options
    var bwippopts = {};
    for (var id in options) {
        if (!BWIPJS_OPTIONS[id]) {
            bwippopts[id] = options[id];
        }
    }

    // Fix a disconnect in the BWIPP rendering logic
    if (bwippopts.alttext) {
        bwippopts.includetext = true;
    }
    // We use mm rather than inches for height - except pharmacode2 height
    // which is already in mm.
    if (+bwippopts.height && encoder != bwipp_pharmacode2) {
        bwippopts.height = bwippopts.height / 25.4 || 0.5;
    }
    // Likewise, width
    if (+bwippopts.width) {
        bwippopts.width = bwippopts.width / 25.4 || 0;
    }

    // Scale the image
    bw.scale(scaleX, scaleY);

    // Call into the BWIPP cross-compiled code and render the image.
    bwipp_encode(bw, encoder, text, bwippopts);

    // Returns whatever drawing.end() returns, or `false` if nothing rendered.
    return bw.render();
}

// bwipjs.raw(options)
// bwipjs.raw(bcid, text, opts-string)
//
// Invokes the low level BWIPP code and returns the raw encoding data.
//
// This function is synchronous and throws on error.
//
// Browser and nodejs usage.
function ToRaw(bcid, text, options) {
    if (arguments.length == 1) {
        options = bcid;
        bcid = options.bcid;
        text = options.text;
    }

    // The drawing interface is just needed for the pre-init() calls.
    // Don't need to fixup the drawing specific options.
    var drawing = DrawingBuiltin();
    drawing.setopts(options);

    var bw = new BWIPJS(drawing);
    var stack = bwipp_encode(bw, bwipp_lookup(bcid), text, options, true);

    // bwip-js uses Maps to emulate PostScript dictionary objects; but Maps
    // are not a typical/expected return value.  Convert to plain-old-objects.
    var ids = { pixs:1, pixx:1, pixy:1, sbs:1, bbs:1, bhs:1, width:1, height:1 };
    for (var i = 0; i < stack.length; i++) {
        var elt = stack[i];
        if (elt instanceof Map) {
            var obj = {};
            // Could they make Maps any harder to iterate over???
            for (var keys = elt.keys(), size = elt.size, k = 0; k < size; k++) {
                var id = keys.next().value;
                if (ids[id]) {
                    var val = elt.get(id);
                    if (val instanceof Array) {
                        // The postscript arrays have extra named properties
                        // to emulate array views.  Return cleaned up arrays.
                        obj[id] = val.b.slice(val.o, val.o + val.length);
                    } else {
                        obj[id] = val;
                    }
                }
            }
            stack[i] = obj;
        } else {
            // This should never exec...
            stack.splice(i--, 1);
        }
    }
    return stack;
}
// bwip-js // Barcode Writer in Pure JavaScript
// https://github.com/metafloor/bwip-js
//
// This code was automatically generated from:
// Barcode Writer in Pure PostScript - Version 2025-04-19
//
// Copyright (c) 2011-2025 Mark Warren
// Copyright (c) 2004-2024 Terry Burton
//
// Licensed MIT. See the LICENSE file in the bwip-js root directory.
// bwip-js/barcode-hdr.js
//
// This code is injected above the cross-compiled barcode.js.

// The BWIPJS object (graphics interface)
var $$ = null;
var $j = 0; // stack pointer
var $k = []; // operand stack
var $_ = {}; // base of the dictionary stack

// Array ctor
//  $a()    : Build a new array up to the Infinity-marker on the stack.
//  $a(arr) : Convert native array to a "view" of the array.
//  $a(len) : Create a new array of length `len`
function $a(a) {
    if (!arguments.length) {
        for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
        if (i < 0) {
            throw new Error('array-marker-not-found');
        }
        a = $k.splice(i + 1, $j - 1 - i);
        $j = i;
    } else if (!(a instanceof Array)) {
        a = new Array(+arguments[0]);
        for (var i = 0, l = a.length; i < l; i++) {
            a[i] = null;
        }
    }
    a.b = a; // base array
    a.o = 0; // offset into base
    return a;
}

// dict ctor
//  $d() : look for the Infinity marker on the stack
function $d() {
    // Build the dictionary in the order the keys/values were pushed so enumeration
    // occurs in the correct sequence.
    for (var mark = $j - 1; mark >= 0 && $k[mark] !== Infinity; mark -= 2) {
        if ($k[mark - 1] === Infinity) {
            throw new Error('dict-malformed-stack');
        }
    }
    if (mark < 0) {
        throw new Error('dict-marker-not-found');
    }
    var d = new Map;
    for (var i = mark + 1; i < $j; i += 2) {
        // Unlike javascript, postscript dict keys differentiate between
        // numbers and the string representation of a number.
        var k = $k[i]; // "key" into the dict entry
        var t = typeof k;
        if (t == 'number' || t == 'string') {
            d.set(k, $k[i + 1]);
        } else if (k instanceof Uint8Array) {
            d.set($z(k), $k[i + 1]);
        } else {
            throw new Error('dict-not-a-valid-key(' + k + ')');
        }
    }
    $j = mark;
    return d;
}

// string ctor
//  s(number)   : create zero-filled string of number-length
//  s(string)   : make a copy of the string
//  s(uint8[])  : make a copy of the string
//
// Returns a Uint8Array-string.
function $s(v) {
    var t = typeof v;
    if (t === 'number') {
        return new Uint8Array(v);
    }
    if (t !== 'string') {
        v = '' + v;
    }
    var s = new Uint8Array(v.length);
    for (var i = 0, l = v.length; i < l; i++) {
        s[i] = v.charCodeAt(i);
    }
    return s;
}

// ... n c roll
function $r(n, c) {
    if ($j < n) {
        throw new Error('roll: --stack-underflow--');
    }
    if (!c) {
        return;
    }
    if (c < 0) {
        var t = $k.splice($j - n, -c);
    } else {
        var t = $k.splice($j - n, n - c);
    }
    $k.splice.apply($k, [$j - t.length, 0].concat(t));
}

// Primarily designed to convert uint8-string to string, but will call the
// the toString() method on any value.
function $z(s) {
    if (s instanceof Uint8Array) {
        return String.fromCharCode.apply(null, s);
    }
    return '' + s;
}

// Copies source to dest and returns a view of just the copied characters
function $strcpy(dst, src) {
    if (typeof dst === 'string') {
        dst = $s(dst);
    }
    if (src instanceof Uint8Array) {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src[i];
        }
    } else {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src.charCodeAt(i);
        }
    }
    return src.length < dst.length ? dst.subarray(0, src.length) : dst;
}

// Copies source to dest and should (but doesn't) return a view of just the copied elements
function $arrcpy(dst, src) {
    for (var i = 0, l = src.length; i < l; i++) {
        dst[i] = src[i];
    }
    dst.length = src.length;
    return dst;
}

// cvs operator - convert a value to its string representation
//  s : string to store into
//  v : any value
function $cvs(s, v) {
    var t = typeof v;
    if (t == 'number' || t == 'boolean' || v === null) {
        v = '' + v;
    } else if (t !== 'string') {
        v = '--nostringval--';
    }
    for (var i = 0, l = v.length; i < l; i++) {
        s[i] = v.charCodeAt(i);
    }
    $k[$j++] = i < s.length ? s.subarray(0, i) : s;
}
// cvi operator - converts a numeric string value to integer.
function $cvi(s) {
    if (s instanceof Uint8Array) {
        // nul-chars on the end of a string are ignored by postscript but cause javascript
        // to return a zero result.
        return String.fromCharCode.apply(null, s).replace(/\0+$/, '') | 0;
    }
    return ('' + s) | 0;
}

// cvrs operator - convert a number to a radix string
//  s : string to store into
//  n : number
//  r : radix
function $cvrs(s, n, r) {
    return $strcpy(s, (~~n).toString(r).toUpperCase());
}

// cvx - convert to executable.
// This is only used by BWIPP to convert <XX> string literals.
function $cvx(s) {
    s = $z(s)
    var m = /^\s*<((?:[0-9a-fA-F]{2})+)>\s*$/.exec(s);
    if (!m) {
        throw new Error('cvx: not a <HH> hex string literal');
    }
    var h = m[1];
    var l = h.length >> 1;
    var u = new Uint8Array(l);
    for (var i = 0, j = 0; i < l; i++) {
        var c0 = h.charCodeAt(j++);
        var c1 = h.charCodeAt(j++);
        u[i] = ((c0 < 58 ? c0 - 48 : (c0 & 15) + 9) << 4) +
            (c1 < 58 ? c1 - 48 : (c1 & 15) + 9);
    }
    return u;
}

// get operator
//  s : source
//  k : key
function $get(s, k) {
    if (s instanceof Uint8Array) {
        return s[k];
    }
    if (typeof s === 'string') {
        return s.charCodeAt(k);
    }
    if (s instanceof Array) {
        return s.b[s.o + k];
    }
    if (k instanceof Uint8Array) {
        return s.get($z(k));
    }
    return s.get(k);
}

// put operator
//  d : dest
//  k : key
//  v : value
function $put(d, k, v) {
    if (d instanceof Uint8Array) {
        d[k] = v;
    } else if (d instanceof Array) {
        d.b[d.o + k] = v;
    } else if (typeof d == 'object') {
        if (k instanceof Uint8Array) {
            d.set($z(k), v);
        } else {
            d.set(k, v);
        }
    } else {
        throw new Error('put-not-writable-' + (typeof d));
    }
}

// getinterval operator
//  s : src
//  o : offset
//  l : length
function $geti(s, o, l) {
    if (s instanceof Uint8Array) {
        return s.subarray(o, o + l);
    }
    if (s instanceof Array) {
        var a = new Array(l);
        a.b = s.b; // base array
        a.o = s.o + o; // offset into base
        return a;
    }
    // Must be a string
    return s.substr(o, l);
}

// putinterval operator
//  d : dst
//  o : offset
//  s : src
function $puti(d, o, s) {
    if (d instanceof Uint8Array) {
        if (typeof s == 'string') {
            for (var i = 0, l = s.length; i < l; i++) {
                d[o + i] = s.charCodeAt(i);
            }
        } else {
            // When both d and s are the same, we want to copy
            // backwards, which works for the general case as well.
            for (var i = s.length - 1; i >= 0; i--) {
                d[o + i] = s[i];
            }
        }
    } else if (d instanceof Array) {
        // Operate on the base arrays
        var darr = d.b;
        var doff = o + d.o;
        var sarr = s.b;
        var soff = s.o;

        for (var i = 0, l = s.length; i < l; i++) {
            darr[doff + i] = sarr[soff + i];
        }
    } else {
        throw new Error('putinterval-not-writable-' + (typeof d));
    }
}

// type operator
function $type(v) {
    // null can be mis-typed - get it out of the way
    if (v == null) {
        return 'nulltype';
    }
    var t = typeof v;
    if (t == 'number') {
        return v % 1 ? 'realtype' : 'integertype';
    }
    if (t == 'boolean') {
        return 'booleantype';
    }
    if (t == 'string' || v instanceof Uint8Array) {
        return 'stringtype';
    }
    if (t == 'function') {
        return 'operatortype';
    }
    if (v instanceof Array) {
        return 'arraytype';
    }
    return 'dicttype';
    // filetype
    // fonttype
    // gstatetype
    // marktype (v === Infinity)
    // nametype
    // savetype
}

// anchorsearch operator
//      string seek anchorsearch suffix seek true %if-found
//                               string false     %if-not-found
function $anchorsearch(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var i = 0,
        ls = str.length,
        lk = seek.length;

    // Optimize for single characters.
    if (lk == 1) {
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        i = str[0] == cd ? 1 : ls;
    } else if (seek.length <= ls) {
        // Slow path,
        if (!(seek instanceof Uint8Array)) {
            seek = $s(seek);
        }
        for (; i < lk && str[i] == seek[i]; i++);
    }
    if (i == lk) {
        $k[$j++] = str.subarray(lk);
        $k[$j++] = str.subarray(0, lk);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// search operator
//      string seek search suffix match prefix true %if-found
//                         string false             %if-not-found
function $search(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var ls = str.length;

    // Virtually all uses of search in BWIPP are for single-characters.
    // Optimize for that case.
    if (seek.length == 1) {
        var lk = 1;
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        for (var i = 0; i < ls && str[i] != cd; i++);
    } else {
        // Slow path,
        if (!(seek instanceof Uint8Array)) {
            seek = $s(seek);
        }
        var lk = seek.length;
        var cd = seek[0];
        for (var i = 0; i < ls && str[i] != cd; i++);
        while (i < ls) {
            for (var j = 1; j < lk && str[i + j] === seek[j]; j++);
            if (j === lk) {
                break;
            }
            for (i++; i < ls && str[i] != cd; i++);
        }
    }
    if (i < ls) {
        $k[$j++] = str.subarray(i + lk);
        $k[$j++] = str.subarray(i, i + lk);
        $k[$j++] = str.subarray(0, i);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// The callback is omitted when forall is being used just to push onto the
// stack.  The callback normally returns undefined.  A return of true means break.
function $forall(o, cb) {
    if (o instanceof Uint8Array) {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o[i];
            if (cb && cb()) break;
        }
    } else if (o instanceof Array) {
        // The array may be a view.
        for (var a = o.b, i = o.o, l = o.o + o.length; i < l; i++) {
            $k[$j++] = a[i];
            if (cb && cb()) break;
        }
    } else if (typeof o === 'string') {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o.charCodeAt(i);
            if (cb && cb()) break;
        }
    } else if (o instanceof Map) {
        for (var keys = o.keys(), i = 0, l = o.size; i < l; i++) {
            var id = keys.next().value;
            $k[$j++] = id;
            $k[$j++] = o.get(id);
            if (cb && cb()) break;
        }
    } else {
        for (var id in o) {
            $k[$j++] = id;
            $k[$j++] = o[id];
            if (cb && cb()) break;
        }
    }
}

function $cleartomark() {
    while ($j > 0 && $k[--$j] !== Infinity);
}

function $counttomark() {
    for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
    return $j - i - 1;
}

function $aload(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o; i < l; i++) {
        $k[$j++] = b[o + i];
    }
    // This push has been optimized out.  See $.aload() in psc.js.
    //$k[$j++] = a;
}

function $astore(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o + l - 1; i < l; i++) {
        b[o - i] = $k[--$j];
    }
    $k[$j++] = a;
}

function $eq(a, b) {
    if (typeof a === 'string' && typeof b === 'string') {
        return a == b;
    }
    if (a instanceof Uint8Array && b instanceof Uint8Array) {
        if (a.length != b.length) {
            return false;
        }
        for (var i = 0, l = a.length; i < l; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }
    if (a instanceof Uint8Array && typeof b === 'string' ||
        b instanceof Uint8Array && typeof a === 'string') {
        if (a instanceof Uint8Array) {
            a = $z(a);
        } else {
            b = $z(b);
        }
        return a == b;
    }
    return a == b;
}

function $ne(a, b) {
    return !$eq(a, b);
}

function $lt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a < b;
}

function $le(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a <= b;
}

function $gt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a > b;
}

function $ge(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a >= b;
}

function $an(a, b) { // and
    return (typeof a === 'boolean') ? a && b : a & b;
}

function $or(a, b) { // or
    return (typeof a === 'boolean') ? a || b : a | b;
}

function $xo(a, b) { // xor
    return (typeof a === 'boolean') ? !a && b || a && !b : a ^ b;
}

function $nt(a) {
    return typeof a == 'boolean' ? !a : ~a;
}
// emulate single-precision floating-point (pseudo-polyfill for Math.fround)
var $f = (function(fa) {
    return function(v) {
        return Number.isInteger(v) ? v : (fa[0] = v, fa[0]);
    };
})(new Float32Array(1));

// This is a replacement for the BWIPP raiseerror function.
function bwipp_raiseerror() {
    var info = $k[--$j];
    var name = $k[--$j];
    if (typeof info == 'string' || info instanceof Uint8Array) {
        throw new Error($z(name) + ": " + $z(info));
    } else {
        $k[$j++] = info; // see mktests debugEqual
        // Match ghostscript output
        throw $z(name) + '\nAdditional information: ' + tostring(info);
    }

    function tostring(v) {
        if (v instanceof Array) {
            let s = '';
            for (let i = v.o, l = v.o + v.length; i < l; i++) {
                s += ' ' + tostring(v.b[i]);
            }
            return '[' + s.substr(1) + ']';
        } else if (v instanceof Uint8Array) {
            return String.fromCharCode.apply(String, v);
        } else if (v instanceof Map) {
            let s = '';
            for (const [key, val] of v) {
                s += ' ' + tostring(key) + ' ' + tostring(val);
            }
            return '<<' + s.substr(1) + '>>';
        } else if (v && typeof v == 'object') {
            let s = '';
            for (let id in v) {
                s += ' ' + tostring(id) + ' ' + tostring(v[id]);
            }
            return '<<' + s.substr(1) + '>>';
        } else {
            return '' + v;
        }
    }
}

// This is a replacement for the BWIPP processoptions function.
// We cannot use the BWIPP version due to two reasons:
// - legacy code allows strings to be numbers and numbers to be strings
// - in javascript, there is no way to tell the difference between a real
//   number that is an integer, and an actual integer.
//
// options currentdict processoptions exec -> options
function bwipp_processoptions() {
    var dict = $k[--$j];
    var opts = $k[$j - 1];
    if (typeof opts == 'string') {
        let vals = opts.trim().split(/ +/g)
        $k[$j - 1] = opts = new Map();
        for (let i = 0; i < vals.length; i++) {
            let pair = vals[i].split('=');
            if (pair.length == 1) {
                opts.set(pair[0], true);
            } else {
                opts.set(pair[0], pair[1]);
            }
        }
    }
    for (var id in dict) {
        var val;
        if (!opts.has(id)) {
            continue;
        }
        val = opts.get(id);
        var def = dict[id];
        var typ = typeof def;

        // null is a placeholder for realtype
        if (def == null || typ == 'number') {
            // This allows for numeric strings
            if (!isFinite(+val)) {
                throw new Error('bwipp.invalidOptionType: ' + id +
                    ': not a realtype: ' + val);
            }
            if (typeof val == 'string') {
                val = +val;
                opts.set(id, val);
            }
        } else if (typ == 'boolean') {
            if (val !== true && val !== false) {
                // In keeping with the ethos of javascript, allow a more relaxed
                // interpretation of boolean.
                if (val == null || (val | 0) === val) {
                    val = !!val;
                } else if (val == 'true') {
                    val = true;
                } else if (val == 'false') {
                    val = false;
                } else {
                    throw new Error('bwipp.invalidOptionType: ' + id +
                        ': not a booleantype: ' + val);
                }
                opts.set(id, val);
            }
        } else if (typ == 'string' || def instanceof Uint8Array) {
            // This allows numbers to be strings
            if (typeof val == 'number') {
                val = '' + val;
                opts.set(id, val);
            } else if (typeof val != 'string' && !(val instanceof Uint8Array)) {
                throw new Error('bwipp.invalidOptionType: ' + id +
                    ': not a stringtype: ' + val);
            }
        }
        // Set the option into the dictionary
        dict[id] = val;
    }
}

// Replacement for loadctx which contains complex postscript operations
// that we don't implement correctly.
// f is a reference to the enclosing function.
function bwipp_loadctx(f) {
    if (!f.$ctx) {
        f.$ctx = {};
    }
    var next = Object.getPrototypeOf($_);
    Object.setPrototypeOf(f.$ctx, next);
    Object.setPrototypeOf($_, f.$ctx);
}

function bwipp_parseinput() {
    $_ = Object.create($_); //#200
    bwipp_loadctx(bwipp_parseinput); //#202
    $_.fncvals = $k[--$j]; //#204
    $_.barcode = $k[--$j]; //#205
    var _2 = 'parse'; //#207
    $_[_2] = $get($_.fncvals, _2); //#207
    delete $_.fncvals[_2]; //#207
    var _6 = 'parsefnc'; //#208
    $_[_6] = $get($_.fncvals, _6); //#208
    delete $_.fncvals[_6]; //#208
    var _A = 'parseonly'; //#209
    var _C = $get($_.fncvals, _A) !== undefined; //#209
    $_[_A] = _C; //#209
    delete $_.fncvals[_A]; //#209
    var _E = 'eci'; //#210
    var _G = $get($_.fncvals, _E) !== undefined; //#210
    $_[_E] = _G; //#210
    delete $_.fncvals[_E]; //#210
    if (!bwipp_parseinput.__225__) { //#225
        $_ = Object.create($_); //#225
        $k[$j++] = Infinity; //#214
        var _I = $a(['NUL', 'SOH', 'STX', 'ETX', 'EOT', 'ENQ', 'ACK', 'BEL', 'BS', 'TAB', 'LF', 'VT', 'FF', 'CR', "", "", 'DLE', 'DC1', 'DC2', 'DC3', 'DC4', 'NAK', 'SYN', 'ETB', 'CAN', 'EM', 'SUB', 'ESC', 'FS', 'GS', 'RS', 'US']); //#219
        $k[$j++] = 0; //#223
        for (var _J = 0, _K = _I.length; _J < _K; _J++) { //#223
            var _M = $k[--$j]; //#222
            $k[$j++] = $get(_I, _J); //#222
            $k[$j++] = _M; //#222
            $k[$j++] = $f(_M + 1); //#222
        } //#222
        $j--; //#223
        $_.ctrl = $d(); //#224
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_parseinput.$ctx[id] = $_[id]); //#224
        bwipp_parseinput.__225__ = 1; //#224
        $_ = Object.getPrototypeOf($_); //#224
    } //#224
    $_.msg = $a($_.barcode.length); //#227
    $_.j = 0; //#228
    $k[$j++] = $_.barcode; //#351
    for (;;) { //#351
        $search($k[--$j], "^"); //#230
        var _T = $k[--$j]; //#230
        var _U = $k[--$j]; //#230
        $k[$j++] = _T; //#233
        $k[$j++] = _U.length; //#233
        $k[$j++] = $_.msg; //#233
        $k[$j++] = $_.j; //#233
        $k[$j++] = _U; //#233
        $k[$j++] = Infinity; //#233
        var _X = $k[--$j]; //#233
        var _Y = $k[--$j]; //#233
        $k[$j++] = _X; //#233
        $forall(_Y); //#233
        var _Z = $a(); //#233
        var _a = $k[--$j]; //#233
        $puti($k[--$j], _a, _Z); //#233
        $_.j = $f($k[--$j] + $_.j); //#234
        if ($k[--$j]) { //#349
            $j--; //#236
            for (var _f = 0, _g = 1; _f < _g; _f++) { //#347
                if ($an($nt($_.parse), $nt($_.parsefnc))) { //#243
                    $put($_.msg, $_.j, 94); //#240
                    $_.j = $f($_.j + 1); //#241
                    break; //#242
                } //#242
                $put($_.msg, $_.j, 94); //#246
                $_.j = $f($_.j + 1); //#247
                if ($_.parse) { //#290
                    var _q = $k[--$j]; //#251
                    $k[$j++] = _q; //#262
                    if (_q.length >= 3) { //#262
                        var _r = $k[--$j]; //#252
                        var _s = $geti(_r, 0, 3); //#252
                        var _t = $_.ctrl; //#252
                        var _u = $get(_t, _s) !== undefined; //#253
                        $k[$j++] = _r; //#261
                        $k[$j++] = _t; //#261
                        $k[$j++] = _s; //#261
                        if (_u) { //#260
                            $_.j = $f($_.j - 1); //#254
                            var _w = $k[--$j]; //#255
                            $put($_.msg, $_.j, $get($k[--$j], _w)); //#255
                            $_.j = $f($_.j + 1); //#256
                            var _12 = $k[--$j]; //#257
                            $k[$j++] = $geti(_12, 3, _12.length - 3); //#258
                            break; //#258
                        } else { //#260
                            $j -= 2; //#260
                        } //#260
                    } //#260
                    var _14 = $k[--$j]; //#263
                    $k[$j++] = _14; //#274
                    if (_14.length >= 2) { //#274
                        var _15 = $k[--$j]; //#264
                        var _16 = $geti(_15, 0, 2); //#264
                        var _17 = $_.ctrl; //#264
                        var _18 = $get(_17, _16) !== undefined; //#265
                        $k[$j++] = _15; //#273
                        $k[$j++] = _17; //#273
                        $k[$j++] = _16; //#273
                        if (_18) { //#272
                            $_.j = $f($_.j - 1); //#266
                            var _1A = $k[--$j]; //#267
                            $put($_.msg, $_.j, $get($k[--$j], _1A)); //#267
                            $_.j = $f($_.j + 1); //#268
                            var _1G = $k[--$j]; //#269
                            $k[$j++] = $geti(_1G, 2, _1G.length - 2); //#270
                            break; //#270
                        } else { //#272
                            $j -= 2; //#272
                        } //#272
                    } //#272
                    var _1I = $k[--$j]; //#275
                    $k[$j++] = _1I; //#289
                    if (_1I.length >= 3) { //#289
                        var _1J = $k[--$j]; //#276
                        var _1K = $geti(_1J, 0, 3); //#276
                        $k[$j++] = _1J; //#278
                        $k[$j++] = true; //#278
                        for (var _1L = 0, _1M = _1K.length; _1L < _1M; _1L++) { //#278
                            var _1N = $get(_1K, _1L); //#278
                            if ((_1N < 48) || (_1N > 57)) { //#277
                                $j--; //#277
                                $k[$j++] = false; //#277
                            } //#277
                        } //#277
                        if ($k[--$j]) { //#288
                            var _1P = $k[--$j]; //#280
                            var _1R = $cvi($geti(_1P, 0, 3)); //#280
                            $k[$j++] = _1P; //#283
                            $k[$j++] = _1R; //#283
                            if (_1R > 255) { //#283
                                $j -= 2; //#281
                                $k[$j++] = 'bwipp.invalidOrdinal#282'; //#282
                                $k[$j++] = "Ordinal must be 000 to 255"; //#282
                                bwipp_raiseerror(); //#282
                            } //#282
                            $_.j = $f($_.j - 1); //#284
                            $put($_.msg, $_.j, $k[--$j]); //#285
                            $_.j = $f($_.j + 1); //#286
                            var _1X = $k[--$j]; //#287
                            $k[$j++] = $geti(_1X, 3, _1X.length - 3); //#287
                        } //#287
                    } //#287
                } //#287
                if (($or($_.parseonly, $nt($_.parsefnc))) || ($get($_.msg, $f($_.j - 1)) != 94)) { //#295
                    break; //#295
                } //#295
                $_.j = $f($_.j - 1); //#298
                var _1f = $k[--$j]; //#299
                $k[$j++] = _1f; //#302
                if (_1f.length < 1) { //#302
                    $j--; //#300
                    $k[$j++] = 'bwipp.truncatedCaret#301'; //#301
                    $k[$j++] = "Caret character truncated"; //#301
                    bwipp_raiseerror(); //#301
                } //#301
                var _1g = $k[--$j]; //#303
                $k[$j++] = _1g; //#308
                if ($get(_1g, 0) == 94) { //#308
                    $put($_.msg, $_.j, 94); //#304
                    $_.j = $f($_.j + 1); //#305
                    var _1l = $k[--$j]; //#306
                    $k[$j++] = $geti(_1l, 1, _1l.length - 1); //#307
                    break; //#307
                } //#307
                var _1n = $k[--$j]; //#309
                $k[$j++] = _1n; //#312
                if (_1n.length < 3) { //#312
                    $j--; //#310
                    $k[$j++] = 'bwipp.truncatedFNC#311'; //#311
                    $k[$j++] = "Function character truncated"; //#311
                    bwipp_raiseerror(); //#311
                } //#311
                var _1o = $k[--$j]; //#313
                $k[$j++] = _1o; //#330
                if ($eq($geti(_1o, 0, 3), "ECI") && $_.eci) { //#330
                    var _1r = $k[--$j]; //#314
                    $k[$j++] = _1r; //#317
                    if (_1r.length < 9) { //#317
                        $j--; //#315
                        $k[$j++] = 'bwipp.truncatedECI#316'; //#316
                        $k[$j++] = "ECI truncated"; //#316
                        bwipp_raiseerror(); //#316
                    } //#316
                    var _1s = $k[--$j]; //#318
                    var _1t = $geti(_1s, 3, 6); //#318
                    $k[$j++] = _1s; //#324
                    $k[$j++] = _1t; //#324
                    for (var _1u = 0, _1v = _1t.length; _1u < _1v; _1u++) { //#324
                        var _1w = $get(_1t, _1u); //#324
                        if ((_1w < 48) || (_1w > 57)) { //#323
                            $j -= 2; //#321
                            $k[$j++] = 'bwipp.invalidECI#322'; //#322
                            $k[$j++] = "ECI must be 000000 to 999999"; //#322
                            bwipp_raiseerror(); //#322
                        } //#322
                    } //#322
                    var _1x = $k[--$j]; //#325
                    $k[$j++] = 0; //#325
                    $forall(_1x, function() { //#325
                        var _1y = $k[--$j]; //#325
                        var _1z = $k[--$j]; //#325
                        $k[$j++] = ($f(_1z - $f(_1y - 48))) * 10; //#325
                    }); //#325
                    $put($_.msg, $_.j, (~~($k[--$j] / 10)) - 1000000); //#326
                    $_.j = $f($_.j + 1); //#327
                    var _24 = $k[--$j]; //#328
                    $k[$j++] = $geti(_24, 9, _24.length - 9); //#329
                    break; //#329
                } //#329
                var _26 = $k[--$j]; //#331
                $k[$j++] = _26; //#334
                if (_26.length < 4) { //#334
                    $j--; //#332
                    $k[$j++] = 'bwipp.truncatedFNC#333'; //#333
                    $k[$j++] = "Function character truncated"; //#333
                    bwipp_raiseerror(); //#333
                } //#333
                var _27 = $k[--$j]; //#335
                var _28 = $geti(_27, 0, 4); //#335
                var _2A = $get($_.fncvals, _28) !== undefined; //#335
                $k[$j++] = _27; //#340
                $k[$j++] = _28; //#340
                if (!_2A) { //#340
                    var _2B = $k[--$j]; //#336
                    var _2C = $s(_2B.length + 28); //#336
                    $puti(_2C, 28, _2B); //#336
                    $puti(_2C, 0, "Unknown function character: "); //#337
                    var _2D = $k[--$j]; //#338
                    $k[$j++] = _2C; //#338
                    $k[$j++] = _2D; //#338
                    $j--; //#338
                    var _2E = $k[--$j]; //#339
                    $k[$j++] = 'bwipp.unknownFNC#339'; //#339
                    $k[$j++] = _2E; //#339
                    bwipp_raiseerror(); //#339
                } //#339
                $put($_.msg, $_.j, $get($_.fncvals, $k[--$j])); //#342
                $_.j = $f($_.j + 1); //#343
                var _2L = $k[--$j]; //#344
                $k[$j++] = $geti(_2L, 4, _2L.length - 4); //#345
                break; //#345
            } //#345
        } else { //#349
            break; //#349
        } //#349
    } //#349
    if ($nt($_.parseonly)) { //#357
        $k[$j++] = $geti($_.msg, 0, $_.j); //#354
    } else { //#357
        $k[$j++] = $s($_.j); //#357
        for (var _2V = 0, _2U = $f($_.j - 1); _2V <= _2U; _2V += 1) { //#357
            var _2W = $k[--$j]; //#357
            $put(_2W, _2V, $get($_.msg, _2V)); //#357
            $k[$j++] = _2W; //#357
        } //#357
    } //#357
    $_ = Object.getPrototypeOf($_); //#360
    $_ = Object.getPrototypeOf($_); //#362
} //bwipp_parseinput
function bwipp_gs1process() {
    $_ = Object.create($_); //#387
    bwipp_loadctx(bwipp_gs1process); //#389
    if (!bwipp_gs1process.__2486__) { //#2486
        $_ = Object.create($_); //#2486
        var _1 = new Map([
            ["cset", 'N'],
            ["min", 18],
            ["max", 18],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkeyoff1'])]
        ]); //#397
        var _2 = $a([_1]); //#397
        var _3 = $a([]); //#399
        var _4 = new Map([
            ["parts", _2],
            ["dlpkey", _3]
        ]); //#399
        var _5 = $a(['lintcsum', 'lintkeyoff1']); //#406
        var _6 = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", _5]
        ]); //#406
        var _7 = $a([_6]); //#406
        var _8 = $a(["255", "37"]); //#408
        var _9 = $a(["22", "10", "21"]); //#409
        var _A = $a(["235"]); //#409
        var _B = $a([_9, _A]); //#409
        var _C = new Map([
            ["parts", _7],
            ["ex", _8],
            ["dlpkey", _B]
        ]); //#409
        var _D = $a(['lintcsum', 'lintkeyoff1']); //#416
        var _E = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", _D]
        ]); //#416
        var _F = $a([_E]); //#416
        var _G = $a(["01", "03"]); //#418
        var _H = $a(["37"]); //#419
        var _I = $a([_H]); //#419
        var _J = $a([_I]); //#419
        var _K = new Map([
            ["parts", _F],
            ["ex", _G],
            ["req", _J]
        ]); //#419
        var _L = $a(['lintcsum', 'lintkeyoff1']); //#426
        var _M = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", _L]
        ]); //#426
        var _N = $a([_M]); //#426
        var _O = $a(["01", "02", "37"]); //#428
        var _P = new Map([
            ["parts", _N],
            ["ex", _O],
            ["dlattr", false]
        ]); //#429
        var _R = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#436
        var _a = new Map([
            ["parts", $a([_R])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["03"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#438
        var _c = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#445
        var _k = new Map([
            ["parts", $a([_c])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#447
        var _m = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#454
        var _r = new Map([
            ["parts", $a([_m])],
            ["req", $a([$a([$a(["8020"])])])]
        ]); //#456
        var _t = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#463
        var _11 = new Map([
            ["parts", $a([_t])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#465
        var _13 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#474
        var _1C = new Map([
            ["parts", $a([_13])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["255"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#476
        var _1E = new Map([
            ["cset", 'N'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a([])]
        ]); //#483
        var _1M = new Map([
            ["parts", $a([_1E])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#485
        var _1O = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#492
        var _1W = new Map([
            ["parts", $a([_1O])],
            ["ex", $a(["235"])],
            ["req", $a([$a([$a(["01"]), $a(["03"]), $a(["8006"])])])],
            ["dlattr", false]
        ]); //#496
        var _1Y = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#503
        var _1d = new Map([
            ["parts", $a([_1Y])],
            ["req", $a([$a([$a(["01"])])])],
            ["dlattr", false]
        ]); //#506
        var _1f = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 28],
            ["opt", false],
            ["linters", $a([])]
        ]); //#513
        var _1k = new Map([
            ["parts", $a([_1f])],
            ["req", $a([$a([$a(["01"])])])],
            ["dlattr", false]
        ]); //#516
        var _1m = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#523
        var _1u = new Map([
            ["parts", $a([_1m])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#525
        var _1w = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#533
        var _24 = $a([$a([$a(["01"]), $a(["02"]), $a(["03"]), $a(["8006"]), $a(["8026"])])]); //#535
        var _25 = new Map([
            ["parts", $a([_1w])],
            ["req", _24]
        ]); //#535
        var _27 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#542
        var _2C = new Map([
            ["parts", $a([_27])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#544
        var _2E = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#551
        var _2M = new Map([
            ["parts", $a([_2E])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])]), $a([$a(["21"])])])]
        ]); //#553
        var _2O = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#560
        var _2U = new Map([
            ["parts", $a([_2O])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#562
        var _2W = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#569
        var _2Y = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 17],
            ["opt", true],
            ["linters", $a([])]
        ]); //#570
        var _2b = new Map([
            ["parts", $a([_2W, _2Y])],
            ["dlpkey", $a([])]
        ]); //#572
        var _2d = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#579
        var _2i = new Map([
            ["parts", $a([_2d])],
            ["req", $a([$a([$a(["414"])])])],
            ["dlattr", false]
        ]); //#582
        var _2k = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#589
        var _2m = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 12],
            ["opt", true],
            ["linters", $a([])]
        ]); //#590
        var _2q = new Map([
            ["parts", $a([_2k, _2m])],
            ["ex", $a(["01", "02", "415", "8006", "8020", "8026"])],
            ["dlpkey", $a([])]
        ]); //#593
        var _2s = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 8],
            ["opt", false],
            ["linters", $a([])]
        ]); //#600
        var _2y = new Map([
            ["parts", $a([_2s])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#602
        var _30 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#609
        var _37 = new Map([
            ["parts", $a([_30])],
            ["ex", $a(["310n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#612
        var _39 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#624
        var _3G = new Map([
            ["parts", $a([_39])],
            ["ex", $a(["311n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#627
        var _3I = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#639
        var _3P = new Map([
            ["parts", $a([_3I])],
            ["ex", $a(["312n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#642
        var _3R = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#654
        var _3Y = new Map([
            ["parts", $a([_3R])],
            ["ex", $a(["313n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#657
        var _3a = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#669
        var _3h = new Map([
            ["parts", $a([_3a])],
            ["ex", $a(["314n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#672
        var _3j = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#684
        var _3q = new Map([
            ["parts", $a([_3j])],
            ["ex", $a(["315n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#687
        var _3s = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#699
        var _3z = new Map([
            ["parts", $a([_3s])],
            ["ex", $a(["316n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#702
        var _41 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#714
        var _48 = new Map([
            ["parts", $a([_41])],
            ["ex", $a(["320n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#717
        var _4A = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#729
        var _4H = new Map([
            ["parts", $a([_4A])],
            ["ex", $a(["321n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#732
        var _4J = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#744
        var _4Q = new Map([
            ["parts", $a([_4J])],
            ["ex", $a(["322n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#747
        var _4S = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#759
        var _4Z = new Map([
            ["parts", $a([_4S])],
            ["ex", $a(["323n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#762
        var _4b = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#774
        var _4i = new Map([
            ["parts", $a([_4b])],
            ["ex", $a(["324n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#777
        var _4k = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#789
        var _4r = new Map([
            ["parts", $a([_4k])],
            ["ex", $a(["325n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#792
        var _4t = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#804
        var _50 = new Map([
            ["parts", $a([_4t])],
            ["ex", $a(["326n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#807
        var _52 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#819
        var _59 = new Map([
            ["parts", $a([_52])],
            ["ex", $a(["327n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#822
        var _5B = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#834
        var _5I = new Map([
            ["parts", $a([_5B])],
            ["ex", $a(["328n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#837
        var _5K = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#849
        var _5R = new Map([
            ["parts", $a([_5K])],
            ["ex", $a(["329n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#852
        var _5T = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#864
        var _5a = new Map([
            ["parts", $a([_5T])],
            ["ex", $a(["330n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#867
        var _5c = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#879
        var _5j = new Map([
            ["parts", $a([_5c])],
            ["ex", $a(["331n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#882
        var _5l = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#894
        var _5s = new Map([
            ["parts", $a([_5l])],
            ["ex", $a(["332n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#897
        var _5u = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#909
        var _61 = new Map([
            ["parts", $a([_5u])],
            ["ex", $a(["333n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#912
        var _63 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#924
        var _6A = new Map([
            ["parts", $a([_63])],
            ["ex", $a(["334n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#927
        var _6C = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#939
        var _6J = new Map([
            ["parts", $a([_6C])],
            ["ex", $a(["335n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#942
        var _6L = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#954
        var _6S = new Map([
            ["parts", $a([_6L])],
            ["ex", $a(["336n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#957
        var _6U = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#969
        var _6a = new Map([
            ["parts", $a([_6U])],
            ["ex", $a(["337n"])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#972
        var _6c = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#984
        var _6j = new Map([
            ["parts", $a([_6c])],
            ["ex", $a(["340n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#987
        var _6l = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#999
        var _6s = new Map([
            ["parts", $a([_6l])],
            ["ex", $a(["341n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1002
        var _6u = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1014
        var _71 = new Map([
            ["parts", $a([_6u])],
            ["ex", $a(["342n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1017
        var _73 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1029
        var _7A = new Map([
            ["parts", $a([_73])],
            ["ex", $a(["343n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1032
        var _7C = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1044
        var _7J = new Map([
            ["parts", $a([_7C])],
            ["ex", $a(["344n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1047
        var _7L = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1059
        var _7S = new Map([
            ["parts", $a([_7L])],
            ["ex", $a(["345n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1062
        var _7U = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1074
        var _7b = new Map([
            ["parts", $a([_7U])],
            ["ex", $a(["346n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1077
        var _7d = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1089
        var _7k = new Map([
            ["parts", $a([_7d])],
            ["ex", $a(["347n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1092
        var _7m = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1104
        var _7t = new Map([
            ["parts", $a([_7m])],
            ["ex", $a(["348n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1107
        var _7v = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1119
        var _82 = new Map([
            ["parts", $a([_7v])],
            ["ex", $a(["349n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1122
        var _84 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1134
        var _8B = new Map([
            ["parts", $a([_84])],
            ["ex", $a(["350n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1137
        var _8D = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1149
        var _8K = new Map([
            ["parts", $a([_8D])],
            ["ex", $a(["351n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1152
        var _8M = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1164
        var _8T = new Map([
            ["parts", $a([_8M])],
            ["ex", $a(["352n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1167
        var _8V = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1179
        var _8c = new Map([
            ["parts", $a([_8V])],
            ["ex", $a(["353n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1182
        var _8e = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1194
        var _8l = new Map([
            ["parts", $a([_8e])],
            ["ex", $a(["354n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1197
        var _8n = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1209
        var _8u = new Map([
            ["parts", $a([_8n])],
            ["ex", $a(["355n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1212
        var _8w = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1224
        var _93 = new Map([
            ["parts", $a([_8w])],
            ["ex", $a(["356n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1227
        var _95 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1239
        var _9C = new Map([
            ["parts", $a([_95])],
            ["ex", $a(["357n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1242
        var _9E = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1254
        var _9L = new Map([
            ["parts", $a([_9E])],
            ["ex", $a(["360n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1257
        var _9N = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1269
        var _9U = new Map([
            ["parts", $a([_9N])],
            ["ex", $a(["361n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1272
        var _9W = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1284
        var _9d = new Map([
            ["parts", $a([_9W])],
            ["ex", $a(["362n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1287
        var _9f = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1299
        var _9m = new Map([
            ["parts", $a([_9f])],
            ["ex", $a(["363n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1302
        var _9o = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1314
        var _9v = new Map([
            ["parts", $a([_9o])],
            ["ex", $a(["364n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1317
        var _9x = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1329
        var _A4 = new Map([
            ["parts", $a([_9x])],
            ["ex", $a(["365n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1332
        var _A6 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1344
        var _AD = new Map([
            ["parts", $a([_A6])],
            ["ex", $a(["366n"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1347
        var _AF = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1359
        var _AM = new Map([
            ["parts", $a([_AF])],
            ["ex", $a(["367n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1362
        var _AO = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1374
        var _AV = new Map([
            ["parts", $a([_AO])],
            ["ex", $a(["368n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1377
        var _AX = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1389
        var _Ae = new Map([
            ["parts", $a([_AX])],
            ["ex", $a(["369n"])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#1392
        var _Ag = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 8],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1404
        var _Ao = new Map([
            ["parts", $a([_Ag])],
            ["req", $a([$a([$a(["00"])]), $a([$a(["02"]), $a(["8026"])])])]
        ]); //#1406
        var _Aq = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1413
        var _Ax = new Map([
            ["parts", $a([_Aq])],
            ["ex", $a(["390n", "391n", "394n", "8111"])],
            ["req", $a([$a([$a(["255"]), $a(["8020"])])])]
        ]); //#1416
        var _Az = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso4217'])]
        ]); //#1432
        var _B1 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1433
        var _B7 = new Map([
            ["parts", $a([_Az, _B1])],
            ["ex", $a(["391n"])],
            ["req", $a([$a([$a(["8020"])])])]
        ]); //#1436
        var _B9 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1452
        var _BL = new Map([
            ["parts", $a([_B9])],
            ["ex", $a(["392n", "393n"])],
            ["req", $a([$a([$a(["01"])]), $a([$a(["30"]), $a(["31nn"]), $a(["32nn"]), $a(["35nn"]), $a(["36nn"])])])]
        ]); //#1455
        var _BN = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso4217'])]
        ]); //#1471
        var _BP = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 15],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1472
        var _BZ = new Map([
            ["parts", $a([_BN, _BP])],
            ["ex", $a(["393n"])],
            ["req", $a([$a([$a(["30"]), $a(["31nn"]), $a(["32nn"]), $a(["35nn"]), $a(["36nn"])])])]
        ]); //#1475
        var _Bb = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1491
        var _Bh = new Map([
            ["parts", $a([_Bb])],
            ["ex", $a(["394n", "8111"])],
            ["req", $a([$a([$a(["255"])])])]
        ]); //#1494
        var _Bj = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1504
        var _Bt = new Map([
            ["parts", $a([_Bj])],
            ["ex", $a(["392n", "393n", "395n", "8005"])],
            ["req", $a([$a([$a(["30"]), $a(["31nn"]), $a(["32nn"]), $a(["35nn"]), $a(["36nn"])])])]
        ]); //#1507
        var _Bv = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1519
        var _Bx = new Map([
            ["parts", $a([_Bv])]
        ]); //#1519
        var _Bz = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#1527
        var _C2 = new Map([
            ["parts", $a([_Bz])],
            ["dlpkey", $a([])]
        ]); //#1529
        var _C4 = new Map([
            ["cset", 'N'],
            ["min", 17],
            ["max", 17],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1536
        var _C7 = new Map([
            ["parts", $a([_C4])],
            ["dlpkey", $a([])]
        ]); //#1538
        var _C9 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1545
        var _CE = new Map([
            ["parts", $a([_C9])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1547
        var _CG = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1554
        var _CI = new Map([
            ["parts", $a([_CG])]
        ]); //#1554
        var _CK = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1565
        var _CP = new Map([
            ["parts", $a([_CK])],
            ["dlpkey", $a([$a(["254"]), $a(["7040"])])]
        ]); //#1567
        var _CR = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1574
        var _CY = new Map([
            ["parts", $a([_CR])],
            ["req", $a([$a([$a(["8020"])])])],
            ["dlpkey", $a([$a(["8020"])])]
        ]); //#1577
        var _Ca = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1584
        var _Cc = new Map([
            ["parts", $a([_Ca])]
        ]); //#1584
        var _Ce = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#1592
        var _Ci = new Map([
            ["parts", $a([_Ce])],
            ["dlpkey", $a([$a(["7040"])])]
        ]); //#1594
        var _Ck = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1601
        var _Cn = new Map([
            ["parts", $a([_Ck])],
            ["ex", $a(["421"])]
        ]); //#1603
        var _Cp = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1610
        var _Cr = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 9],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1611
        var _Cu = new Map([
            ["parts", $a([_Cp, _Cr])],
            ["ex", $a(["4307"])]
        ]); //#1613
        var _Cw = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1620
        var _D5 = new Map([
            ["parts", $a([_Cw])],
            ["ex", $a(["426"])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#1623
        var _D7 = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1630
        var _D9 = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", true],
            ["linters", $a(['lintiso3166'])]
        ]); //#1631
        var _DB = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", true],
            ["linters", $a(['lintiso3166'])]
        ]); //#1632
        var _DD = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", true],
            ["linters", $a(['lintiso3166'])]
        ]); //#1633
        var _DF = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", true],
            ["linters", $a(['lintiso3166'])]
        ]); //#1634
        var _DM = new Map([
            ["parts", $a([_D7, _D9, _DB, _DD, _DF])],
            ["ex", $a(["426"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1637
        var _DO = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1644
        var _DV = new Map([
            ["parts", $a([_DO])],
            ["ex", $a(["426"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1647
        var _DX = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1654
        var _DZ = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", true],
            ["linters", $a(['lintiso3166'])]
        ]); //#1655
        var _Db = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", true],
            ["linters", $a(['lintiso3166'])]
        ]); //#1656
        var _Dd = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", true],
            ["linters", $a(['lintiso3166'])]
        ]); //#1657
        var _Df = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", true],
            ["linters", $a(['lintiso3166'])]
        ]); //#1658
        var _Dm = new Map([
            ["parts", $a([_DX, _DZ, _Db, _Dd, _Df])],
            ["ex", $a(["426"])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1661
        var _Do = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166'])]
        ]); //#1668
        var _Du = new Map([
            ["parts", $a([_Do])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1670
        var _Dw = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 3],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1677
        var _E4 = new Map([
            ["parts", $a([_Dw])],
            ["req", $a([$a([$a(["01"]), $a(["02"])]), $a([$a(["422"])])])]
        ]); //#1679
        var _E6 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 35],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1686
        var _EB = new Map([
            ["parts", $a([_E6])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1688
        var _ED = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1696
        var _EI = new Map([
            ["parts", $a([_ED])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1698
        var _EK = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1705
        var _EP = new Map([
            ["parts", $a([_EK])],
            ["req", $a([$a([$a(["4302"])])])]
        ]); //#1707
        var _ER = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1714
        var _EW = new Map([
            ["parts", $a([_ER])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1716
        var _EY = new Map([
            ["cset", 'X'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['lintiso3166alpha2'])]
        ]); //#1725
        var _Ed = new Map([
            ["parts", $a([_EY])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1727
        var _Ef = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1734
        var _Ek = new Map([
            ["parts", $a([_Ef])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1736
        var _Em = new Map([
            ["cset", 'N'],
            ["min", 10],
            ["max", 10],
            ["opt", false],
            ["linters", $a(['lintlatitude'])]
        ]); //#1743
        var _Eo = new Map([
            ["cset", 'N'],
            ["min", 10],
            ["max", 10],
            ["opt", false],
            ["linters", $a(['lintlongitude'])]
        ]); //#1744
        var _Et = new Map([
            ["parts", $a([_Em, _Eo])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1746
        var _Ev = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 35],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1753
        var _F0 = new Map([
            ["parts", $a([_Ev])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1755
        var _F2 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1763
        var _F7 = new Map([
            ["parts", $a([_F2])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1765
        var _F9 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1772
        var _FE = new Map([
            ["parts", $a([_F9])],
            ["req", $a([$a([$a(["4312"])])])]
        ]); //#1774
        var _FG = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1781
        var _FL = new Map([
            ["parts", $a([_FG])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1783
        var _FN = new Map([
            ["cset", 'X'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['lintiso3166alpha2'])]
        ]); //#1792
        var _FS = new Map([
            ["parts", $a([_FN])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1794
        var _FU = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1801
        var _FZ = new Map([
            ["parts", $a([_FU])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1803
        var _Fb = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1810
        var _Fg = new Map([
            ["parts", $a([_Fb])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1812
        var _Fi = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 35],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#1819
        var _Fn = new Map([
            ["parts", $a([_Fi])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1821
        var _Fp = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintyesno'])]
        ]); //#1828
        var _Fu = new Map([
            ["parts", $a([_Fp])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1830
        var _Fw = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmd0'])]
        ]); //#1839
        var _Fy = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['linthhmi'])]
        ]); //#1840
        var _G3 = new Map([
            ["parts", $a([_Fw, _Fy])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1842
        var _G5 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1850
        var _GA = new Map([
            ["parts", $a([_G5])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1852
        var _GC = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1859
        var _GE = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", true],
            ["linters", $a(['linthyphen'])]
        ]); //#1860
        var _GK = new Map([
            ["parts", $a([_GC, _GE])],
            ["ex", $a(["4331"])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1863
        var _GM = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1870
        var _GO = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", true],
            ["linters", $a(['linthyphen'])]
        ]); //#1871
        var _GU = new Map([
            ["parts", $a([_GM, _GO])],
            ["ex", $a(["4330"])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1874
        var _GW = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1881
        var _GY = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", true],
            ["linters", $a(['linthyphen'])]
        ]); //#1882
        var _Ge = new Map([
            ["parts", $a([_GW, _GY])],
            ["ex", $a(["4333"])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1885
        var _Gg = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1892
        var _Gi = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", true],
            ["linters", $a(['linthyphen'])]
        ]); //#1893
        var _Go = new Map([
            ["parts", $a([_Gg, _Gi])],
            ["ex", $a(["4332"])],
            ["req", $a([$a([$a(["00"])])])]
        ]); //#1896
        var _Gq = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1903
        var _Gy = new Map([
            ["parts", $a([_Gq])],
            ["req", $a([$a([$a(["01"]), $a(["02"]), $a(["8006"]), $a(["8026"])])])]
        ]); //#1905
        var _H0 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1912
        var _H6 = new Map([
            ["parts", $a([_H0])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1914
        var _H8 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1921
        var _HA = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['linthhmi'])]
        ]); //#1922
        var _HG = new Map([
            ["parts", $a([_H8, _HA])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1924
        var _HI = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 4],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1931
        var _HP = new Map([
            ["parts", $a([_HI])],
            ["req", $a([$a([$a(["01"])]), $a([$a(["10"])])])]
        ]); //#1933
        var _HR = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 12],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1940
        var _HX = new Map([
            ["parts", $a([_HR])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1942
        var _HZ = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1949
        var _Hf = new Map([
            ["parts", $a([_HZ])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1951
        var _Hh = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1958
        var _Hj = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", true],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1959
        var _Hp = new Map([
            ["parts", $a([_Hh, _Hj])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1961
        var _Hr = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 3],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1968
        var _Hx = new Map([
            ["parts", $a([_Hr])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1970
        var _Hz = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 10],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1977
        var _I5 = new Map([
            ["parts", $a([_Hz])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1979
        var _I7 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 2],
            ["opt", false],
            ["linters", $a([])]
        ]); //#1986
        var _ID = new Map([
            ["parts", $a([_I7])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1988
        var _IF = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#1995
        var _IH = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", true],
            ["linters", $a(['linthhmi'])]
        ]); //#1996
        var _IN = new Map([
            ["parts", $a([_IF, _IH])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#1998
        var _IP = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2005
        var _IX = new Map([
            ["parts", $a([_IP])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])]), $a([$a(["416"])])])]
        ]); //#2007
        var _IZ = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2014
        var _If = new Map([
            ["parts", $a([_IZ])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#2016
        var _Ih = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2023
        var _Im = new Map([
            ["parts", $a([_Ih])],
            ["req", $a([$a([$a(["7021"])])])]
        ]); //#2025
        var _Io = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#2032
        var _Iq = new Map([
            ["parts", $a([_Io])]
        ]); //#2032
        var _Is = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintiso3166999'])]
        ]); //#2040
        var _Iu = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 27],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2041
        var _J0 = new Map([
            ["parts", $a([_Is, _Iu])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#2043
        var _J2 = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2059
        var _J4 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2060
        var _J6 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2061
        var _J8 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintimporteridx'])]
        ]); //#2062
        var _JA = new Map([
            ["parts", $a([_J2, _J4, _J6, _J8])],
            ["dlattr", false]
        ]); //#2064
        var _JC = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintpackagetype'])]
        ]); //#2071
        var _JH = new Map([
            ["parts", $a([_JC])],
            ["req", $a([$a([$a(["00"])])])],
            ["dlattr", false]
        ]); //#2074
        var _JJ = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2081
        var _JO = new Map([
            ["parts", $a([_JJ])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#2083
        var _JQ = new Map([
            ["cset", 'X'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2096
        var _JS = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 28],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2097
        var _JY = new Map([
            ["parts", $a([_JQ, _JS])],
            ["req", $a([$a([$a(["01"]), $a(["8004"])])])]
        ]); //#2099
        var _Ja = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2115
        var _Jg = new Map([
            ["parts", $a([_Ja])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#2117
        var _Ji = new Map([
            ["cset", 'N'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['lintmediatype'])]
        ]); //#2124
        var _Jo = new Map([
            ["parts", $a([_Ji])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
        ]); //#2126
        var _Jq = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2133
        var _Jw = new Map([
            ["parts", $a([_Jq])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
        ]); //#2135
        var _Jy = new Map([
            ["cset", 'N'],
            ["min", 8],
            ["max", 8],
            ["opt", false],
            ["linters", $a(['lintyyyymmdd'])]
        ]); //#2142
        var _K4 = new Map([
            ["parts", $a([_Jy])],
            ["ex", $a(["7251"])],
            ["req", $a([$a([$a(["8018"])])])]
        ]); //#2145
        var _K6 = new Map([
            ["cset", 'N'],
            ["min", 8],
            ["max", 8],
            ["opt", false],
            ["linters", $a(['lintyyyymmdd'])]
        ]); //#2152
        var _K8 = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['linthhmi'])]
        ]); //#2153
        var _KE = new Map([
            ["parts", $a([_K6, _K8])],
            ["ex", $a(["7250"])],
            ["req", $a([$a([$a(["8018"])])])]
        ]); //#2156
        var _KG = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintiso5218'])]
        ]); //#2163
        var _KL = new Map([
            ["parts", $a([_KG])],
            ["req", $a([$a([$a(["8018"])])])]
        ]); //#2165
        var _KN = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 40],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#2172
        var _KU = new Map([
            ["parts", $a([_KN])],
            ["ex", $a(["7256", "7259"])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
        ]); //#2175
        var _KW = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 10],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2183
        var _Kd = new Map([
            ["parts", $a([_KW])],
            ["ex", $a(["7256", "7259"])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
        ]); //#2186
        var _Kf = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 90],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#2193
        var _Kl = new Map([
            ["parts", $a([_Kf])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])]
        ]); //#2195
        var _Kn = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#2202
        var _Ks = new Map([
            ["parts", $a([_Kn])],
            ["req", $a([$a([$a(["8018"])])])]
        ]); //#2204
        var _Ku = new Map([
            ["cset", 'X'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintposinseqslash'])]
        ]); //#2211
        var _Kz = new Map([
            ["parts", $a([_Ku])],
            ["req", $a([$a([$a(["8018", "7259"])])])]
        ]); //#2213
        var _L1 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 40],
            ["opt", false],
            ["linters", $a(['lintpcenc'])]
        ]); //#2220
        var _L7 = new Map([
            ["parts", $a([_L1])],
            ["ex", $a(["7256"])],
            ["req", $a([$a([$a(["8018"])])])]
        ]); //#2223
        var _L9 = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintnonzero'])]
        ]); //#2230
        var _LB = new Map([
            ["cset", 'N'],
            ["min", 5],
            ["max", 5],
            ["opt", false],
            ["linters", $a(['lintnonzero'])]
        ]); //#2231
        var _LD = new Map([
            ["cset", 'N'],
            ["min", 3],
            ["max", 3],
            ["opt", false],
            ["linters", $a(['lintnonzero'])]
        ]); //#2232
        var _LF = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintwinding'])]
        ]); //#2233
        var _LH = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2234
        var _LM = new Map([
            ["parts", $a([_L9, _LB, _LD, _LF, _LH])],
            ["req", $a([$a([$a(["01"])])])]
        ]); //#2236
        var _LO = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2243
        var _LQ = new Map([
            ["parts", $a([_LO])]
        ]); //#2243
        var _LS = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 1],
            ["opt", false],
            ["linters", $a(['lintzero'])]
        ]); //#2251
        var _LU = new Map([
            ["cset", 'N'],
            ["min", 13],
            ["max", 13],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#2252
        var _LW = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 16],
            ["opt", true],
            ["linters", $a([])]
        ]); //#2253
        var _LZ = new Map([
            ["parts", $a([_LS, _LU, _LW])],
            ["dlpkey", $a([])]
        ]); //#2255
        var _Lb = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#2262
        var _Lf = new Map([
            ["parts", $a([_Lb])],
            ["dlpkey", $a([$a(["7040"])])]
        ]); //#2264
        var _Lh = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2271
        var _Ln = new Map([
            ["parts", $a([_Lh])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#2273
        var _Lp = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", $a(['lintcsum'])]
        ]); //#2280
        var _Lr = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintpieceoftotal'])]
        ]); //#2281
        var _Lw = new Map([
            ["parts", $a([_Lp, _Lr])],
            ["ex", $a(["01", "37"])],
            ["dlpkey", $a([$a(["22", "10", "21"])])]
        ]); //#2284
        var _Ly = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 34],
            ["opt", false],
            ["linters", $a(['lintiban'])]
        ]); //#2291
        var _M3 = new Map([
            ["parts", $a([_Ly])],
            ["req", $a([$a([$a(["415"])])])]
        ]); //#2293
        var _M5 = new Map([
            ["cset", 'N'],
            ["min", 6],
            ["max", 6],
            ["opt", false],
            ["linters", $a(['lintyymmdd'])]
        ]); //#2300
        var _M7 = new Map([
            ["cset", 'N'],
            ["min", 2],
            ["max", 2],
            ["opt", false],
            ["linters", $a(['linthh'])]
        ]); //#2301
        var _M9 = new Map([
            ["cset", 'N'],
            ["min", 2],
            ["max", 2],
            ["opt", true],
            ["linters", $a(['lintmi'])]
        ]); //#2302
        var _MB = new Map([
            ["cset", 'N'],
            ["min", 2],
            ["max", 2],
            ["opt", true],
            ["linters", $a(['lintss'])]
        ]); //#2303
        var _MH = new Map([
            ["parts", $a([_M5, _M7, _M9, _MB])],
            ["req", $a([$a([$a(["01"]), $a(["02"])])])]
        ]); //#2305
        var _MJ = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 50],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2312
        var _MP = new Map([
            ["parts", $a([_MJ])],
            ["req", $a([$a([$a(["00"]), $a(["01"])])])]
        ]); //#2314
        var _MR = new Map([
            ["cset", 'Y'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a(['lintkey'])]
        ]); //#2321
        var _MV = new Map([
            ["parts", $a([_MR])],
            ["dlpkey", $a([$a(["8011"])])]
        ]); //#2323
        var _MX = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 12],
            ["opt", false],
            ["linters", $a(['lintnozeroprefix'])]
        ]); //#2330
        var _Mc = new Map([
            ["parts", $a([_MX])],
            ["req", $a([$a([$a(["8010"])])])],
            ["dlattr", false]
        ]); //#2333
        var _Me = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 20],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2340
        var _Mk = new Map([
            ["parts", $a([_Me])],
            ["req", $a([$a([$a(["01"]), $a(["8006"])])])]
        ]); //#2342
        var _Mm = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a(['lintcsumalpha', 'lintkey'])]
        ]); //#2349
        var _Mp = new Map([
            ["parts", $a([_Mm])],
            ["dlpkey", $a([])]
        ]); //#2351
        var _Mr = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a(['lintcsumalpha', 'lintkey', 'linthasnondigit'])]
        ]); //#2358
        var _Mw = new Map([
            ["parts", $a([_Mr])],
            ["req", $a([$a([$a(["01"])])])],
            ["dlattr", false]
        ]); //#2361
        var _My = new Map([
            ["cset", 'N'],
            ["min", 18],
            ["max", 18],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#2368
        var _N3 = new Map([
            ["parts", $a([_My])],
            ["ex", $a(["8018"])],
            ["dlpkey", $a([$a(["8019"])])]
        ]); //#2371
        var _N5 = new Map([
            ["cset", 'N'],
            ["min", 18],
            ["max", 18],
            ["opt", false],
            ["linters", $a(['lintcsum', 'lintkey'])]
        ]); //#2378
        var _NA = new Map([
            ["parts", $a([_N5])],
            ["ex", $a(["8017"])],
            ["dlpkey", $a([$a(["8019"])])]
        ]); //#2381
        var _NC = new Map([
            ["cset", 'N'],
            ["min", 1],
            ["max", 10],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2388
        var _NI = new Map([
            ["parts", $a([_NC])],
            ["req", $a([$a([$a(["8017"]), $a(["8018"])])])],
            ["dlattr", false]
        ]); //#2391
        var _NK = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 25],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2398
        var _NP = new Map([
            ["parts", $a([_NK])],
            ["req", $a([$a([$a(["415"])])])],
            ["dlattr", false]
        ]); //#2401
        var _NR = new Map([
            ["cset", 'N'],
            ["min", 14],
            ["max", 14],
            ["opt", false],
            ["linters", $a(['lintcsum'])]
        ]); //#2408
        var _NT = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a(['lintpieceoftotal'])]
        ]); //#2409
        var _NZ = new Map([
            ["parts", $a([_NR, _NT])],
            ["ex", $a(["02", "8006"])],
            ["req", $a([$a([$a(["37"])])])]
        ]); //#2412
        var _Nb = new Map([
            ["cset", 'Z'],
            ["min", 1],
            ["max", 90],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2419
        var _Np = new Map([
            ["parts", $a([_Nb])],
            ["req", $a([$a([$a(["00"]), $a(["01", "21"]), $a(["253"]), $a(["255"]), $a(["8003"]), $a(["8004"]), $a(["8006", "21"]), $a(["8010", "8011"]), $a(["8017"]), $a(["8018"])])])]
        ]); //#2421
        var _Nr = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintcouponcode'])]
        ]); //#2428
        var _Nt = new Map([
            ["parts", $a([_Nr])]
        ]); //#2428
        var _Nv = new Map([
            ["cset", 'N'],
            ["min", 4],
            ["max", 4],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2436
        var _O0 = new Map([
            ["parts", $a([_Nv])],
            ["req", $a([$a([$a(["255"])])])]
        ]); //#2438
        var _O2 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a(['lintcouponposoffer'])]
        ]); //#2445
        var _O4 = new Map([
            ["parts", $a([_O2])]
        ]); //#2445
        var _O6 = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 70],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2453
        var _OB = new Map([
            ["parts", $a([_O6])],
            ["req", $a([$a([$a(["01"])])])],
            ["dlattr", false]
        ]); //#2456
        var _OD = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 30],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2463
        var _OF = new Map([
            ["parts", $a([_OD])]
        ]); //#2463
        var _OH = new Map([
            ["cset", 'X'],
            ["min", 1],
            ["max", 90],
            ["opt", false],
            ["linters", $a([])]
        ]); //#2471
        var _OJ = new Map([
            ["parts", $a([_OH])]
        ]); //#2471
        var _OK = new Map([
            ["00", _4],
            ["01", _C],
            ["02", _K],
            ["03", _P],
            ["10", _a],
            ["11", _k],
            ["12", _r],
            ["13", _11],
            ["15", _11],
            ["16", _11],
            ["17", _1C],
            ["20", _1M],
            ["21", _1W],
            ["22", _1d],
            ["235", _1k],
            ["240", _1u],
            ["241", _1u],
            ["242", _25],
            ["243", _2C],
            ["250", _2M],
            ["251", _2U],
            ["253", _2b],
            ["254", _2i],
            ["255", _2q],
            ["30", _2y],
            ["3100", _37],
            ["3101", _37],
            ["3102", _37],
            ["3103", _37],
            ["3104", _37],
            ["3105", _37],
            ["3110", _3G],
            ["3111", _3G],
            ["3112", _3G],
            ["3113", _3G],
            ["3114", _3G],
            ["3115", _3G],
            ["3120", _3P],
            ["3121", _3P],
            ["3122", _3P],
            ["3123", _3P],
            ["3124", _3P],
            ["3125", _3P],
            ["3130", _3Y],
            ["3131", _3Y],
            ["3132", _3Y],
            ["3133", _3Y],
            ["3134", _3Y],
            ["3135", _3Y],
            ["3140", _3h],
            ["3141", _3h],
            ["3142", _3h],
            ["3143", _3h],
            ["3144", _3h],
            ["3145", _3h],
            ["3150", _3q],
            ["3151", _3q],
            ["3152", _3q],
            ["3153", _3q],
            ["3154", _3q],
            ["3155", _3q],
            ["3160", _3z],
            ["3161", _3z],
            ["3162", _3z],
            ["3163", _3z],
            ["3164", _3z],
            ["3165", _3z],
            ["3200", _48],
            ["3201", _48],
            ["3202", _48],
            ["3203", _48],
            ["3204", _48],
            ["3205", _48],
            ["3210", _4H],
            ["3211", _4H],
            ["3212", _4H],
            ["3213", _4H],
            ["3214", _4H],
            ["3215", _4H],
            ["3220", _4Q],
            ["3221", _4Q],
            ["3222", _4Q],
            ["3223", _4Q],
            ["3224", _4Q],
            ["3225", _4Q],
            ["3230", _4Z],
            ["3231", _4Z],
            ["3232", _4Z],
            ["3233", _4Z],
            ["3234", _4Z],
            ["3235", _4Z],
            ["3240", _4i],
            ["3241", _4i],
            ["3242", _4i],
            ["3243", _4i],
            ["3244", _4i],
            ["3245", _4i],
            ["3250", _4r],
            ["3251", _4r],
            ["3252", _4r],
            ["3253", _4r],
            ["3254", _4r],
            ["3255", _4r],
            ["3260", _50],
            ["3261", _50],
            ["3262", _50],
            ["3263", _50],
            ["3264", _50],
            ["3265", _50],
            ["3270", _59],
            ["3271", _59],
            ["3272", _59],
            ["3273", _59],
            ["3274", _59],
            ["3275", _59],
            ["3280", _5I],
            ["3281", _5I],
            ["3282", _5I],
            ["3283", _5I],
            ["3284", _5I],
            ["3285", _5I],
            ["3290", _5R],
            ["3291", _5R],
            ["3292", _5R],
            ["3293", _5R],
            ["3294", _5R],
            ["3295", _5R],
            ["3300", _5a],
            ["3301", _5a],
            ["3302", _5a],
            ["3303", _5a],
            ["3304", _5a],
            ["3305", _5a],
            ["3310", _5j],
            ["3311", _5j],
            ["3312", _5j],
            ["3313", _5j],
            ["3314", _5j],
            ["3315", _5j],
            ["3320", _5s],
            ["3321", _5s],
            ["3322", _5s],
            ["3323", _5s],
            ["3324", _5s],
            ["3325", _5s],
            ["3330", _61],
            ["3331", _61],
            ["3332", _61],
            ["3333", _61],
            ["3334", _61],
            ["3335", _61],
            ["3340", _6A],
            ["3341", _6A],
            ["3342", _6A],
            ["3343", _6A],
            ["3344", _6A],
            ["3345", _6A],
            ["3350", _6J],
            ["3351", _6J],
            ["3352", _6J],
            ["3353", _6J],
            ["3354", _6J],
            ["3355", _6J],
            ["3360", _6S],
            ["3361", _6S],
            ["3362", _6S],
            ["3363", _6S],
            ["3364", _6S],
            ["3365", _6S],
            ["3370", _6a],
            ["3371", _6a],
            ["3372", _6a],
            ["3373", _6a],
            ["3374", _6a],
            ["3375", _6a],
            ["3400", _6j],
            ["3401", _6j],
            ["3402", _6j],
            ["3403", _6j],
            ["3404", _6j],
            ["3405", _6j],
            ["3410", _6s],
            ["3411", _6s],
            ["3412", _6s],
            ["3413", _6s],
            ["3414", _6s],
            ["3415", _6s],
            ["3420", _71],
            ["3421", _71],
            ["3422", _71],
            ["3423", _71],
            ["3424", _71],
            ["3425", _71],
            ["3430", _7A],
            ["3431", _7A],
            ["3432", _7A],
            ["3433", _7A],
            ["3434", _7A],
            ["3435", _7A],
            ["3440", _7J],
            ["3441", _7J],
            ["3442", _7J],
            ["3443", _7J],
            ["3444", _7J],
            ["3445", _7J],
            ["3450", _7S],
            ["3451", _7S],
            ["3452", _7S],
            ["3453", _7S],
            ["3454", _7S],
            ["3455", _7S],
            ["3460", _7b],
            ["3461", _7b],
            ["3462", _7b],
            ["3463", _7b],
            ["3464", _7b],
            ["3465", _7b],
            ["3470", _7k],
            ["3471", _7k],
            ["3472", _7k],
            ["3473", _7k],
            ["3474", _7k],
            ["3475", _7k],
            ["3480", _7t],
            ["3481", _7t],
            ["3482", _7t],
            ["3483", _7t],
            ["3484", _7t],
            ["3485", _7t],
            ["3490", _82],
            ["3491", _82],
            ["3492", _82],
            ["3493", _82],
            ["3494", _82],
            ["3495", _82],
            ["3500", _8B],
            ["3501", _8B],
            ["3502", _8B],
            ["3503", _8B],
            ["3504", _8B],
            ["3505", _8B],
            ["3510", _8K],
            ["3511", _8K],
            ["3512", _8K],
            ["3513", _8K],
            ["3514", _8K],
            ["3515", _8K],
            ["3520", _8T],
            ["3521", _8T],
            ["3522", _8T],
            ["3523", _8T],
            ["3524", _8T],
            ["3525", _8T],
            ["3530", _8c],
            ["3531", _8c],
            ["3532", _8c],
            ["3533", _8c],
            ["3534", _8c],
            ["3535", _8c],
            ["3540", _8l],
            ["3541", _8l],
            ["3542", _8l],
            ["3543", _8l],
            ["3544", _8l],
            ["3545", _8l],
            ["3550", _8u],
            ["3551", _8u],
            ["3552", _8u],
            ["3553", _8u],
            ["3554", _8u],
            ["3555", _8u],
            ["3560", _93],
            ["3561", _93],
            ["3562", _93],
            ["3563", _93],
            ["3564", _93],
            ["3565", _93],
            ["3570", _9C],
            ["3571", _9C],
            ["3572", _9C],
            ["3573", _9C],
            ["3574", _9C],
            ["3575", _9C],
            ["3600", _9L],
            ["3601", _9L],
            ["3602", _9L],
            ["3603", _9L],
            ["3604", _9L],
            ["3605", _9L],
            ["3610", _9U],
            ["3611", _9U],
            ["3612", _9U],
            ["3613", _9U],
            ["3614", _9U],
            ["3615", _9U],
            ["3620", _9d],
            ["3621", _9d],
            ["3622", _9d],
            ["3623", _9d],
            ["3624", _9d],
            ["3625", _9d],
            ["3630", _9m],
            ["3631", _9m],
            ["3632", _9m],
            ["3633", _9m],
            ["3634", _9m],
            ["3635", _9m],
            ["3640", _9v],
            ["3641", _9v],
            ["3642", _9v],
            ["3643", _9v],
            ["3644", _9v],
            ["3645", _9v],
            ["3650", _A4],
            ["3651", _A4],
            ["3652", _A4],
            ["3653", _A4],
            ["3654", _A4],
            ["3655", _A4],
            ["3660", _AD],
            ["3661", _AD],
            ["3662", _AD],
            ["3663", _AD],
            ["3664", _AD],
            ["3665", _AD],
            ["3670", _AM],
            ["3671", _AM],
            ["3672", _AM],
            ["3673", _AM],
            ["3674", _AM],
            ["3675", _AM],
            ["3680", _AV],
            ["3681", _AV],
            ["3682", _AV],
            ["3683", _AV],
            ["3684", _AV],
            ["3685", _AV],
            ["3690", _Ae],
            ["3691", _Ae],
            ["3692", _Ae],
            ["3693", _Ae],
            ["3694", _Ae],
            ["3695", _Ae],
            ["37", _Ao],
            ["3900", _Ax],
            ["3901", _Ax],
            ["3902", _Ax],
            ["3903", _Ax],
            ["3904", _Ax],
            ["3905", _Ax],
            ["3906", _Ax],
            ["3907", _Ax],
            ["3908", _Ax],
            ["3909", _Ax],
            ["3910", _B7],
            ["3911", _B7],
            ["3912", _B7],
            ["3913", _B7],
            ["3914", _B7],
            ["3915", _B7],
            ["3916", _B7],
            ["3917", _B7],
            ["3918", _B7],
            ["3919", _B7],
            ["3920", _BL],
            ["3921", _BL],
            ["3922", _BL],
            ["3923", _BL],
            ["3924", _BL],
            ["3925", _BL],
            ["3926", _BL],
            ["3927", _BL],
            ["3928", _BL],
            ["3929", _BL],
            ["3930", _BZ],
            ["3931", _BZ],
            ["3932", _BZ],
            ["3933", _BZ],
            ["3934", _BZ],
            ["3935", _BZ],
            ["3936", _BZ],
            ["3937", _BZ],
            ["3938", _BZ],
            ["3939", _BZ],
            ["3940", _Bh],
            ["3941", _Bh],
            ["3942", _Bh],
            ["3943", _Bh],
            ["3950", _Bt],
            ["3951", _Bt],
            ["3952", _Bt],
            ["3953", _Bt],
            ["3954", _Bt],
            ["3955", _Bt],
            ["400", _Bx],
            ["401", _C2],
            ["402", _C7],
            ["403", _CE],
            ["410", _CI],
            ["411", _CI],
            ["412", _CI],
            ["413", _CI],
            ["414", _CP],
            ["415", _CY],
            ["416", _Cc],
            ["417", _Ci],
            ["420", _Cn],
            ["421", _Cu],
            ["422", _D5],
            ["423", _DM],
            ["424", _DV],
            ["425", _Dm],
            ["426", _Du],
            ["427", _E4],
            ["4300", _EB],
            ["4301", _EB],
            ["4302", _EI],
            ["4303", _EP],
            ["4304", _EW],
            ["4305", _EW],
            ["4306", _EW],
            ["4307", _Ed],
            ["4308", _Ek],
            ["4309", _Et],
            ["4310", _F0],
            ["4311", _F0],
            ["4312", _F7],
            ["4313", _FE],
            ["4314", _FL],
            ["4315", _FL],
            ["4316", _FL],
            ["4317", _FS],
            ["4318", _FZ],
            ["4319", _Fg],
            ["4320", _Fn],
            ["4321", _Fu],
            ["4322", _Fu],
            ["4323", _Fu],
            ["4324", _G3],
            ["4325", _G3],
            ["4326", _GA],
            ["4330", _GK],
            ["4331", _GU],
            ["4332", _Ge],
            ["4333", _Go],
            ["7001", _Gy],
            ["7002", _H6],
            ["7003", _HG],
            ["7004", _HP],
            ["7005", _HX],
            ["7006", _Hf],
            ["7007", _Hp],
            ["7008", _Hx],
            ["7009", _I5],
            ["7010", _ID],
            ["7011", _IN],
            ["7020", _IX],
            ["7021", _If],
            ["7022", _Im],
            ["7023", _Iq],
            ["7030", _J0],
            ["7031", _J0],
            ["7032", _J0],
            ["7033", _J0],
            ["7034", _J0],
            ["7035", _J0],
            ["7036", _J0],
            ["7037", _J0],
            ["7038", _J0],
            ["7039", _J0],
            ["7040", _JA],
            ["7041", _JH],
            ["710", _JO],
            ["711", _JO],
            ["712", _JO],
            ["713", _JO],
            ["714", _JO],
            ["715", _JO],
            ["716", _JO],
            ["7230", _JY],
            ["7231", _JY],
            ["7232", _JY],
            ["7233", _JY],
            ["7234", _JY],
            ["7235", _JY],
            ["7236", _JY],
            ["7237", _JY],
            ["7238", _JY],
            ["7239", _JY],
            ["7240", _Jg],
            ["7241", _Jo],
            ["7242", _Jw],
            ["7250", _K4],
            ["7251", _KE],
            ["7252", _KL],
            ["7253", _KU],
            ["7254", _KU],
            ["7255", _Kd],
            ["7256", _Kl],
            ["7257", _Ks],
            ["7258", _Kz],
            ["7259", _L7],
            ["8001", _LM],
            ["8002", _LQ],
            ["8003", _LZ],
            ["8004", _Lf],
            ["8005", _Ln],
            ["8006", _Lw],
            ["8007", _M3],
            ["8008", _MH],
            ["8009", _MP],
            ["8010", _MV],
            ["8011", _Mc],
            ["8012", _Mk],
            ["8013", _Mp],
            ["8014", _Mw],
            ["8017", _N3],
            ["8018", _NA],
            ["8019", _NI],
            ["8020", _NP],
            ["8026", _NZ],
            ["8030", _Np],
            ["8110", _Nt],
            ["8111", _O0],
            ["8112", _O4],
            ["8200", _OB],
            ["90", _OF],
            ["91", _OJ],
            ["92", _OJ],
            ["93", _OJ],
            ["94", _OJ],
            ["95", _OJ],
            ["96", _OJ],
            ["97", _OJ],
            ["98", _OJ],
            ["99", _OJ]
        ]); //#2483
        $_.gs1syntax = _OK; //#2485
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2485
        bwipp_gs1process.__2486__ = 1; //#2485
        $_ = Object.getPrototypeOf($_); //#2485
    } //#2485
    if ($eq($k[--$j], 'ai')) { //#2717
        $anchorsearch($k[--$j], "\("); //#2493
        if ($nt($k[--$j])) { //#2495
            $j--; //#2494
            $k[$j++] = 'bwipp.GS1aiMissingOpenParen#2494'; //#2494
            $k[$j++] = "AIs must start with '\('"; //#2494
            bwipp_raiseerror(); //#2494
        } //#2494
        $j--; //#2496
        $k[$j++] = Infinity; //#2497
        var _OP = $k[--$j]; //#2497
        var _OQ = $k[--$j]; //#2497
        $k[$j++] = _OP; //#2504
        $k[$j++] = _OQ; //#2504
        for (;;) { //#2504
            var _OR = $k[--$j]; //#2498
            $k[$j++] = _OR; //#2498
            if ($eq(_OR, "")) { //#2498
                $j--; //#2498
                break; //#2498
            } //#2498
            $search($k[--$j], "\)"); //#2499
            if ($nt($k[--$j])) { //#2501
                $cleartomark(); //#2500
                $k[$j++] = 'bwipp.GS1aiMissingCloseParen#2500'; //#2500
                $k[$j++] = "AIs must end with '\)'"; //#2500
                bwipp_raiseerror(); //#2500
            } //#2500
            var _OU = $k[--$j]; //#2502
            var _OV = $k[--$j]; //#2502
            $k[$j++] = _OU; //#2502
            $k[$j++] = _OV; //#2502
            $j--; //#2502
            var _OW = $k[--$j]; //#2502
            var _OX = $k[--$j]; //#2502
            $k[$j++] = _OW; //#2503
            $search(_OX, "\("); //#2503
            if ($k[--$j]) { //#2503
                var _OZ = $k[--$j]; //#2503
                var _Oa = $k[--$j]; //#2503
                $k[$j++] = _OZ; //#2503
                $k[$j++] = _Oa; //#2503
                $j--; //#2503
                var _Ob = $k[--$j]; //#2503
                var _Oc = $k[--$j]; //#2503
                $k[$j++] = _Ob; //#2503
                $k[$j++] = _Oc; //#2503
            } else { //#2503
                $k[$j++] = ""; //#2503
            } //#2503
        } //#2503
        var _Od = $counttomark(); //#2505
        $k[$j++] = _Od; //#2505
        if (_Od > 0) { //#2505
            var _Oe = $k[--$j]; //#2505
            for (var _Og = _Oe, _Of = (~~(_Oe / 2)) + 1; _Og >= _Of; _Og -= 1) { //#2505
                $r(_Og, -1); //#2505
            } //#2505
        } else { //#2505
            $j--; //#2505
        } //#2505
        $astore($a(~~($counttomark() / 2))); //#2506
        $_.ais = $k[--$j]; //#2506
        $astore($a($counttomark())); //#2507
        $k[$j++] = Infinity; //#2507
        var _Om = $k[--$j]; //#2507
        var _On = $k[--$j]; //#2507
        $k[$j++] = _Om; //#2509
        $forall(_On, function() { //#2509
            var _Op = new Map([
                ["parse", $_.parse],
                ["parseonly", true],
                ["parsefnc", false]
            ]); //#2508
            $k[$j++] = _Op; //#2508
            bwipp_parseinput(); //#2508
        }); //#2508
        $_.vals = $a(); //#2509
        $j--; //#2510
    } else { //#2717
        $anchorsearch($k[--$j], "http://"); //#2515
        if ($nt($k[--$j])) { //#2520
            $anchorsearch($k[--$j], "HTTP://"); //#2516
            if ($nt($k[--$j])) { //#2520
                $anchorsearch($k[--$j], "https://"); //#2517
                if ($nt($k[--$j])) { //#2520
                    $anchorsearch($k[--$j], "HTTPS://"); //#2518
                    if ($nt($k[--$j])) { //#2520
                        $j--; //#2519
                        $k[$j++] = 'bwipp.GS1dlURIbadScheme#2519'; //#2519
                        $k[$j++] = "Scheme must be http:// HTTP:// https:// or HTTPS://"; //#2519
                        bwipp_raiseerror(); //#2519
                    } //#2519
                } //#2519
            } //#2519
        } //#2519
        $j--; //#2521
        $search($k[--$j], "/"); //#2524
        if ($nt($k[--$j])) { //#2526
            $j--; //#2525
            $k[$j++] = 'bwipp.GS1dlMissingDomainOrPathInfo#2525'; //#2525
            $k[$j++] = "URI must contain a domain and path info"; //#2525
            bwipp_raiseerror(); //#2525
        } //#2525
        $j -= 2; //#2527
        $search($k[--$j], "#"); //#2530
        if ($k[--$j]) { //#2532
            var _P3 = $k[--$j]; //#2531
            var _P4 = $k[--$j]; //#2531
            $k[$j++] = _P3; //#2531
            $k[$j++] = _P4; //#2531
            $j--; //#2531
            var _P5 = $k[--$j]; //#2531
            var _P6 = $k[--$j]; //#2531
            $k[$j++] = _P5; //#2531
            $k[$j++] = _P6; //#2531
            $j--; //#2531
        } //#2531
        $search($k[--$j], "?"); //#2535
        if ($nt($k[--$j])) { //#2537
            var _P9 = $k[--$j]; //#2536
            $k[$j++] = ""; //#2536
            $k[$j++] = null; //#2536
            $k[$j++] = _P9; //#2536
        } //#2536
        $_.pp = $k[--$j]; //#2538
        $j--; //#2539
        $_.qp = $k[--$j]; //#2540
        $k[$j++] = Infinity; //#2543
        $k[$j++] = 0; //#2547
        $k[$j++] = 0; //#2547
        $k[$j++] = $_.pp; //#2547
        for (;;) { //#2547
            $search($k[--$j], "/"); //#2545
            if ($nt($k[--$j])) { //#2545
                $j--; //#2545
                break; //#2545
            } //#2545
            var _PF = $k[--$j]; //#2546
            var _PG = $k[--$j]; //#2546
            $k[$j++] = _PF.length + 1; //#2546
            $k[$j++] = _PG; //#2546
            $j--; //#2546
            var _PH = $k[--$j]; //#2546
            var _PI = $k[--$j]; //#2546
            var _PJ = $k[--$j]; //#2546
            $k[$j++] = _PJ; //#2546
            $k[$j++] = $f(_PH + _PJ); //#2546
            $k[$j++] = _PI; //#2546
        } //#2546
        $astore($a($counttomark() - 1)); //#2548
        $_.pipos = $k[--$j]; //#2548
        $j -= 2; //#2548
        if ($_.pipos.length <= 1) { //#2551
            $k[$j++] = 'bwipp.GS1dlNoAIinfo#2550'; //#2550
            $k[$j++] = "The path was too short to contain AI info"; //#2550
            bwipp_raiseerror(); //#2550
        } //#2550
        $k[$j++] = false; //#2567
        for (var _PP = $_.pipos.length - 2; _PP >= 0; _PP -= 2) { //#2567
            var _PR = $get($_.pipos, _PP); //#2557
            var _PV = $geti($_.pp, _PR, $f($f($get($_.pipos, _PP + 1) - _PR) - 1)); //#2558
            var _PX = $get($_.gs1syntax, _PV) !== undefined; //#2559
            $k[$j++] = _PP; //#2565
            $k[$j++] = _PV; //#2565
            if (_PX) { //#2564
                var _Pb = $get($get($_.gs1syntax, $k[--$j]), 'dlpkey') !== undefined; //#2560
                if (_Pb) { //#2562
                    var _Pc = $k[--$j]; //#2561
                    var _Pd = $k[--$j]; //#2561
                    $k[$j++] = _Pc; //#2561
                    $k[$j++] = _Pd; //#2561
                    $j--; //#2561
                    $k[$j++] = true; //#2561
                    break; //#2561
                } //#2561
            } else { //#2564
                $j--; //#2564
            } //#2564
            $j--; //#2566
        } //#2566
        if ($nt($k[--$j])) { //#2570
            $k[$j++] = 'bwipp.GS1dlNoAIinfo#2569'; //#2569
            $k[$j++] = "The path does not contain a valid primary key"; //#2569
            bwipp_raiseerror(); //#2569
        } //#2569
        var _Ph = $get($_.pipos, $k[--$j]); //#2571
        $_.pp = $geti($_.pp, _Ph, $f($_.pp.length - _Ph)); //#2571
        $_.uriunescape = function() {
            $_.qq = $k[--$j]; //#2574
            $_.in = $k[--$j]; //#2575
            $_.out = $s($_.in.length); //#2576
            $k[$j++] = 0; //#2600
            $k[$j++] = 0; //#2600
            for (;;) { //#2600
                var _Pp = $k[--$j]; //#2578
                var _Pq = $k[--$j]; //#2578
                $k[$j++] = _Pq; //#2578
                $k[$j++] = _Pp; //#2578
                if (_Pq >= $_.in.length) { //#2578
                    break; //#2578
                } //#2578
                var _Pt = $k[--$j]; //#2579
                var _Pu = $k[--$j]; //#2579
                var _Pv = $get($_.in, _Pu); //#2579
                $k[$j++] = _Pu; //#2599
                $k[$j++] = _Pt; //#2599
                $k[$j++] = _Pv; //#2599
                if ((_Pv == 43) && $_.qq) { //#2598
                    $j--; //#2581
                    var _Py = $k[--$j]; //#2581
                    $put($_.out, _Py, 32); //#2581
                    var _Pz = $k[--$j]; //#2582
                    $k[$j++] = $f(_Pz + 1); //#2582
                    $k[$j++] = $f(_Py + 1); //#2582
                } else { //#2598
                    var _Q0 = $k[--$j]; //#2584
                    var _Q1 = $k[--$j]; //#2584
                    var _Q2 = $k[--$j]; //#2584
                    $k[$j++] = _Q2; //#2599
                    $k[$j++] = _Q1; //#2599
                    $k[$j++] = _Q0; //#2599
                    if ((_Q0 == 37) && (_Q2 < ($_.in.length - 2))) { //#2598
                        $j--; //#2585
                        var _Q5 = $k[--$j]; //#2586
                        var _Q6 = $k[--$j]; //#2586
                        var _Q7 = $geti($_.in, $f(_Q6 + 1), 2); //#2586
                        $k[$j++] = _Q6; //#2593
                        $k[$j++] = _Q5; //#2593
                        $k[$j++] = 0; //#2593
                        for (var _Q8 = 0, _Q9 = _Q7.length; _Q8 < _Q9; _Q8++) { //#2593
                            var _QA = $get(_Q7, _Q8); //#2593
                            $k[$j++] = _QA; //#2591
                            if ((_QA >= 48) && (_QA <= 57)) { //#2590
                                var _QB = $k[--$j]; //#2587
                                $k[$j++] = $f(_QB - 48); //#2587
                            } else { //#2590
                                var _QC = $k[--$j]; //#2588
                                $k[$j++] = _QC; //#2591
                                if ((_QC >= 65) && (_QC <= 70)) { //#2590
                                    var _QD = $k[--$j]; //#2588
                                    $k[$j++] = $f(_QD - 55); //#2588
                                } else { //#2590
                                    var _QE = $k[--$j]; //#2589
                                    $k[$j++] = _QE; //#2591
                                    if ((_QE >= 97) && (_QE <= 102)) { //#2590
                                        var _QF = $k[--$j]; //#2589
                                        $k[$j++] = $f(_QF - 87); //#2589
                                    } else { //#2590
                                        $j -= 2; //#2590
                                        $k[$j++] = 'bwipp.GS1dlBadHexCharacter#2590'; //#2590
                                        $k[$j++] = "Invalid hex character"; //#2590
                                        bwipp_raiseerror(); //#2590
                                    } //#2590
                                } //#2590
                            } //#2590
                            var _QG = $k[--$j]; //#2592
                            var _QH = $k[--$j]; //#2592
                            $k[$j++] = $f(_QG + (_QH * 16)); //#2592
                        } //#2592
                        var _QJ = $k[--$j]; //#2594
                        var _QK = $k[--$j]; //#2594
                        $put($_.out, _QK, _QJ); //#2594
                        var _QL = $k[--$j]; //#2595
                        $k[$j++] = $f(_QL + 3); //#2595
                        $k[$j++] = $f(_QK + 1); //#2595
                    } else { //#2598
                        var _QN = $k[--$j]; //#2597
                        var _QO = $k[--$j]; //#2597
                        $put($_.out, _QO, _QN); //#2597
                        var _QP = $k[--$j]; //#2598
                        $k[$j++] = $f(_QP + 1); //#2598
                        $k[$j++] = $f(_QO + 1); //#2598
                    } //#2598
                } //#2598
            } //#2598
            $_.out = $geti($_.out, 0, $k[--$j]); //#2601
            $j--; //#2602
            $k[$j++] = $_.out; //#2603
        }; //#2603
        $_.isvaliddlpkeyseq = function() {
            $_.in = $k[--$j]; //#2607
            $k[$j++] = false; //#2621
            $forall($get($get($_.gs1syntax, $get($_.in, 0)), 'dlpkey'), function() { //#2621
                $_.seq = $k[--$j]; //#2610
                $_.i = 1; //#2611
                $_.j = 0; //#2611
                for (;;) { //#2619
                    if ($_.i >= $_.in.length) { //#2613
                        break; //#2613
                    } //#2613
                    if ($_.j >= $_.seq.length) { //#2614
                        break; //#2614
                    } //#2614
                    if ($eq($get($_.in, $_.i), $get($_.seq, $_.j))) { //#2617
                        $_.i = $_.i + 1; //#2616
                    } //#2616
                    $_.j = $_.j + 1; //#2618
                } //#2618
                if ($_.i == $_.in.length) { //#2620
                    $j--; //#2620
                    $k[$j++] = true; //#2620
                    return true; //#2620
                } //#2620
            }); //#2620
        }; //#2620
        $_.ais = $a(99); //#2624
        $_.vals = $a(99); //#2625
        $k[$j++] = 0; //#2639
        $k[$j++] = $_.pp; //#2639
        for (;;) { //#2639
            $search($k[--$j], "/"); //#2630
            if ($k[--$j]) { //#2636
                var _Qv = $k[--$j]; //#2631
                var _Qw = $k[--$j]; //#2631
                var _Qx = $k[--$j]; //#2631
                var _Qy = $k[--$j]; //#2631
                $put($_.ais, _Qy, _Qv); //#2631
                $k[$j++] = _Qy; //#2633
                $search(_Qx, "/"); //#2633
                if ($k[--$j]) { //#2633
                    var _R0 = $k[--$j]; //#2633
                    var _R1 = $k[--$j]; //#2633
                    $k[$j++] = _R0; //#2633
                    $k[$j++] = _R1; //#2633
                    $j--; //#2633
                } else { //#2633
                    var _R2 = $k[--$j]; //#2633
                    $k[$j++] = ""; //#2633
                    $k[$j++] = _R2; //#2633
                } //#2633
                var _R4 = $k[--$j]; //#2634
                var _R5 = $k[--$j]; //#2634
                var _R6 = $k[--$j]; //#2634
                $k[$j++] = _R6; //#2634
                $k[$j++] = _R5; //#2634
                $k[$j++] = $_.vals; //#2634
                $k[$j++] = _R6; //#2634
                $k[$j++] = _R4; //#2634
                $k[$j++] = false; //#2634
                $_.uriunescape(); //#2634
                var _R7 = $k[--$j]; //#2634
                var _R8 = $k[--$j]; //#2634
                $put($k[--$j], _R8, _R7); //#2634
            } else { //#2636
                $j--; //#2636
                break; //#2636
            } //#2636
            var _RA = $k[--$j]; //#2638
            var _RB = $k[--$j]; //#2638
            $k[$j++] = $f(_RB + 1); //#2638
            $k[$j++] = _RA; //#2638
        } //#2638
        var _RC = $k[--$j]; //#2640
        $_.plen = _RC; //#2640
        $k[$j++] = _RC; //#2647
        if (_RC > 1) { //#2647
            $k[$j++] = $geti($_.ais, 0, $_.plen); //#2644
            $_.isvaliddlpkeyseq(); //#2644
            if ($nt($k[--$j])) { //#2646
                $j--; //#2645
                $k[$j++] = 'bwipp.GS1dlBadPathInfo#2645'; //#2645
                $k[$j++] = "The AIs in the path are not a valid key-qualifier sequence for the key"; //#2645
                bwipp_raiseerror(); //#2645
            } //#2645
        } //#2645
        $k[$j++] = $_.qp; //#2665
        for (;;) { //#2665
            var _RI = $k[--$j]; //#2651
            $k[$j++] = _RI; //#2651
            if ($eq(_RI, "")) { //#2651
                $j--; //#2651
                break; //#2651
            } //#2651
            $search($k[--$j], "&"); //#2652
            if ($k[--$j]) { //#2652
                var _RL = $k[--$j]; //#2652
                var _RM = $k[--$j]; //#2652
                $k[$j++] = _RL; //#2652
                $k[$j++] = _RM; //#2652
                $j--; //#2652
            } else { //#2652
                var _RN = $k[--$j]; //#2652
                $k[$j++] = ""; //#2652
                $k[$j++] = _RN; //#2652
            } //#2652
            $search($k[--$j], "="); //#2653
            if ($k[--$j]) { //#2663
                var _RQ = $k[--$j]; //#2654
                $k[$j++] = _RQ; //#2654
                $k[$j++] = true; //#2654
                $forall(_RQ, function() { //#2654
                    var _RR = $k[--$j]; //#2654
                    var _RS = $k[--$j]; //#2654
                    $k[$j++] = _RS && ((_RR >= 48) && (_RR <= 57)); //#2654
                }); //#2654
                if ($k[--$j]) { //#2660
                    var _RV = $k[--$j]; //#2655
                    var _RW = $k[--$j]; //#2655
                    var _RX = $k[--$j]; //#2655
                    var _RY = $k[--$j]; //#2655
                    var _RZ = $k[--$j]; //#2655
                    $put($_.ais, _RZ, _RV); //#2655
                    $k[$j++] = _RZ; //#2657
                    $k[$j++] = _RY; //#2657
                    $k[$j++] = $_.vals; //#2657
                    $k[$j++] = _RZ; //#2657
                    $k[$j++] = _RX; //#2657
                    $k[$j++] = true; //#2657
                    $_.uriunescape(); //#2657
                    var _Rb = $k[--$j]; //#2657
                    var _Rc = $k[--$j]; //#2657
                    $put($k[--$j], _Rc, _Rb); //#2657
                    var _Re = $k[--$j]; //#2658
                    var _Rf = $k[--$j]; //#2658
                    $k[$j++] = $f(_Rf + 1); //#2658
                    $k[$j++] = _Re; //#2658
                } else { //#2660
                    $j -= 3; //#2660
                } //#2660
            } else { //#2663
                $j--; //#2663
            } //#2663
        } //#2663
        var _Ri = $k[--$j]; //#2668
        var _Rk = $geti($_.ais, $_.plen, $f(_Ri - $_.plen)); //#2668
        $k[$j++] = _Ri; //#2682
        for (var _Rl = 0, _Rm = _Rk.length; _Rl < _Rm; _Rl++) { //#2682
            var _Rn = $get(_Rk, _Rl); //#2682
            var _Rp = $get($_.gs1syntax, _Rn) !== undefined; //#2669
            $k[$j++] = _Rn; //#2673
            if (_Rp) { //#2672
                var _Rr = $k[--$j]; //#2670
                var _Rs = $get($_.gs1syntax, _Rr); //#2670
                var _Rt = $get(_Rs, 'dlattr') !== undefined; //#2670
                $k[$j++] = _Rr; //#2670
                $k[$j++] = _Rs; //#2670
                $k[$j++] = 'dlattr'; //#2670
                if (_Rt) { //#2670
                    var _Ru = $k[--$j]; //#2670
                    var _Rw = $get($k[--$j], _Ru); //#2670
                    $k[$j++] = _Rw; //#2670
                } else { //#2670
                    $j -= 2; //#2670
                    $k[$j++] = true; //#2670
                } //#2670
            } else { //#2672
                $k[$j++] = $_.dontlint; //#2672
            } //#2672
            if ($nt($k[--$j])) { //#2680
                var _Rz = $k[--$j]; //#2675
                var _S0 = _Rz.length; //#2675
                var _S1 = $s(_S0 + 46); //#2675
                $puti(_S1, 0, "AI \("); //#2676
                $puti(_S1, 4, _Rz); //#2677
                $puti(_S1, _S0 + 4, "\) is not a valid GS1 DL URI data attribute"); //#2678
                $k[$j++] = _Rz; //#2679
                $k[$j++] = _S1; //#2679
                $k[$j++] = _S0; //#2679
                $j--; //#2679
                var _S2 = $k[--$j]; //#2679
                var _S3 = $k[--$j]; //#2679
                $k[$j++] = _S2; //#2679
                $k[$j++] = _S3; //#2679
                $j--; //#2679
                var _S4 = $k[--$j]; //#2679
                $k[$j++] = 'bwipp.GS1dlInvalidDataAttribute#2679'; //#2679
                $k[$j++] = _S4; //#2679
                bwipp_raiseerror(); //#2679
            } //#2679
            $j--; //#2681
        } //#2681
        var _S7 = $k[--$j]; //#2685
        var _S9 = $geti($_.ais, $_.plen, $f(_S7 - $_.plen)); //#2685
        $k[$j++] = _S7; //#2700
        for (var _SA = 0, _SB = _S9.length; _SA < _SB; _SA++) { //#2700
            $k[$j++] = $get(_S9, _SA); //#2698
            for (var _SE = $_.plen; _SE >= 1; _SE -= 1) { //#2698
                var _SF = $k[--$j]; //#2687
                $k[$j++] = _SF; //#2689
                $k[$j++] = _SE; //#2689
                $k[$j++] = _SF; //#2689
                $k[$j++] = Infinity; //#2687
                $aload($geti($_.ais, 0, $_.plen)); //#2688
                $r($counttomark() + 3, -2); //#2689
                var _SK = $k[--$j]; //#2689
                var _SL = $k[--$j]; //#2689
                $k[$j++] = _SK; //#2689
                $r(_SL, 1); //#2689
                var _SM = $a(); //#2689
                $k[$j++] = _SM; //#2690
                $_.isvaliddlpkeyseq(); //#2690
                if ($k[--$j]) { //#2697
                    var _SO = $k[--$j]; //#2691
                    var _SP = $k[--$j]; //#2691
                    $k[$j++] = _SO; //#2691
                    $k[$j++] = _SP; //#2691
                    $j--; //#2691
                    var _SQ = $k[--$j]; //#2692
                    var _SR = _SQ.length; //#2692
                    var _SS = $s(_SR + 50); //#2692
                    $puti(_SS, 0, "AI \("); //#2693
                    $puti(_SS, 4, _SQ); //#2694
                    $puti(_SS, _SR + 4, "\) from query params should be in the path info"); //#2695
                    $k[$j++] = _SQ; //#2696
                    $k[$j++] = _SS; //#2696
                    $k[$j++] = _SR; //#2696
                    $j--; //#2696
                    var _ST = $k[--$j]; //#2696
                    var _SU = $k[--$j]; //#2696
                    $k[$j++] = _ST; //#2696
                    $k[$j++] = _SU; //#2696
                    $j--; //#2696
                    var _SV = $k[--$j]; //#2696
                    $k[$j++] = 'bwipp.GS1dlAttributeMustBeQualifier#2696'; //#2696
                    $k[$j++] = _SV; //#2696
                    bwipp_raiseerror(); //#2696
                } //#2696
            } //#2696
            $j--; //#2699
        } //#2699
        var _SX = $k[--$j]; //#2702
        $_.ais = $geti($_.ais, 0, _SX); //#2702
        $_.vals = $geti($_.vals, 0, _SX); //#2703
        for (var _Sd = 0, _Sc = $_.ais.length - 1; _Sd <= _Sc; _Sd += 1) { //#2718
            $k[$j++] = _Sd; //#2716
            if ($eq($get($_.ais, _Sd), "01")) { //#2716
                var _Sg = $k[--$j]; //#2709
                var _Si = $get($_.vals, _Sg); //#2709
                var _Sj = _Si.length; //#2710
                $k[$j++] = _Sg; //#2715
                $k[$j++] = _Si; //#2715
                if ((_Sj == 8) || ((_Sj == 12) || (_Sj == 13))) { //#2714
                    var _Sl = $strcpy($s(14), "00000000000000"); //#2711
                    $k[$j++] = _Sl; //#2711
                    $k[$j++] = _Sl; //#2711
                    $r(3, -1); //#2711
                    var _Sm = $k[--$j]; //#2711
                    $puti($k[--$j], 14 - _Sm.length, _Sm); //#2711
                    var _Sp = $k[--$j]; //#2712
                    var _Sq = $k[--$j]; //#2712
                    $put($_.vals, _Sq, _Sp); //#2712
                    $k[$j++] = _Sq; //#2712
                } else { //#2714
                    $j--; //#2714
                } //#2714
            } //#2714
            $j--; //#2717
        } //#2717
    } //#2717
    if (!bwipp_gs1process.__2731__) { //#2731
        $_ = Object.create($_); //#2731
        $k[$j++] = Infinity; //#2724
        var _Sr = $a(["00", "01", "02", "03", "04", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "31", "32", "33", "34", "35", "36", "41"]); //#2729
        for (var _Ss = 0, _St = _Sr.length; _Ss < _St; _Ss++) { //#2730
            var _Su = $get(_Sr, _Ss); //#2730
            $k[$j++] = _Su; //#2730
            $k[$j++] = _Su; //#2730
        } //#2730
        $_.aifixed = $d(); //#2730
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2730
        bwipp_gs1process.__2731__ = 1; //#2730
        $_ = Object.getPrototypeOf($_); //#2730
    } //#2730
    $k[$j++] = Infinity; //#2733
    var _Sx = $_.ais; //#2734
    for (var _Sy = 0, _Sz = _Sx.length; _Sy < _Sz; _Sy++) { //#2741
        var _T0 = $get(_Sx, _Sy); //#2741
        $k[$j++] = true; //#2740
        $k[$j++] = _T0; //#2740
        if (_T0.length >= 2) { //#2739
            var _T4 = $get($_.aifixed, $geti($k[--$j], 0, 2)) !== undefined; //#2737
            if (_T4) { //#2737
                $j--; //#2737
                $k[$j++] = false; //#2737
            } //#2737
        } else { //#2739
            $j--; //#2739
        } //#2739
    } //#2739
    $_.fncs = $a(); //#2739
    if (!bwipp_gs1process.__2766__) { //#2766
        $_ = Object.create($_); //#2766
        $k[$j++] = Infinity; //#2747
        $k[$j++] = 0; //#2749
        for (var _T6 = 0, _T7 = "!\"%&'\(\)*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".length; _T6 < _T7; _T6++) { //#2749
            var _T9 = $k[--$j]; //#2749
            $k[$j++] = $get("!\"%&'\(\)*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", _T6); //#2749
            $k[$j++] = _T9; //#2749
            $k[$j++] = $f(_T9 + 1); //#2749
        } //#2749
        $j--; //#2749
        $_.cset82 = $d(); //#2750
        $k[$j++] = Infinity; //#2752
        $k[$j++] = 0; //#2754
        for (var _TB = 0, _TC = "#-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".length; _TB < _TC; _TB++) { //#2754
            var _TE = $k[--$j]; //#2754
            $k[$j++] = $get("#-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", _TB); //#2754
            $k[$j++] = _TE; //#2754
            $k[$j++] = $f(_TE + 1); //#2754
        } //#2754
        $j--; //#2754
        $_.cset39 = $d(); //#2755
        $k[$j++] = Infinity; //#2757
        $k[$j++] = 0; //#2759
        for (var _TG = 0, _TH = "23456789ABCDEFGHJKLMNPQRSTUVWXYZ".length; _TG < _TH; _TG++) { //#2759
            var _TJ = $k[--$j]; //#2759
            $k[$j++] = $get("23456789ABCDEFGHJKLMNPQRSTUVWXYZ", _TG); //#2759
            $k[$j++] = _TJ; //#2759
            $k[$j++] = $f(_TJ + 1); //#2759
        } //#2759
        $j--; //#2759
        $_.cset32 = $d(); //#2760
        $k[$j++] = Infinity; //#2762
        $k[$j++] = 0; //#2764
        for (var _TL = 0, _TM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".length; _TL < _TM; _TL++) { //#2764
            var _TO = $k[--$j]; //#2764
            $k[$j++] = $get("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", _TL); //#2764
            $k[$j++] = _TO; //#2764
            $k[$j++] = $f(_TO + 1); //#2764
        } //#2764
        $j--; //#2764
        $_.cset64 = $d(); //#2765
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2765
        bwipp_gs1process.__2766__ = 1; //#2765
        $_ = Object.getPrototypeOf($_); //#2765
    } //#2765
    $_.lintnumeric = function() {
        var _TR = $k[--$j]; //#2769
        $k[$j++] = true; //#2769
        $forall(_TR, function() { //#2769
            var _TS = $k[--$j]; //#2769
            if ((_TS < 48) || (_TS > 57)) { //#2769
                $j--; //#2769
                $k[$j++] = false; //#2769
                return true; //#2769
            } //#2769
        }); //#2769
        if ($nt($k[--$j])) { //#2770
            $j--; //#2770
            $k[$j++] = 'bwipp.GS1notNumeric#2770'; //#2770
            $k[$j++] = "Not numeric"; //#2770
            $k[$j++] = false; //#2770
            return true; //#2770
        } //#2770
    }; //#2770
    $_.lintcset82 = function() {
        var _TU = $k[--$j]; //#2774
        $k[$j++] = true; //#2774
        $forall(_TU, function() { //#2774
            var _TX = $get($_.cset82, $k[--$j]) !== undefined; //#2774
            if (!_TX) { //#2774
                $j--; //#2774
                $k[$j++] = false; //#2774
                return true; //#2774
            } //#2774
        }); //#2774
        if ($nt($k[--$j])) { //#2775
            $j--; //#2775
            $k[$j++] = 'bwipp.GS1badCSET82character#2775'; //#2775
            $k[$j++] = "Invalid CSET 82 character"; //#2775
            $k[$j++] = false; //#2775
            return true; //#2775
        } //#2775
    }; //#2775
    $_.lintcset39 = function() {
        var _TZ = $k[--$j]; //#2779
        $k[$j++] = true; //#2779
        $forall(_TZ, function() { //#2779
            var _Tc = $get($_.cset39, $k[--$j]) !== undefined; //#2779
            if (!_Tc) { //#2779
                $j--; //#2779
                $k[$j++] = false; //#2779
                return true; //#2779
            } //#2779
        }); //#2779
        if ($nt($k[--$j])) { //#2780
            $j--; //#2780
            $k[$j++] = 'bwipp.GS1badCSET39character#2780'; //#2780
            $k[$j++] = "Invalid CSET 39 character"; //#2780
            $k[$j++] = false; //#2780
            return true; //#2780
        } //#2780
    }; //#2780
    $_.lintcset64 = function() {
        var _Te = $k[--$j]; //#2785
        $k[$j++] = true; //#2785
        $forall(_Te, function() { //#2785
            var _Tf = $k[--$j]; //#2785
            var _Th = $get($_.cset64, _Tf) !== undefined; //#2785
            if ((!_Th) && (_Tf != 61)) { //#2785
                $j--; //#2785
                $k[$j++] = false; //#2785
                return true; //#2785
            } //#2785
        }); //#2785
        if ($nt($k[--$j])) { //#2786
            $j--; //#2786
            $k[$j++] = 'bwipp.GS1badCSET64character#2786'; //#2786
            $k[$j++] = "Invalid CSET 64 character"; //#2786
            $k[$j++] = false; //#2786
            return true; //#2786
        } //#2786
    }; //#2786
    $_.lintkey = function() {
        var _Tj = $k[--$j]; //#2790
        $k[$j++] = _Tj; //#2790
        if (_Tj.length < 2) { //#2790
            $j -= 2; //#2790
            $k[$j++] = 'bwipp.GS1keyTooShort#2790'; //#2790
            $k[$j++] = "Key is too short"; //#2790
            $k[$j++] = false; //#2790
            return true; //#2790
        } //#2790
        var _Tk = $k[--$j]; //#2791
        var _Tl = $get(_Tk, 0); //#2791
        var _Tm = $get(_Tk, 1); //#2792
        if (((_Tl < 48) || (_Tl > 57)) || ((_Tm < 48) || (_Tm > 57))) { //#2794
            $j--; //#2793
            $k[$j++] = 'bwipp.GS1badGCP#2793'; //#2793
            $k[$j++] = "Non-numeric company prefix"; //#2793
            $k[$j++] = false; //#2793
            return true; //#2793
        } //#2793
    }; //#2793
    $_.lintkeyoff1 = function() {
        var _Tn = $k[--$j]; //#2798
        $k[$j++] = _Tn; //#2798
        if (_Tn.length < 1) { //#2798
            $j -= 2; //#2798
            $k[$j++] = 'bwipp.GS1valueTooShortForOffsetKey#2798'; //#2798
            $k[$j++] = "Value is too short for an offset key"; //#2798
            $k[$j++] = false; //#2798
            return true; //#2798
        } //#2798
        var _To = $k[--$j]; //#2799
        $k[$j++] = $geti(_To, 1, _To.length - 1); //#2799
        $_.lintkey(); //#2799
    }; //#2799
    $_.lintimporteridx = function() {
        $search("-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", $k[--$j]); //#2804
        if ($nt($k[--$j])) { //#2804
            $j -= 2; //#2804
            $k[$j++] = 'bwipp.GS1badImporterIndex#2804'; //#2804
            $k[$j++] = "Invalid importer index"; //#2804
            $k[$j++] = false; //#2804
            return true; //#2804
        } //#2804
        $j -= 3; //#2805
    }; //#2805
    $_.lintcsum = function() {
        $k[$j++] = Infinity; //#2809
        var _Ts = $k[--$j]; //#2809
        var _Tt = $k[--$j]; //#2809
        var _Tu = ((_Tt.length % 2) == 0) ? 3 : 1; //#2810
        $k[$j++] = _Ts; //#2811
        $k[$j++] = _Tu; //#2811
        $forall(_Tt, function() { //#2811
            var _Tv = $k[--$j]; //#2811
            var _Tw = $k[--$j]; //#2811
            $k[$j++] = $f(_Tv - 48) * _Tw; //#2811
            $k[$j++] = $f(4 - _Tw); //#2811
        }); //#2811
        $j--; //#2811
        var _Tx = $counttomark() + 1; //#2812
        $k[$j++] = 0; //#2812
        for (var _Ty = 0, _Tz = _Tx - 1; _Ty < _Tz; _Ty++) { //#2812
            var _U0 = $k[--$j]; //#2812
            var _U1 = $k[--$j]; //#2812
            $k[$j++] = $f(_U1 + _U0); //#2812
        } //#2812
        var _U2 = $k[--$j]; //#2812
        var _U3 = $k[--$j]; //#2812
        $k[$j++] = _U2; //#2812
        $k[$j++] = _U3; //#2812
        $j--; //#2812
        if (($k[--$j] % 10) != 0) { //#2813
            $j--; //#2813
            $k[$j++] = 'bwipp.GS1badChecksum#2813'; //#2813
            $k[$j++] = "Bad checksum"; //#2813
            $k[$j++] = false; //#2813
            return true; //#2813
        } //#2813
    }; //#2813
    $_.lintcsumalpha = function() {
        var _U5 = $k[--$j]; //#2817
        $k[$j++] = _U5; //#2817
        if (_U5.length < 2) { //#2817
            $j -= 2; //#2817
            $k[$j++] = 'bwipp.GS1alphaTooShort#2817'; //#2817
            $k[$j++] = "Alphanumeric string is too short to check"; //#2817
            $k[$j++] = false; //#2817
            return true; //#2817
        } //#2817
        var _U6 = $k[--$j]; //#2818
        $k[$j++] = _U6; //#2820
        $k[$j++] = _U6.length - 2; //#2820
        $k[$j++] = $geti(_U6, 0, _U6.length - 2); //#2820
        $k[$j++] = Infinity; //#2820
        var _U8 = $k[--$j]; //#2820
        var _U9 = $k[--$j]; //#2820
        $k[$j++] = _U8; //#2822
        $forall(_U9, function() { //#2822
            var _UA = $k[--$j]; //#2821
            var _UC = $get($_.cset82, _UA) !== undefined; //#2821
            $k[$j++] = _UA; //#2821
            if (_UC) { //#2821
                var _UF = $get($_.cset82, $k[--$j]); //#2821
                $k[$j++] = _UF; //#2821
            } else { //#2821
                $k[$j++] = -1; //#2821
                return true; //#2821
            } //#2821
        }); //#2821
        var _UG = $k[--$j]; //#2823
        $k[$j++] = _UG; //#2823
        if (_UG == -1) { //#2823
            $cleartomark(); //#2823
            $j -= 3; //#2823
            $k[$j++] = 'bwipp.GS1UnknownCSET82Character#2823'; //#2823
            $k[$j++] = "Unknown CSET 82 character"; //#2823
            $k[$j++] = false; //#2823
            return true; //#2823
        } //#2823
        $astore($a($counttomark())); //#2824
        var _UJ = $k[--$j]; //#2824
        var _UK = $k[--$j]; //#2824
        $k[$j++] = _UJ; //#2824
        $k[$j++] = _UK; //#2824
        $j--; //#2824
        $r(3, 1); //#2825
        var _UL = $k[--$j]; //#2826
        var _UN = $geti($k[--$j], _UL, 2); //#2826
        $k[$j++] = _UN; //#2826
        $k[$j++] = Infinity; //#2826
        var _UO = $k[--$j]; //#2826
        var _UP = $k[--$j]; //#2826
        $k[$j++] = _UO; //#2828
        $forall(_UP, function() { //#2828
            var _UQ = $k[--$j]; //#2827
            var _US = $get($_.cset32, _UQ) !== undefined; //#2827
            $k[$j++] = _UQ; //#2827
            if (_US) { //#2827
                var _UV = $get($_.cset32, $k[--$j]); //#2827
                $k[$j++] = _UV; //#2827
            } else { //#2827
                $k[$j++] = -1; //#2827
                return true; //#2827
            } //#2827
        }); //#2827
        var _UW = $k[--$j]; //#2829
        $k[$j++] = _UW; //#2829
        if (_UW == -1) { //#2829
            $cleartomark(); //#2829
            $j -= 2; //#2829
            $k[$j++] = 'bwipp.GS1UnknownCSET32Character#2829'; //#2829
            $k[$j++] = "Unknown CSET 32 character"; //#2829
            $k[$j++] = false; //#2829
            return true; //#2829
        } //#2829
        $astore($a($counttomark())); //#2830
        var _UZ = $k[--$j]; //#2830
        var _Ua = $k[--$j]; //#2830
        $k[$j++] = _UZ; //#2830
        $k[$j++] = _Ua; //#2830
        $j--; //#2830
        var _Ub = $k[--$j]; //#2831
        var _Ue = $k[--$j]; //#2831
        var _Uf = $a([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83]); //#2832
        var _Ug = _Ue.length; //#2834
        $k[$j++] = $f(($get(_Ub, 0) << 5) + $get(_Ub, 1)); //#2834
        $k[$j++] = _Ue; //#2834
        $k[$j++] = _Uf; //#2834
        $k[$j++] = _Ug; //#2834
        if (_Ug > _Uf.length) { //#2834
            $j -= 5; //#2834
            $k[$j++] = 'bwipp.GS1alphaTooLong#2834'; //#2834
            $k[$j++] = "Alphanumeric string is too long to check"; //#2834
            $k[$j++] = false; //#2834
            return true; //#2834
        } //#2834
        var _Uh = $k[--$j]; //#2835
        var _Uj = $geti($k[--$j], 0, _Uh); //#2835
        for (var _Uk = 0, _Ul = _Uj.length; _Uk < _Ul; _Uk++) { //#2835
            var _Un = $k[--$j]; //#2835
            $k[$j++] = $get(_Uj, _Uk); //#2835
            $k[$j++] = _Un; //#2835
        } //#2835
        var _Uo = $k[--$j]; //#2836
        $k[$j++] = 0; //#2836
        $forall(_Uo, function() { //#2836
            $r(3, -1); //#2836
            var _Up = $k[--$j]; //#2836
            var _Uq = $k[--$j]; //#2836
            var _Ur = $k[--$j]; //#2836
            $k[$j++] = $f(_Ur + (_Up * _Uq)); //#2836
        }); //#2836
        var _Us = $k[--$j]; //#2836
        if ($k[--$j] != (_Us % 1021)) { //#2837
            $j--; //#2837
            $k[$j++] = 'bwipp.GS1badAlphaCheckCharacters#2837'; //#2837
            $k[$j++] = "Bad alphanumeric check characters"; //#2837
            $k[$j++] = false; //#2837
            return true; //#2837
        } //#2837
    }; //#2837
    if (!bwipp_gs1process.__2861__) { //#2861
        $_ = Object.create($_); //#2861
        $k[$j++] = Infinity; //#2841
        var _Uu = $a(['004', '008', '010', '012', '016', '020', '024', '028', '031', '032', '036', '040', '044', '048', '050', '051', '052', '056', '060', '064', '068', '070', '072', '074', '076', '084', '086', '090', '092', '096', '100', '104', '108', '112', '116', '120', '124', '132', '136', '140', '144', '148', '152', '156', '158', '162', '166', '170', '174', '175', '178', '180', '184', '188', '191', '192', '196', '203', '204', '208', '212', '214', '218', '222', '226', '231', '232', '233', '234', '238', '239', '242', '246', '248', '250', '254', '258', '260', '262', '266', '268', '270', '275', '276', '288', '292', '296', '300', '304', '308', '312', '316', '320', '324', '328', '332', '334', '336', '340', '344', '348', '352', '356', '360', '364', '368', '372', '376', '380', '384', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '428', '430', '434', '438', '440', '442', '446', '450', '454', '458', '462', '466', '470', '474', '478', '480', '484', '492', '496', '498', '499', '500', '504', '508', '512', '516', '520', '524', '528', '531', '533', '534', '535', '540', '548', '554', '558', '562', '566', '570', '574', '578', '580', '581', '583', '584', '585', '586', '591', '598', '600', '604', '608', '612', '616', '620', '624', '626', '630', '634', '638', '642', '643', '646', '652', '654', '659', '660', '662', '663', '666', '670', '674', '678', '682', '686', '688', '690', '694', '702', '703', '704', '705', '706', '710', '716', '724', '728', '729', '732', '740', '744', '748', '752', '756', '760', '762', '764', '768', '772', '776', '780', '784', '788', '792', '795', '796', '798', '800', '804', '807', '818', '826', '831', '832', '833', '834', '840', '850', '854', '858', '860', '862', '876', '882', '887', '894']); //#2859
        for (var _Uv = 0, _Uw = _Uu.length; _Uv < _Uw; _Uv++) { //#2860
            var _Ux = $get(_Uu, _Uv); //#2860
            $k[$j++] = _Ux; //#2860
            $k[$j++] = _Ux; //#2860
        } //#2860
        $_.iso3166 = $d(); //#2860
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2860
        bwipp_gs1process.__2861__ = 1; //#2860
        $_ = Object.getPrototypeOf($_); //#2860
    } //#2860
    $_.lintiso3166 = function() {
        var _V2 = $get($_.iso3166, $k[--$j]) !== undefined; //#2864
        if (!_V2) { //#2864
            $j--; //#2864
            $k[$j++] = 'bwipp.GS1UnknownCountry#2864'; //#2864
            $k[$j++] = "Unknown country code"; //#2864
            $k[$j++] = false; //#2864
            return true; //#2864
        } //#2864
    }; //#2864
    $_.lintiso3166999 = function() {
        var _V3 = $k[--$j]; //#2868
        $k[$j++] = _V3; //#2872
        if ($ne(_V3, '999')) { //#2871
            var _V6 = $get($_.iso3166, $k[--$j]) !== undefined; //#2869
            if (!_V6) { //#2869
                $j--; //#2869
                $k[$j++] = 'bwipp.GS1UnknownCountryOr999#2869'; //#2869
                $k[$j++] = "Unknown country code or not 999"; //#2869
                $k[$j++] = false; //#2869
                return true; //#2869
            } //#2869
        } else { //#2871
            $j--; //#2871
        } //#2871
    }; //#2871
    if (!bwipp_gs1process.__2902__) { //#2902
        $_ = Object.create($_); //#2902
        $k[$j++] = Infinity; //#2876
        var _V7 = $a(['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']); //#2900
        for (var _V8 = 0, _V9 = _V7.length; _V8 < _V9; _V8++) { //#2901
            var _VA = $get(_V7, _V8); //#2901
            $k[$j++] = _VA; //#2901
            $k[$j++] = _VA; //#2901
        } //#2901
        $_.iso3166alpha2 = $d(); //#2901
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2901
        bwipp_gs1process.__2902__ = 1; //#2901
        $_ = Object.getPrototypeOf($_); //#2901
    } //#2901
    $_.lintiso3166alpha2 = function() {
        var _VF = $get($_.iso3166alpha2, $k[--$j]) !== undefined; //#2905
        if (!_VF) { //#2905
            $j--; //#2905
            $k[$j++] = 'bwipp.GS1UnknownCountryAlpha#2905'; //#2905
            $k[$j++] = "Unknown country alpha code"; //#2905
            $k[$j++] = false; //#2905
            return true; //#2905
        } //#2905
    }; //#2905
    if (!bwipp_gs1process.__2933__) { //#2933
        $_ = Object.create($_); //#2933
        $k[$j++] = Infinity; //#2909
        var _VG = $a(['008', '012', '032', '036', '044', '048', '050', '051', '052', '060', '064', '068', '072', '084', '090', '096', '104', '108', '116', '124', '132', '136', '144', '152', '156', '170', '174', '188', '191', '192', '203', '208', '214', '222', '230', '232', '238', '242', '262', '270', '292', '320', '324', '328', '332', '340', '344', '348', '352', '356', '360', '364', '368', '376', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '430', '434', '446', '454', '458', '462', '480', '484', '496', '498', '504', '512', '516', '524', '532', '533', '548', '554', '558', '566', '578', '586', '590', '598', '600', '604', '608', '634', '643', '646', '654', '682', '690', '694', '702', '704', '706', '710', '728', '748', '752', '756', '760', '764', '776', '780', '784', '788', '800', '807', '818', '826', '834', '840', '858', '860', '882', '886', '901', '925', '927', '928', '929', '930', '931', '932', '933', '934', '936', '938', '940', '941', '943', '944', '946', '947', '948', '949', '950', '951', '952', '953', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '967', '968', '969', '970', '971', '972', '973', '975', '976', '977', '978', '979', '980', '981', '984', '985', '986', '990', '994', '997', '999']); //#2931
        for (var _VH = 0, _VI = _VG.length; _VH < _VI; _VH++) { //#2932
            var _VJ = $get(_VG, _VH); //#2932
            $k[$j++] = _VJ; //#2932
            $k[$j++] = _VJ; //#2932
        } //#2932
        $_.iso4217 = $d(); //#2932
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#2932
        bwipp_gs1process.__2933__ = 1; //#2932
        $_ = Object.getPrototypeOf($_); //#2932
    } //#2932
    $_.lintiso4217 = function() {
        var _VO = $get($_.iso4217, $k[--$j]) !== undefined; //#2936
        if (!_VO) { //#2936
            $j--; //#2936
            $k[$j++] = 'bwipp.GS1UnknownCurrency#2936'; //#2936
            $k[$j++] = "Unknown currency code"; //#2936
            $k[$j++] = false; //#2936
            return true; //#2936
        } //#2936
    }; //#2936
    $_.lintiso5218 = function() {
        var _VP = $k[--$j]; //#2940
        if ($ne(_VP, "0") && ($ne(_VP, "1") && ($ne(_VP, "2") && $ne(_VP, "9")))) { //#2942
            $j--; //#2941
            $k[$j++] = 'bwipp.GS1biologicalSexCode#2941'; //#2941
            $k[$j++] = "Invalid biological sex code"; //#2941
            $k[$j++] = false; //#2941
            return true; //#2941
        } //#2941
    }; //#2941
    $_.lintiban = function() {
        var _VQ = $k[--$j]; //#2946
        $k[$j++] = _VQ; //#2946
        if (_VQ.length <= 4) { //#2946
            $j -= 2; //#2946
            $k[$j++] = 'bwipp.GS1tooShort#2946'; //#2946
            $k[$j++] = "IBAN too short"; //#2946
            $k[$j++] = false; //#2946
            return true; //#2946
        } //#2946
        var _VR = $k[--$j]; //#2947
        $k[$j++] = _VR; //#2952
        $k[$j++] = true; //#2952
        $forall(_VR, function() { //#2952
            var _VS = $s(1); //#2948
            $k[$j++] = _VS; //#2948
            $k[$j++] = _VS; //#2948
            $k[$j++] = 0; //#2948
            $r(4, -1); //#2948
            var _VT = $k[--$j]; //#2948
            var _VU = $k[--$j]; //#2948
            $put($k[--$j], _VU, _VT); //#2948
            $search("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", $k[--$j]); //#2950
            if ($nt($k[--$j])) { //#2950
                $j -= 2; //#2950
                $k[$j++] = false; //#2950
                return true; //#2950
            } //#2950
            $j -= 3; //#2951
        }); //#2951
        if ($nt($k[--$j])) { //#2953
            $j--; //#2953
            $k[$j++] = 'bwipp.GS1badIBANcharacter#2953'; //#2953
            $k[$j++] = "Invalid IBAN character"; //#2953
            $k[$j++] = false; //#2953
            return true; //#2953
        } //#2953
        var _VZ = $k[--$j]; //#2954
        $k[$j++] = _VZ; //#2954
        $k[$j++] = _VZ; //#2954
        $k[$j++] = Infinity; //#2954
        var _Va = $k[--$j]; //#2954
        var _Vb = $k[--$j]; //#2954
        $k[$j++] = _Va; //#2954
        $k[$j++] = _Vb; //#2954
        $k[$j++] = Infinity; //#2954
        var _Vc = $k[--$j]; //#2954
        var _Vd = $k[--$j]; //#2954
        $k[$j++] = _Vc; //#2954
        $forall(_Vd); //#2954
        $r($counttomark(), -4); //#2954
        $astore($a($counttomark())); //#2954
        var _Vh = $k[--$j]; //#2954
        var _Vi = $k[--$j]; //#2954
        $k[$j++] = _Vh; //#2954
        $k[$j++] = _Vi; //#2954
        $j--; //#2954
        $forall($k[--$j], function() { //#2956
            var _Vl = $f($k[--$j] - 48); //#2955
            $k[$j++] = _Vl; //#2955
            if (_Vl > 9) { //#2955
                var _Vn = $f($k[--$j] - 7); //#2955
                $k[$j++] = ~~(_Vn / 10); //#2955
                $k[$j++] = _Vn % 10; //#2955
            } //#2955
        }); //#2955
        $astore($a($counttomark())); //#2956
        var _Vq = $k[--$j]; //#2956
        var _Vr = $k[--$j]; //#2956
        $k[$j++] = _Vq; //#2956
        $k[$j++] = _Vr; //#2956
        $j--; //#2956
        var _Vs = $k[--$j]; //#2957
        $k[$j++] = 0; //#2957
        $forall(_Vs, function() { //#2957
            var _Vt = $k[--$j]; //#2957
            var _Vu = $k[--$j]; //#2957
            $k[$j++] = ($f(_Vt + (_Vu * 10))) % 97; //#2957
        }); //#2957
        if ($k[--$j] != 1) { //#2958
            $j -= 2; //#2958
            $k[$j++] = 'bwipp.GS1badIBANchecksum#2958'; //#2958
            $k[$j++] = "IBAN checksum incorrect"; //#2958
            $k[$j++] = false; //#2958
            return true; //#2958
        } //#2958
        var _Vx = $geti($k[--$j], 0, 2); //#2959
        $k[$j++] = _Vx; //#2959
        $_.lintiso3166alpha2(); //#2959
    }; //#2959
    $_.lintzero = function() {
        if ($ne($k[--$j], "0")) { //#2963
            $j--; //#2963
            $k[$j++] = 'bwipp.GS1zeroRequired#2963'; //#2963
            $k[$j++] = "Zero is required"; //#2963
            $k[$j++] = false; //#2963
            return true; //#2963
        } //#2963
    }; //#2963
    $_.lintnonzero = function() {
        var _Vz = $k[--$j]; //#2967
        $k[$j++] = false; //#2967
        $forall(_Vz, function() { //#2967
            if ($k[--$j] != 48) { //#2967
                $j--; //#2967
                $k[$j++] = true; //#2967
            } //#2967
        }); //#2967
        if ($nt($k[--$j])) { //#2968
            $j--; //#2968
            $k[$j++] = 'bwipp.GS1zeroNotPermitted#2968'; //#2968
            $k[$j++] = "Zero not permitted"; //#2968
            $k[$j++] = false; //#2968
            return true; //#2968
        } //#2968
    }; //#2968
    $_.lintnozeroprefix = function() {
        var _W2 = $k[--$j]; //#2972
        if ((_W2.length > 1) && ($get(_W2, 0) == 48)) { //#2974
            $j--; //#2973
            $k[$j++] = 'bwipp.GS1badZeroPrefix#2973'; //#2973
            $k[$j++] = "Zero prefix is not permitted"; //#2973
            $k[$j++] = false; //#2973
            return true; //#2973
        } //#2973
    }; //#2973
    $_.linthasnondigit = function() {
        var _W4 = $k[--$j]; //#2978
        $k[$j++] = false; //#2978
        $forall(_W4, function() { //#2978
            var _W5 = $k[--$j]; //#2978
            if ((_W5 < 48) || (_W5 > 57)) { //#2978
                $j--; //#2978
                $k[$j++] = true; //#2978
                return true; //#2978
            } //#2978
        }); //#2978
        if ($nt($k[--$j])) { //#2979
            $k[$j++] = 'bwipp.GS1requiresNonDigit#2979'; //#2979
            $k[$j++] = "A non-digit character is required"; //#2979
            $k[$j++] = false; //#2979
            return true; //#2979
        } //#2979
    }; //#2979
    $_.linthyphen = function() {
        if ($ne($k[--$j], "-")) { //#2983
            $j--; //#2983
            $k[$j++] = 'bwipp.GS1hyphenRequired#2983'; //#2983
            $k[$j++] = "A hyphen is required"; //#2983
            $k[$j++] = false; //#2983
            return true; //#2983
        } //#2983
    }; //#2983
    $_.lintyyyymmd0 = function() {
        var _W8 = $k[--$j]; //#2987
        var _WA = $cvi($geti(_W8, 4, 2)); //#2987
        $k[$j++] = _W8; //#2987
        if ((_WA < 1) || (_WA > 12)) { //#2987
            $j--; //#2987
            $k[$j++] = 'bwipp.GS1badMonth#2987'; //#2987
            $k[$j++] = "Invalid month"; //#2987
            $k[$j++] = false; //#2987
            return true; //#2987
        } //#2987
        var _WB = $k[--$j]; //#2988
        var _WD = $cvi($geti(_WB, 0, 4)); //#2988
        $k[$j++] = _WB; //#2989
        $k[$j++] = ((_WD % 400) == 0) || (((_WD % 4) == 0) && ((_WD % 100) != 0)); //#2989
        $k[$j++] = Infinity; //#2989
        $k[$j++] = 31; //#2989
        $r(3, -1); //#2989
        var _WF = $k[--$j] ? 29 : 28; //#2989
        $k[$j++] = _WF; //#2989
        $k[$j++] = 31; //#2989
        $k[$j++] = 30; //#2989
        $k[$j++] = 31; //#2989
        $k[$j++] = 30; //#2989
        $k[$j++] = 31; //#2989
        $k[$j++] = 31; //#2989
        $k[$j++] = 30; //#2989
        $k[$j++] = 31; //#2989
        $k[$j++] = 30; //#2989
        $k[$j++] = 31; //#2989
        var _WG = $a(); //#2989
        var _WH = $k[--$j]; //#2990
        if ($get(_WG, $cvi($geti(_WH, 4, 2)) - 1) < $cvi($geti(_WH, 6, 2))) { //#2991
            $j--; //#2991
            $k[$j++] = 'bwipp.GS1badDay#2991'; //#2991
            $k[$j++] = "Invalid day of month"; //#2991
            $k[$j++] = false; //#2991
            return true; //#2991
        } //#2991
    }; //#2991
    $_.lintyyyymmdd = function() {
        var _WL = $k[--$j]; //#2995
        $k[$j++] = _WL; //#2995
        if (_WL.length != 8) { //#2995
            $j--; //#2995
            $k[$j++] = 'bwipp.GS1badDateLength#2995'; //#2995
            $k[$j++] = "Invalid length for yyyymmdd date"; //#2995
            $k[$j++] = false; //#2995
            return true; //#2995
        } //#2995
        var _WM = $k[--$j]; //#2996
        $k[$j++] = _WM; //#2996
        if ($cvi($geti(_WM, 6, 2)) < 1) { //#2996
            $j--; //#2996
            $k[$j++] = 'bwipp.GS1badDay#2996'; //#2996
            $k[$j++] = "Invalid day of month"; //#2996
            $k[$j++] = false; //#2996
            return true; //#2996
        } //#2996
        $_.lintyyyymmd0(); //#2997
    }; //#2997
    $_.lintyymmd0 = function() {
        var _WO = $k[--$j]; //#3001
        var _WQ = $cvi($geti(_WO, 0, 2)); //#3001
        var _WR = _WQ - 21; //#3002
        $k[$j++] = _WO; //#3002
        $k[$j++] = _WQ; //#3002
        $k[$j++] = _WR; //#3002
        if (_WR >= 51) { //#3002
            $j--; //#3002
            $k[$j++] = "19"; //#3002
        } else { //#3002
            if ($k[--$j] <= -50) { //#3002
                $k[$j++] = "21"; //#3002
            } else { //#3002
                $k[$j++] = "20"; //#3002
            } //#3002
        } //#3002
        var _WT = $k[--$j]; //#3002
        var _WU = $k[--$j]; //#3002
        $k[$j++] = _WT; //#3002
        $k[$j++] = _WU; //#3002
        $j--; //#3002
        var _WV = $s(8); //#3003
        $k[$j++] = _WV; //#3003
        $k[$j++] = _WV; //#3003
        $k[$j++] = 0; //#3003
        $r(4, -1); //#3003
        var _WW = $k[--$j]; //#3003
        var _WX = $k[--$j]; //#3003
        $puti($k[--$j], _WX, _WW); //#3003
        var _WZ = $k[--$j]; //#3003
        $k[$j++] = _WZ; //#3003
        $k[$j++] = _WZ; //#3003
        $k[$j++] = 2; //#3003
        $r(4, -1); //#3003
        var _Wa = $k[--$j]; //#3003
        var _Wb = $k[--$j]; //#3003
        $puti($k[--$j], _Wb, _Wa); //#3003
        $_.lintyyyymmd0(); //#3004
    }; //#3004
    $_.lintyymmdd = function() {
        var _Wd = $k[--$j]; //#3008
        $k[$j++] = _Wd; //#3008
        if (_Wd.length != 6) { //#3008
            $j--; //#3008
            $k[$j++] = 'bwipp.GS1badDateLength#3008'; //#3008
            $k[$j++] = "Invalid length for yymmdd date"; //#3008
            $k[$j++] = false; //#3008
            return true; //#3008
        } //#3008
        var _We = $k[--$j]; //#3009
        $k[$j++] = _We; //#3009
        if ($cvi($geti(_We, 4, 2)) < 1) { //#3009
            $j--; //#3009
            $k[$j++] = 'bwipp.GS1badDay#3009'; //#3009
            $k[$j++] = "Invalid day of month"; //#3009
            $k[$j++] = false; //#3009
            return true; //#3009
        } //#3009
        $_.lintyymmd0(); //#3010
    }; //#3010
    $_.linthh = function() {
        if ($cvi($geti($k[--$j], 0, 2)) > 23) { //#3014
            $j -= 2; //#3014
            $k[$j++] = 'bwipp.GS1badHour#3014'; //#3014
            $k[$j++] = "Invalid hour of day"; //#3014
            $k[$j++] = false; //#3014
            return true; //#3014
        } //#3014
    }; //#3014
    $_.lintmi = function() {
        if ($cvi($geti($k[--$j], 0, 2)) > 59) { //#3018
            $j--; //#3018
            $k[$j++] = 'bwipp.GS1badMinute#3018'; //#3018
            $k[$j++] = "Invalid minute in the hour"; //#3018
            $k[$j++] = false; //#3018
            return true; //#3018
        } //#3018
    }; //#3018
    $_.lintss = function() {
        if ($cvi($geti($k[--$j], 0, 2)) > 59) { //#3022
            $j--; //#3022
            $k[$j++] = 'bwipp.GS1badSecond#3022'; //#3022
            $k[$j++] = "Invalid second in the minute"; //#3022
            $k[$j++] = false; //#3022
            return true; //#3022
        } //#3022
    }; //#3022
    $_.linthhmi = function() {
        var _Wm = $k[--$j]; //#3026
        $k[$j++] = _Wm; //#3026
        if ($cvi($geti(_Wm, 0, 2)) > 23) { //#3026
            $j -= 2; //#3026
            $k[$j++] = 'bwipp.GS1badHour#3026'; //#3026
            $k[$j++] = "Invalid hour of day"; //#3026
            $k[$j++] = false; //#3026
            return true; //#3026
        } //#3026
        if ($cvi($geti($k[--$j], 2, 2)) > 59) { //#3027
            $j--; //#3027
            $k[$j++] = 'bwipp.GS1badMinute#3027'; //#3027
            $k[$j++] = "Invalid minute in the hour"; //#3027
            $k[$j++] = false; //#3027
            return true; //#3027
        } //#3027
    }; //#3027
    $_.lintmmoptss = function() {
        var _Wq = $k[--$j]; //#3031
        var _Wr = _Wq.length; //#3031
        $k[$j++] = _Wq; //#3033
        if ((_Wr != 2) && (_Wr != 4)) { //#3033
            $j--; //#3032
            $k[$j++] = 'bwipp.GS1badTimeLength#3032'; //#3032
            $k[$j++] = "Invalid length for optional minutes and seconds"; //#3032
            $k[$j++] = false; //#3032
            return true; //#3032
        } //#3032
        var _Ws = $k[--$j]; //#3034
        $k[$j++] = _Ws; //#3034
        if ($cvi($geti(_Ws, 0, 2)) > 59) { //#3034
            $j -= 2; //#3034
            $k[$j++] = 'bwipp.GS1badMinute#3034'; //#3034
            $k[$j++] = "Invalid minute in the hour"; //#3034
            $k[$j++] = false; //#3034
            return true; //#3034
        } //#3034
        var _Wu = $k[--$j]; //#3035
        $k[$j++] = _Wu; //#3037
        if (_Wu.length >= 4) { //#3037
            var _Wv = $k[--$j]; //#3036
            $k[$j++] = _Wv; //#3036
            if ($cvi($geti(_Wv, 2, 2)) > 59) { //#3036
                $j -= 2; //#3036
                $k[$j++] = 'bwipp.GS1badSecond#3036'; //#3036
                $k[$j++] = "Invalid second in the minute"; //#3036
                $k[$j++] = false; //#3036
                return true; //#3036
            } //#3036
        } //#3036
        $j--; //#3038
    }; //#3038
    $_.lintyesno = function() {
        var _Wx = $k[--$j]; //#3042
        if ($ne(_Wx, "0") && $ne(_Wx, "1")) { //#3044
            $j--; //#3043
            $k[$j++] = 'bwipp.GS1badBoolean#3043'; //#3043
            $k[$j++] = "Neither 0 nor 1 for yes or no"; //#3043
            $k[$j++] = false; //#3043
            return true; //#3043
        } //#3043
    }; //#3043
    $_.lintwinding = function() {
        var _Wy = $k[--$j]; //#3048
        if ($ne(_Wy, "0") && ($ne(_Wy, "1") && $ne(_Wy, "9"))) { //#3050
            $j--; //#3049
            $k[$j++] = 'bwipp.GS1badWinding#3049'; //#3049
            $k[$j++] = "Invalid winding direction"; //#3049
            $k[$j++] = false; //#3049
            return true; //#3049
        } //#3049
    }; //#3049
    $_.lintpieceoftotal = function() {
        var _Wz = $k[--$j]; //#3054
        $k[$j++] = _Wz; //#3054
        if ((_Wz.length % 2) != 0) { //#3054
            $j -= 2; //#3054
            $k[$j++] = 'bwipp.GS1badPieceTotalLength#3054'; //#3054
            $k[$j++] = "Invalid piece/total length"; //#3054
            $k[$j++] = false; //#3054
            return true; //#3054
        } //#3054
        var _X0 = $k[--$j]; //#3055
        var _X2 = $cvi($geti(_X0, 0, ~~(_X0.length / 2))); //#3056
        $k[$j++] = _X0; //#3056
        $k[$j++] = _X2; //#3056
        if (_X2 == 0) { //#3056
            $j -= 3; //#3056
            $k[$j++] = 'bwipp.GS1badPieceNumber#3056'; //#3056
            $k[$j++] = "Invalid piece number"; //#3056
            $k[$j++] = false; //#3056
            return true; //#3056
        } //#3056
        var _X3 = $k[--$j]; //#3057
        var _X4 = $k[--$j]; //#3057
        var _X5 = ~~(_X4.length / 2); //#3057
        var _X7 = $cvi($geti(_X4, _X5, _X5)); //#3058
        $k[$j++] = _X3; //#3058
        $k[$j++] = _X7; //#3058
        if (_X7 == 0) { //#3058
            $j -= 3; //#3058
            $k[$j++] = 'bwipp.GS1badPieceTotal#3058'; //#3058
            $k[$j++] = "Invalid total number"; //#3058
            $k[$j++] = false; //#3058
            return true; //#3058
        } //#3058
        var _X8 = $k[--$j]; //#3059
        if ($gt($k[--$j], _X8)) { //#3059
            $j--; //#3059
            $k[$j++] = 'bwipp.GS1pieceExceedsTotal#3059'; //#3059
            $k[$j++] = "Piece number exceeds total"; //#3059
            $k[$j++] = false; //#3059
            return true; //#3059
        } //#3059
    }; //#3059
    $_.lintposinseqslash = function() {
        $search($k[--$j], "/"); //#3063
        if ($nt($k[--$j])) { //#3065
            $j--; //#3064
            $k[$j++] = 'bwipp.invalidPosInSeqFormat#3064'; //#3064
            $k[$j++] = "Invalid <pos>/<end> format"; //#3064
            $k[$j++] = false; //#3064
            return true; //#3064
        } //#3064
        var _XC = $k[--$j]; //#3066
        var _XD = $k[--$j]; //#3066
        $k[$j++] = _XC; //#3066
        $k[$j++] = _XD; //#3066
        $j--; //#3066
        var _XE = $k[--$j]; //#3067
        $k[$j++] = _XE; //#3069
        if (_XE.length == 0) { //#3069
            $j -= 2; //#3068
            $k[$j++] = 'bwipp.invalidPosInSeqFormat#3068'; //#3068
            $k[$j++] = "Invalid <pos>/<end> format"; //#3068
            $k[$j++] = false; //#3068
            return true; //#3068
        } //#3068
        var _XF = $k[--$j]; //#3070
        var _XG = $k[--$j]; //#3070
        $k[$j++] = _XG; //#3072
        $k[$j++] = _XF; //#3072
        if (_XG.length == 0) { //#3072
            $j -= 2; //#3071
            $k[$j++] = 'bwipp.invalidPosInSeqFormat#3071'; //#3071
            $k[$j++] = "Invalid <pos>/<end> format"; //#3071
            $k[$j++] = false; //#3071
            return true; //#3071
        } //#3071
        var _XH = $k[--$j]; //#3073
        $k[$j++] = _XH; //#3075
        $k[$j++] = true; //#3075
        $forall(_XH, function() { //#3075
            var _XI = $k[--$j]; //#3074
            if ((_XI < 48) || (_XI > 57)) { //#3074
                $j--; //#3074
                $k[$j++] = false; //#3074
                return true; //#3074
            } //#3074
        }); //#3074
        if ($nt($k[--$j])) { //#3076
            $j -= 2; //#3076
            $k[$j++] = 'bwipp.positionNotNumeric#3076'; //#3076
            $k[$j++] = "Position is not numeric"; //#3076
            $k[$j++] = false; //#3076
            return true; //#3076
        } //#3076
        var _XK = $k[--$j]; //#3077
        var _XL = $k[--$j]; //#3077
        $k[$j++] = _XL; //#3079
        $k[$j++] = _XK; //#3079
        $k[$j++] = true; //#3079
        $forall(_XL, function() { //#3079
            var _XM = $k[--$j]; //#3078
            if ((_XM < 48) || (_XM > 57)) { //#3078
                $j--; //#3078
                $k[$j++] = false; //#3078
                return true; //#3078
            } //#3078
        }); //#3078
        if ($nt($k[--$j])) { //#3080
            $j -= 2; //#3080
            $k[$j++] = 'bwipp.endNotNumeric#3080'; //#3080
            $k[$j++] = "End is not numeric"; //#3080
            $k[$j++] = false; //#3080
            return true; //#3080
        } //#3080
        var _XO = $k[--$j]; //#3081
        $k[$j++] = _XO; //#3081
        if ($get(_XO, 0) == 48) { //#3081
            $j -= 2; //#3081
            $k[$j++] = 'bwipp.positionZeroPrefix#3081'; //#3081
            $k[$j++] = "Position cannot have zero prefix"; //#3081
            $k[$j++] = false; //#3081
            return true; //#3081
        } //#3081
        var _XQ = $k[--$j]; //#3082
        var _XR = $k[--$j]; //#3082
        $k[$j++] = _XR; //#3082
        $k[$j++] = _XQ; //#3082
        if ($get(_XR, 0) == 48) { //#3082
            $j -= 2; //#3082
            $k[$j++] = 'bwipp.endZeroPrefix#3082'; //#3082
            $k[$j++] = "End cannot have zero prefix"; //#3082
            $k[$j++] = false; //#3082
            return true; //#3082
        } //#3082
        var _XT = $k[--$j]; //#3083
        if ($cvi($k[--$j]) < $cvi(_XT)) { //#3084
            $k[$j++] = 'bwipp.positionExceedsEnd#3084'; //#3084
            $k[$j++] = "Position exceeds end"; //#3084
            $k[$j++] = false; //#3084
            return true; //#3084
        } //#3084
    }; //#3084
    $_.lintpcenc = function() {
        for (;;) { //#3098
            $search($k[--$j], "%"); //#3089
            if ($nt($k[--$j])) { //#3089
                $j--; //#3089
                break; //#3089
            } //#3089
            $j -= 2; //#3090
            var _XX = $k[--$j]; //#3090
            $k[$j++] = _XX; //#3090
            if (_XX.length < 2) { //#3090
                $j -= 2; //#3090
                $k[$j++] = 'bwipp.GS1badPercentEscape#3090'; //#3090
                $k[$j++] = "Invalid % escape"; //#3090
                $k[$j++] = false; //#3090
                break; //#3090
            } //#3090
            var _XY = $k[--$j]; //#3091
            var _XZ = $geti(_XY, 0, 2); //#3091
            $k[$j++] = _XY; //#3096
            $k[$j++] = true; //#3096
            for (var _Xa = 0, _Xb = _XZ.length; _Xa < _Xb; _Xa++) { //#3096
                var _Xd = $s(1); //#3092
                $put(_Xd, 0, $get(_XZ, _Xa)); //#3092
                $search("0123456789ABCDEFabcdef", _Xd); //#3094
                if ($nt($k[--$j])) { //#3094
                    $j -= 2; //#3094
                    $k[$j++] = false; //#3094
                    break; //#3094
                } //#3094
                $j -= 3; //#3095
            } //#3095
            if ($nt($k[--$j])) { //#3097
                $j -= 2; //#3097
                $k[$j++] = 'bwipp.GS1badPercentChars#3097'; //#3097
                $k[$j++] = "Invalid characters for percent encoding"; //#3097
                $k[$j++] = false; //#3097
                break; //#3097
            } //#3097
        } //#3097
    }; //#3097
    $_.lintcouponcode = function() {
        var _Xg = $k[--$j]; //#3102
        $k[$j++] = _Xg; //#3104
        $k[$j++] = true; //#3104
        $forall(_Xg, function() { //#3104
            var _Xh = $k[--$j]; //#3103
            if ((_Xh < 48) || (_Xh > 57)) { //#3103
                $j--; //#3103
                $k[$j++] = false; //#3103
                return true; //#3103
            } //#3103
        }); //#3103
        if ($nt($k[--$j])) { //#3105
            $j -= 2; //#3105
            $k[$j++] = 'bwipp.GS1couponNotNumeric#3105'; //#3105
            $k[$j++] = "Coupon not numeric"; //#3105
            $k[$j++] = false; //#3105
            return true; //#3105
        } //#3105
        var _Xj = $k[--$j]; //#3108
        $k[$j++] = _Xj; //#3110
        if (_Xj.length < 1) { //#3110
            $j -= 2; //#3109
            $k[$j++] = 'bwipp.GS1couponTooShortGCPVLI#3109'; //#3109
            $k[$j++] = "Coupon too short: Missing GCP VLI"; //#3109
            $k[$j++] = false; //#3109
            return true; //#3109
        } //#3109
        var _Xk = $k[--$j]; //#3111
        var _Xm = $cvi($geti(_Xk, 0, 1)); //#3111
        $k[$j++] = _Xk; //#3113
        $k[$j++] = _Xm; //#3113
        if (_Xm > 6) { //#3113
            $j -= 2; //#3112
            $k[$j++] = 'bwipp.GS1couponBadGCPVLI#3112'; //#3112
            $k[$j++] = "Coupon GCP length indicator must be 0-6"; //#3112
            $k[$j++] = false; //#3112
            return true; //#3112
        } //#3112
        var _Xn = $k[--$j]; //#3114
        var _Xo = $k[--$j]; //#3115
        $k[$j++] = _Xo; //#3117
        $k[$j++] = $f($f(_Xn + 6) + 1); //#3117
        if (($f($f(_Xn + 6) + 1)) > _Xo.length) { //#3117
            $j -= 3; //#3116
            $k[$j++] = 'bwipp.GS1couponTooShortGCP#3116'; //#3116
            $k[$j++] = "Coupon too short: GCP truncated"; //#3116
            $k[$j++] = false; //#3116
            return true; //#3116
        } //#3116
        var _Xp = $k[--$j]; //#3118
        var _Xq = $k[--$j]; //#3118
        var _Xr = $geti(_Xq, _Xp, $f(_Xq.length - _Xp)); //#3118
        $k[$j++] = _Xr; //#3123
        if (_Xr.length < 6) { //#3123
            $j -= 2; //#3122
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode#3122'; //#3122
            $k[$j++] = "Coupon too short: Offer Code truncated"; //#3122
            $k[$j++] = false; //#3122
            return true; //#3122
        } //#3122
        var _Xs = $k[--$j]; //#3124
        var _Xt = $geti(_Xs, 6, _Xs.length - 6); //#3124
        $k[$j++] = _Xt; //#3129
        if (_Xt.length < 1) { //#3129
            $j -= 2; //#3128
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValueVLI#3128'; //#3128
            $k[$j++] = "Coupon too short: Missing Save Value VLI"; //#3128
            $k[$j++] = false; //#3128
            return true; //#3128
        } //#3128
        var _Xu = $k[--$j]; //#3130
        var _Xw = $cvi($geti(_Xu, 0, 1)); //#3130
        $k[$j++] = _Xu; //#3132
        $k[$j++] = _Xw; //#3132
        if ((_Xw < 1) || (_Xw > 5)) { //#3132
            $j -= 2; //#3131
            $k[$j++] = 'bwipp.GS1couponBadSaveValueVLI#3131'; //#3131
            $k[$j++] = "Coupon Save Value length indicator must be 1-5"; //#3131
            $k[$j++] = false; //#3131
            return true; //#3131
        } //#3131
        var _Xx = $k[--$j]; //#3133
        var _Xy = $k[--$j]; //#3134
        $k[$j++] = _Xy; //#3136
        $k[$j++] = $f(_Xx + 1); //#3136
        if ($f(_Xx + 1) > _Xy.length) { //#3136
            $j -= 3; //#3135
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValue#3135'; //#3135
            $k[$j++] = "Coupon too short: Save Value truncated"; //#3135
            $k[$j++] = false; //#3135
            return true; //#3135
        } //#3135
        var _Xz = $k[--$j]; //#3137
        var _Y0 = $k[--$j]; //#3137
        var _Y1 = $geti(_Y0, _Xz, $f(_Y0.length - _Xz)); //#3137
        $k[$j++] = _Y1; //#3142
        if (_Y1.length < 1) { //#3142
            $j -= 2; //#3141
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementVLI#3141'; //#3141
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement VLI"; //#3141
            $k[$j++] = false; //#3141
            return true; //#3141
        } //#3141
        var _Y2 = $k[--$j]; //#3143
        var _Y4 = $cvi($geti(_Y2, 0, 1)); //#3143
        $k[$j++] = _Y2; //#3145
        $k[$j++] = _Y4; //#3145
        if ((_Y4 < 1) || (_Y4 > 5)) { //#3145
            $j -= 2; //#3144
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementVLI#3144'; //#3144
            $k[$j++] = "Coupon 1st Purchase Requirement length indicator must be 1-5"; //#3144
            $k[$j++] = false; //#3144
            return true; //#3144
        } //#3144
        var _Y5 = $k[--$j]; //#3146
        var _Y6 = $k[--$j]; //#3147
        $k[$j++] = _Y6; //#3149
        $k[$j++] = $f(_Y5 + 1); //#3149
        if ($f(_Y5 + 1) > _Y6.length) { //#3149
            $j -= 3; //#3148
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirement#3148'; //#3148
            $k[$j++] = "Coupon too short: 1st Purchase Requirement truncated"; //#3148
            $k[$j++] = false; //#3148
            return true; //#3148
        } //#3148
        var _Y7 = $k[--$j]; //#3150
        var _Y8 = $k[--$j]; //#3150
        var _Y9 = $geti(_Y8, _Y7, $f(_Y8.length - _Y7)); //#3150
        $k[$j++] = _Y9; //#3155
        if (_Y9.length < 1) { //#3155
            $j -= 2; //#3154
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementCode#3154'; //#3154
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement Code"; //#3154
            $k[$j++] = false; //#3154
            return true; //#3154
        } //#3154
        var _YA = $k[--$j]; //#3156
        var _YC = $cvi($geti(_YA, 0, 1)); //#3156
        $k[$j++] = _YA; //#3158
        if ((_YC > 4) && (_YC != 9)) { //#3158
            $j -= 2; //#3157
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementCode#3157'; //#3157
            $k[$j++] = "Coupon 1st Purchase Requirement Code must be 0-4 or 9"; //#3157
            $k[$j++] = false; //#3157
            return true; //#3157
        } //#3157
        var _YD = $k[--$j]; //#3159
        var _YE = $geti(_YD, 1, _YD.length - 1); //#3159
        $k[$j++] = _YE; //#3164
        if (_YE.length < 3) { //#3164
            $j -= 2; //#3163
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseFamilyCode#3163'; //#3163
            $k[$j++] = "Coupon too short: 1st Purchase Family Code truncated"; //#3163
            $k[$j++] = false; //#3163
            return true; //#3163
        } //#3163
        var _YF = $k[--$j]; //#3165
        var _YG = $geti(_YF, 3, _YF.length - 3); //#3165
        $k[$j++] = _YG; //#3221
        if (_YG.length >= 1) { //#3221
            var _YH = $k[--$j]; //#3168
            $k[$j++] = _YH; //#3221
            if ($cvi($geti(_YH, 0, 1)) == 1) { //#3221
                var _YJ = $k[--$j]; //#3169
                var _YK = $geti(_YJ, 1, _YJ.length - 1); //#3169
                $k[$j++] = _YK; //#3174
                if (_YK.length < 1) { //#3174
                    $j -= 2; //#3173
                    $k[$j++] = 'bwipp.GS1couponTooShortAdditionalPurchaseRulesCode#3173'; //#3173
                    $k[$j++] = "Coupon too short: Missing Additional Purchase Rules Code"; //#3173
                    $k[$j++] = false; //#3173
                    return true; //#3173
                } //#3173
                var _YL = $k[--$j]; //#3175
                $k[$j++] = _YL; //#3177
                if ($cvi($geti(_YL, 0, 1)) > 3) { //#3177
                    $j -= 2; //#3176
                    $k[$j++] = 'bwipp.GS1couponBadAdditionalPurchaseRulesCode#3176'; //#3176
                    $k[$j++] = "Coupon Additional Purchase Rules Code must be 0-3"; //#3176
                    $k[$j++] = false; //#3176
                    return true; //#3176
                } //#3176
                var _YN = $k[--$j]; //#3178
                var _YO = $geti(_YN, 1, _YN.length - 1); //#3178
                $k[$j++] = _YO; //#3183
                if (_YO.length < 1) { //#3183
                    $j -= 2; //#3182
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementVLI#3182'; //#3182
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement VLI"; //#3182
                    $k[$j++] = false; //#3182
                    return true; //#3182
                } //#3182
                var _YP = $k[--$j]; //#3184
                var _YR = $cvi($geti(_YP, 0, 1)); //#3184
                $k[$j++] = _YP; //#3186
                $k[$j++] = _YR; //#3186
                if ((_YR < 1) || (_YR > 5)) { //#3186
                    $j -= 2; //#3185
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementVLI#3185'; //#3185
                    $k[$j++] = "Coupon 2nd Purchase Requirement length indicator must be 1-5"; //#3185
                    $k[$j++] = false; //#3185
                    return true; //#3185
                } //#3185
                var _YS = $k[--$j]; //#3187
                var _YT = $k[--$j]; //#3188
                $k[$j++] = _YT; //#3190
                $k[$j++] = $f(_YS + 1); //#3190
                if ($f(_YS + 1) > _YT.length) { //#3190
                    $j -= 3; //#3189
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirement#3189'; //#3189
                    $k[$j++] = "Coupon too short: 2nd Purchase Requirement truncated"; //#3189
                    $k[$j++] = false; //#3189
                    return true; //#3189
                } //#3189
                var _YU = $k[--$j]; //#3191
                var _YV = $k[--$j]; //#3191
                var _YW = $geti(_YV, _YU, $f(_YV.length - _YU)); //#3191
                $k[$j++] = _YW; //#3196
                if (_YW.length < 1) { //#3196
                    $j -= 2; //#3195
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementCode#3195'; //#3195
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement Code"; //#3195
                    $k[$j++] = false; //#3195
                    return true; //#3195
                } //#3195
                var _YX = $k[--$j]; //#3197
                var _YZ = $cvi($geti(_YX, 0, 1)); //#3197
                $k[$j++] = _YX; //#3199
                if ((_YZ > 4) && (_YZ != 9)) { //#3199
                    $j -= 2; //#3198
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementCode#3198'; //#3198
                    $k[$j++] = "Coupon 2nd Purchase Requirement Code must be 0-4 or 9"; //#3198
                    $k[$j++] = false; //#3198
                    return true; //#3198
                } //#3198
                var _Ya = $k[--$j]; //#3200
                var _Yb = $geti(_Ya, 1, _Ya.length - 1); //#3200
                $k[$j++] = _Yb; //#3205
                if (_Yb.length < 3) { //#3205
                    $j -= 2; //#3204
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseFamilyCode#3204'; //#3204
                    $k[$j++] = "Coupon too short: 2nd Purchase Family Code truncated"; //#3204
                    $k[$j++] = false; //#3204
                    return true; //#3204
                } //#3204
                var _Yc = $k[--$j]; //#3206
                var _Yd = $geti(_Yc, 3, _Yc.length - 3); //#3206
                $k[$j++] = _Yd; //#3211
                if (_Yd.length < 1) { //#3211
                    $j -= 2; //#3210
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCPVLI#3210'; //#3210
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase GCP VLI"; //#3210
                    $k[$j++] = false; //#3210
                    return true; //#3210
                } //#3210
                var _Ye = $k[--$j]; //#3212
                var _Yg = $cvi($geti(_Ye, 0, 1)); //#3212
                $k[$j++] = _Ye; //#3214
                $k[$j++] = _Yg; //#3214
                if ((_Yg > 6) && (_Yg != 9)) { //#3214
                    $j -= 2; //#3213
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseGCPVLI#3213'; //#3213
                    $k[$j++] = "Coupon 2nd Purchase GCP length indicator must be 0-6 or 9"; //#3213
                    $k[$j++] = false; //#3213
                    return true; //#3213
                } //#3213
                var _Yh = $k[--$j]; //#3215
                $k[$j++] = _Yh; //#3215
                if (_Yh != 9) { //#3215
                    var _Yi = $k[--$j]; //#3215
                    $k[$j++] = $f(_Yi + 6); //#3215
                } else { //#3215
                    $j--; //#3215
                    $k[$j++] = 0; //#3215
                } //#3215
                var _Yj = $k[--$j]; //#3215
                var _Yk = $k[--$j]; //#3216
                $k[$j++] = _Yk; //#3218
                $k[$j++] = $f(_Yj + 1); //#3218
                if ($f(_Yj + 1) > _Yk.length) { //#3218
                    $j -= 3; //#3217
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCP#3217'; //#3217
                    $k[$j++] = "Coupon too short: 2nd Purchase GCP truncated"; //#3217
                    $k[$j++] = false; //#3217
                    return true; //#3217
                } //#3217
                var _Yl = $k[--$j]; //#3219
                var _Ym = $k[--$j]; //#3219
                $k[$j++] = $geti(_Ym, _Yl, $f(_Ym.length - _Yl)); //#3219
            } //#3219
        } //#3219
        var _Yo = $k[--$j]; //#3224
        $k[$j++] = _Yo; //#3268
        if (_Yo.length >= 1) { //#3268
            var _Yp = $k[--$j]; //#3224
            $k[$j++] = _Yp; //#3268
            if ($cvi($geti(_Yp, 0, 1)) == 2) { //#3268
                var _Yr = $k[--$j]; //#3225
                var _Ys = $geti(_Yr, 1, _Yr.length - 1); //#3225
                $k[$j++] = _Ys; //#3230
                if (_Ys.length < 1) { //#3230
                    $j -= 2; //#3229
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementVLI#3229'; //#3229
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement VLI"; //#3229
                    $k[$j++] = false; //#3229
                    return true; //#3229
                } //#3229
                var _Yt = $k[--$j]; //#3231
                var _Yv = $cvi($geti(_Yt, 0, 1)); //#3231
                $k[$j++] = _Yt; //#3233
                $k[$j++] = _Yv; //#3233
                if ((_Yv < 1) || (_Yv > 5)) { //#3233
                    $j -= 2; //#3232
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementVLI#3232'; //#3232
                    $k[$j++] = "Coupon 3rd Purchase Requirement length indicator must be 1-5"; //#3232
                    $k[$j++] = false; //#3232
                    return true; //#3232
                } //#3232
                var _Yw = $k[--$j]; //#3234
                var _Yx = $k[--$j]; //#3235
                $k[$j++] = _Yx; //#3237
                $k[$j++] = $f(_Yw + 1); //#3237
                if ($f(_Yw + 1) > _Yx.length) { //#3237
                    $j -= 3; //#3236
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirement#3236'; //#3236
                    $k[$j++] = "Coupon too short: 3rd Purchase Requirement truncated"; //#3236
                    $k[$j++] = false; //#3236
                    return true; //#3236
                } //#3236
                var _Yy = $k[--$j]; //#3238
                var _Yz = $k[--$j]; //#3238
                var _Z0 = $geti(_Yz, _Yy, $f(_Yz.length - _Yy)); //#3238
                $k[$j++] = _Z0; //#3243
                if (_Z0.length < 1) { //#3243
                    $j -= 2; //#3242
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementCode#3242'; //#3242
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement Code"; //#3242
                    $k[$j++] = false; //#3242
                    return true; //#3242
                } //#3242
                var _Z1 = $k[--$j]; //#3244
                var _Z3 = $cvi($geti(_Z1, 0, 1)); //#3244
                $k[$j++] = _Z1; //#3246
                if ((_Z3 > 4) && (_Z3 != 9)) { //#3246
                    $j -= 2; //#3245
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementCode#3245'; //#3245
                    $k[$j++] = "Coupon 3rd Purchase Requirement Code must be 0-4 or 9"; //#3245
                    $k[$j++] = false; //#3245
                    return true; //#3245
                } //#3245
                var _Z4 = $k[--$j]; //#3247
                var _Z5 = $geti(_Z4, 1, _Z4.length - 1); //#3247
                $k[$j++] = _Z5; //#3252
                if (_Z5.length < 3) { //#3252
                    $j -= 2; //#3251
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseFamilyCode#3251'; //#3251
                    $k[$j++] = "Coupon too short: 3rd Purchase Family Code truncated"; //#3251
                    $k[$j++] = false; //#3251
                    return true; //#3251
                } //#3251
                var _Z6 = $k[--$j]; //#3253
                var _Z7 = $geti(_Z6, 3, _Z6.length - 3); //#3253
                $k[$j++] = _Z7; //#3258
                if (_Z7.length < 1) { //#3258
                    $j -= 2; //#3257
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCPVLI#3257'; //#3257
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase GCP VLI"; //#3257
                    $k[$j++] = false; //#3257
                    return true; //#3257
                } //#3257
                var _Z8 = $k[--$j]; //#3259
                var _ZA = $cvi($geti(_Z8, 0, 1)); //#3259
                $k[$j++] = _Z8; //#3261
                $k[$j++] = _ZA; //#3261
                if ((_ZA > 6) && (_ZA != 9)) { //#3261
                    $j -= 2; //#3260
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseGCPVLI#3260'; //#3260
                    $k[$j++] = "Coupon 3rd Purchase GCP length indicator must be 0-6 or 9"; //#3260
                    $k[$j++] = false; //#3260
                    return true; //#3260
                } //#3260
                var _ZB = $k[--$j]; //#3262
                $k[$j++] = _ZB; //#3262
                if (_ZB != 9) { //#3262
                    var _ZC = $k[--$j]; //#3262
                    $k[$j++] = $f(_ZC + 6); //#3262
                } else { //#3262
                    $j--; //#3262
                    $k[$j++] = 0; //#3262
                } //#3262
                var _ZD = $k[--$j]; //#3262
                var _ZE = $k[--$j]; //#3263
                $k[$j++] = _ZE; //#3265
                $k[$j++] = $f(_ZD + 1); //#3265
                if ($f(_ZD + 1) > _ZE.length) { //#3265
                    $j -= 3; //#3264
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCP#3264'; //#3264
                    $k[$j++] = "Coupon too short: 3rd Purchase GCP truncated"; //#3264
                    $k[$j++] = false; //#3264
                    return true; //#3264
                } //#3264
                var _ZF = $k[--$j]; //#3266
                var _ZG = $k[--$j]; //#3266
                $k[$j++] = $geti(_ZG, _ZF, $f(_ZG.length - _ZF)); //#3266
            } //#3266
        } //#3266
        $_.couponexpire = -1; //#3271
        var _ZI = $k[--$j]; //#3272
        $k[$j++] = _ZI; //#3290
        if (_ZI.length >= 1) { //#3290
            var _ZJ = $k[--$j]; //#3272
            $k[$j++] = _ZJ; //#3290
            if ($cvi($geti(_ZJ, 0, 1)) == 3) { //#3290
                var _ZL = $k[--$j]; //#3273
                var _ZM = $geti(_ZL, 1, _ZL.length - 1); //#3273
                $k[$j++] = _ZM; //#3278
                if (_ZM.length < 6) { //#3278
                    $j -= 2; //#3277
                    $k[$j++] = 'bwipp.GS1couponTooShortExpirationDate#3277'; //#3277
                    $k[$j++] = "Coupon too short: Expiration date"; //#3277
                    $k[$j++] = false; //#3277
                    return true; //#3277
                } //#3277
                var _ZN = $k[--$j]; //#3279
                var _ZP = $cvi($geti(_ZN, 2, 2)); //#3279
                $k[$j++] = _ZN; //#3279
                if ((_ZP < 1) || (_ZP > 12)) { //#3279
                    $j -= 2; //#3279
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadMonth#3279'; //#3279
                    $k[$j++] = "Invalid month in expiration date"; //#3279
                    $k[$j++] = false; //#3279
                    return true; //#3279
                } //#3279
                var _ZQ = $k[--$j]; //#3280
                var _ZS = $cvi($geti(_ZQ, 0, 2)); //#3280
                var _ZT = _ZS - 21; //#3281
                $k[$j++] = _ZQ; //#3281
                $k[$j++] = _ZS; //#3281
                $k[$j++] = _ZT; //#3281
                if (_ZT >= 51) { //#3281
                    $j--; //#3281
                    var _ZU = $k[--$j]; //#3281
                    $k[$j++] = $f(_ZU + 1900); //#3281
                } else { //#3281
                    if ($k[--$j] <= -50) { //#3281
                        var _ZW = $k[--$j]; //#3281
                        $k[$j++] = $f(_ZW + 2100); //#3281
                    } else { //#3281
                        var _ZX = $k[--$j]; //#3281
                        $k[$j++] = $f(_ZX + 2000); //#3281
                    } //#3281
                } //#3281
                var _ZY = $k[--$j]; //#3282
                $k[$j++] = ((_ZY % 400) == 0) || (((_ZY % 4) == 0) && ((_ZY % 100) != 0)); //#3283
                $k[$j++] = Infinity; //#3283
                $k[$j++] = 31; //#3283
                $r(3, -1); //#3283
                var _Za = $k[--$j] ? 29 : 28; //#3283
                $k[$j++] = _Za; //#3283
                $k[$j++] = 31; //#3283
                $k[$j++] = 30; //#3283
                $k[$j++] = 31; //#3283
                $k[$j++] = 30; //#3283
                $k[$j++] = 31; //#3283
                $k[$j++] = 31; //#3283
                $k[$j++] = 30; //#3283
                $k[$j++] = 31; //#3283
                $k[$j++] = 30; //#3283
                $k[$j++] = 31; //#3283
                var _Zb = $a(); //#3283
                var _Zc = $k[--$j]; //#3284
                var _Zg = $cvi($geti(_Zc, 4, 2)); //#3285
                $k[$j++] = _Zc; //#3286
                if (($get(_Zb, $cvi($geti(_Zc, 2, 2)) - 1) < _Zg) || (_Zg < 1)) { //#3286
                    $j -= 2; //#3286
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadDay#3286'; //#3286
                    $k[$j++] = "Invalid day of month in expiration date"; //#3286
                    $k[$j++] = false; //#3286
                    return true; //#3286
                } //#3286
                var _Zh = $k[--$j]; //#3287
                $_.couponexpire = $cvi($geti(_Zh, 0, 6)); //#3287
                $k[$j++] = $geti(_Zh, 6, _Zh.length - 6); //#3288
            } //#3288
        } //#3288
        var _Zk = $k[--$j]; //#3293
        $k[$j++] = _Zk; //#3314
        if (_Zk.length >= 1) { //#3314
            var _Zl = $k[--$j]; //#3293
            $k[$j++] = _Zl; //#3314
            if ($cvi($geti(_Zl, 0, 1)) == 4) { //#3314
                var _Zn = $k[--$j]; //#3294
                var _Zo = $geti(_Zn, 1, _Zn.length - 1); //#3294
                $k[$j++] = _Zo; //#3299
                if (_Zo.length < 6) { //#3299
                    $j -= 2; //#3298
                    $k[$j++] = 'bwipp.GS1couponTooShortStartDate#3298'; //#3298
                    $k[$j++] = "Coupon too short: Start date"; //#3298
                    $k[$j++] = false; //#3298
                    return true; //#3298
                } //#3298
                var _Zp = $k[--$j]; //#3300
                var _Zr = $cvi($geti(_Zp, 2, 2)); //#3300
                $k[$j++] = _Zp; //#3300
                if ((_Zr < 1) || (_Zr > 12)) { //#3300
                    $j -= 2; //#3300
                    $k[$j++] = 'bwipp.GS1couponStartDateBadMonth#3300'; //#3300
                    $k[$j++] = "Invalid month in start date"; //#3300
                    $k[$j++] = false; //#3300
                    return true; //#3300
                } //#3300
                var _Zs = $k[--$j]; //#3301
                var _Zu = $cvi($geti(_Zs, 0, 2)); //#3301
                var _Zv = _Zu - 21; //#3302
                $k[$j++] = _Zs; //#3302
                $k[$j++] = _Zu; //#3302
                $k[$j++] = _Zv; //#3302
                if (_Zv >= 51) { //#3302
                    $j--; //#3302
                    var _Zw = $k[--$j]; //#3302
                    $k[$j++] = $f(_Zw + 1900); //#3302
                } else { //#3302
                    if ($k[--$j] <= -50) { //#3302
                        var _Zy = $k[--$j]; //#3302
                        $k[$j++] = $f(_Zy + 2100); //#3302
                    } else { //#3302
                        var _Zz = $k[--$j]; //#3302
                        $k[$j++] = $f(_Zz + 2000); //#3302
                    } //#3302
                } //#3302
                var _a0 = $k[--$j]; //#3303
                $k[$j++] = ((_a0 % 400) == 0) || (((_a0 % 4) == 0) && ((_a0 % 100) != 0)); //#3304
                $k[$j++] = Infinity; //#3304
                $k[$j++] = 31; //#3304
                $r(3, -1); //#3304
                var _a2 = $k[--$j] ? 29 : 28; //#3304
                $k[$j++] = _a2; //#3304
                $k[$j++] = 31; //#3304
                $k[$j++] = 30; //#3304
                $k[$j++] = 31; //#3304
                $k[$j++] = 30; //#3304
                $k[$j++] = 31; //#3304
                $k[$j++] = 31; //#3304
                $k[$j++] = 30; //#3304
                $k[$j++] = 31; //#3304
                $k[$j++] = 30; //#3304
                $k[$j++] = 31; //#3304
                var _a3 = $a(); //#3304
                var _a4 = $k[--$j]; //#3305
                var _a8 = $cvi($geti(_a4, 4, 2)); //#3306
                $k[$j++] = _a4; //#3307
                if (($get(_a3, $cvi($geti(_a4, 2, 2)) - 1) < _a8) || (_a8 < 1)) { //#3307
                    $j -= 2; //#3307
                    $k[$j++] = 'bwipp.GS1couponStartDateBadDay#3307'; //#3307
                    $k[$j++] = "Invalid day of month in start date"; //#3307
                    $k[$j++] = false; //#3307
                    return true; //#3307
                } //#3307
                var _a9 = $k[--$j]; //#3308
                $_.couponstart = $cvi($geti(_a9, 0, 6)); //#3308
                $k[$j++] = _a9; //#3311
                if (($_.couponexpire != -1) && ($_.couponexpire < $_.couponstart)) { //#3311
                    $j -= 2; //#3310
                    $k[$j++] = 'bwipp.GS1couponExpireDateBeforeStartDate#3310'; //#3310
                    $k[$j++] = "Coupon expires before it starts"; //#3310
                    $k[$j++] = false; //#3310
                    return true; //#3310
                } //#3310
                var _aE = $k[--$j]; //#3312
                $k[$j++] = $geti(_aE, 6, _aE.length - 6); //#3312
            } //#3312
        } //#3312
        var _aG = $k[--$j]; //#3317
        $k[$j++] = _aG; //#3330
        if (_aG.length >= 1) { //#3330
            var _aH = $k[--$j]; //#3317
            $k[$j++] = _aH; //#3330
            if ($cvi($geti(_aH, 0, 1)) == 5) { //#3330
                var _aJ = $k[--$j]; //#3318
                var _aK = $geti(_aJ, 1, _aJ.length - 1); //#3318
                $k[$j++] = _aK; //#3323
                if (_aK.length < 1) { //#3323
                    $j -= 2; //#3322
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumberVLI#3322'; //#3322
                    $k[$j++] = "Coupon too short: Missing Serial Number VLI"; //#3322
                    $k[$j++] = false; //#3322
                    return true; //#3322
                } //#3322
                var _aL = $k[--$j]; //#3324
                var _aM = $geti(_aL, 0, 1); //#3324
                $k[$j++] = _aL; //#3327
                $k[$j++] = ($cvi(_aM) + 6) + 1; //#3327
                if ((($cvi(_aM) + 6) + 1) > _aL.length) { //#3327
                    $j -= 3; //#3326
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumber#3326'; //#3326
                    $k[$j++] = "Coupon too short: Serial Number truncated"; //#3326
                    $k[$j++] = false; //#3326
                    return true; //#3326
                } //#3326
                var _aN = $k[--$j]; //#3328
                var _aO = $k[--$j]; //#3328
                $k[$j++] = $geti(_aO, _aN, $f(_aO.length - _aN)); //#3328
            } //#3328
        } //#3328
        var _aQ = $k[--$j]; //#3333
        $k[$j++] = _aQ; //#3349
        if (_aQ.length >= 1) { //#3349
            var _aR = $k[--$j]; //#3333
            $k[$j++] = _aR; //#3349
            if ($cvi($geti(_aR, 0, 1)) == 6) { //#3349
                var _aT = $k[--$j]; //#3334
                var _aU = $geti(_aT, 1, _aT.length - 1); //#3334
                $k[$j++] = _aU; //#3339
                if (_aU.length < 1) { //#3339
                    $j -= 2; //#3338
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLNVLI#3338'; //#3338
                    $k[$j++] = "Coupon too short: Missing Retailer GCP/GLN VLI"; //#3338
                    $k[$j++] = false; //#3338
                    return true; //#3338
                } //#3338
                var _aV = $k[--$j]; //#3340
                var _aX = $cvi($geti(_aV, 0, 1)); //#3340
                $k[$j++] = _aV; //#3342
                $k[$j++] = _aX; //#3342
                if ((_aX < 1) || (_aX > 7)) { //#3342
                    $j -= 2; //#3341
                    $k[$j++] = 'bwipp.GS1couponBadRetailerGCPGLNVLI#3341'; //#3341
                    $k[$j++] = "Coupon Retailer GCP/GLN length indicator must be 1-7"; //#3341
                    $k[$j++] = false; //#3341
                    return true; //#3341
                } //#3341
                var _aY = $k[--$j]; //#3343
                var _aZ = $k[--$j]; //#3344
                $k[$j++] = _aZ; //#3346
                $k[$j++] = $f($f(_aY + 6) + 1); //#3346
                if (($f($f(_aY + 6) + 1)) > _aZ.length) { //#3346
                    $j -= 3; //#3345
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLN#3345'; //#3345
                    $k[$j++] = "Coupon too short: Retailer GCP/GLN truncated"; //#3345
                    $k[$j++] = false; //#3345
                    return true; //#3345
                } //#3345
                var _aa = $k[--$j]; //#3347
                var _ab = $k[--$j]; //#3347
                $k[$j++] = $geti(_ab, _aa, $f(_ab.length - _aa)); //#3347
            } //#3347
        } //#3347
        var _ad = $k[--$j]; //#3352
        $k[$j++] = _ad; //#3388
        if (_ad.length >= 1) { //#3388
            var _ae = $k[--$j]; //#3352
            $k[$j++] = _ae; //#3388
            if ($cvi($geti(_ae, 0, 1)) == 9) { //#3388
                var _ag = $k[--$j]; //#3353
                var _ah = $geti(_ag, 1, _ag.length - 1); //#3353
                $k[$j++] = _ah; //#3358
                if (_ah.length < 1) { //#3358
                    $j -= 2; //#3357
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueCode#3357'; //#3357
                    $k[$j++] = "Coupon too short: Missing Save Value Code"; //#3357
                    $k[$j++] = false; //#3357
                    return true; //#3357
                } //#3357
                var _ai = $k[--$j]; //#3359
                var _ak = $cvi($geti(_ai, 0, 1)); //#3359
                $k[$j++] = _ai; //#3361
                if ((_ak > 6) || ((_ak == 3) || (_ak == 4))) { //#3361
                    $j -= 2; //#3360
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueCode#3360'; //#3360
                    $k[$j++] = "Coupon Save Value Code must be 0,1,2,5 or 6"; //#3360
                    $k[$j++] = false; //#3360
                    return true; //#3360
                } //#3360
                var _al = $k[--$j]; //#3362
                var _am = $geti(_al, 1, _al.length - 1); //#3362
                $k[$j++] = _am; //#3367
                if (_am.length < 1) { //#3367
                    $j -= 2; //#3366
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueAppliesToItem#3366'; //#3366
                    $k[$j++] = "Coupon too short: Missing Save Value Applies to Item"; //#3366
                    $k[$j++] = false; //#3366
                    return true; //#3366
                } //#3366
                var _an = $k[--$j]; //#3368
                $k[$j++] = _an; //#3370
                if ($cvi($geti(_an, 0, 1)) > 2) { //#3370
                    $j -= 2; //#3369
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueAppliesToItem#3369'; //#3369
                    $k[$j++] = "Coupon Save Value Applies to Item must be 0-2"; //#3369
                    $k[$j++] = false; //#3369
                    return true; //#3369
                } //#3369
                var _ap = $k[--$j]; //#3371
                var _aq = $geti(_ap, 1, _ap.length - 1); //#3371
                $k[$j++] = _aq; //#3376
                if (_aq.length < 1) { //#3376
                    $j -= 2; //#3375
                    $k[$j++] = 'bwipp.GS1couponTooShortStoreCouponFlag#3375'; //#3375
                    $k[$j++] = "Coupon too short: Missing Store Coupon Flag"; //#3375
                    $k[$j++] = false; //#3375
                    return true; //#3375
                } //#3375
                var _ar = $k[--$j]; //#3377
                var _as = $geti(_ar, 1, _ar.length - 1); //#3377
                $k[$j++] = _as; //#3382
                if (_as.length < 1) { //#3382
                    $j -= 2; //#3381
                    $k[$j++] = 'bwipp.GS1couponTooShortDontMultiplyFlag#3381'; //#3381
                    $k[$j++] = "Coupon too short: Missing Don't Multiply Flag"; //#3381
                    $k[$j++] = false; //#3381
                    return true; //#3381
                } //#3381
                var _at = $k[--$j]; //#3383
                $k[$j++] = _at; //#3385
                if ($cvi($geti(_at, 0, 1)) > 1) { //#3385
                    $j -= 2; //#3384
                    $k[$j++] = 'bwipp.GS1couponBadDontMultiplyFlag#3384'; //#3384
                    $k[$j++] = "Don't Multiply Flag must be 0 or 1"; //#3384
                    $k[$j++] = false; //#3384
                    return true; //#3384
                } //#3384
                var _av = $k[--$j]; //#3386
                $k[$j++] = $geti(_av, 1, _av.length - 1); //#3386
            } //#3386
        } //#3386
        var _ax = $k[--$j]; //#3390
        $k[$j++] = _ax; //#3392
        if (_ax.length != 0) { //#3392
            $j -= 2; //#3391
            $k[$j++] = 'bwipp.GS1couponUnrecognisedOptionalField#3391'; //#3391
            $k[$j++] = "Coupon fields must be 1,2,3,4,5,6 or 9, increasing order"; //#3391
            $k[$j++] = false; //#3391
            return true; //#3391
        } //#3391
        $j--; //#3393
    }; //#3393
    $_.lintcouponposoffer = function() {
        var _ay = $k[--$j]; //#3397
        $k[$j++] = _ay; //#3399
        $k[$j++] = true; //#3399
        $forall(_ay, function() { //#3399
            var _az = $k[--$j]; //#3398
            if ((_az < 48) || (_az > 57)) { //#3398
                $j--; //#3398
                $k[$j++] = false; //#3398
                return true; //#3398
            } //#3398
        }); //#3398
        if ($nt($k[--$j])) { //#3400
            $j -= 2; //#3400
            $k[$j++] = 'bwipp.GS1couponNotNumeric#3400'; //#3400
            $k[$j++] = "Coupon not numeric"; //#3400
            $k[$j++] = false; //#3400
            return true; //#3400
        } //#3400
        var _b1 = $k[--$j]; //#3402
        $k[$j++] = _b1; //#3404
        if (_b1.length < 1) { //#3404
            $j -= 2; //#3403
            $k[$j++] = 'bwipp.GS1couponTooShortFormatCode#3403'; //#3403
            $k[$j++] = "Coupon too short: Missing Format Code"; //#3403
            $k[$j++] = false; //#3403
            return true; //#3403
        } //#3403
        var _b2 = $k[--$j]; //#3405
        var _b3 = $geti(_b2, 0, 1); //#3405
        $k[$j++] = _b2; //#3407
        if ($ne(_b3, "0") && $ne(_b3, "1")) { //#3407
            $j -= 2; //#3406
            $k[$j++] = 'bwipp.GS1couponBadFormatCode#3406'; //#3406
            $k[$j++] = "Coupon format must be 0 or 1"; //#3406
            $k[$j++] = false; //#3406
            return true; //#3406
        } //#3406
        var _b4 = $k[--$j]; //#3408
        var _b5 = $geti(_b4, 1, _b4.length - 1); //#3408
        $k[$j++] = _b5; //#3412
        if (_b5.length < 1) { //#3412
            $j -= 2; //#3411
            $k[$j++] = 'bwipp.GS1couponTooShortFunderVLI#3411'; //#3411
            $k[$j++] = "Coupon too short: Missing Funder VLI"; //#3411
            $k[$j++] = false; //#3411
            return true; //#3411
        } //#3411
        var _b6 = $k[--$j]; //#3413
        var _b8 = $cvi($geti(_b6, 0, 1)); //#3413
        $k[$j++] = _b6; //#3415
        $k[$j++] = _b8; //#3415
        if (_b8 > 6) { //#3415
            $j -= 3; //#3414
            $k[$j++] = 'bwipp.GS1couponBadFunderVLI#3414'; //#3414
            $k[$j++] = "Coupon Funder length indicator must be 0-6"; //#3414
            $k[$j++] = false; //#3414
            return true; //#3414
        } //#3414
        var _b9 = $k[--$j]; //#3416
        var _bA = $k[--$j]; //#3417
        $k[$j++] = _bA; //#3419
        $k[$j++] = $f($f(_b9 + 6) + 1); //#3419
        if (($f($f(_b9 + 6) + 1)) > _bA.length) { //#3419
            $j -= 3; //#3418
            $k[$j++] = 'bwipp.GS1couponTooShortFunder#3418'; //#3418
            $k[$j++] = "Coupon too short: Truncated Funder ID"; //#3418
            $k[$j++] = false; //#3418
            return true; //#3418
        } //#3418
        var _bB = $k[--$j]; //#3420
        var _bC = $k[--$j]; //#3420
        var _bD = $geti(_bC, _bB, $f(_bC.length - _bB)); //#3420
        $k[$j++] = _bD; //#3424
        if (_bD.length < 6) { //#3424
            $j -= 2; //#3423
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode#3423'; //#3423
            $k[$j++] = "Coupon too short: Truncated Offer Code"; //#3423
            $k[$j++] = false; //#3423
            return true; //#3423
        } //#3423
        var _bE = $k[--$j]; //#3425
        var _bF = $geti(_bE, 6, _bE.length - 6); //#3425
        $k[$j++] = _bF; //#3429
        if (_bF.length < 1) { //#3429
            $j -= 2; //#3428
            $k[$j++] = 'bwipp.GS1couponTooShortSnVLI#3428'; //#3428
            $k[$j++] = "Coupon too short: Missing SN VLI"; //#3428
            $k[$j++] = false; //#3428
            return true; //#3428
        } //#3428
        var _bG = $k[--$j]; //#3430
        var _bH = $geti(_bG, 0, 1); //#3430
        $k[$j++] = _bG; //#3434
        $k[$j++] = ($cvi(_bH) + 6) + 1; //#3434
        if ((($cvi(_bH) + 6) + 1) > _bG.length) { //#3434
            $j -= 3; //#3433
            $k[$j++] = 'bwipp.GS1couponTooShortSn#3433'; //#3433
            $k[$j++] = "Coupon too short: Truncated SN"; //#3433
            $k[$j++] = false; //#3433
            return true; //#3433
        } //#3433
        var _bI = $k[--$j]; //#3435
        var _bJ = $k[--$j]; //#3435
        var _bK = $geti(_bJ, _bI, $f(_bJ.length - _bI)); //#3435
        $k[$j++] = _bK; //#3438
        if (_bK.length != 0) { //#3438
            $j -= 2; //#3437
            $k[$j++] = 'bwipp.GS1couponTooLong#3437'; //#3437
            $k[$j++] = "Coupon too long"; //#3437
            $k[$j++] = false; //#3437
            return true; //#3437
        } //#3437
        $j--; //#3439
    }; //#3439
    $_.lintlatitude = function() {
        var _bL = $k[--$j]; //#3443
        $k[$j++] = _bL; //#3445
        if (_bL.length != 10) { //#3445
            $j--; //#3444
            $k[$j++] = 'bwipp.GS1badLatitudeLength#3444'; //#3444
            $k[$j++] = "Invalid length for a latitude"; //#3444
            $k[$j++] = false; //#3444
            return true; //#3444
        } //#3444
        if ($cvi($k[--$j]) > $cvi("1800000000")) { //#3448
            $j--; //#3448
            $k[$j++] = 'bwipp.GS1badLatitude#3448'; //#3448
            $k[$j++] = "Invalid value for latitude"; //#3448
            $k[$j++] = false; //#3448
            return true; //#3448
        } //#3448
    }; //#3448
    $_.lintlongitude = function() {
        var _bN = $k[--$j]; //#3452
        $k[$j++] = _bN; //#3454
        if (_bN.length != 10) { //#3454
            $j--; //#3453
            $k[$j++] = 'bwipp.GS1badLongitudeLength#3453'; //#3453
            $k[$j++] = "Invalid length for a longitude"; //#3453
            $k[$j++] = false; //#3453
            return true; //#3453
        } //#3453
        if ($cvi($k[--$j]) > $cvi("3600000000")) { //#3458
            $j--; //#3458
            $k[$j++] = 'bwipp.GS1badLongitude#3458'; //#3458
            $k[$j++] = "Invalid value for longitude"; //#3458
            $k[$j++] = false; //#3458
            return true; //#3458
        } //#3458
    }; //#3458
    if (!bwipp_gs1process.__3467__) { //#3467
        $_ = Object.create($_); //#3467
        $k[$j++] = Infinity; //#3462
        var _bP = $a(['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99']); //#3465
        for (var _bQ = 0, _bR = _bP.length; _bQ < _bR; _bQ++) { //#3466
            var _bS = $get(_bP, _bQ); //#3466
            $k[$j++] = _bS; //#3466
            $k[$j++] = _bS; //#3466
        } //#3466
        $_.aidcmediatype = $d(); //#3466
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#3466
        bwipp_gs1process.__3467__ = 1; //#3466
        $_ = Object.getPrototypeOf($_); //#3466
    } //#3466
    $_.lintmediatype = function() {
        var _bX = $get($_.aidcmediatype, $k[--$j]) !== undefined; //#3470
        if (!_bX) { //#3470
            $j--; //#3470
            $k[$j++] = 'bwipp.GS1UnknownMediaType#3470'; //#3470
            $k[$j++] = "Unknown AIDC media type"; //#3470
            $k[$j++] = false; //#3470
            return true; //#3470
        } //#3470
    }; //#3470
    if (!bwipp_gs1process.__3511__) { //#3511
        $_ = Object.create($_); //#3511
        $k[$j++] = Infinity; //#3474
        var _bY = $a(['1A', '1B', '1D', '1F', '1G', '1W', '200', '201', '202', '203', '204', '205', '206', '210', '211', '212', '2C', '3A', '3H', '43', '44', '4A', '4B', '4C', '4D', '4F', '4G', '4H', '5H', '5L', '5M', '6H', '6P', '7A', '7B', '8', '8A', '8B', '8C', '9', 'AA', 'AB', 'AC', 'AD', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AL', 'AM', 'AP', 'APE/AT', 'AV', 'B4', 'BB', 'BC', 'BD', 'BE', 'BF', 'BG', 'BGE', 'BH', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BME', 'BN', 'BO', 'BP', 'BQ', 'BR', 'BRI', 'BS', 'BT', 'BU', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CB', 'CBL', 'CC', 'CCE', 'CD', 'CE', 'CF', 'CG', 'CH', 'CI', 'CJ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DA', 'DB', 'DC', 'DG', 'DH', 'DI', 'DJ', 'DK', 'DL', 'DM', 'DN', 'DP', 'DPE', 'DR', 'DS', 'DT', 'DU', 'DV', 'DW', 'DX', 'DY', 'E1', 'E2', 'E3', 'EC', 'ED', 'EE', 'EF', 'EG', 'EH', 'EI', 'EN', 'FB', 'FC', 'FD', 'FE', 'FI', 'FL', 'FO', 'FOB', 'FP', 'FPE', 'FR', 'FT', 'FW', 'FX', 'GB', 'GI', 'GL', 'GR', 'GU', 'GY', 'GZ', 'HA', 'HB', 'HC', 'HG', 'HN', 'HR', 'IA', 'IB', 'IC', 'ID', 'IE', 'IF', 'IG', 'IH', 'IK', 'IL', 'IN', 'IZ', 'JB', 'JC', 'JG', 'JR', 'JT', 'JY', 'KG', 'KI', 'LAB', 'LE', 'LG', 'LT', 'LU', 'LV', 'LZ', 'MA', 'MB', 'MC', 'ME', 'MPE', 'MR', 'MS', 'MT', 'MW', 'MX', 'NA', 'NE', 'NF', 'NG', 'NS', 'NT', 'NU', 'NV', 'OA', 'OB', 'OC', 'OD', 'OE', 'OF', 'OK', 'OPE', 'OT', 'OU', 'P2', 'PA', 'PAE', 'PB', 'PC', 'PD', 'PE', 'PF', 'PG', 'PH', 'PI', 'PJ', 'PK', 'PL', 'PLP', 'PN', 'PO', 'POP', 'PP', 'PPE', 'PR', 'PT', 'PU', 'PUE', 'PV', 'PX', 'PY', 'PZ', 'QA', 'QB', 'QC', 'QD', 'QF', 'QG', 'QH', 'QJ', 'QK', 'QL', 'QM', 'QN', 'QP', 'QQ', 'QR', 'QS', 'RB1', 'RB2', 'RB3', 'RCB', 'RD', 'RG', 'RJ', 'RK', 'RL', 'RO', 'RT', 'RZ', 'S1', 'SA', 'SB', 'SC', 'SD', 'SE', 'SEC', 'SH', 'SI', 'SK', 'SL', 'SM', 'SO', 'SP', 'SS', 'ST', 'STL', 'SU', 'SV', 'SW', 'SX', 'SY', 'SZ', 'T1', 'TB', 'TC', 'TD', 'TE', 'TEV', 'TG', 'THE', 'TI', 'TK', 'TL', 'TN', 'TO', 'TR', 'TRE', 'TS', 'TT', 'TTE', 'TU', 'TV', 'TW', 'TWE', 'TY', 'TZ', 'UC', 'UN', 'UUE', 'VA', 'VG', 'VI', 'VK', 'VL', 'VN', 'VO', 'VP', 'VQ', 'VR', 'VS', 'VY', 'WA', 'WB', 'WC', 'WD', 'WF', 'WG', 'WH', 'WJ', 'WK', 'WL', 'WM', 'WN', 'WP', 'WQ', 'WR', 'WRP', 'WS', 'WT', 'WU', 'WV', 'WW', 'WX', 'WY', 'WZ', 'X11', 'X12', 'X15', 'X16', 'X17', 'X18', 'X19', 'X20', 'X3', 'XA', 'XB', 'XC', 'XD', 'XF', 'XG', 'XH', 'XJ', 'XK', 'YA', 'YB', 'YC', 'YD', 'YF', 'YG', 'YH', 'YJ', 'YK', 'YL', 'YM', 'YN', 'YP', 'YQ', 'YR', 'YS', 'YT', 'YV', 'YW', 'YX', 'YY', 'YZ', 'ZA', 'ZB', 'ZC', 'ZD', 'ZF', 'ZG', 'ZH', 'ZJ', 'ZK', 'ZL', 'ZM', 'ZN', 'ZP', 'ZQ', 'ZR', 'ZS', 'ZT', 'ZU', 'ZV', 'ZW', 'ZX', 'ZY', 'ZZ']); //#3509
        for (var _bZ = 0, _ba = _bY.length; _bZ < _ba; _bZ++) { //#3510
            var _bb = $get(_bY, _bZ); //#3510
            $k[$j++] = _bb; //#3510
            $k[$j++] = _bb; //#3510
        } //#3510
        $_.packagetype = $d(); //#3510
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1process.$ctx[id] = $_[id]); //#3510
        bwipp_gs1process.__3511__ = 1; //#3510
        $_ = Object.getPrototypeOf($_); //#3510
    } //#3510
    $_.lintpackagetype = function() {
        var _bg = $get($_.packagetype, $k[--$j]) !== undefined; //#3514
        if (!_bg) { //#3514
            $j--; //#3514
            $k[$j++] = 'bwipp.GS1unknownPackageType#3514'; //#3514
            $k[$j++] = "Unknown package type"; //#3514
            $k[$j++] = false; //#3514
            return true; //#3514
        } //#3514
    }; //#3514
    if (!$_.dontlint) { //#3662
        $k[$j++] = true; //#3558
        for (var _bk = 0, _bj = $_.vals.length - 1; _bk <= _bj; _bk += 1) { //#3558
            $_.ai = $get($_.ais, _bk); //#3522
            $_.val = $get($_.vals, _bk); //#3523
            var _br = $get($_.gs1syntax, $_.ai) !== undefined; //#3524
            if (_br) { //#3556
                var _bv = $get($get($_.gs1syntax, $_.ai), 'parts'); //#3525
                $k[$j++] = _bv; //#3527
                $k[$j++] = 0; //#3527
                $forall(_bv, function() { //#3527
                    var _bw = $k[--$j]; //#3527
                    $k[$j++] = _bw; //#3527
                    if ($get(_bw, 'opt')) { //#3527
                        $j--; //#3527
                        $k[$j++] = 0; //#3527
                    } else { //#3527
                        var _bz = $get($k[--$j], 'min'); //#3527
                        $k[$j++] = _bz; //#3527
                    } //#3527
                    var _c0 = $k[--$j]; //#3527
                    var _c1 = $k[--$j]; //#3527
                    $k[$j++] = $f(_c1 + _c0); //#3527
                }); //#3527
                if ($k[--$j] > $_.val.length) { //#3529
                    $j--; //#3528
                    $k[$j++] = 'bwipp.GS1valueTooShort#3528'; //#3528
                    $k[$j++] = "Too short"; //#3528
                    $k[$j++] = false; //#3528
                    break; //#3528
                } //#3528
                var _c4 = $k[--$j]; //#3530
                $k[$j++] = _c4; //#3530
                $k[$j++] = 0; //#3530
                $forall(_c4, function() { //#3530
                    var _c6 = $get($k[--$j], 'max'); //#3530
                    var _c7 = $k[--$j]; //#3530
                    $k[$j++] = $f(_c7 + _c6); //#3530
                }); //#3530
                if ($k[--$j] < $_.val.length) { //#3532
                    $j--; //#3531
                    $k[$j++] = 'bwipp.GS1valueTooLong#3531'; //#3531
                    $k[$j++] = "Too long"; //#3531
                    $k[$j++] = false; //#3531
                    break; //#3531
                } //#3531
                $forall($k[--$j], function() { //#3550
                    $_.props = $k[--$j]; //#3534
                    var _cD = $get($_.props, 'max'); //#3535
                    var _cE = $_.val; //#3535
                    var _cF = _cE.length; //#3535
                    if (_cD > _cE.length) { //#3535
                        var _ = _cF; //#3535
                        _cF = _cD; //#3535
                        _cD = _; //#3535
                    } //#3535
                    $_.eval = $geti($_.val, 0, _cD); //#3536
                    var _cK = $_.eval.length; //#3537
                    $_.val = $geti($_.val, _cK, $_.val.length - _cK); //#3537
                    if ($_.eval.length == 0) { //#3548
                        if ($nt($get($_.props, 'opt'))) { //#3541
                            $j--; //#3540
                            $k[$j++] = 'bwipp.GS1valueTooShort#3540'; //#3540
                            $k[$j++] = "Too short"; //#3540
                            $k[$j++] = false; //#3540
                            return true; //#3540
                        } //#3540
                    } else { //#3548
                        if ($_.eval.length < $get($_.props, 'min')) { //#3545
                            $j--; //#3544
                            $k[$j++] = 'bwipp.GS1valueTooShort#3544'; //#3544
                            $k[$j++] = "Too short"; //#3544
                            $k[$j++] = false; //#3544
                            return true; //#3544
                        } //#3544
                        var _cT = new Map([
                            ["N", 'lintnumeric'],
                            ["X", 'lintcset82'],
                            ["Y", 'lintcset39'],
                            ["Z", 'lintcset64']
                        ]); //#3546
                        $k[$j++] = $_.eval; //#3547
                        if ($_[$get(_cT, $get($_.props, 'cset'))]() === true) {
                            return true;
                        } //#3547
                        $forall($get($_.props, 'linters'), function() { //#3548
                            var _cd = $_[$k[--$j]]; //#3548
                            $k[$j++] = $_.eval; //#3548
                            if (_cd() === true) {
                                return true;
                            } //#3548
                        }); //#3548
                    } //#3548
                }); //#3548
                var _ce = $k[--$j]; //#3551
                $k[$j++] = _ce; //#3551
                if ($nt(_ce)) { //#3551
                    break; //#3551
                } //#3551
                if ($_.val.length != 0) { //#3554
                    $j--; //#3553
                    $k[$j++] = 'bwipp.GS1valueTooLong#3553'; //#3553
                    $k[$j++] = "Too long"; //#3553
                    $k[$j++] = false; //#3553
                    break; //#3553
                } //#3553
            } else { //#3556
                $j--; //#3556
                $k[$j++] = 'bwipp.GS1unknownAI#3556'; //#3556
                $k[$j++] = "Unrecognised AI"; //#3556
                $k[$j++] = false; //#3556
                break; //#3556
            } //#3556
        } //#3556
        if ($nt($k[--$j])) { //#3566
            var _ch = $k[--$j]; //#3560
            var _cj = $s((_ch.length + $_.ai.length) + 5); //#3560
            $puti(_cj, 0, "AI "); //#3561
            $puti(_cj, 3, $_.ai); //#3562
            $puti(_cj, 3 + $_.ai.length, ": "); //#3563
            $puti(_cj, 5 + $_.ai.length, _ch); //#3564
            $k[$j++] = _cj; //#3565
            bwipp_raiseerror(); //#3565
        } //#3565
        $_.aiexists = function() {
            $_.this = $k[--$j]; //#3570
            $_.patt = $k[--$j]; //#3571
            for (var _cp = 0, _cq = 1; _cp < _cq; _cp++) { //#3592
                var _ct = $get($_.aivals, $_.patt) !== undefined; //#3573
                if (_ct) { //#3573
                    $k[$j++] = true; //#3573
                    break; //#3573
                } //#3573
                if ($_.patt.length == 4) { //#3590
                    if ($eq($geti($_.patt, 3, 1), "n")) { //#3588
                        var _cz = $eq($geti($_.patt, 2, 1), "n") ? 2 : 3; //#3576
                        $_.pfxlen = _cz; //#3576
                        var _d0 = $_.ais; //#3578
                        $k[$j++] = false; //#3586
                        for (var _d1 = 0, _d2 = _d0.length; _d1 < _d2; _d1++) { //#3586
                            var _d3 = $get(_d0, _d1); //#3586
                            $k[$j++] = _d3; //#3585
                            if ($ne(_d3, $_.this) && (_d3.length == 4)) { //#3584
                                if ($eq($geti($k[--$j], 0, $_.pfxlen), $geti($_.patt, 0, $_.pfxlen))) { //#3582
                                    $j--; //#3581
                                    $k[$j++] = true; //#3581
                                } //#3581
                            } else { //#3584
                                $j--; //#3584
                            } //#3584
                        } //#3584
                        break; //#3587
                    } //#3587
                    $k[$j++] = false; //#3589
                    break; //#3589
                } //#3589
                $k[$j++] = false; //#3591
                break; //#3591
            } //#3591
        }; //#3591
        var _dB = $_.vals; //#3596
        $_.aivals = new Map; //#3596
        for (var _dE = 0, _dD = $_.vals.length - 1; _dE <= _dD; _dE += 1) { //#3611
            $_.ai = $get($_.ais, _dE); //#3598
            $_.val = $get($_.vals, _dE); //#3599
            var _dL = $get($_.aivals, $_.ai) !== undefined; //#3600
            if (_dL) { //#3609
                if ($ne($get($_.aivals, $_.ai), $_.val)) { //#3607
                    var _dR = $s($_.ai.length + 40); //#3602
                    $puti(_dR, 0, "Repeated AIs \("); //#3603
                    $puti(_dR, 14, $_.ai); //#3604
                    $puti(_dR, 14 + $_.ai.length, "\) must have the same value"); //#3605
                    $k[$j++] = 'bwipp.GS1repeatedDifferingAIs#3606'; //#3606
                    $k[$j++] = _dR; //#3606
                    bwipp_raiseerror(); //#3606
                } //#3606
            } else { //#3609
                $put($_.aivals, $_.ai, $_.val); //#3609
            } //#3609
        } //#3609
        for (var _dZ = 0, _dY = $_.vals.length - 1; _dZ <= _dY; _dZ += 1) { //#3660
            $_.ai = $get($_.ais, _dZ); //#3615
            var _de = $get($_.gs1syntax, $_.ai); //#3616
            var _df = $get(_de, 'ex') !== undefined; //#3616
            $k[$j++] = _de; //#3631
            $k[$j++] = 'ex'; //#3631
            if (_df) { //#3630
                var _dg = $k[--$j]; //#3617
                $forall($get($k[--$j], _dg), function() { //#3628
                    $_.patt = $k[--$j]; //#3618
                    $k[$j++] = $_.patt; //#3619
                    $k[$j++] = $_.ai; //#3619
                    $_.aiexists(); //#3619
                    if ($k[--$j]) { //#3627
                        var _dp = $s(($_.ai.length + $_.patt.length) + 36); //#3620
                        $puti(_dp, 0, "AIs \("); //#3621
                        $puti(_dp, 5, $_.ai); //#3622
                        $puti(_dp, 5 + $_.ai.length, "\) and \("); //#3623
                        $puti(_dp, 12 + $_.ai.length, $_.patt); //#3624
                        $puti(_dp, (12 + $_.ai.length) + $_.patt.length, "\) are mutually exclusive"); //#3625
                        $k[$j++] = 'bwipp.GS1exclusiveAIs#3626'; //#3626
                        $k[$j++] = _dp; //#3626
                        bwipp_raiseerror(); //#3626
                    } //#3626
                }); //#3626
            } else { //#3630
                $j -= 2; //#3630
            } //#3630
            if ($_.lintreqs) { //#3659
                var _dz = $get($_.gs1syntax, $_.ai); //#3633
                var _e0 = $get(_dz, 'req') !== undefined; //#3633
                $k[$j++] = _dz; //#3658
                $k[$j++] = 'req'; //#3658
                if (_e0) { //#3657
                    var _e1 = $k[--$j]; //#3634
                    $forall($get($k[--$j], _e1), function() { //#3655
                        var _e4 = $k[--$j]; //#3635
                        $k[$j++] = false; //#3640
                        $forall(_e4, function() { //#3640
                            var _e5 = $k[--$j]; //#3636
                            $k[$j++] = true; //#3638
                            $forall(_e5, function() { //#3638
                                $k[$j++] = $_.ai; //#3637
                                $_.aiexists(); //#3637
                                if ($nt($k[--$j])) { //#3637
                                    $j--; //#3637
                                    $k[$j++] = false; //#3637
                                } //#3637
                            }); //#3637
                            if ($k[--$j]) { //#3639
                                $j--; //#3639
                                $k[$j++] = true; //#3639
                                return true; //#3639
                            } //#3639
                        }); //#3639
                        if ($nt($k[--$j])) { //#3654
                            $k[$j++] = Infinity; //#3642
                            $forall($get($get($_.gs1syntax, $_.ai), 'req'), function() { //#3644
                                $forall($k[--$j], function() { //#3644
                                    $forall($k[--$j], function() { //#3644
                                        $k[$j++] = "+"; //#3644
                                    }); //#3644
                                    $j--; //#3644
                                    $k[$j++] = " OR "; //#3644
                                }); //#3644
                                $j--; //#3644
                                $k[$j++] = " WITH "; //#3644
                            }); //#3644
                            $j--; //#3644
                            var _eG = $a(); //#3644
                            $k[$j++] = _eG; //#3645
                            $k[$j++] = 0; //#3645
                            for (var _eH = 0, _eI = _eG.length; _eH < _eI; _eH++) { //#3645
                                var _eK = $k[--$j]; //#3645
                                $k[$j++] = $f(_eK + $get(_eG, _eH).length); //#3645
                            } //#3645
                            var _eM = $_.ai.length + 49; //#3646
                            $k[$j++] = _eM; //#3646
                            $k[$j++] = _eM; //#3646
                            $r(3, -1); //#3646
                            var _eN = $k[--$j]; //#3646
                            var _eP = $s($f($k[--$j] + _eN)); //#3646
                            var _eQ = $k[--$j]; //#3646
                            $k[$j++] = _eP; //#3646
                            $k[$j++] = _eQ; //#3646
                            $r(3, -1); //#3646
                            $forall($k[--$j], function() { //#3649
                                var _eS = $k[--$j]; //#3647
                                var _eT = $k[--$j]; //#3647
                                var _eU = $k[--$j]; //#3648
                                $puti(_eU, _eT, _eS); //#3648
                                $k[$j++] = _eU; //#3648
                                $k[$j++] = $f(_eS.length + _eT); //#3648
                            }); //#3648
                            $j--; //#3649
                            var _eV = $k[--$j]; //#3650
                            $puti(_eV, 0, "One of more requisite AIs for AI \("); //#3650
                            $puti(_eV, 34, $_.ai); //#3651
                            $puti(_eV, 34 + $_.ai.length, "\) are missing: "); //#3652
                            $k[$j++] = 'bwipp.GS1missingAIs#3653'; //#3653
                            $k[$j++] = _eV; //#3653
                            bwipp_raiseerror(); //#3653
                        } //#3653
                    }); //#3653
                } else { //#3657
                    $j -= 2; //#3657
                } //#3657
            } //#3657
        } //#3657
    } //#3657
    $k[$j++] = $_.ais; //#3666
    $k[$j++] = $_.vals; //#3666
    $k[$j++] = $_.fncs; //#3666
    $_ = Object.getPrototypeOf($_); //#3666
    $_ = Object.getPrototypeOf($_); //#3668
} //bwipp_gs1process
function bwipp_renmatrix() {
    if ($_.bwipjs_dontdraw) { //#4020
        return; //#4020
    } //#4020
    $_ = Object.create($_); //#4022
    $_.width = 1; //#4025
    $_.height = 1; //#4026
    $_.barcolor = "unset"; //#4027
    $_.backgroundcolor = "unset"; //#4028
    $_.bordercolor = "unset"; //#4029
    $_.colormap = "unset"; //#4030
    $_.dotty = false; //#4031
    $_.inkspread = null; //#4032
    $_.inkspreadh = null; //#4033
    $_.inkspreadv = null; //#4034
    $_.txt = $a([]); //#4035
    $_.includetext = false; //#4036
    $_.textcolor = "unset"; //#4037
    $_.textxalign = "unset"; //#4038
    $_.textyalign = "unset"; //#4039
    $_.textfont = "OCR-B"; //#4040
    $_.textsize = 10; //#4041
    $_.textxoffset = 0; //#4042
    $_.textyoffset = 0; //#4043
    $_.textgaps = 0; //#4044
    $_.alttext = ""; //#4045
    $_.extratext = ""; //#4046
    $_.extratextcolor = "unset"; //#4047
    $_.extratextxalign = "left"; //#4048
    $_.extratextyalign = "above"; //#4049
    $_.extratextfont = "OCR-B"; //#4050
    $_.extratextsize = 10; //#4051
    $_.extratextxoffset = 0; //#4052
    $_.extratextyoffset = 0; //#4053
    $_.extratextgaps = 0; //#4054
    $_.showborder = false; //#4055
    $_.borderleft = 0; //#4056
    $_.borderright = 0; //#4057
    $_.bordertop = 0; //#4058
    $_.borderbottom = 0; //#4059
    $_.borderwidth = 0.25; //#4060
    $forall($k[--$j], function() { //#4062
        var _3 = $k[--$j]; //#4062
        $_[$k[--$j]] = _3; //#4062
    }); //#4062
    $k[$j++] = $_.opt; //#4063
    delete $_['opt']; //#4063
    $k[$j++] = $_; //#4063
    bwipp_processoptions(); //#4063
    $j--; //#4063
    if ($eq($_.inkspread, null)) { //#4065
        $_.inkspread = 0; //#4065
    } //#4065
    if ($eq($_.inkspreadh, null)) { //#4066
        $_.inkspreadh = $_.inkspread; //#4066
    } //#4066
    if ($eq($_.inkspreadv, null)) { //#4067
        $_.inkspreadv = $_.inkspread; //#4067
    } //#4067
    if ($_.textsize <= 0) { //#4078
        $k[$j++] = 'bwipp.renmatrixBadTextsize#4077'; //#4077
        $k[$j++] = "The font size must be greater than zero"; //#4077
        bwipp_raiseerror(); //#4077
    } //#4077
    $_.xyget = function() {
        var _D = $k[--$j]; //#4080
        var _G = $get($_.pixs, $f($k[--$j] + (_D * $_.pixx))); //#4080
        $k[$j++] = _G; //#4080
    }; //#4080
    $_.cget = function() {
        var _I = $k[--$j]; //#4081
        var _L = $get($_.cache, $f($k[--$j] + (_I * $_.pixx))); //#4081
        var _M = $k[--$j]; //#4081
        $k[$j++] = $an(_M, _L); //#4081
    }; //#4081
    $_.cput = function() {
        var _N = $k[--$j]; //#4083
        $k[$j++] = _N; //#4087
        if ((_N % 4) == 0) { //#4086
            $r(3, 1); //#4084
            var _O = $_.pixx; //#4084
            var _P = $k[--$j]; //#4084
            var _Q = $k[--$j]; //#4084
            var _R = $_.cache; //#4084
            $k[$j++] = _R; //#4084
            $k[$j++] = $f(_Q + (_P * _O)); //#4084
            $k[$j++] = $get(_R, $f(_Q + (_P * _O))); //#4084
            $r(4, -1); //#4084
            var _T = $k[--$j]; //#4084
            var _U = $k[--$j]; //#4084
            var _V = $k[--$j]; //#4084
            $put($k[--$j], _V, $or(_U, _T)); //#4084
        } else { //#4086
            $j -= 3; //#4086
        } //#4086
    }; //#4086
    $_.abcd = function() {
        $k[$j++] = $s(4); //#4095
        $k[$j++] = 0; //#4095
        $k[$j++] = Infinity; //#4091
        $r(5, -2); //#4092
        var _Z = $k[--$j]; //#4093
        var _b = $f($k[--$j] + (_Z * $_.pixx)); //#4093
        $k[$j++] = _b; //#4094
        $aload($geti($_.pixs, _b, 2)); //#4094
        $r(3, -1); //#4094
        $aload($geti($_.pixs, $f($k[--$j] + $_.pixx), 2)); //#4095
        var _i = $a(); //#4095
        for (var _j = 0, _k = _i.length; _j < _k; _j++) { //#4096
            var _m = $k[--$j]; //#4096
            var _n = $k[--$j]; //#4096
            $put(_n, _m, $f($get(_i, _j) + 48)); //#4096
            $k[$j++] = _n; //#4096
            $k[$j++] = $f(_m + 1); //#4096
        } //#4096
        $j--; //#4096
    }; //#4096
    $_.right = function() {
        if ($_.dir != 1) { //#4099
            $k[$j++] = $_.x; //#4099
            $k[$j++] = $_.y; //#4099
            $k[$j++] = $_.dir; //#4099
            $_.cput(); //#4099
            $k[$j++] = $a([$_.x, $_.y]); //#4099
        } //#4099
        $_.x = $_.x + 1; //#4099
        $_.dir = 1; //#4099
    }; //#4099
    $_.down = function() {
        if ($_.dir != 2) { //#4100
            $k[$j++] = $_.x; //#4100
            $k[$j++] = $_.y; //#4100
            $k[$j++] = $_.dir; //#4100
            $_.cput(); //#4100
            $k[$j++] = $a([$_.x, $_.y]); //#4100
        } //#4100
        $_.y = $_.y + 1; //#4100
        $_.dir = 2; //#4100
    }; //#4100
    $_.left = function() {
        if ($_.dir != 4) { //#4101
            $k[$j++] = $_.x; //#4101
            $k[$j++] = $_.y; //#4101
            $k[$j++] = $_.dir; //#4101
            $_.cput(); //#4101
            $k[$j++] = $a([$_.x, $_.y]); //#4101
        } //#4101
        $_.x = $_.x - 1; //#4101
        $_.dir = 4; //#4101
    }; //#4101
    $_.up = function() {
        if ($_.dir != 8) { //#4102
            $k[$j++] = $_.x; //#4102
            $k[$j++] = $_.y; //#4102
            $k[$j++] = $_.dir; //#4102
            $_.cput(); //#4102
            $k[$j++] = $a([$_.x, $_.y]); //#4102
        } //#4102
        $_.y = $_.y - 1; //#4102
        $_.dir = 8; //#4102
    }; //#4102
    $_.trace = function() {
        $_.y = $k[--$j]; //#4106
        $_.x = $k[--$j]; //#4106
        $k[$j++] = 'dir'; //#4108
        $k[$j++] = $f($_.x + 1); //#4108
        $k[$j++] = $f($_.y + 1); //#4108
        $_.xyget(); //#4108
        var _1P = ($k[--$j] == 1) ? 8 : 4; //#4108
        $_[$k[--$j]] = _1P; //#4108
        $_.sx = $_.x; //#4109
        $_.sy = $_.y; //#4109
        $_.sdir = $_.dir; //#4109
        $k[$j++] = Infinity; //#4113
        for (;;) { //#4127
            $k[$j++] = $_.x; //#4114
            $k[$j++] = $_.y; //#4114
            $_.abcd(); //#4114
            for (var _1W = 0, _1X = 1; _1W < _1X; _1W++) { //#4125
                var _1Y = $k[--$j]; //#4116
                $k[$j++] = _1Y; //#4116
                if ($eq(_1Y, "0001") || ($eq(_1Y, "0011") || $eq(_1Y, "1011"))) { //#4116
                    $j--; //#4116
                    $_.right(); //#4116
                    break; //#4116
                } //#4116
                var _1Z = $k[--$j]; //#4117
                $k[$j++] = _1Z; //#4117
                if ($eq(_1Z, "0010") || ($eq(_1Z, "1010") || $eq(_1Z, "1110"))) { //#4117
                    $j--; //#4117
                    $_.down(); //#4117
                    break; //#4117
                } //#4117
                var _1a = $k[--$j]; //#4118
                $k[$j++] = _1a; //#4118
                if ($eq(_1a, "1000") || ($eq(_1a, "1100") || $eq(_1a, "1101"))) { //#4118
                    $j--; //#4118
                    $_.left(); //#4118
                    break; //#4118
                } //#4118
                var _1b = $k[--$j]; //#4119
                $k[$j++] = _1b; //#4119
                if ($eq(_1b, "0100") || ($eq(_1b, "0101") || $eq(_1b, "0111"))) { //#4119
                    $j--; //#4119
                    $_.up(); //#4119
                    break; //#4119
                } //#4119
                var _1c = $k[--$j]; //#4120
                $k[$j++] = _1c; //#4124
                if ($eq(_1c, "1001")) { //#4123
                    if ($_.dir == 2) { //#4121
                        $j--; //#4121
                        $_.left(); //#4121
                        break; //#4121
                    } else { //#4121
                        $j--; //#4121
                        $_.right(); //#4121
                        break; //#4121
                    } //#4121
                } else { //#4123
                    if ($_.dir == 1) { //#4123
                        $j--; //#4123
                        $_.down(); //#4123
                        break; //#4123
                    } else { //#4123
                        $j--; //#4123
                        $_.up(); //#4123
                        break; //#4123
                    } //#4123
                } //#4123
            } //#4123
            if (($eq($_.x, $_.sx) && $eq($_.y, $_.sy)) && ($_.dir == $_.sdir)) { //#4126
                break; //#4126
            } //#4126
        } //#4126
        $astore($a($counttomark())); //#4128
        var _1n = $k[--$j]; //#4128
        var _1o = $k[--$j]; //#4128
        $k[$j++] = _1n; //#4128
        $k[$j++] = _1o; //#4128
        $j--; //#4128
    }; //#4128
    $_.drawlayer = function() {
        $_.pixsorig = $_.pixs; //#4173
        $_.pixs = $k[--$j]; //#4174
        $k[$j++] = Infinity; //#4177
        for (var _1s = 0, _1t = $_.pixx + 2; _1s < _1t; _1s++) { //#4178
            $k[$j++] = 0; //#4178
        } //#4178
        for (var _1x = 0, _1y = $_.pixx, _1w = $_.pixs.length - 1; _1y < 0 ? _1x >= _1w : _1x <= _1w; _1x += _1y) { //#4183
            $k[$j++] = 0; //#4181
            $aload($geti($_.pixs, _1x, $_.pixx)); //#4181
            $k[$j++] = 0; //#4182
        } //#4182
        for (var _23 = 0, _24 = $_.pixx + 2; _23 < _24; _23++) { //#4184
            $k[$j++] = 0; //#4184
        } //#4184
        $_.pixs = $a(); //#4184
        $_.pixx = $_.pixx + 2; //#4186
        $_.pixy = $_.pixy + 2; //#4187
        $k[$j++] = Infinity; //#4190
        for (var _29 = 0, _2A = $_.pixs.length; _29 < _2A; _29++) { //#4190
            $k[$j++] = 0; //#4190
        } //#4190
        $_.cache = $a(); //#4190
        $k[$j++] = Infinity; //#4193
        for (var _2E = 0, _2D = $_.pixy - 2; _2E <= _2D; _2E += 1) { //#4210
            $_.j = _2E; //#4195
            for (var _2H = 0, _2G = $_.pixx - 2; _2H <= _2G; _2H += 1) { //#4209
                $_.i = _2H; //#4197
                $k[$j++] = 'k'; //#4198
                $k[$j++] = $_.i; //#4198
                $k[$j++] = $_.j; //#4198
                $_.abcd(); //#4198
                var _2K = $k[--$j]; //#4198
                $_[$k[--$j]] = _2K; //#4198
                if ($eq($_.k, "0001") || $eq($_.k, "1001")) { //#4203
                    $k[$j++] = 8; //#4200
                    $k[$j++] = $_.i; //#4200
                    $k[$j++] = $_.j; //#4200
                    $_.cget(); //#4200
                    if ($k[--$j] == 0) { //#4202
                        $k[$j++] = $_.i; //#4201
                        $k[$j++] = $_.j; //#4201
                        $_.trace(); //#4201
                    } //#4201
                } //#4201
                if ($eq($_.k, "1110")) { //#4208
                    $k[$j++] = 4; //#4205
                    $k[$j++] = $_.i; //#4205
                    $k[$j++] = $_.j; //#4205
                    $_.cget(); //#4205
                    if ($k[--$j] == 0) { //#4207
                        $k[$j++] = $_.i; //#4206
                        $k[$j++] = $_.j; //#4206
                        $_.trace(); //#4206
                    } //#4206
                } //#4206
            } //#4206
        } //#4206
        $_.paths = $a(); //#4206
        $_.pixx = $_.pixx - 2; //#4214
        $_.pixy = $_.pixy - 2; //#4215
        $$.newpath(); //#4218
        var _2c = $_.paths; //#4219
        for (var _2d = 0, _2e = _2c.length; _2d < _2e; _2d++) { //#4237
            $_.p = $get(_2c, _2d); //#4220
            $_.len = $_.p.length; //#4221
            $aload($get($_.p, $_.len - 1)); //#4222
            $aload($get($_.p, 0)); //#4223
            for (var _2o = 0, _2n = $_.len - 1; _2o <= _2n; _2o += 1) { //#4234
                $_.i = _2o; //#4225
                $aload($get($_.p, ($_.i + 1) % $_.len)); //#4226
                $r(6, -2); //#4226
                var _2t = $k[--$j]; //#4227
                var _2u = $k[--$j]; //#4227
                var _2v = $k[--$j]; //#4227
                var _2w = $k[--$j]; //#4227
                var _2x = $k[--$j]; //#4227
                var _2y = $k[--$j]; //#4227
                $k[$j++] = _2y; //#4228
                $k[$j++] = _2x; //#4228
                $k[$j++] = _2w; //#4228
                $k[$j++] = _2v; //#4228
                $k[$j++] = _2u; //#4228
                $k[$j++] = _2y; //#4228
                $k[$j++] = $_.inkspreadh; //#4228
                if ($lt(_2v, _2t)) { //#4228
                    var _30 = $k[--$j]; //#4228
                    var _31 = $k[--$j]; //#4228
                    $k[$j++] = $f(_31 + _30); //#4228
                } else { //#4228
                    var _32 = $k[--$j]; //#4228
                    var _33 = $k[--$j]; //#4228
                    $k[$j++] = $f(_33 - _32); //#4228
                } //#4228
                $r(4, 1); //#4229
                var _34 = $k[--$j]; //#4230
                var _35 = $k[--$j]; //#4230
                var _36 = $k[--$j]; //#4230
                var _37 = $k[--$j]; //#4230
                var _38 = $k[--$j]; //#4230
                $k[$j++] = _38; //#4231
                $k[$j++] = _37; //#4231
                $k[$j++] = _36; //#4231
                $k[$j++] = _35; //#4231
                $k[$j++] = _38; //#4231
                $k[$j++] = $_.inkspreadv; //#4231
                if ($gt(_36, _34)) { //#4231
                    var _3A = $k[--$j]; //#4231
                    var _3B = $k[--$j]; //#4231
                    $k[$j++] = $f(_3B + _3A); //#4231
                } else { //#4231
                    var _3C = $k[--$j]; //#4231
                    var _3D = $k[--$j]; //#4231
                    $k[$j++] = $f(_3D - _3C); //#4231
                } //#4231
                $r(4, -1); //#4232
                var _3E = $k[--$j]; //#4232
                var _3F = $k[--$j]; //#4232
                $k[$j++] = _3E; //#4233
                $k[$j++] = $f($_.pixy - _3F); //#4233
                if ($_.i == 0) { //#4233
                    var _3I = $k[--$j]; //#4233
                    $$.moveto($k[--$j], _3I); //#4233
                } else { //#4233
                    var _3K = $k[--$j]; //#4233
                    $$.lineto($k[--$j], _3K); //#4233
                } //#4233
            } //#4233
            $$.closepath(); //#4235
            $j -= 4; //#4236
        } //#4236
        $$.fill(); //#4238
        $_.pixs = $_.pixsorig; //#4240
    }; //#4240
    $_.drawlayerdots = function() {
        $_.pixsorig = $_.pixs; //#4246
        $_.pixs = $k[--$j]; //#4247
        $$.newpath(); //#4249
        for (var _3R = 0, _3Q = $_.pixs.length - 1; _3R <= _3Q; _3R += 1) { //#4257
            $_.x = _3R % $_.pixx; //#4251
            $_.y = ~~(_3R / $_.pixx); //#4252
            $k[$j++] = $_.x; //#4253
            $k[$j++] = $_.y; //#4253
            $_.xyget(); //#4253
            if ($k[--$j] == 1) { //#4256
                $$.moveto($f($_.x + 0.5), $f(($_.pixy - $_.y) - 0.5)); //#4254
                $$.arc($f($_.x + 0.5), $f(($_.pixy - $_.y) - 0.5), $f(0.5 - $_.inkspread), 0, 360, 1); //#4255
            } //#4255
        } //#4255
        $$.fill(); //#4258
        $_.pixs = $_.pixsorig; //#4260
    }; //#4260
    $$.save(); //#4264
    var _3f = $$.currpos(); //#4266
    $$.translate(_3f.x, _3f.y); //#4266
    $_.inkspread = $_.inkspread / 2; //#4268
    $_.inkspreadh = $_.inkspreadh / 2; //#4269
    $_.inkspreadv = $_.inkspreadv / 2; //#4270
    $$.scale(($_.width / $_.pixx) * 72, ($_.height / $_.pixy) * 72); //#4273
    if ($_.showborder) { //#4285
        $_.tl = $a([-($f($_.borderleft + ($_.borderwidth / 2))), $f(($_.pixy + $_.bordertop) + ($_.borderwidth / 2))]); //#4277
        $_.tr = $a([$f(($_.pixx + $_.borderright) + ($_.borderwidth / 2)), $f(($_.pixy + $_.bordertop) + ($_.borderwidth / 2))]); //#4278
        $_.bl = $a([-($f($_.borderleft + ($_.borderwidth / 2))), -($f($_.borderbottom + ($_.borderwidth / 2)))]); //#4279
        $_.br = $a([$f(($_.pixx + $_.borderright) + ($_.borderwidth / 2)), -($f($_.borderbottom + ($_.borderwidth / 2)))]); //#4280
    } else { //#4285
        $_.tl = $a([$f((-$_.borderleft) + $_.inkspread), $f(($_.pixy + $_.bordertop) - $_.inkspread)]); //#4282
        $_.tr = $a([$f(($_.pixx + $_.borderright) - $_.inkspread), $f(($_.pixy + $_.bordertop) - $_.inkspread)]); //#4283
        $_.bl = $a([$f((-$_.borderleft) + $_.inkspread), $f((-$_.borderbottom) + $_.inkspread)]); //#4284
        $_.br = $a([$f(($_.pixx + $_.borderright) - $_.inkspread), $f((-$_.borderbottom) + $_.inkspread)]); //#4285
    } //#4285
    if ($ne($_.backgroundcolor, "unset")) { //#4292
        $$.save(); //#4288
        $$.newpath(); //#4289
        $aload($_.bl); //#4289
        var _4c = $k[--$j]; //#4289
        $$.moveto($k[--$j], _4c); //#4289
        var _4h = $a([$_.br, $_.tr, $_.tl]); //#4289
        for (var _4i = 0, _4j = _4h.length; _4i < _4j; _4i++) { //#4289
            $aload($get(_4h, _4i)); //#4289
            var _4l = $k[--$j]; //#4289
            $$.lineto($k[--$j], _4l); //#4289
        } //#4289
        $$.closepath(); //#4289
        $$.setcolor($_.backgroundcolor); //#4290
        $$.fill(); //#4290
        $$.restore(); //#4291
    } //#4291
    if ($_.showborder) { //#4299
        $$.save(); //#4294
        $$.newpath(); //#4295
        $aload($_.bl); //#4295
        var _4q = $k[--$j]; //#4295
        $$.moveto($k[--$j], _4q); //#4295
        var _4v = $a([$_.br, $_.tr, $_.tl]); //#4295
        for (var _4w = 0, _4x = _4v.length; _4w < _4x; _4w++) { //#4295
            $aload($get(_4v, _4w)); //#4295
            var _4z = $k[--$j]; //#4295
            $$.lineto($k[--$j], _4z); //#4295
        } //#4295
        $$.closepath(); //#4295
        if ($ne($_.bordercolor, "unset")) { //#4296
            $$.setcolor($_.bordercolor); //#4296
        } //#4296
        $$.setlinewidth($f($_.borderwidth - ($_.inkspread * 2))); //#4297
        $$.stroke(); //#4297
        $$.restore(); //#4298
    } //#4298
    if ($eq($_.colormap, "unset")) { //#4304
        var _57 = new Map([
            [1, $_.barcolor]
        ]); //#4303
        $_.colormap = _57; //#4303
    } //#4303
    var _58 = $_.colormap; //#4306
    for (var _5D = _58.size, _5C = _58.keys(), _5B = 0; _5B < _5D; _5B++) { //#4312
        var _59 = _5C.next().value; //#4312
        var _5A = _58.get(_59); //#4312
        $k[$j++] = _59; //#4307
        $k[$j++] = _5A; //#4307
        if ($ne(_5A, "unset")) { //#4307
            $$.setcolor($k[--$j]); //#4307
        } else { //#4307
            $j--; //#4307
        } //#4307
        $_.key = $k[--$j]; //#4308
        $k[$j++] = Infinity; //#4309
        var _5G = $_.pixs; //#4310
        for (var _5H = 0, _5I = _5G.length; _5H < _5I; _5H++) { //#4310
            var _5L = $eq($get(_5G, _5H), $_.key) ? 1 : 0; //#4310
            $k[$j++] = _5L; //#4310
        } //#4310
        var _5M = $a(); //#4310
        $k[$j++] = _5M; //#4311
        if ($_.dotty) { //#4311
            $_.drawlayerdots(); //#4311
        } else { //#4311
            $_.drawlayer(); //#4311
        } //#4311
    } //#4311
    if ($_.includetext) { //#4376
        if ($ne($_.textcolor, "unset")) { //#4316
            $$.setcolor($_.textcolor); //#4316
        } //#4316
        if (($eq($_.textxalign, "unset") && $eq($_.textyalign, "unset")) && $eq($_.alttext, "")) { //#4374
            $_.s = 0; //#4318
            $_.fn = ""; //#4318
            var _5U = $_.txt; //#4319
            for (var _5V = 0, _5W = _5U.length; _5V < _5W; _5V++) { //#4332
                $aload($get(_5U, _5V)); //#4320
                var _5Y = $k[--$j]; //#4321
                var _5Z = $k[--$j]; //#4321
                $k[$j++] = _5Z; //#4330
                $k[$j++] = _5Y; //#4330
                if ((_5Y != $_.s) || $ne(_5Z, $_.fn)) { //#4329
                    var _5c = $k[--$j]; //#4322
                    $k[$j++] = _5c; //#4325
                    if (_5c <= 0) { //#4325
                        $j -= 5; //#4323
                        $k[$j++] = 'bwipp.renmatrixFontTooSmall#4324'; //#4324
                        $k[$j++] = "The font size is too small"; //#4324
                        bwipp_raiseerror(); //#4324
                    } //#4324
                    var _5d = $k[--$j]; //#4326
                    var _5e = $k[--$j]; //#4326
                    $_.s = _5d; //#4326
                    $_.fn = _5e; //#4326
                    $$.selectfont(_5e, _5d); //#4327
                } else { //#4329
                    $j -= 2; //#4329
                } //#4329
                var _5f = $k[--$j]; //#4331
                $$.moveto($k[--$j], _5f); //#4331
                $$.show($k[--$j], 0, 0); //#4331
            } //#4331
        } else { //#4374
            $$.selectfont($_.textfont, $_.textsize); //#4334
            if ($eq($_.alttext, "")) { //#4340
                $k[$j++] = Infinity; //#4336
                var _5l = $_.txt; //#4336
                for (var _5m = 0, _5n = _5l.length; _5m < _5n; _5m++) { //#4336
                    $forall($get($get(_5l, _5m), 0)); //#4336
                } //#4336
                $_.txt = $a(); //#4336
                $_.tstr = $s($_.txt.length); //#4337
                for (var _5v = 0, _5u = $_.txt.length - 1; _5v <= _5u; _5v += 1) { //#4338
                    $put($_.tstr, _5v, $get($_.txt, _5v)); //#4338
                } //#4338
            } else { //#4340
                $_.tstr = $_.alttext; //#4340
            } //#4340
            if ($_.tstr.length == 0) { //#4350
                $k[$j++] = 0; //#4345
            } else { //#4350
                $$.save(); //#4347
                $$.newpath(); //#4348
                $$.moveto(0, 0); //#4348
                $$.charpath("0", false); //#4348
                var _61 = $$.pathbbox(); //#4348
                $$.restore(); //#4350
                $k[$j++] = _61.ury; //#4350
            } //#4350
            $_.textascent = $k[--$j]; //#4359
            var _64 = $$.stringwidth($_.tstr); //#4360
            $_.textwidth = $f(_64.w + (($_.tstr.length - 1) * $_.textgaps)); //#4360
            $_.textxpos = $f($_.textxoffset + ($f($_.pixx - $_.textwidth) / 2)); //#4362
            if ($eq($_.textxalign, "left")) { //#4363
                $_.textxpos = $_.textxoffset; //#4363
            } //#4363
            if ($eq($_.textxalign, "right")) { //#4364
                $_.textxpos = $f(($_.pixx - $_.textxoffset) - $_.textwidth); //#4364
            } //#4364
            if ($eq($_.textxalign, "offleft")) { //#4365
                $_.textxpos = -$f($_.textwidth + $_.textxoffset); //#4365
            } //#4365
            if ($eq($_.textxalign, "offright")) { //#4366
                $_.textxpos = $_.pixx + $_.textxoffset; //#4366
            } //#4366
            if ($eq($_.textxalign, "justify") && ($_.textwidth < $_.pixx)) { //#4370
                $_.textxpos = 0; //#4368
                $_.textgaps = $f($_.pixx - $_.textwidth) / ($_.tstr.length - 1); //#4369
            } //#4369
            $_.textypos = -($f($f($_.textyoffset + $_.textascent) + 1)); //#4371
            if ($eq($_.textyalign, "above")) { //#4372
                $_.textypos = ($_.textyoffset + $_.pixy) + 1; //#4372
            } //#4372
            if ($eq($_.textyalign, "center")) { //#4373
                $_.textypos = $f($_.textyoffset + ($f($_.pixy - $_.textascent) / 2)); //#4373
            } //#4373
            $$.moveto($_.textxpos, $_.textypos); //#4374
            $$.show($_.tstr, $_.textgaps, 0); //#4374
        } //#4374
    } //#4374
    if ($ne($_.extratext, "")) { //#4411
        if ($ne($_.extratextcolor, "unset")) { //#4380
            $$.setcolor($_.extratextcolor); //#4380
        } //#4380
        $$.selectfont($_.extratextfont, $_.extratextsize); //#4381
        $$.save(); //#4384
        $$.newpath(); //#4385
        $$.moveto(0, 0); //#4385
        $$.charpath("0", false); //#4385
        var _6k = $$.pathbbox(); //#4385
        $$.restore(); //#4387
        $_.textascent = _6k.ury; //#4395
        var _6m = $$.stringwidth($_.extratext); //#4396
        $_.textwidth = $f(_6m.w + (($_.extratext.length - 1) * $_.extratextgaps)); //#4396
        $_.extratextxpos = $f($_.extratextxoffset + ($f($_.pixx - $_.textwidth) / 2)); //#4398
        if ($eq($_.extratextxalign, "left")) { //#4399
            $_.textxpos = $_.extratextxoffset; //#4399
        } //#4399
        if ($eq($_.extratextxalign, "right")) { //#4400
            $_.textxpos = $f(($_.pixx - $_.extratextxoffset) - $_.textwidth); //#4400
        } //#4400
        if ($eq($_.extratextxalign, "offleft")) { //#4401
            $_.textxpos = -$f($_.textwidth + $_.extratextxoffset); //#4401
        } //#4401
        if ($eq($_.extratextxalign, "offright")) { //#4402
            $_.textxpos = $_.pixx + $_.extratextxoffset; //#4402
        } //#4402
        if ($eq($_.extratextxalign, "justify") && ($_.textwidth < $_.pixx)) { //#4406
            $_.textxpos = 0; //#4404
            $_.extratextgaps = $f($_.pixx - $_.textwidth) / ($_.extratext.length - 1); //#4405
        } //#4405
        $_.textypos = -($f($f($_.extratextyoffset + $_.textascent) + 1)); //#4407
        if ($eq($_.extratextyalign, "above")) { //#4408
            $_.textypos = ($_.extratextyoffset + $_.pixy) + 1; //#4408
        } //#4408
        if ($eq($_.extratextyalign, "center")) { //#4409
            $_.textypos = $f($_.extratextyoffset + ($f($_.pixy - $_.textascent) / 2)); //#4409
        } //#4409
        $$.moveto($_.textxpos, $_.textypos); //#4410
        $$.show($_.extratext, $_.extratextgaps, 0); //#4410
    } //#4410
    $$.restore(); //#4413
    $_ = Object.getPrototypeOf($_); //#4415
} //bwipp_renmatrix
function bwipp_ean5() {
    $_ = Object.create($_); //#4597
    $_.dontdraw = false; //#4600
    $_.includetext = false; //#4601
    $_.textfont = "OCR-B"; //#4602
    $_.textsize = 12; //#4603
    $_.textxoffset = 0; //#4604
    $_.textyoffset = null; //#4605
    $_.height = 0.7; //#4606
    $k[$j++] = $_; //#4608
    bwipp_processoptions(); //#4608
    $_.options = $k[--$j]; //#4608
    $_.barcode = $k[--$j]; //#4609
    if ($eq($_.textyoffset, null)) { //#4613
        $_.textyoffset = $f(($_.height * 72) + 1); //#4612
    } //#4612
    bwipp_loadctx(bwipp_ean5); //#4615
    if ($_.barcode.length != 5) { //#4620
        $k[$j++] = 'bwipp.ean5badLength#4619'; //#4619
        $k[$j++] = "EAN-5 add-on must be 5 digits"; //#4619
        bwipp_raiseerror(); //#4619
    } //#4619
    $forall($_.barcode, function() { //#4625
        var _6 = $k[--$j]; //#4622
        if ((_6 < 48) || (_6 > 57)) { //#4624
            $k[$j++] = 'bwipp.ean5badCharacter#4623'; //#4623
            $k[$j++] = "EAN-5 add-on must contain only digits"; //#4623
            bwipp_raiseerror(); //#4623
        } //#4623
    }); //#4623
    if (!bwipp_ean5.__4643__) { //#4643
        $_ = Object.create($_); //#4643
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#4633
        $_.barchars = "0123456789"; //#4636
        $_.mirrormaps = $a(["11000", "10100", "10010", "10001", "01100", "00110", "00011", "01010", "01001", "00101"]); //#4642
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean5.$ctx[id] = $_[id]); //#4642
        bwipp_ean5.__4643__ = 1; //#4642
        $_ = Object.getPrototypeOf($_); //#4642
    } //#4642
    $_.checksum = 0; //#4645
    for (var _A = 0; _A <= 4; _A += 1) { //#4654
        $_.i = _A; //#4647
        $_.barchar = $f($get($_.barcode, $_.i) - 48); //#4648
        if (($_.i % 2) == 0) { //#4652
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4650
        } else { //#4652
            $_.checksum = $f(($_.barchar * 9) + $_.checksum); //#4652
        } //#4652
    } //#4652
    $_.checksum = $_.checksum % 10; //#4655
    $_.mirrormap = $get($_.mirrormaps, $_.checksum); //#4656
    $_.sbs = $s(31); //#4658
    $_.txt = $a(5); //#4659
    for (var _P = 0; _P <= 4; _P += 1) { //#4689
        $_.i = _P; //#4662
        if ($_.i == 0) { //#4668
            $puti($_.sbs, 0, $get($_.encs, 10)); //#4666
        } else { //#4668
            $puti($_.sbs, (($_.i - 1) * 6) + 7, $get($_.encs, 11)); //#4668
        } //#4668
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4672
        $j--; //#4673
        $_.indx = $k[--$j].length; //#4674
        $j -= 2; //#4675
        $_.enc = $get($_.encs, $_.indx); //#4676
        if ($get($_.mirrormap, $_.i) == 49) { //#4686
            $_.enclen = $_.enc.length; //#4678
            $_.revenc = $s($_.enclen); //#4679
            for (var _o = 0, _n = $_.enclen - 1; _o <= _n; _o += 1) { //#4684
                $_.j = _o; //#4681
                $_.char = $get($_.enc, $_.j); //#4682
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4683
            } //#4683
            $_.enc = $_.revenc; //#4685
        } //#4685
        $puti($_.sbs, ($_.i * 6) + 3, $_.enc); //#4687
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 9) + 10) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4688
    } //#4688
    $k[$j++] = Infinity; //#4692
    $k[$j++] = Infinity; //#4694
    var _1B = $_.sbs; //#4694
    for (var _1C = 0, _1D = _1B.length; _1C < _1D; _1C++) { //#4694
        $k[$j++] = $get(_1B, _1C) - 48; //#4694
    } //#4694
    var _1F = $a(); //#4694
    $k[$j++] = Infinity; //#4695
    for (var _1G = 0, _1H = 16; _1G < _1H; _1G++) { //#4695
        $k[$j++] = $_.height; //#4695
    } //#4695
    var _1J = $a(); //#4695
    $k[$j++] = Infinity; //#4696
    for (var _1K = 0, _1L = 16; _1K < _1L; _1K++) { //#4696
        $k[$j++] = 0; //#4696
    } //#4696
    var _1M = $a(); //#4696
    $k[$j++] = 'ren'; //#4699
    $k[$j++] = 'renlinear'; //#4699
    $k[$j++] = 'sbs'; //#4699
    $k[$j++] = _1F; //#4699
    $k[$j++] = 'bhs'; //#4699
    $k[$j++] = _1J; //#4699
    $k[$j++] = 'bbs'; //#4699
    $k[$j++] = _1M; //#4699
    if ($_.includetext) { //#4699
        $k[$j++] = 'txt'; //#4698
        $k[$j++] = $_.txt; //#4698
    } //#4698
    $k[$j++] = 'opt'; //#4705
    $k[$j++] = $_.options; //#4705
    $k[$j++] = 'guardrightpos'; //#4705
    $k[$j++] = 5; //#4705
    $k[$j++] = 'guardrightypos'; //#4705
    $k[$j++] = $f($_.textyoffset + 4); //#4705
    $k[$j++] = 'borderleft'; //#4705
    $k[$j++] = 12; //#4705
    $k[$j++] = 'borderright'; //#4705
    $k[$j++] = 5; //#4705
    $k[$j++] = 'bordertop'; //#4705
    $k[$j++] = 10; //#4705
    var _1R = $d(); //#4705
    $k[$j++] = _1R; //#4708
    if (!$_.dontdraw) { //#4708
        bwipp_renlinear(); //#4708
    } //#4708
    $_ = Object.getPrototypeOf($_); //#4710
    $_ = Object.getPrototypeOf($_); //#4712
} //bwipp_ean5
function bwipp_ean2() {
    $_ = Object.create($_); //#4742
    $_.dontdraw = false; //#4745
    $_.includetext = false; //#4746
    $_.textfont = "OCR-B"; //#4747
    $_.textsize = 12; //#4748
    $_.textxoffset = 0; //#4749
    $_.textyoffset = null; //#4750
    $_.height = 0.7; //#4751
    $k[$j++] = $_; //#4753
    bwipp_processoptions(); //#4753
    $_.options = $k[--$j]; //#4753
    $_.barcode = $k[--$j]; //#4754
    if ($eq($_.textyoffset, null)) { //#4758
        $_.textyoffset = $f(($_.height * 72) + 1); //#4757
    } //#4757
    bwipp_loadctx(bwipp_ean2); //#4760
    if ($_.barcode.length != 2) { //#4765
        $k[$j++] = 'bwipp.ean2badLength#4764'; //#4764
        $k[$j++] = "EAN-2 add-on must be 2 digits"; //#4764
        bwipp_raiseerror(); //#4764
    } //#4764
    $forall($_.barcode, function() { //#4770
        var _6 = $k[--$j]; //#4767
        if ((_6 < 48) || (_6 > 57)) { //#4769
            $k[$j++] = 'bwipp.ean2badCharacter#4768'; //#4768
            $k[$j++] = "EAN-2 add-on must contain only digits"; //#4768
            bwipp_raiseerror(); //#4768
        } //#4768
    }); //#4768
    if (!bwipp_ean2.__4785__) { //#4785
        $_ = Object.create($_); //#4785
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#4778
        $_.barchars = "0123456789"; //#4781
        $_.mirrormaps = $a(["00", "01", "10", "11"]); //#4784
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean2.$ctx[id] = $_[id]); //#4784
        bwipp_ean2.__4785__ = 1; //#4784
        $_ = Object.getPrototypeOf($_); //#4784
    } //#4784
    $_.mirrormap = $get($_.mirrormaps, $cvi($geti($_.barcode, 0, 2)) % 4); //#4787
    $_.sbs = $s(13); //#4789
    $_.txt = $a(2); //#4790
    for (var _G = 0; _G <= 1; _G += 1) { //#4820
        $_.i = _G; //#4793
        if ($_.i == 0) { //#4799
            $puti($_.sbs, 0, $get($_.encs, 10)); //#4797
        } else { //#4799
            $puti($_.sbs, (($_.i - 1) * 6) + 7, $get($_.encs, 11)); //#4799
        } //#4799
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4803
        $j--; //#4804
        $_.indx = $k[--$j].length; //#4805
        $j -= 2; //#4806
        $_.enc = $get($_.encs, $_.indx); //#4807
        if ($get($_.mirrormap, $_.i) == 49) { //#4817
            $_.enclen = $_.enc.length; //#4809
            $_.revenc = $s($_.enclen); //#4810
            for (var _f = 0, _e = $_.enclen - 1; _f <= _e; _f += 1) { //#4815
                $_.j = _f; //#4812
                $_.char = $get($_.enc, $_.j); //#4813
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4814
            } //#4814
            $_.enc = $_.revenc; //#4816
        } //#4816
        $puti($_.sbs, ($_.i * 6) + 3, $_.enc); //#4818
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 9) + 10) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4819
    } //#4819
    $k[$j++] = Infinity; //#4823
    $k[$j++] = Infinity; //#4825
    var _12 = $_.sbs; //#4825
    for (var _13 = 0, _14 = _12.length; _13 < _14; _13++) { //#4825
        $k[$j++] = $get(_12, _13) - 48; //#4825
    } //#4825
    var _16 = $a(); //#4825
    $k[$j++] = Infinity; //#4826
    for (var _17 = 0, _18 = 12; _17 < _18; _17++) { //#4826
        $k[$j++] = $_.height; //#4826
    } //#4826
    var _1A = $a(); //#4826
    $k[$j++] = Infinity; //#4827
    for (var _1B = 0, _1C = 12; _1B < _1C; _1B++) { //#4827
        $k[$j++] = 0; //#4827
    } //#4827
    var _1D = $a(); //#4827
    $k[$j++] = 'ren'; //#4830
    $k[$j++] = 'renlinear'; //#4830
    $k[$j++] = 'sbs'; //#4830
    $k[$j++] = _16; //#4830
    $k[$j++] = 'bhs'; //#4830
    $k[$j++] = _1A; //#4830
    $k[$j++] = 'bbs'; //#4830
    $k[$j++] = _1D; //#4830
    if ($_.includetext) { //#4830
        $k[$j++] = 'txt'; //#4829
        $k[$j++] = $_.txt; //#4829
    } //#4829
    $k[$j++] = 'opt'; //#4836
    $k[$j++] = $_.options; //#4836
    $k[$j++] = 'guardrightpos'; //#4836
    $k[$j++] = 5; //#4836
    $k[$j++] = 'guardrightypos'; //#4836
    $k[$j++] = $f($_.textyoffset + 4); //#4836
    $k[$j++] = 'borderleft'; //#4836
    $k[$j++] = 12; //#4836
    $k[$j++] = 'borderright'; //#4836
    $k[$j++] = 5; //#4836
    $k[$j++] = 'bordertop'; //#4836
    $k[$j++] = 10; //#4836
    var _1I = $d(); //#4836
    $k[$j++] = _1I; //#4839
    if (!$_.dontdraw) { //#4839
        bwipp_renlinear(); //#4839
    } //#4839
    $_ = Object.getPrototypeOf($_); //#4841
    $_ = Object.getPrototypeOf($_); //#4843
} //bwipp_ean2
function bwipp_ean13() {
    $_ = Object.create($_); //#4875
    $_.dontdraw = false; //#4878
    $_.includetext = false; //#4879
    $_.textfont = "OCR-B"; //#4880
    $_.textsize = 12; //#4881
    $_.textxoffset = -11; //#4882
    $_.textyoffset = -4; //#4883
    $_.height = 1; //#4884
    $_.addongap = 12; //#4885
    $_.addontextfont = "unset"; //#4886
    $_.addontextsize = null; //#4887
    $_.addontextxoffset = null; //#4888
    $_.addontextyoffset = null; //#4889
    $k[$j++] = $_; //#4891
    bwipp_processoptions(); //#4891
    $_.options = $k[--$j]; //#4891
    $_.barcode = $k[--$j]; //#4892
    bwipp_loadctx(bwipp_ean13); //#4894
    $search($_.barcode, " "); //#4897
    if ($k[--$j]) { //#4903
        $_.barcode = $k[--$j]; //#4898
        $j--; //#4899
        $_.addon = $k[--$j]; //#4900
    } else { //#4903
        $j--; //#4902
        $_.addon = ""; //#4903
    } //#4903
    if (($_.barcode.length != 12) && ($_.barcode.length != 13)) { //#4909
        $k[$j++] = 'bwipp.ean13badLength#4908'; //#4908
        $k[$j++] = "EAN-13 must be 12 or 13 digits"; //#4908
        bwipp_raiseerror(); //#4908
    } //#4908
    $forall($_.barcode, function() { //#4914
        var _9 = $k[--$j]; //#4911
        if ((_9 < 48) || (_9 > 57)) { //#4913
            $k[$j++] = 'bwipp.ean13badCharacter#4912'; //#4912
            $k[$j++] = "EAN-13 must contain only digits"; //#4912
            bwipp_raiseerror(); //#4912
        } //#4912
    }); //#4912
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#4917
        $k[$j++] = 'bwipp.ean13badAddOnLength#4916'; //#4916
        $k[$j++] = "Add-on for EAN-13 must be 2 or 5 digits"; //#4916
        bwipp_raiseerror(); //#4916
    } //#4916
    $_.pad = $s(13); //#4920
    $_.checksum = 0; //#4921
    for (var _E = 0; _E <= 11; _E += 1) { //#4930
        $_.i = _E; //#4923
        $_.barchar = $f($get($_.barcode, $_.i) - 48); //#4924
        if (($_.i % 2) == 0) { //#4928
            $_.checksum = $f($_.barchar + $_.checksum); //#4926
        } else { //#4928
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#4928
        } //#4928
    } //#4928
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#4931
    if ($_.barcode.length == 13) { //#4936
        if ($get($_.barcode, 12) != $f($_.checksum + 48)) { //#4935
            $k[$j++] = 'bwipp.ean13badCheckDigit#4934'; //#4934
            $k[$j++] = "Incorrect EAN-13 check digit provided"; //#4934
            bwipp_raiseerror(); //#4934
        } //#4934
    } //#4934
    $puti($_.pad, 0, $_.barcode); //#4937
    $put($_.pad, 12, $f($_.checksum + 48)); //#4938
    $_.barcode = $_.pad; //#4939
    if (!bwipp_ean13.__4957__) { //#4957
        $_ = Object.create($_); //#4957
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#4947
        $_.barchars = "0123456789"; //#4950
        $_.mirrormaps = $a(["000000", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#4956
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean13.$ctx[id] = $_[id]); //#4956
        bwipp_ean13.__4957__ = 1; //#4956
        $_ = Object.getPrototypeOf($_); //#4956
    } //#4956
    $_.sbs = $s(59); //#4959
    $_.txt = $a(13); //#4960
    $puti($_.sbs, 0, $get($_.encs, 10)); //#4963
    $_.mirrormap = $get($_.mirrormaps, $get($_.barcode, 0) - 48); //#4966
    $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4967
    for (var _r = 1; _r <= 6; _r += 1) { //#4990
        $_.i = _r; //#4972
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4973
        $j--; //#4974
        $_.indx = $k[--$j].length; //#4975
        $j -= 2; //#4976
        $_.enc = $get($_.encs, $_.indx); //#4977
        if ($get($_.mirrormap, $_.i - 1) == 49) { //#4987
            $_.enclen = $_.enc.length; //#4979
            $_.revenc = $s($_.enclen); //#4980
            for (var _18 = 0, _17 = $_.enclen - 1; _18 <= _17; _18 += 1) { //#4985
                $_.j = _18; //#4982
                $_.char = $get($_.enc, $_.j); //#4983
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#4984
            } //#4984
            $_.enc = $_.revenc; //#4986
        } //#4986
        $puti($_.sbs, (($_.i - 1) * 4) + 3, $_.enc); //#4988
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 15) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#4989
    } //#4989
    $puti($_.sbs, ((7 - 1) * 4) + 3, $get($_.encs, 11)); //#4993
    for (var _1Y = 7; _1Y <= 12; _1Y += 1) { //#5006
        $_.i = _1Y; //#4998
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#4999
        $j--; //#5000
        $_.indx = $k[--$j].length; //#5001
        $j -= 2; //#5002
        $_.enc = $get($_.encs, $_.indx); //#5003
        $puti($_.sbs, (($_.i - 1) * 4) + 8, $_.enc); //#5004
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 19) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#5005
    } //#5005
    $puti($_.sbs, 56, $get($_.encs, 12)); //#5009
    $k[$j++] = Infinity; //#5011
    var _1y = $_.sbs; //#5011
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#5011
        $k[$j++] = $get(_1y, _1z) - 48; //#5011
    } //#5011
    $_.sbs = $a(); //#5011
    if ($_.includetext) { //#5018
        $k[$j++] = Infinity; //#5013
        $k[$j++] = $_.height; //#5013
        $k[$j++] = $_.height; //#5013
        for (var _26 = 0, _27 = 12; _26 < _27; _26++) { //#5013
            $k[$j++] = $f($_.height - 0.075); //#5013
        } //#5013
        $k[$j++] = $_.height; //#5013
        $k[$j++] = $_.height; //#5013
        for (var _2B = 0, _2C = 12; _2B < _2C; _2B++) { //#5013
            $k[$j++] = $f($_.height - 0.075); //#5013
        } //#5013
        $k[$j++] = $_.height; //#5013
        $k[$j++] = $_.height; //#5013
        $_.bhs = $a(); //#5013
        $k[$j++] = Infinity; //#5014
        $k[$j++] = 0; //#5014
        $k[$j++] = 0; //#5014
        for (var _2H = 0, _2I = 12; _2H < _2I; _2H++) { //#5014
            $k[$j++] = 0.075; //#5014
        } //#5014
        $k[$j++] = 0; //#5014
        $k[$j++] = 0; //#5014
        for (var _2J = 0, _2K = 12; _2J < _2K; _2J++) { //#5014
            $k[$j++] = 0.075; //#5014
        } //#5014
        $k[$j++] = 0; //#5014
        $k[$j++] = 0; //#5014
        $_.bbs = $a(); //#5014
    } else { //#5018
        $k[$j++] = Infinity; //#5016
        for (var _2M = 0, _2N = 30; _2M < _2N; _2M++) { //#5016
            $k[$j++] = $_.height; //#5016
        } //#5016
        $_.bhs = $a(); //#5016
        $k[$j++] = Infinity; //#5017
        for (var _2Q = 0, _2R = 30; _2Q < _2R; _2Q++) { //#5017
            $k[$j++] = 0; //#5017
        } //#5017
        $_.bbs = $a(); //#5017
        $_.txt = $a([]); //#5018
    } //#5018
    $_.guardrightypos = 0; //#5020
    if ($ne($_.addon, "")) { //#5041
        $k[$j++] = Infinity; //#5024
        $k[$j++] = 'dontdraw'; //#5027
        $k[$j++] = true; //#5027
        $k[$j++] = 'includetext'; //#5027
        $k[$j++] = true; //#5027
        $k[$j++] = 'height'; //#5027
        $k[$j++] = $_.height; //#5027
        if ($_.includetext) { //#5027
            var _2X = $k[--$j]; //#5027
            $k[$j++] = $f(_2X - 0.15); //#5027
        } //#5027
        $k[$j++] = 'textxoffset'; //#5028
        if ($ne($_.addontextxoffset, null)) { //#5028
            $k[$j++] = $_.addontextxoffset; //#5028
        } else { //#5028
            $k[$j++] = 95 + $_.addongap; //#5028
        } //#5028
        if ($ne($_.addontextyoffset, null)) { //#5029
            $k[$j++] = 'textyoffset'; //#5029
            $k[$j++] = $_.addontextyoffset; //#5029
        } //#5029
        $k[$j++] = 'textsize'; //#5030
        if ($ne($_.addontextsize, null)) { //#5030
            $k[$j++] = $_.addontextsize; //#5030
        } else { //#5030
            $k[$j++] = $_.textsize; //#5030
        } //#5030
        var _2h = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5031
        $k[$j++] = 'textfont'; //#5031
        $k[$j++] = _2h; //#5031
        $_.addopts = $d(); //#5032
        if ($_.addon.length == 2) { //#5033
            $k[$j++] = $_.addon; //#5033
            $k[$j++] = $_.addopts; //#5033
            bwipp_ean2(); //#5033
        } //#5033
        if ($_.addon.length == 5) { //#5034
            $k[$j++] = $_.addon; //#5034
            $k[$j++] = $_.addopts; //#5034
            bwipp_ean5(); //#5034
        } //#5034
        $_.addcode = $k[--$j]; //#5035
        $k[$j++] = Infinity; //#5036
        $aload($_.sbs); //#5036
        $k[$j++] = $_.addongap; //#5036
        $aload($get($_.addcode, "sbs")); //#5036
        $_.sbs = $a(); //#5036
        $k[$j++] = Infinity; //#5037
        $aload($_.bhs); //#5037
        $aload($get($_.addcode, "bhs")); //#5037
        $_.bhs = $a(); //#5037
        $k[$j++] = Infinity; //#5038
        $aload($_.bbs); //#5038
        $aload($get($_.addcode, "bbs")); //#5038
        $_.bbs = $a(); //#5038
        $k[$j++] = Infinity; //#5039
        $aload($_.txt); //#5039
        $aload($get($_.addcode, "txt")); //#5039
        $_.txt = $a(); //#5039
        $_.guardrightypos = ($_.height * 72) - 6; //#5040
    } //#5040
    $k[$j++] = Infinity; //#5044
    $k[$j++] = 'ren'; //#5051
    $k[$j++] = 'renlinear'; //#5051
    $k[$j++] = 'sbs'; //#5051
    $k[$j++] = $_.sbs; //#5051
    $k[$j++] = 'bhs'; //#5051
    $k[$j++] = $_.bhs; //#5051
    $k[$j++] = 'bbs'; //#5051
    $k[$j++] = $_.bbs; //#5051
    $k[$j++] = 'txt'; //#5051
    $k[$j++] = $_.txt; //#5051
    $k[$j++] = 'opt'; //#5051
    $k[$j++] = $_.options; //#5051
    $k[$j++] = 'guardrightpos'; //#5051
    if ($eq($_.addon, "")) { //#5051
        $k[$j++] = 7; //#5051
    } else { //#5051
        $k[$j++] = 5; //#5051
    } //#5051
    $k[$j++] = 'guardrightypos'; //#5054
    $k[$j++] = $_.guardrightypos; //#5054
    $k[$j++] = 'borderleft'; //#5054
    $k[$j++] = 11; //#5054
    $k[$j++] = 'borderright'; //#5054
    if ($eq($_.addon, "")) { //#5054
        $k[$j++] = 7; //#5054
    } else { //#5054
        $k[$j++] = 5; //#5054
    } //#5054
    $k[$j++] = 'bordertop'; //#5056
    $k[$j++] = 0; //#5056
    $k[$j++] = 'borderbottom'; //#5056
    $k[$j++] = 5; //#5056
    var _3G = $d(); //#5056
    $k[$j++] = _3G; //#5059
    if (!$_.dontdraw) { //#5059
        bwipp_renlinear(); //#5059
    } //#5059
    $_ = Object.getPrototypeOf($_); //#5061
    $_ = Object.getPrototypeOf($_); //#5063
} //bwipp_ean13
function bwipp_ean8() {
    $_ = Object.create($_); //#5095
    $_.dontdraw = false; //#5098
    $_.includetext = false; //#5099
    $_.textfont = "OCR-B"; //#5100
    $_.textsize = 12; //#5101
    $_.textxoffset = 4; //#5102
    $_.textyoffset = -4; //#5103
    $_.height = 1; //#5104
    $_.permitaddon = false; //#5105
    $_.addongap = 12; //#5106
    $_.addontextfont = "unset"; //#5107
    $_.addontextsize = null; //#5108
    $_.addontextxoffset = null; //#5109
    $_.addontextyoffset = null; //#5110
    $k[$j++] = $_; //#5112
    bwipp_processoptions(); //#5112
    $_.options = $k[--$j]; //#5112
    $_.barcode = $k[--$j]; //#5113
    bwipp_loadctx(bwipp_ean8); //#5115
    $search($_.barcode, " "); //#5118
    if ($k[--$j]) { //#5124
        $_.barcode = $k[--$j]; //#5119
        $j--; //#5120
        $_.addon = $k[--$j]; //#5121
    } else { //#5124
        $j--; //#5123
        $_.addon = ""; //#5124
    } //#5124
    if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#5130
        $k[$j++] = 'bwipp.ean8badLength#5129'; //#5129
        $k[$j++] = "EAN-8 must be 7 or 8 digits"; //#5129
        bwipp_raiseerror(); //#5129
    } //#5129
    $forall($_.barcode, function() { //#5135
        var _9 = $k[--$j]; //#5132
        if ((_9 < 48) || (_9 > 57)) { //#5134
            $k[$j++] = 'bwipp.ean8badCharacter#5133'; //#5133
            $k[$j++] = "EAN-8 must contain only digits"; //#5133
            bwipp_raiseerror(); //#5133
        } //#5133
    }); //#5133
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5138
        $k[$j++] = 'bwipp.ean8badAddOnLength#5137'; //#5137
        $k[$j++] = "Add-on for EAN-8 must be 2 or 5 digits"; //#5137
        bwipp_raiseerror(); //#5137
    } //#5137
    if ((!$_.permitaddon) && ($_.addon.length != 0)) { //#5141
        $k[$j++] = 'bwipp.ean8badAddOnLength#5140'; //#5140
        $k[$j++] = "Non-standard use of add-on for EAN-8 requires \"permitaddon\" option"; //#5140
        bwipp_raiseerror(); //#5140
    } //#5140
    $_.pad = $s(8); //#5144
    $_.checksum = 0; //#5145
    for (var _G = 0; _G <= 6; _G += 1) { //#5154
        $_.i = _G; //#5147
        $_.barchar = $f($get($_.barcode, $_.i) - 48); //#5148
        if (($_.i % 2) != 0) { //#5152
            $_.checksum = $f($_.barchar + $_.checksum); //#5150
        } else { //#5152
            $_.checksum = $f(($_.barchar * 3) + $_.checksum); //#5152
        } //#5152
    } //#5152
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#5155
    if ($_.barcode.length == 8) { //#5160
        if ($get($_.barcode, 7) != $f($_.checksum + 48)) { //#5159
            $k[$j++] = 'bwipp.ean8badCheckDigit#5158'; //#5158
            $k[$j++] = "Incorrect EAN-8 check digit provided"; //#5158
            bwipp_raiseerror(); //#5158
        } //#5158
    } //#5158
    $puti($_.pad, 0, $_.barcode); //#5161
    $put($_.pad, 7, $f($_.checksum + 48)); //#5162
    $_.barcode = $_.pad; //#5163
    if (!bwipp_ean8.__5175__) { //#5175
        $_ = Object.create($_); //#5175
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#5171
        $_.barchars = "0123456789"; //#5174
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ean8.$ctx[id] = $_[id]); //#5174
        bwipp_ean8.__5175__ = 1; //#5174
        $_ = Object.getPrototypeOf($_); //#5174
    } //#5174
    $_.sbs = $s(43); //#5177
    $_.txt = $a(8); //#5178
    $puti($_.sbs, 0, $get($_.encs, 10)); //#5181
    for (var _g = 0; _g <= 3; _g += 1) { //#5194
        $_.i = _g; //#5186
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5187
        $j--; //#5188
        $_.indx = $k[--$j].length; //#5189
        $j -= 2; //#5190
        $_.enc = $get($_.encs, $_.indx); //#5191
        $puti($_.sbs, ($_.i * 4) + 3, $_.enc); //#5192
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 7) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#5193
    } //#5193
    $puti($_.sbs, (4 * 4) + 3, $get($_.encs, 11)); //#5197
    for (var _16 = 4; _16 <= 7; _16 += 1) { //#5210
        $_.i = _16; //#5202
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5203
        $j--; //#5204
        $_.indx = $k[--$j].length; //#5205
        $j -= 2; //#5206
        $_.enc = $get($_.encs, $_.indx); //#5207
        $puti($_.sbs, ($_.i * 4) + 8, $_.enc); //#5208
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + $_.textxoffset) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#5209
    } //#5209
    $puti($_.sbs, 40, $get($_.encs, 12)); //#5213
    $k[$j++] = Infinity; //#5215
    var _1W = $_.sbs; //#5215
    for (var _1X = 0, _1Y = _1W.length; _1X < _1Y; _1X++) { //#5215
        $k[$j++] = $get(_1W, _1X) - 48; //#5215
    } //#5215
    $_.sbs = $a(); //#5215
    if ($_.includetext) { //#5222
        $k[$j++] = Infinity; //#5217
        $k[$j++] = $_.height; //#5217
        $k[$j++] = $_.height; //#5217
        for (var _1e = 0, _1f = 8; _1e < _1f; _1e++) { //#5217
            $k[$j++] = $f($_.height - 0.075); //#5217
        } //#5217
        $k[$j++] = $_.height; //#5217
        $k[$j++] = $_.height; //#5217
        for (var _1j = 0, _1k = 8; _1j < _1k; _1j++) { //#5217
            $k[$j++] = $f($_.height - 0.075); //#5217
        } //#5217
        $k[$j++] = $_.height; //#5217
        $k[$j++] = $_.height; //#5217
        $_.bhs = $a(); //#5217
        $k[$j++] = Infinity; //#5218
        $k[$j++] = 0; //#5218
        $k[$j++] = 0; //#5218
        for (var _1p = 0, _1q = 8; _1p < _1q; _1p++) { //#5218
            $k[$j++] = 0.075; //#5218
        } //#5218
        $k[$j++] = 0; //#5218
        $k[$j++] = 0; //#5218
        for (var _1r = 0, _1s = 8; _1r < _1s; _1r++) { //#5218
            $k[$j++] = 0.075; //#5218
        } //#5218
        $k[$j++] = 0; //#5218
        $k[$j++] = 0; //#5218
        $_.bbs = $a(); //#5218
    } else { //#5222
        $k[$j++] = Infinity; //#5220
        for (var _1u = 0, _1v = 22; _1u < _1v; _1u++) { //#5220
            $k[$j++] = $_.height; //#5220
        } //#5220
        $_.bhs = $a(); //#5220
        $k[$j++] = Infinity; //#5221
        for (var _1y = 0, _1z = 22; _1y < _1z; _1y++) { //#5221
            $k[$j++] = 0; //#5221
        } //#5221
        $_.bbs = $a(); //#5221
        $_.txt = $a([]); //#5222
    } //#5222
    $_.guardrightypos = 0; //#5224
    if ($ne($_.addon, "")) { //#5245
        $k[$j++] = Infinity; //#5228
        $k[$j++] = 'dontdraw'; //#5231
        $k[$j++] = true; //#5231
        $k[$j++] = 'includetext'; //#5231
        $k[$j++] = true; //#5231
        $k[$j++] = 'height'; //#5231
        $k[$j++] = $_.height; //#5231
        if ($_.includetext) { //#5231
            var _25 = $k[--$j]; //#5231
            $k[$j++] = $f(_25 - 0.15); //#5231
        } //#5231
        $k[$j++] = 'textxoffset'; //#5232
        if ($ne($_.addontextxoffset, null)) { //#5232
            $k[$j++] = $_.addontextxoffset; //#5232
        } else { //#5232
            $k[$j++] = 67 + $_.addongap; //#5232
        } //#5232
        if ($ne($_.addontextyoffset, null)) { //#5233
            $k[$j++] = 'textyoffset'; //#5233
            $k[$j++] = $_.addontextyoffset; //#5233
        } //#5233
        $k[$j++] = 'textsize'; //#5234
        if ($ne($_.addontextsize, null)) { //#5234
            $k[$j++] = $_.addontextsize; //#5234
        } else { //#5234
            $k[$j++] = $_.textsize; //#5234
        } //#5234
        var _2F = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5235
        $k[$j++] = 'textfont'; //#5235
        $k[$j++] = _2F; //#5235
        $_.addopts = $d(); //#5236
        if ($_.addon.length == 2) { //#5237
            $k[$j++] = $_.addon; //#5237
            $k[$j++] = $_.addopts; //#5237
            bwipp_ean2(); //#5237
        } //#5237
        if ($_.addon.length == 5) { //#5238
            $k[$j++] = $_.addon; //#5238
            $k[$j++] = $_.addopts; //#5238
            bwipp_ean5(); //#5238
        } //#5238
        $_.addcode = $k[--$j]; //#5239
        $k[$j++] = Infinity; //#5240
        $aload($_.sbs); //#5240
        $k[$j++] = $_.addongap; //#5240
        $aload($get($_.addcode, "sbs")); //#5240
        $_.sbs = $a(); //#5240
        $k[$j++] = Infinity; //#5241
        $aload($_.bhs); //#5241
        $aload($get($_.addcode, "bhs")); //#5241
        $_.bhs = $a(); //#5241
        $k[$j++] = Infinity; //#5242
        $aload($_.bbs); //#5242
        $aload($get($_.addcode, "bbs")); //#5242
        $_.bbs = $a(); //#5242
        $k[$j++] = Infinity; //#5243
        $aload($_.txt); //#5243
        $aload($get($_.addcode, "txt")); //#5243
        $_.txt = $a(); //#5243
        $_.guardrightypos = ($_.height * 72) - 6; //#5244
    } //#5244
    $k[$j++] = Infinity; //#5248
    $k[$j++] = 'ren'; //#5256
    $k[$j++] = 'renlinear'; //#5256
    $k[$j++] = 'sbs'; //#5256
    $k[$j++] = $_.sbs; //#5256
    $k[$j++] = 'bhs'; //#5256
    $k[$j++] = $_.bhs; //#5256
    $k[$j++] = 'bbs'; //#5256
    $k[$j++] = $_.bbs; //#5256
    $k[$j++] = 'txt'; //#5256
    $k[$j++] = $_.txt; //#5256
    $k[$j++] = 'opt'; //#5256
    $k[$j++] = $_.options; //#5256
    $k[$j++] = 'guardleftpos'; //#5256
    $k[$j++] = 7; //#5256
    $k[$j++] = 'guardrightpos'; //#5256
    if ($eq($_.addon, "")) { //#5256
        $k[$j++] = 7; //#5256
    } else { //#5256
        $k[$j++] = 5; //#5256
    } //#5256
    $k[$j++] = 'guardrightypos'; //#5259
    $k[$j++] = $_.guardrightypos; //#5259
    $k[$j++] = 'borderleft'; //#5259
    $k[$j++] = 7; //#5259
    $k[$j++] = 'borderright'; //#5259
    if ($eq($_.addon, "")) { //#5259
        $k[$j++] = 7; //#5259
    } else { //#5259
        $k[$j++] = 5; //#5259
    } //#5259
    $k[$j++] = 'bordertop'; //#5261
    $k[$j++] = 0; //#5261
    $k[$j++] = 'borderbottom'; //#5261
    $k[$j++] = 5; //#5261
    var _2o = $d(); //#5261
    $k[$j++] = _2o; //#5264
    if (!$_.dontdraw) { //#5264
        bwipp_renlinear(); //#5264
    } //#5264
    $_ = Object.getPrototypeOf($_); //#5266
    $_ = Object.getPrototypeOf($_); //#5268
} //bwipp_ean8
function bwipp_upca() {
    $_ = Object.create($_); //#5300
    $_.dontdraw = false; //#5303
    $_.includetext = false; //#5304
    $_.textfont = "OCR-B"; //#5305
    $_.textsize = 12; //#5306
    $_.textxoffset = -9; //#5307
    $_.textyoffset = -4; //#5308
    $_.height = 1; //#5309
    $_.addongap = 12; //#5310
    $_.addontextfont = "unset"; //#5311
    $_.addontextsize = null; //#5312
    $_.addontextxoffset = null; //#5313
    $_.addontextyoffset = null; //#5314
    $k[$j++] = $_; //#5316
    bwipp_processoptions(); //#5316
    $_.options = $k[--$j]; //#5316
    $_.barcode = $k[--$j]; //#5317
    bwipp_loadctx(bwipp_upca); //#5319
    $search($_.barcode, " "); //#5322
    if ($k[--$j]) { //#5328
        $_.barcode = $k[--$j]; //#5323
        $j--; //#5324
        $_.addon = $k[--$j]; //#5325
    } else { //#5328
        $j--; //#5327
        $_.addon = ""; //#5328
    } //#5328
    if (($_.barcode.length == 7) || ($_.barcode.length == 8)) { //#5374
        $forall($_.barcode, function() { //#5338
            var _9 = $k[--$j]; //#5335
            if ((_9 < 48) || (_9 > 57)) { //#5337
                $k[$j++] = 'bwipp.upcAupcEbadCharacter#5336'; //#5336
                $k[$j++] = "UPC-E must contain only digits"; //#5336
                bwipp_raiseerror(); //#5336
            } //#5336
        }); //#5336
        var _B = $get($_.barcode, 0); //#5339
        if ((_B != 48) && (_B != 49)) { //#5341
            $k[$j++] = 'bwipp.upcAupcEbadNumberSystem#5340'; //#5340
            $k[$j++] = "UPC-E must have number system 0 or 1"; //#5340
            bwipp_raiseerror(); //#5340
        } //#5340
        for (var _C = 0, _D = 1; _C < _D; _C++) { //#5369
            var _F = ($_.barcode.length == 8) ? 12 : 11; //#5343
            $_.upcacode = $s(_F); //#5343
            if ($f($get($_.barcode, 6) - 48) <= 2) { //#5350
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 3)); //#5345
                $puti($_.upcacode, 3, $geti($_.barcode, 6, 1)); //#5346
                $puti($_.upcacode, 4, "0000"); //#5347
                $puti($_.upcacode, 8, $geti($_.barcode, 3, 3)); //#5348
                break; //#5349
            } //#5349
            if ($f($get($_.barcode, 6) - 48) == 3) { //#5356
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 4)); //#5352
                $puti($_.upcacode, 4, "00000"); //#5353
                $puti($_.upcacode, 9, $geti($_.barcode, 4, 2)); //#5354
                break; //#5355
            } //#5355
            if ($f($get($_.barcode, 6) - 48) == 4) { //#5362
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 5)); //#5358
                $puti($_.upcacode, 5, "00000"); //#5359
                $puti($_.upcacode, 10, $geti($_.barcode, 5, 1)); //#5360
                break; //#5361
            } //#5361
            if ($f($get($_.barcode, 6) - 48) >= 5) { //#5368
                $puti($_.upcacode, 0, $geti($_.barcode, 0, 6)); //#5364
                $puti($_.upcacode, 6, "0000"); //#5365
                $puti($_.upcacode, 10, $geti($_.barcode, 6, 1)); //#5366
                break; //#5367
            } //#5367
        } //#5367
        if ($_.barcode.length == 8) { //#5372
            $puti($_.upcacode, 11, $geti($_.barcode, 7, 1)); //#5371
        } //#5371
        $_.barcode = $_.upcacode; //#5373
    } //#5373
    if (($_.barcode.length != 11) && ($_.barcode.length != 12)) { //#5379
        $k[$j++] = 'bwipp.upcAbadLength#5378'; //#5378
        $k[$j++] = "UPC-A must be 11 or 12 digits"; //#5378
        bwipp_raiseerror(); //#5378
    } //#5378
    var _11 = $_.barcode; //#5380
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#5384
        var _14 = $get(_11, _12); //#5384
        if ((_14 < 48) || (_14 > 57)) { //#5383
            $k[$j++] = 'bwipp.upcAbadCharacter#5382'; //#5382
            $k[$j++] = "UPC-A must contain only digits"; //#5382
            bwipp_raiseerror(); //#5382
        } //#5382
    } //#5382
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5387
        $k[$j++] = 'bwipp.upcAbadAddOnLength#5386'; //#5386
        $k[$j++] = "Add-on for UPC-A must be 2 or 5 digits"; //#5386
        bwipp_raiseerror(); //#5386
    } //#5386
    $_.pad = $s(12); //#5390
    $_.checksum = 0; //#5391
    for (var _19 = 0; _19 <= 10; _19 += 1) { //#5400
        $_.i = _19; //#5393
        $_.barchar = $get($_.barcode, $_.i) - 48; //#5394
        if (($_.i % 2) != 0) { //#5398
            $_.checksum = $_.checksum + $_.barchar; //#5396
        } else { //#5398
            $_.checksum = $_.checksum + ($_.barchar * 3); //#5398
        } //#5398
    } //#5398
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#5401
    if ($_.barcode.length == 12) { //#5406
        if ($get($_.barcode, 11) != ($_.checksum + 48)) { //#5405
            $k[$j++] = 'bwipp.upcAbadCheckDigit#5404'; //#5404
            $k[$j++] = "Incorrect UPC check digit provided"; //#5404
            bwipp_raiseerror(); //#5404
        } //#5404
    } //#5404
    $puti($_.pad, 0, $_.barcode); //#5407
    $put($_.pad, 11, $_.checksum + 48); //#5408
    $_.barcode = $_.pad; //#5409
    if (!bwipp_upca.__5421__) { //#5421
        $_ = Object.create($_); //#5421
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#5417
        $_.barchars = "0123456789"; //#5420
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_upca.$ctx[id] = $_[id]); //#5420
        bwipp_upca.__5421__ = 1; //#5420
        $_ = Object.getPrototypeOf($_); //#5420
    } //#5420
    $_.sbs = $s(59); //#5423
    $_.txt = $a(12); //#5424
    $puti($_.sbs, 0, $get($_.encs, 10)); //#5427
    for (var _1Z = 0; _1Z <= 5; _1Z += 1) { //#5444
        $_.i = _1Z; //#5432
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5433
        $j--; //#5434
        $_.indx = $k[--$j].length; //#5435
        $j -= 2; //#5436
        $_.enc = $get($_.encs, $_.indx); //#5437
        $puti($_.sbs, ($_.i * 4) + 3, $_.enc); //#5438
        if ($_.i == 0) { //#5442
            $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5440
        } else { //#5442
            $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + 13) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#5442
        } //#5442
    } //#5442
    $puti($_.sbs, (6 * 4) + 3, $get($_.encs, 11)); //#5447
    for (var _28 = 6; _28 <= 11; _28 += 1) { //#5464
        $_.i = _28; //#5452
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5453
        $j--; //#5454
        $_.indx = $k[--$j].length; //#5455
        $j -= 2; //#5456
        $_.enc = $get($_.encs, $_.indx); //#5457
        $puti($_.sbs, ($_.i * 4) + 8, $_.enc); //#5458
        if ($_.i == 11) { //#5462
            $put($_.txt, 11, $a([$geti($_.barcode, 11, 1), $_.textxoffset + 107, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5460
        } else { //#5462
            $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 7) + $_.textxoffset) + 17, $_.textyoffset, $_.textfont, $_.textsize])); //#5462
        } //#5462
    } //#5462
    $puti($_.sbs, 56, $get($_.encs, 12)); //#5467
    $k[$j++] = Infinity; //#5469
    var _2h = $_.sbs; //#5469
    for (var _2i = 0, _2j = _2h.length; _2i < _2j; _2i++) { //#5469
        $k[$j++] = $get(_2h, _2i) - 48; //#5469
    } //#5469
    $_.sbs = $a(); //#5469
    if ($_.includetext) { //#5476
        $k[$j++] = Infinity; //#5471
        for (var _2n = 0, _2o = 4; _2n < _2o; _2n++) { //#5471
            $k[$j++] = $_.height; //#5471
        } //#5471
        for (var _2q = 0, _2r = 10; _2q < _2r; _2q++) { //#5471
            $k[$j++] = $f($_.height - 0.075); //#5471
        } //#5471
        $k[$j++] = $_.height; //#5471
        $k[$j++] = $_.height; //#5471
        for (var _2v = 0, _2w = 10; _2v < _2w; _2v++) { //#5471
            $k[$j++] = $f($_.height - 0.075); //#5471
        } //#5471
        for (var _2y = 0, _2z = 4; _2y < _2z; _2y++) { //#5471
            $k[$j++] = $_.height; //#5471
        } //#5471
        $_.bhs = $a(); //#5471
        $k[$j++] = Infinity; //#5472
        $k[$j++] = 0; //#5472
        $k[$j++] = 0; //#5472
        $k[$j++] = 0; //#5472
        $k[$j++] = 0; //#5472
        for (var _32 = 0, _33 = 10; _32 < _33; _32++) { //#5472
            $k[$j++] = 0.075; //#5472
        } //#5472
        $k[$j++] = 0; //#5472
        $k[$j++] = 0; //#5472
        for (var _34 = 0, _35 = 10; _34 < _35; _34++) { //#5472
            $k[$j++] = 0.075; //#5472
        } //#5472
        $k[$j++] = 0; //#5472
        $k[$j++] = 0; //#5472
        $k[$j++] = 0; //#5472
        $k[$j++] = 0; //#5472
        $_.bbs = $a(); //#5472
    } else { //#5476
        $k[$j++] = Infinity; //#5474
        for (var _37 = 0, _38 = 30; _37 < _38; _37++) { //#5474
            $k[$j++] = $_.height; //#5474
        } //#5474
        $_.bhs = $a(); //#5474
        $k[$j++] = Infinity; //#5475
        for (var _3B = 0, _3C = 30; _3B < _3C; _3B++) { //#5475
            $k[$j++] = 0; //#5475
        } //#5475
        $_.bbs = $a(); //#5475
        $_.txt = $a([]); //#5476
    } //#5476
    $_.guardrightypos = 0; //#5478
    if ($ne($_.addon, "")) { //#5499
        $k[$j++] = Infinity; //#5482
        $k[$j++] = 'dontdraw'; //#5485
        $k[$j++] = true; //#5485
        $k[$j++] = 'includetext'; //#5485
        $k[$j++] = true; //#5485
        $k[$j++] = 'height'; //#5485
        $k[$j++] = $_.height; //#5485
        if ($_.includetext) { //#5485
            var _3I = $k[--$j]; //#5485
            $k[$j++] = $f(_3I - 0.15); //#5485
        } //#5485
        $k[$j++] = 'textxoffset'; //#5486
        if ($ne($_.addontextxoffset, null)) { //#5486
            $k[$j++] = $_.addontextxoffset; //#5486
        } else { //#5486
            $k[$j++] = 95 + $_.addongap; //#5486
        } //#5486
        if ($ne($_.addontextyoffset, null)) { //#5487
            $k[$j++] = 'textyoffset'; //#5487
            $k[$j++] = $_.addontextyoffset; //#5487
        } //#5487
        $k[$j++] = 'textsize'; //#5488
        if ($ne($_.addontextsize, null)) { //#5488
            $k[$j++] = $_.addontextsize; //#5488
        } else { //#5488
            $k[$j++] = $_.textsize; //#5488
        } //#5488
        var _3S = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5489
        $k[$j++] = 'textfont'; //#5489
        $k[$j++] = _3S; //#5489
        $_.addopts = $d(); //#5490
        if ($_.addon.length == 2) { //#5491
            $k[$j++] = $_.addon; //#5491
            $k[$j++] = $_.addopts; //#5491
            bwipp_ean2(); //#5491
        } //#5491
        if ($_.addon.length == 5) { //#5492
            $k[$j++] = $_.addon; //#5492
            $k[$j++] = $_.addopts; //#5492
            bwipp_ean5(); //#5492
        } //#5492
        $_.addcode = $k[--$j]; //#5493
        $k[$j++] = Infinity; //#5494
        $aload($_.sbs); //#5494
        $k[$j++] = $_.addongap; //#5494
        $aload($get($_.addcode, "sbs")); //#5494
        $_.sbs = $a(); //#5494
        $k[$j++] = Infinity; //#5495
        $aload($_.bhs); //#5495
        $aload($get($_.addcode, "bhs")); //#5495
        $_.bhs = $a(); //#5495
        $k[$j++] = Infinity; //#5496
        $aload($_.bbs); //#5496
        $aload($get($_.addcode, "bbs")); //#5496
        $_.bbs = $a(); //#5496
        $k[$j++] = Infinity; //#5497
        $aload($_.txt); //#5497
        $aload($get($_.addcode, "txt")); //#5497
        $_.txt = $a(); //#5497
        $_.guardrightypos = ($_.height * 72) - 6; //#5498
    } //#5498
    $k[$j++] = Infinity; //#5502
    $k[$j++] = 'ren'; //#5509
    $k[$j++] = 'renlinear'; //#5509
    $k[$j++] = 'sbs'; //#5509
    $k[$j++] = $_.sbs; //#5509
    $k[$j++] = 'bhs'; //#5509
    $k[$j++] = $_.bhs; //#5509
    $k[$j++] = 'bbs'; //#5509
    $k[$j++] = $_.bbs; //#5509
    $k[$j++] = 'txt'; //#5509
    $k[$j++] = $_.txt; //#5509
    $k[$j++] = 'opt'; //#5509
    $k[$j++] = $_.options; //#5509
    $k[$j++] = 'guardrightpos'; //#5509
    if ($eq($_.addon, "")) { //#5509
        $k[$j++] = 9; //#5509
    } else { //#5509
        $k[$j++] = 5; //#5509
    } //#5509
    $k[$j++] = 'guardrightypos'; //#5512
    $k[$j++] = $_.guardrightypos; //#5512
    $k[$j++] = 'borderleft'; //#5512
    $k[$j++] = 9; //#5512
    $k[$j++] = 'borderright'; //#5512
    if ($eq($_.addon, "")) { //#5512
        $k[$j++] = 9; //#5512
    } else { //#5512
        $k[$j++] = 5; //#5512
    } //#5512
    $k[$j++] = 'bordertop'; //#5514
    $k[$j++] = 0; //#5514
    $k[$j++] = 'borderbottom'; //#5514
    $k[$j++] = 5; //#5514
    var _41 = $d(); //#5514
    $k[$j++] = _41; //#5517
    if (!$_.dontdraw) { //#5517
        bwipp_renlinear(); //#5517
    } //#5517
    $_ = Object.getPrototypeOf($_); //#5519
    $_ = Object.getPrototypeOf($_); //#5521
} //bwipp_upca
function bwipp_upce() {
    $_ = Object.create($_); //#5553
    $_.dontdraw = false; //#5556
    $_.includetext = false; //#5557
    $_.textfont = "OCR-B"; //#5558
    $_.textsize = 12; //#5559
    $_.textxoffset = -9; //#5560
    $_.textyoffset = -4; //#5561
    $_.height = 1; //#5562
    $_.addongap = 12; //#5563
    $_.addontextfont = "unset"; //#5564
    $_.addontextsize = null; //#5565
    $_.addontextxoffset = null; //#5566
    $_.addontextyoffset = null; //#5567
    $k[$j++] = $_; //#5569
    bwipp_processoptions(); //#5569
    $_.options = $k[--$j]; //#5569
    $_.barcode = $k[--$j]; //#5570
    bwipp_loadctx(bwipp_upce); //#5572
    $search($_.barcode, " "); //#5575
    if ($k[--$j]) { //#5581
        $_.barcode = $k[--$j]; //#5576
        $j--; //#5577
        $_.addon = $k[--$j]; //#5578
    } else { //#5581
        $j--; //#5580
        $_.addon = ""; //#5581
    } //#5581
    if (($_.barcode.length == 11) || ($_.barcode.length == 12)) { //#5623
        $forall($_.barcode, function() { //#5591
            var _9 = $k[--$j]; //#5588
            if ((_9 < 48) || (_9 > 57)) { //#5590
                $k[$j++] = 'bwipp.upcEupcAbadCharacter#5589'; //#5589
                $k[$j++] = "UPC-A must contain only digits"; //#5589
                bwipp_raiseerror(); //#5589
            } //#5589
        }); //#5589
        for (var _A = 0, _B = 1; _A < _B; _A++) { //#5618
            var _D = ($_.barcode.length == 12) ? 8 : 7; //#5593
            $_.upcecode = $s(_D); //#5593
            if (($f($get($_.barcode, 3) - 48) <= 2) && $eq($geti($_.barcode, 4, 4), "0000")) { //#5599
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 3)); //#5595
                $puti($_.upcecode, 3, $geti($_.barcode, 8, 3)); //#5596
                $puti($_.upcecode, 6, $geti($_.barcode, 3, 1)); //#5597
                break; //#5598
            } //#5598
            if ($eq($geti($_.barcode, 4, 5), "00000")) { //#5605
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 4)); //#5601
                $puti($_.upcecode, 4, $geti($_.barcode, 9, 2)); //#5602
                $puti($_.upcecode, 6, "3"); //#5603
                break; //#5604
            } //#5604
            if ($eq($geti($_.barcode, 5, 5), "00000")) { //#5611
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 5)); //#5607
                $puti($_.upcecode, 5, $geti($_.barcode, 10, 1)); //#5608
                $puti($_.upcecode, 6, "4"); //#5609
                break; //#5610
            } //#5610
            if (($f($get($_.barcode, 10) - 48) >= 5) && $eq($geti($_.barcode, 6, 4), "0000")) { //#5616
                $puti($_.upcecode, 0, $geti($_.barcode, 0, 6)); //#5613
                $puti($_.upcecode, 6, $geti($_.barcode, 10, 1)); //#5614
                break; //#5615
            } //#5615
            $k[$j++] = 'bwipp.upcEupcAnotCompressible#5617'; //#5617
            $k[$j++] = "UPC-A cannot be converted to a UPC-E"; //#5617
            bwipp_raiseerror(); //#5617
        } //#5617
        if ($_.barcode.length == 12) { //#5621
            $puti($_.upcecode, 7, $geti($_.barcode, 11, 1)); //#5620
        } //#5620
        $_.barcode = $_.upcecode; //#5622
    } //#5622
    if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#5628
        $k[$j++] = 'bwipp.upcEbadLength#5627'; //#5627
        $k[$j++] = "UPC-E must be 7 or 8 digits"; //#5627
        bwipp_raiseerror(); //#5627
    } //#5627
    var _11 = $_.barcode; //#5629
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#5633
        var _14 = $get(_11, _12); //#5633
        if ((_14 < 48) || (_14 > 57)) { //#5632
            $k[$j++] = 'bwipp.upcEbadCharacter#5631'; //#5631
            $k[$j++] = "UPC-E must contain only digits"; //#5631
            bwipp_raiseerror(); //#5631
        } //#5631
    } //#5631
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5636
        $k[$j++] = 'bwipp.upcEbadAddOnLength#5635'; //#5635
        $k[$j++] = "Add-on for UPC-E must be 2 or 5 digits"; //#5635
        bwipp_raiseerror(); //#5635
    } //#5635
    var _19 = $get($_.barcode, 0); //#5639
    if ((_19 != 48) && (_19 != 49)) { //#5641
        $k[$j++] = 'bwipp.upcEbadNumberSystem#5640'; //#5640
        $k[$j++] = "UPC-E must have number system 0 or 1"; //#5640
        bwipp_raiseerror(); //#5640
    } //#5640
    if (!bwipp_upce.__5658__) { //#5658
        $_ = Object.create($_); //#5658
        $_.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "111111"]); //#5649
        $_.barchars = "0123456789"; //#5652
        $_.mirrormaps = $a(["000111", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#5657
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_upce.$ctx[id] = $_[id]); //#5657
        bwipp_upce.__5658__ = 1; //#5657
        $_ = Object.getPrototypeOf($_); //#5657
    } //#5657
    for (var _1D = 0, _1E = 1; _1D < _1E; _1D++) { //#5688
        $_.upcacode = $s(11); //#5662
        if (($get($_.barcode, 6) - 48) <= 2) { //#5669
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 3)); //#5664
            $puti($_.upcacode, 3, $geti($_.barcode, 6, 1)); //#5665
            $puti($_.upcacode, 4, "0000"); //#5666
            $puti($_.upcacode, 8, $geti($_.barcode, 3, 3)); //#5667
            break; //#5668
        } //#5668
        if (($get($_.barcode, 6) - 48) == 3) { //#5675
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 4)); //#5671
            $puti($_.upcacode, 4, "00000"); //#5672
            $puti($_.upcacode, 9, $geti($_.barcode, 4, 2)); //#5673
            break; //#5674
        } //#5674
        if (($get($_.barcode, 6) - 48) == 4) { //#5681
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 5)); //#5677
            $puti($_.upcacode, 5, "00000"); //#5678
            $puti($_.upcacode, 10, $geti($_.barcode, 5, 1)); //#5679
            break; //#5680
        } //#5680
        if (($get($_.barcode, 6) - 48) >= 5) { //#5687
            $puti($_.upcacode, 0, $geti($_.barcode, 0, 6)); //#5683
            $puti($_.upcacode, 6, "0000"); //#5684
            $puti($_.upcacode, 10, $geti($_.barcode, 6, 1)); //#5685
            break; //#5686
        } //#5686
    } //#5686
    $_.checksum = 0; //#5689
    for (var _1t = 0; _1t <= 10; _1t += 1) { //#5698
        $_.i = _1t; //#5691
        $_.barchar = $get($_.upcacode, $_.i) - 48; //#5692
        if (($_.i % 2) != 0) { //#5696
            $_.checksum = $_.checksum + $_.barchar; //#5694
        } else { //#5696
            $_.checksum = $_.checksum + ($_.barchar * 3); //#5696
        } //#5696
    } //#5696
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#5699
    if ($_.barcode.length == 8) { //#5704
        if ($get($_.barcode, 7) != ($_.checksum + 48)) { //#5703
            $k[$j++] = 'bwipp.upcEbadCheckDigit#5702'; //#5702
            $k[$j++] = "Incorrect UPC check digit provided"; //#5702
            bwipp_raiseerror(); //#5702
        } //#5702
    } //#5702
    $_.pad = $s(8); //#5705
    $puti($_.pad, 0, $_.barcode); //#5706
    $put($_.pad, 7, $_.checksum + 48); //#5707
    $_.barcode = $_.pad; //#5708
    $_.txt = $a(8); //#5709
    $put($_.txt, 0, $a([$geti($_.barcode, 0, 1), $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5710
    $_.mirrormap = $get($_.mirrormaps, $_.checksum); //#5713
    if ($get($_.barcode, 0) == 48) { //#5727
        $_.invt = $s($_.mirrormap.length); //#5717
        for (var _2V = 0, _2U = $_.mirrormap.length - 1; _2V <= _2U; _2V += 1) { //#5725
            $_.i = _2V; //#5719
            if ($get($_.mirrormap, $_.i) == 48) { //#5723
                $put($_.invt, $_.i, 49); //#5721
            } else { //#5723
                $put($_.invt, $_.i, 48); //#5723
            } //#5723
        } //#5723
        $_.mirrormap = $_.invt; //#5726
    } //#5726
    $_.sbs = $s(33); //#5729
    $puti($_.sbs, 0, $get($_.encs, 10)); //#5732
    for (var _2i = 1; _2i <= 6; _2i += 1) { //#5754
        $_.i = _2i; //#5735
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#5737
        $j--; //#5738
        $_.indx = $k[--$j].length; //#5739
        $j -= 2; //#5740
        $_.enc = $get($_.encs, $_.indx); //#5741
        if ($get($_.mirrormap, $_.i - 1) == 49) { //#5751
            $_.enclen = $_.enc.length; //#5743
            $_.revenc = $s($_.enclen); //#5744
            for (var _2z = 0, _2y = $_.enclen - 1; _2z <= _2y; _2z += 1) { //#5749
                $_.j = _2z; //#5746
                $_.char = $get($_.enc, $_.j); //#5747
                $put($_.revenc, ($_.enclen - $_.j) - 1, $_.char); //#5748
            } //#5748
            $_.enc = $_.revenc; //#5750
        } //#5750
        $puti($_.sbs, (($_.i - 1) * 4) + 3, $_.enc); //#5752
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 1) * 7) + 13) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])); //#5753
    } //#5753
    $put($_.txt, 7, $a([$geti($_.barcode, 7, 1), ((6 * 7) + 21) + $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize - 2])); //#5756
    $puti($_.sbs, 27, $get($_.encs, 11)); //#5759
    $k[$j++] = Infinity; //#5761
    var _3X = $_.sbs; //#5761
    for (var _3Y = 0, _3Z = _3X.length; _3Y < _3Z; _3Y++) { //#5761
        $k[$j++] = $get(_3X, _3Y) - 48; //#5761
    } //#5761
    $_.sbs = $a(); //#5761
    if ($_.includetext) { //#5768
        $k[$j++] = Infinity; //#5763
        $k[$j++] = $_.height; //#5763
        $k[$j++] = $_.height; //#5763
        for (var _3f = 0, _3g = 12; _3f < _3g; _3f++) { //#5763
            $k[$j++] = $f($_.height - 0.075); //#5763
        } //#5763
        $k[$j++] = $_.height; //#5763
        $k[$j++] = $_.height; //#5763
        $k[$j++] = $_.height; //#5763
        $_.bhs = $a(); //#5763
        $k[$j++] = Infinity; //#5764
        $k[$j++] = 0; //#5764
        $k[$j++] = 0; //#5764
        for (var _3m = 0, _3n = 12; _3m < _3n; _3m++) { //#5764
            $k[$j++] = 0.075; //#5764
        } //#5764
        $k[$j++] = 0; //#5764
        $k[$j++] = 0; //#5764
        $k[$j++] = 0; //#5764
        $_.bbs = $a(); //#5764
    } else { //#5768
        $k[$j++] = Infinity; //#5766
        for (var _3p = 0, _3q = 17; _3p < _3q; _3p++) { //#5766
            $k[$j++] = $_.height; //#5766
        } //#5766
        $_.bhs = $a(); //#5766
        $k[$j++] = Infinity; //#5767
        for (var _3t = 0, _3u = 17; _3t < _3u; _3t++) { //#5767
            $k[$j++] = 0; //#5767
        } //#5767
        $_.bbs = $a(); //#5767
        $_.txt = $a([]); //#5768
    } //#5768
    $_.guardrightypos = 0; //#5770
    if ($ne($_.addon, "")) { //#5791
        $k[$j++] = Infinity; //#5774
        $k[$j++] = 'dontdraw'; //#5777
        $k[$j++] = true; //#5777
        $k[$j++] = 'includetext'; //#5777
        $k[$j++] = true; //#5777
        $k[$j++] = 'height'; //#5777
        $k[$j++] = $_.height; //#5777
        if ($_.includetext) { //#5777
            var _40 = $k[--$j]; //#5777
            $k[$j++] = $f(_40 - 0.15); //#5777
        } //#5777
        $k[$j++] = 'textxoffset'; //#5778
        if ($ne($_.addontextxoffset, null)) { //#5778
            $k[$j++] = $_.addontextxoffset; //#5778
        } else { //#5778
            $k[$j++] = 51 + $_.addongap; //#5778
        } //#5778
        if ($ne($_.addontextyoffset, null)) { //#5779
            $k[$j++] = 'textyoffset'; //#5779
            $k[$j++] = $_.addontextyoffset; //#5779
        } //#5779
        $k[$j++] = 'textsize'; //#5780
        if ($ne($_.addontextsize, null)) { //#5780
            $k[$j++] = $_.addontextsize; //#5780
        } else { //#5780
            $k[$j++] = $_.textsize; //#5780
        } //#5780
        var _4A = $ne($_.addontextfont, "unset") ? $_.addontextfont : $_.textfont; //#5781
        $k[$j++] = 'textfont'; //#5781
        $k[$j++] = _4A; //#5781
        $_.addopts = $d(); //#5782
        if ($_.addon.length == 2) { //#5783
            $k[$j++] = $_.addon; //#5783
            $k[$j++] = $_.addopts; //#5783
            bwipp_ean2(); //#5783
        } //#5783
        if ($_.addon.length == 5) { //#5784
            $k[$j++] = $_.addon; //#5784
            $k[$j++] = $_.addopts; //#5784
            bwipp_ean5(); //#5784
        } //#5784
        $_.addcode = $k[--$j]; //#5785
        $k[$j++] = Infinity; //#5786
        $aload($_.sbs); //#5786
        $k[$j++] = $_.addongap; //#5786
        $aload($get($_.addcode, "sbs")); //#5786
        $_.sbs = $a(); //#5786
        $k[$j++] = Infinity; //#5787
        $aload($_.bhs); //#5787
        $aload($get($_.addcode, "bhs")); //#5787
        $_.bhs = $a(); //#5787
        $k[$j++] = Infinity; //#5788
        $aload($_.bbs); //#5788
        $aload($get($_.addcode, "bbs")); //#5788
        $_.bbs = $a(); //#5788
        $k[$j++] = Infinity; //#5789
        $aload($_.txt); //#5789
        $aload($get($_.addcode, "txt")); //#5789
        $_.txt = $a(); //#5789
        $_.guardrightypos = ($_.height * 72) - 6; //#5790
    } //#5790
    $k[$j++] = Infinity; //#5794
    $k[$j++] = 'ren'; //#5801
    $k[$j++] = 'renlinear'; //#5801
    $k[$j++] = 'sbs'; //#5801
    $k[$j++] = $_.sbs; //#5801
    $k[$j++] = 'bhs'; //#5801
    $k[$j++] = $_.bhs; //#5801
    $k[$j++] = 'bbs'; //#5801
    $k[$j++] = $_.bbs; //#5801
    $k[$j++] = 'txt'; //#5801
    $k[$j++] = $_.txt; //#5801
    $k[$j++] = 'opt'; //#5801
    $k[$j++] = $_.options; //#5801
    $k[$j++] = 'guardrightpos'; //#5801
    if ($eq($_.addon, "")) { //#5801
        $k[$j++] = 9; //#5801
    } else { //#5801
        $k[$j++] = 5; //#5801
    } //#5801
    $k[$j++] = 'guardrightypos'; //#5804
    $k[$j++] = $_.guardrightypos; //#5804
    $k[$j++] = 'borderleft'; //#5804
    $k[$j++] = 9; //#5804
    $k[$j++] = 'borderright'; //#5804
    if ($eq($_.addon, "")) { //#5804
        $k[$j++] = 9; //#5804
    } else { //#5804
        $k[$j++] = 5; //#5804
    } //#5804
    $k[$j++] = 'bordertop'; //#5806
    $k[$j++] = 0; //#5806
    $k[$j++] = 'borderbottom'; //#5806
    $k[$j++] = 5; //#5806
    var _4j = $d(); //#5806
    $k[$j++] = _4j; //#5809
    if (!$_.dontdraw) { //#5809
        bwipp_renlinear(); //#5809
    } //#5809
    $_ = Object.getPrototypeOf($_); //#5811
    $_ = Object.getPrototypeOf($_); //#5813
} //bwipp_upce
function bwipp_isbn() {
    $_ = Object.create($_); //#5842
    $_.dontdraw = false; //#5845
    $_.includetext = false; //#5846
    $_.isbntextfont = 'OCR-A'; //#5847
    $_.isbntextsize = 8; //#5848
    $_.isbntextxoffset = null; //#5849
    $_.isbntextyoffset = null; //#5850
    $_.height = 1; //#5851
    $_.addongap = 12; //#5852
    $_.legacy = false; //#5853
    $k[$j++] = $_; //#5855
    bwipp_processoptions(); //#5855
    $_.options = $k[--$j]; //#5855
    $_.barcode = $k[--$j]; //#5856
    $search($_.barcode, " "); //#5859
    if ($k[--$j]) { //#5865
        $_.barcode = $k[--$j]; //#5860
        $j--; //#5861
        $_.addon = $k[--$j]; //#5862
    } else { //#5865
        $j--; //#5864
        $_.addon = ""; //#5865
    } //#5865
    if ((($_.barcode.length != 15) && ($_.barcode.length != 17)) && (($_.barcode.length != 11) && ($_.barcode.length != 13))) { //#5872
        $k[$j++] = 'bwipp.isbnBadLength#5871'; //#5871
        $k[$j++] = "ISBN-13 must be 15 or 17 characters including dashes. ISBN-10 must be 11 or 13 characters including dashes"; //#5871
        bwipp_raiseerror(); //#5871
    } //#5871
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#5875
        $k[$j++] = 'bwipp.isbnBadAddOnLength#5874'; //#5874
        $k[$j++] = "Add-on for ISBN must be 2 or 5 digits"; //#5874
        bwipp_raiseerror(); //#5874
    } //#5874
    if ($_.barcode.length >= 15) { //#5939
        var _F = $geti($_.barcode, 0, 4); //#5877
        if ($ne(_F, "978-") && $ne(_F, "979-")) { //#5879
            $k[$j++] = 'bwipp.isbn13badPrefix#5878'; //#5878
            $k[$j++] = "ISBN-13 prefix must be 978- or 979-"; //#5878
            bwipp_raiseerror(); //#5878
        } //#5878
        $_.wasdash = false; //#5880
        $_.numdash = 0; //#5880
        $_.numdigit = 0; //#5880
        var _H = $geti($_.barcode, 5, 9); //#5881
        for (var _I = 0, _J = _H.length; _I < _J; _I++) { //#5894
            var _K = $get(_H, _I); //#5894
            $k[$j++] = _K; //#5889
            if (_K == 45) { //#5889
                if ($_.wasdash) { //#5886
                    $k[$j++] = 'bwipp.isbn13adjacentDashes#5885'; //#5885
                    $k[$j++] = "ISBN-13 does not permit adjacent dashes"; //#5885
                    bwipp_raiseerror(); //#5885
                } //#5885
                $_.wasdash = true; //#5887
                $_.numdash = $_.numdash + 1; //#5888
            } //#5888
            var _N = $k[--$j]; //#5890
            if ((_N >= 48) && (_N <= 57)) { //#5893
                $_.wasdash = false; //#5891
                $_.numdigit = $_.numdigit + 1; //#5892
            } //#5892
        } //#5892
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5897
            $k[$j++] = 'bwipp.isbn13numDashesDigits#5896'; //#5896
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-13"; //#5896
            bwipp_raiseerror(); //#5896
        } //#5896
        var _S = $get($_.barcode, 14); //#5898
        if ((_S < 48) || (_S > 57)) { //#5900
            $k[$j++] = 'bwipp.isbn13character15#5899'; //#5899
            $k[$j++] = "ISBN-13 character 15 must be a digit"; //#5899
            bwipp_raiseerror(); //#5899
        } //#5899
        if ($_.barcode.length == 17) { //#5908
            if ($ne($geti($_.barcode, 15, 1), "-")) { //#5904
                $k[$j++] = 'bwipp.isbn13character16#5903'; //#5903
                $k[$j++] = "ISBN-13 penultimate character must be a dash"; //#5903
                bwipp_raiseerror(); //#5903
            } //#5903
            var _X = $get($_.barcode, 16); //#5905
            if ((_X < 48) || (_X > 57)) { //#5907
                $k[$j++] = 'bwipp.isbn13character17#5906'; //#5906
                $k[$j++] = "ISBN-13 final character must be a digit"; //#5906
                bwipp_raiseerror(); //#5906
            } //#5906
        } //#5906
    } else { //#5939
        var _Z = $get($_.barcode, 0); //#5910
        if ((_Z < 48) || (_Z > 57)) { //#5912
            $k[$j++] = 'bwipp.isbn10FirstDigit#5911'; //#5911
            $k[$j++] = "ISBN-10 first character must be a digit"; //#5911
            bwipp_raiseerror(); //#5911
        } //#5911
        $_.wasdash = false; //#5913
        $_.numdash = 0; //#5913
        $_.numdigit = 0; //#5913
        var _b = $geti($_.barcode, 1, 9); //#5914
        for (var _c = 0, _d = _b.length; _c < _d; _c++) { //#5927
            var _e = $get(_b, _c); //#5927
            $k[$j++] = _e; //#5922
            if (_e == 45) { //#5922
                if ($_.wasdash) { //#5919
                    $k[$j++] = 'bwipp.isbn10adjacentDashes#5918'; //#5918
                    $k[$j++] = "ISBN-10 does not permit adjacent dashes"; //#5918
                    bwipp_raiseerror(); //#5918
                } //#5918
                $_.wasdash = true; //#5920
                $_.numdash = $_.numdash + 1; //#5921
            } //#5921
            var _h = $k[--$j]; //#5923
            if ((_h >= 48) && (_h <= 57)) { //#5926
                $_.wasdash = false; //#5924
                $_.numdigit = $_.numdigit + 1; //#5925
            } //#5925
        } //#5925
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#5930
            $k[$j++] = 'bwipp.isbn10numDashesDigits#5929'; //#5929
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-10"; //#5929
            bwipp_raiseerror(); //#5929
        } //#5929
        var _m = $get($_.barcode, 10); //#5931
        if ((_m < 48) || (_m > 57)) { //#5933
            $k[$j++] = 'bwipp.isbn10character11#5932'; //#5932
            $k[$j++] = "ISBN-10 character 11 must be a digit"; //#5932
            bwipp_raiseerror(); //#5932
        } //#5932
        if ($_.barcode.length == 13) { //#5941
            if ($ne($geti($_.barcode, 11, 1), "-")) { //#5937
                $k[$j++] = 'bwipp.isbn10character12#5936'; //#5936
                $k[$j++] = "ISBN-10 penultimate character must be a dash"; //#5936
                bwipp_raiseerror(); //#5936
            } //#5936
            var _r = $get($_.barcode, 12); //#5938
            if (((_r < 48) || (_r > 57)) && (_r != 88)) { //#5940
                $k[$j++] = 'bwipp.isbn10character13#5939'; //#5939
                $k[$j++] = "ISBN-10 final character must be a digit or X"; //#5939
                bwipp_raiseerror(); //#5939
            } //#5939
        } //#5939
    } //#5939
    $_.isbntxt = $_.barcode; //#5944
    if ($_.isbntxt.length <= 13) { //#5970
        $_.isbn = $s(10); //#5948
        $_.checksum = 0; //#5949
        $_.i = 0; //#5950
        $_.n = 0; //#5950
        for (;;) { //#5962
            $_.isbnchar = $f($get($_.isbntxt, $_.i) - 48); //#5952
            if ($_.isbnchar != -3) { //#5959
                $put($_.isbn, $_.n, $f($_.isbnchar + 48)); //#5954
                if ($_.n < 9) { //#5957
                    $_.checksum = $f($_.checksum + ((10 - $_.n) * $_.isbnchar)); //#5956
                } //#5956
                $_.n = $_.n + 1; //#5958
            } //#5958
            $_.i = $_.i + 1; //#5960
            if ($_.i == $_.isbntxt.length) { //#5961
                break; //#5961
            } //#5961
        } //#5961
        var _1B = ($f(11 - ($_.checksum % 11))) % 11; //#5963
        $k[$j++] = 'checksum'; //#5963
        $k[$j++] = _1B; //#5963
        if (_1B == 10) { //#5963
            $j--; //#5963
            $k[$j++] = 40; //#5963
        } //#5963
        var _1C = $k[--$j]; //#5963
        $_[$k[--$j]] = $f(_1C + 48); //#5963
        $_.isbn = $geti($_.isbn, 0, 9); //#5964
        if ($_.isbntxt.length == 13) { //#5969
            if ($get($_.isbntxt, 12) != $_.checksum) { //#5968
                $k[$j++] = 'bwipp.isbn10badCheckDigit#5967'; //#5967
                $k[$j++] = "Incorrect ISBN-10 check digit provided"; //#5967
                bwipp_raiseerror(); //#5967
            } //#5967
        } //#5967
    } //#5967
    if ((!$_.legacy) || ($_.isbntxt.length >= 15)) { //#6006
        if ($_.isbntxt.length <= 13) { //#5980
            $_.pad = $s(15); //#5976
            $puti($_.pad, 0, "978-"); //#5977
            $puti($_.pad, 4, $geti($_.isbntxt, 0, 11)); //#5978
            $_.isbntxt = $_.pad; //#5979
        } //#5979
        $_.isbn = $s(13); //#5983
        $_.checksum = 0; //#5984
        $_.i = 0; //#5985
        $_.n = 0; //#5985
        for (;;) { //#5997
            $_.isbnchar = $get($_.isbntxt, $_.i) - 48; //#5987
            if ($_.isbnchar != -3) { //#5994
                $put($_.isbn, $_.n, $_.isbnchar + 48); //#5989
                if ($_.n < 12) { //#5992
                    $k[$j++] = 'checksum'; //#5991
                    $k[$j++] = $_.isbnchar; //#5991
                    if (($_.n % 2) != 0) { //#5991
                        var _1e = $k[--$j]; //#5991
                        $k[$j++] = _1e * 3; //#5991
                    } //#5991
                    var _1g = $k[--$j]; //#5991
                    $_[$k[--$j]] = $f(_1g + $_.checksum); //#5991
                } //#5991
                $_.n = $_.n + 1; //#5993
            } //#5993
            $_.i = $_.i + 1; //#5995
            if ($_.i == $_.isbntxt.length) { //#5996
                break; //#5996
            } //#5996
        } //#5996
        $_.checksum = ((10 - ($_.checksum % 10)) % 10) + 48; //#5998
        $_.isbn = $geti($_.isbn, 0, 12); //#5999
        if ($_.isbntxt.length == 17) { //#6004
            if ($get($_.isbntxt, 16) != $_.checksum) { //#6003
                $k[$j++] = 'bwipp.isbn13badCheckDigit#6002'; //#6002
                $k[$j++] = "Incorrect ISBN-13 check digit provided"; //#6002
                bwipp_raiseerror(); //#6002
            } //#6002
        } //#6002
    } //#6002
    var _1u = ($_.isbn.length == 12) ? 22 : 18; //#6009
    $_.pad = $s(_1u); //#6009
    $puti($_.pad, 0, "ISBN "); //#6010
    $puti($_.pad, 5, $_.isbntxt); //#6011
    $put($_.pad, $_.pad.length - 2, 45); //#6012
    $put($_.pad, $_.pad.length - 1, $_.checksum); //#6013
    $_.isbntxt = $_.pad; //#6014
    $_.barcode = $s(12); //#6017
    if ($_.isbn.length == 9) { //#6022
        $puti($_.barcode, 0, "978"); //#6019
        $puti($_.barcode, 3, $_.isbn); //#6020
    } else { //#6022
        $puti($_.barcode, 0, $_.isbn); //#6022
    } //#6022
    if ($ne($_.addon, "")) { //#6032
        var _2E = $s((12 + $_.addon.length) + 1); //#6027
        $puti(_2E, 0, $_.barcode); //#6028
        $puti(_2E, 12, " "); //#6029
        $puti(_2E, 13, $_.addon); //#6030
        $_.barcode = _2E; //#6031
    } //#6031
    $put($_.options, "dontdraw", true); //#6035
    $put($_.options, "addongap", $_.addongap); //#6036
    $k[$j++] = 'args'; //#6037
    $k[$j++] = $_.barcode; //#6037
    $k[$j++] = $_.options; //#6037
    bwipp_ean13(); //#6037
    var _2M = $k[--$j]; //#6037
    $_[$k[--$j]] = _2M; //#6037
    if ($_.includetext) { //#6056
        if ($eq($_.isbntextxoffset, null)) { //#6043
            $k[$j++] = 'isbntextxoffset'; //#6042
            if ($_.isbn.length == 9) { //#6042
                $k[$j++] = -1; //#6042
            } else { //#6042
                $k[$j++] = -12; //#6042
            } //#6042
            var _2R = $k[--$j]; //#6042
            $_[$k[--$j]] = _2R; //#6042
        } //#6042
        if ($eq($_.isbntextyoffset, null)) { //#6046
            $_.isbntextyoffset = ($_.height * 72) + 3; //#6045
        } //#6045
        var _2W = $get($_.args, "txt") !== undefined; //#6047
        if (_2W) { //#6054
            $_.txt = $get($_.args, "txt"); //#6048
            $_.newtxt = $a($_.txt.length + 1); //#6049
            $puti($_.newtxt, 0, $_.txt); //#6050
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.isbntxt, $_.isbntextxoffset, $_.isbntextyoffset, $_.isbntextfont, $_.isbntextsize])); //#6051
            $put($_.args, "txt", $_.newtxt); //#6052
        } else { //#6054
            $put($_.args, "txt", $a([$a([$_.isbntxt, $_.isbntextxoffset, $_.isbntextyoffset, $_.isbntextfont, $_.isbntextsize])])); //#6054
        } //#6054
    } //#6054
    $put($_.args, "opt", $_.options); //#6058
    $k[$j++] = $_.args; //#6061
    if (!$_.dontdraw) { //#6061
        bwipp_renlinear(); //#6061
    } //#6061
    $_ = Object.getPrototypeOf($_); //#6063
} //bwipp_isbn
function bwipp_ismn() {
    $_ = Object.create($_); //#6092
    $_.dontdraw = false; //#6095
    $_.includetext = false; //#6096
    $_.ismntextfont = 'OCR-A'; //#6097
    $_.ismntextsize = 8; //#6098
    $_.ismntextxoffset = null; //#6099
    $_.ismntextyoffset = null; //#6100
    $_.height = 1; //#6101
    $_.addongap = 12; //#6102
    $_.legacy = false; //#6103
    $k[$j++] = $_; //#6105
    bwipp_processoptions(); //#6105
    $_.options = $k[--$j]; //#6105
    $_.barcode = $k[--$j]; //#6106
    $search($_.barcode, " "); //#6109
    if ($k[--$j]) { //#6115
        $_.barcode = $k[--$j]; //#6110
        $j--; //#6111
        $_.addon = $k[--$j]; //#6112
    } else { //#6115
        $j--; //#6114
        $_.addon = ""; //#6115
    } //#6115
    if ((($_.barcode.length != 15) && ($_.barcode.length != 17)) && (($_.barcode.length != 11) && ($_.barcode.length != 13))) { //#6122
        $k[$j++] = 'bwipp.ismnBadLength#6121'; //#6121
        $k[$j++] = "ISMN-13 must be 15 or 17 characters including dashes. ISMN-10 must be 11 or 13 characters including dashes"; //#6121
        bwipp_raiseerror(); //#6121
    } //#6121
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#6125
        $k[$j++] = 'bwipp.ismnBadAddOnLength#6124'; //#6124
        $k[$j++] = "Add-on for ISMN must be 2 or 5 digits"; //#6124
        bwipp_raiseerror(); //#6124
    } //#6124
    if ($_.barcode.length >= 15) { //#6192
        if ($ne($geti($_.barcode, 0, 4), "979-")) { //#6129
            $k[$j++] = 'bwipp.ismn13badPrefix#6128'; //#6128
            $k[$j++] = "ISMN-13 prefix must be 979-"; //#6128
            bwipp_raiseerror(); //#6128
        } //#6128
        $_.wasdash = false; //#6130
        $_.numdash = 0; //#6130
        $_.numdigit = 0; //#6130
        var _H = $geti($_.barcode, 5, 9); //#6131
        for (var _I = 0, _J = _H.length; _I < _J; _I++) { //#6144
            var _K = $get(_H, _I); //#6144
            $k[$j++] = _K; //#6139
            if (_K == 45) { //#6139
                if ($_.wasdash) { //#6136
                    $k[$j++] = 'bwipp.ismn13adjacentDashes#6135'; //#6135
                    $k[$j++] = "ISMN-13 does not permit adjacent dashes"; //#6135
                    bwipp_raiseerror(); //#6135
                } //#6135
                $_.wasdash = true; //#6137
                $_.numdash = $_.numdash + 1; //#6138
            } //#6138
            var _N = $k[--$j]; //#6140
            if ((_N >= 48) && (_N <= 57)) { //#6143
                $_.wasdash = false; //#6141
                $_.numdigit = $_.numdigit + 1; //#6142
            } //#6142
        } //#6142
        if (($_.numdash != 2) || ($_.numdigit != 7)) { //#6147
            $k[$j++] = 'bwipp.ismn13numDashesDigits#6146'; //#6146
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-13"; //#6146
            bwipp_raiseerror(); //#6146
        } //#6146
        var _S = $get($_.barcode, 14); //#6148
        if ((_S < 48) || (_S > 57)) { //#6150
            $k[$j++] = 'bwipp.ismn13character15#6149'; //#6149
            $k[$j++] = "ISMN-13 character 15 must be a digit"; //#6149
            bwipp_raiseerror(); //#6149
        } //#6149
        if ($_.barcode.length == 17) { //#6158
            if ($ne($geti($_.barcode, 15, 1), "-")) { //#6154
                $k[$j++] = 'bwipp.ismn13character16#6153'; //#6153
                $k[$j++] = "ISMN-13 penultimate character must be a dash"; //#6153
                bwipp_raiseerror(); //#6153
            } //#6153
            var _X = $get($_.barcode, 16); //#6155
            if ((_X < 48) || (_X > 57)) { //#6157
                $k[$j++] = 'bwipp.ismn13character17#6156'; //#6156
                $k[$j++] = "ISMN-13 final character must be a digit"; //#6156
                bwipp_raiseerror(); //#6156
            } //#6156
        } //#6156
    } else { //#6192
        if ($ne($geti($_.barcode, 0, 2), "M-")) { //#6162
            $k[$j++] = 'bwipp.ismn10badPrefix#6161'; //#6161
            $k[$j++] = "ISMN-10 prefix must be M-"; //#6161
            bwipp_raiseerror(); //#6161
        } //#6161
        var _b = $get($_.barcode, 2); //#6163
        if ((_b < 48) || (_b > 57)) { //#6165
            $k[$j++] = 'bwipp.ismn10character3#6164'; //#6164
            $k[$j++] = "ISMN-10 character 3 must be a digit"; //#6164
            bwipp_raiseerror(); //#6164
        } //#6164
        $_.wasdash = false; //#6166
        $_.numdash = 0; //#6166
        $_.numdigit = 0; //#6166
        var _d = $geti($_.barcode, 3, 7); //#6167
        for (var _e = 0, _f = _d.length; _e < _f; _e++) { //#6180
            var _g = $get(_d, _e); //#6180
            $k[$j++] = _g; //#6175
            if (_g == 45) { //#6175
                if ($_.wasdash) { //#6172
                    $k[$j++] = 'bwipp.ismn10adjacentDashes#6171'; //#6171
                    $k[$j++] = "ISMN-10 does not permit adjacent dashes"; //#6171
                    bwipp_raiseerror(); //#6171
                } //#6171
                $_.wasdash = true; //#6173
                $_.numdash = $_.numdash + 1; //#6174
            } //#6174
            var _j = $k[--$j]; //#6176
            if ((_j >= 48) && (_j <= 57)) { //#6179
                $_.wasdash = false; //#6177
                $_.numdigit = $_.numdigit + 1; //#6178
            } //#6178
        } //#6178
        if (($_.numdash != 1) || ($_.numdigit != 6)) { //#6183
            $k[$j++] = 'bwipp.ismn10numDashesDigits#6182'; //#6182
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-10"; //#6182
            bwipp_raiseerror(); //#6182
        } //#6182
        var _o = $get($_.barcode, 10); //#6184
        if ((_o < 48) || (_o > 57)) { //#6186
            $k[$j++] = 'bwipp.ismn10character11#6185'; //#6185
            $k[$j++] = "ISMN-10 character 11 must be a digit"; //#6185
            bwipp_raiseerror(); //#6185
        } //#6185
        if ($_.barcode.length == 13) { //#6194
            var _r = $geti($_.barcode, 11, 1); //#6188
            if ($ne(_r, "-")) { //#6190
                $k[$j++] = 'bwipp.ismn10character12#6189'; //#6189
                $k[$j++] = "ISMN-10 penultimate character must be a dash"; //#6189
                bwipp_raiseerror(); //#6189
            } //#6189
            var _t = $get($_.barcode, 12); //#6191
            if (((_t < 48) || (_t > 57)) && (_t != 88)) { //#6193
                $k[$j++] = 'bwipp.ismn10character13#6192'; //#6192
                $k[$j++] = "ISMN-10 final character must be a digit or X"; //#6192
                bwipp_raiseerror(); //#6192
            } //#6192
        } //#6192
    } //#6192
    $_.ismntxt = $_.barcode; //#6197
    $_.legacytxt = ""; //#6200
    if ($_.ismntxt.length <= 13) { //#6207
        $_.legacytxt = $_.ismntxt; //#6202
        $_.pad = $s($_.ismntxt.length + 4); //#6203
        $puti($_.pad, 0, "979-0-"); //#6204
        $puti($_.pad, 6, $geti($_.ismntxt, 2, $_.ismntxt.length - 2)); //#6205
        $_.ismntxt = $_.pad; //#6206
    } //#6206
    $_.ismn = $s(13); //#6210
    $_.checksum = 0; //#6211
    $_.i = 0; //#6212
    $_.n = 0; //#6212
    for (;;) { //#6228
        $_.ismnchar = $get($_.ismntxt, $_.i) - 48; //#6214
        if ($_.ismnchar != -3) { //#6225
            $put($_.ismn, $_.n, $_.ismnchar + 48); //#6216
            if ($_.n < 12) { //#6223
                if (($_.n % 2) == 0) { //#6221
                    $_.checksum = $_.ismnchar + $_.checksum; //#6219
                } else { //#6221
                    $_.checksum = ($_.ismnchar * 3) + $_.checksum; //#6221
                } //#6221
            } //#6221
            $_.n = $_.n + 1; //#6224
        } //#6224
        $_.i = $_.i + 1; //#6226
        if ($_.i == $_.ismntxt.length) { //#6227
            break; //#6227
        } //#6227
    } //#6227
    $_.checksum = ((10 - ($_.checksum % 10)) % 10) + 48; //#6229
    if (($_.barcode.length == 13) || ($_.barcode.length == 17)) { //#6236
        var _1Q = $_.barcode; //#6233
        if ($get(_1Q, _1Q.length - 1) != $_.checksum) { //#6235
            $k[$j++] = 'bwipp.ismnBadCheckDigit#6234'; //#6234
            $k[$j++] = "Incorrect ISMN check digit provided"; //#6234
            bwipp_raiseerror(); //#6234
        } //#6234
    } //#6234
    if ($_.legacy && $ne($_.legacytxt, "")) { //#6243
        $_.ismntxt = $_.legacytxt; //#6240
        $_.pad = $s(18); //#6241
    } else { //#6243
        $_.pad = $s(22); //#6243
    } //#6243
    $puti($_.pad, 0, "ISMN "); //#6245
    $puti($_.pad, 5, $_.ismntxt); //#6246
    $put($_.pad, $_.pad.length - 2, 45); //#6247
    $put($_.pad, $_.pad.length - 1, $_.checksum); //#6248
    $_.ismntxt = $_.pad; //#6249
    $_.barcode = $geti($_.ismn, 0, 12); //#6252
    if ($ne($_.addon, "")) { //#6261
        var _1l = $s((12 + $_.addon.length) + 1); //#6256
        $puti(_1l, 0, $_.barcode); //#6257
        $puti(_1l, 12, " "); //#6258
        $puti(_1l, 13, $_.addon); //#6259
        $_.barcode = _1l; //#6260
    } //#6260
    $put($_.options, "dontdraw", true); //#6264
    $put($_.options, "addongap", $_.addongap); //#6265
    $k[$j++] = 'args'; //#6266
    $k[$j++] = $_.barcode; //#6266
    $k[$j++] = $_.options; //#6266
    bwipp_ean13(); //#6266
    var _1t = $k[--$j]; //#6266
    $_[$k[--$j]] = _1t; //#6266
    if ($_.includetext) { //#6285
        if ($eq($_.ismntextxoffset, null)) { //#6272
            $k[$j++] = 'ismntextxoffset'; //#6271
            if ($_.ismntxt.length == 18) { //#6271
                $k[$j++] = -1; //#6271
            } else { //#6271
                $k[$j++] = -12; //#6271
            } //#6271
            var _1y = $k[--$j]; //#6271
            $_[$k[--$j]] = _1y; //#6271
        } //#6271
        if ($eq($_.ismntextyoffset, null)) { //#6275
            $_.ismntextyoffset = ($_.height * 72) + 3; //#6274
        } //#6274
        var _23 = $get($_.args, "txt") !== undefined; //#6276
        if (_23) { //#6283
            $_.txt = $get($_.args, "txt"); //#6277
            $_.newtxt = $a($_.txt.length + 1); //#6278
            $puti($_.newtxt, 0, $_.txt); //#6279
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.ismntxt, $_.ismntextxoffset, $_.ismntextyoffset, $_.ismntextfont, $_.ismntextsize])); //#6280
            $put($_.args, "txt", $_.newtxt); //#6281
        } else { //#6283
            $put($_.args, "txt", $a([$a([$_.ismntxt, $_.ismntextxoffset, $_.ismntextyoffset, $_.ismntextfont, $_.ismntextsize])])); //#6283
        } //#6283
    } //#6283
    $put($_.args, "opt", $_.options); //#6287
    $k[$j++] = $_.args; //#6290
    if (!$_.dontdraw) { //#6290
        bwipp_renlinear(); //#6290
    } //#6290
    $_ = Object.getPrototypeOf($_); //#6292
} //bwipp_ismn
function bwipp_issn() {
    $_ = Object.create($_); //#6321
    $_.dontdraw = false; //#6324
    $_.includetext = false; //#6325
    $_.issntextfont = 'OCR-A'; //#6326
    $_.issntextsize = 8; //#6327
    $_.issntextxoffset = null; //#6328
    $_.issntextyoffset = null; //#6329
    $_.height = 1; //#6330
    $_.addongap = 12; //#6331
    $k[$j++] = $_; //#6333
    bwipp_processoptions(); //#6333
    $_.options = $k[--$j]; //#6333
    $_.issntxt = $k[--$j]; //#6334
    $search($_.issntxt, " "); //#6337
    if ($k[--$j]) { //#6343
        $_.issntxt = $k[--$j]; //#6338
        $j--; //#6339
        $_.seqvar = $k[--$j]; //#6340
    } else { //#6343
        $j--; //#6342
        $_.seqvar = "00"; //#6343
    } //#6343
    $search($_.seqvar, " "); //#6347
    if ($k[--$j]) { //#6353
        $_.seqvar = $k[--$j]; //#6348
        $j--; //#6349
        $_.addon = $k[--$j]; //#6350
    } else { //#6353
        $j--; //#6352
        $_.addon = ""; //#6353
    } //#6353
    if (($_.issntxt.length != 8) && ($_.issntxt.length != 9)) { //#6359
        $k[$j++] = 'bwipp.issnBadLength#6358'; //#6358
        $k[$j++] = "ISSN must be 8 or 9 characters including dash, in the format XXXX-XXXX"; //#6358
        bwipp_raiseerror(); //#6358
    } //#6358
    var _D = $geti($_.issntxt, 0, 4); //#6360
    for (var _E = 0, _F = _D.length; _E < _F; _E++) { //#6364
        var _G = $get(_D, _E); //#6364
        if ((_G < 48) || (_G > 57)) { //#6363
            $k[$j++] = 'bwipp.issnFirstThroughFourthNotNumeric#6362'; //#6362
            $k[$j++] = "ISSN first four characters must be numeral characters"; //#6362
            bwipp_raiseerror(); //#6362
        } //#6362
    } //#6362
    if ($ne($geti($_.issntxt, 4, 1), "-")) { //#6367
        $k[$j++] = 'bwipp.issnNeedsDash#6366'; //#6366
        $k[$j++] = "ISSN fifth character must be a dash"; //#6366
        bwipp_raiseerror(); //#6366
    } //#6366
    var _K = $geti($_.issntxt, 5, 3); //#6368
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#6372
        var _N = $get(_K, _L); //#6372
        if ((_N < 48) || (_N > 57)) { //#6371
            $k[$j++] = 'bwipp.issnSixthThroughEighthNotNumeric#6370'; //#6370
            $k[$j++] = "ISSN sixth through eighth characters must be numerals"; //#6370
            bwipp_raiseerror(); //#6370
        } //#6370
    } //#6370
    if ($_.issntxt.length == 9) { //#6377
        var _Q = $get($_.issntxt, 8); //#6374
        if (((_Q < 48) || (_Q > 57)) && (_Q != 88)) { //#6376
            $k[$j++] = 'bwipp.issnNinthCharacterBadFormat#6375'; //#6375
            $k[$j++] = "ISSN ninth character must be a number or the character X"; //#6375
            bwipp_raiseerror(); //#6375
        } //#6375
    } //#6375
    if ($_.seqvar.length != 2) { //#6380
        $k[$j++] = 'bwipp.issnBadSequenceVariantLength#6379'; //#6379
        $k[$j++] = "Sequence variant for ISSN must be 2 digits"; //#6379
        bwipp_raiseerror(); //#6379
    } //#6379
    $forall($_.seqvar, function() { //#6385
        var _T = $k[--$j]; //#6382
        if ((_T < 48) || (_T > 57)) { //#6384
            $k[$j++] = 'bwipp.issnSequenceVariantBadCharacter#6383'; //#6383
            $k[$j++] = "Sequence variant for ISSN must contain only digits"; //#6383
            bwipp_raiseerror(); //#6383
        } //#6383
    }); //#6383
    if ((($_.addon.length != 0) && ($_.addon.length != 2)) && ($_.addon.length != 5)) { //#6388
        $k[$j++] = 'bwipp.issnBadAddOnLength#6387'; //#6387
        $k[$j++] = "Add-on for ISSN must be 2 or 5 digits"; //#6387
        bwipp_raiseerror(); //#6387
    } //#6387
    $_.issn = $s(8); //#6391
    $_.checksum = 0; //#6392
    $_.i = 0; //#6393
    $_.n = 0; //#6393
    for (;;) { //#6405
        $_.issnchar = $f($get($_.issntxt, $_.i) - 48); //#6395
        if ($_.issnchar != -3) { //#6402
            $put($_.issn, $_.n, $f($_.issnchar + 48)); //#6397
            if ($_.n < 7) { //#6400
                $_.checksum = $f($_.checksum + ($_.issnchar * (8 - $_.n))); //#6399
            } //#6399
            $_.n = $_.n + 1; //#6401
        } //#6401
        $_.i = $_.i + 1; //#6403
        if ($_.i == $_.issntxt.length) { //#6404
            break; //#6404
        } //#6404
    } //#6404
    $_.checksum = ($f(11 - ($_.checksum % 11))) % 11; //#6406
    var _p = $f($_.checksum + 48); //#6407
    $k[$j++] = 'checksum'; //#6407
    $k[$j++] = _p; //#6407
    if (_p == 58) { //#6407
        $j--; //#6407
        $k[$j++] = 88; //#6407
    } //#6407
    var _q = $k[--$j]; //#6407
    var _r = $k[--$j]; //#6407
    $_[_r] = _q; //#6407
    if ($_.issntxt.length == 9) { //#6412
        if ($get($_.issntxt, 8) != $_.checksum) { //#6411
            $k[$j++] = 'bwipp.issnBadCheckDigit#6410'; //#6410
            $k[$j++] = "Incorrect ISSN check digit provided"; //#6410
            bwipp_raiseerror(); //#6410
        } //#6410
    } //#6410
    $_.pad = $s(14); //#6415
    $puti($_.pad, 0, "ISSN "); //#6416
    $puti($_.pad, 5, $_.issntxt); //#6417
    $put($_.pad, 13, $_.checksum); //#6418
    $_.issntxt = $_.pad; //#6419
    $_.barcode = $geti($_.issn, 0, 7); //#6422
    $_.barcode = $s(12); //#6425
    $puti($_.barcode, 0, "977"); //#6426
    $puti($_.barcode, 3, $_.issn); //#6427
    $puti($_.barcode, 10, $_.seqvar); //#6428
    if ($ne($_.addon, "")) { //#6437
        var _1D = $s((12 + $_.addon.length) + 1); //#6432
        $puti(_1D, 0, $_.barcode); //#6433
        $puti(_1D, 12, " "); //#6434
        $puti(_1D, 13, $_.addon); //#6435
        $_.barcode = _1D; //#6436
    } //#6436
    $put($_.options, "dontdraw", true); //#6440
    $put($_.options, "addongap", $_.addongap); //#6441
    $k[$j++] = 'args'; //#6442
    $k[$j++] = $_.barcode; //#6442
    $k[$j++] = $_.options; //#6442
    bwipp_ean13(); //#6442
    var _1L = $k[--$j]; //#6442
    $_[$k[--$j]] = _1L; //#6442
    if ($_.includetext) { //#6457
        if ($eq($_.issntextxoffset, null)) { //#6446
            $_.issntextxoffset = 10; //#6446
        } //#6446
        if ($eq($_.issntextyoffset, null)) { //#6447
            $_.issntextyoffset = ($_.height * 72) + 3; //#6447
        } //#6447
        var _1S = $get($_.args, "txt") !== undefined; //#6448
        if (_1S) { //#6455
            $_.txt = $get($_.args, "txt"); //#6449
            $_.newtxt = $a($_.txt.length + 1); //#6450
            $puti($_.newtxt, 0, $_.txt); //#6451
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.issntxt, $_.issntextxoffset, $_.issntextyoffset, $_.issntextfont, $_.issntextsize])); //#6452
            $put($_.args, "txt", $_.newtxt); //#6453
        } else { //#6455
            $put($_.args, "txt", $a([$a([$_.issntxt, $_.issntextxoffset, $_.issntextyoffset, $_.issntextfont, $_.issntextsize])])); //#6455
        } //#6455
    } //#6455
    $put($_.args, "opt", $_.options); //#6459
    $k[$j++] = $_.args; //#6462
    if (!$_.dontdraw) { //#6462
        bwipp_renlinear(); //#6462
    } //#6462
    $_ = Object.getPrototypeOf($_); //#6464
} //bwipp_issn
function bwipp_mands() {
    $_ = Object.create($_); //#6493
    $_.dontdraw = false; //#6496
    $_.includetext = false; //#6497
    $k[$j++] = $_; //#6499
    bwipp_processoptions(); //#6499
    $_.options = $k[--$j]; //#6499
    $_.barcode = $k[--$j]; //#6500
    $_.barlen = $_.barcode.length; //#6502
    if (($_.barlen != 7) && ($_.barlen != 8)) { //#6507
        $k[$j++] = 'bwipp.MandSbadLength#6506'; //#6506
        $k[$j++] = "M&S barcode must be 7 or 8 characters"; //#6506
        bwipp_raiseerror(); //#6506
    } //#6506
    if ($_.barlen == 7) { //#6511
        var _7 = $strcpy($s(8), "00000000"); //#6510
        $puti(_7, 1, $_.barcode); //#6510
        $_.barcode = _7; //#6510
    } //#6510
    $put($_.options, "dontdraw", true); //#6514
    $k[$j++] = 'args'; //#6515
    $k[$j++] = $_.barcode; //#6515
    $k[$j++] = $_.options; //#6515
    bwipp_ean8(); //#6515
    var _C = $k[--$j]; //#6515
    $_[$k[--$j]] = _C; //#6515
    var _F = $get($_.args, "bbs"); //#6518
    $put(_F, 10, $get(_F, 2)); //#6519
    $put(_F, 11, $get(_F, 2)); //#6520
    var _J = $get($_.args, "bhs"); //#6521
    $put(_J, 10, $get(_J, 2)); //#6522
    $put(_J, 11, $get(_J, 2)); //#6523
    $_.txt = $get($_.args, "txt"); //#6526
    if ($_.barlen == 7) { //#6534
        for (var _P = 0; _P <= 6; _P += 1) { //#6532
            var _Q = $_.txt; //#6529
            $puti($get($get(_Q, _P), 0), 0, $get($get(_Q, _P + 1), 0)); //#6531
        } //#6531
        $puti($get($get($_.txt, 7), 0), 0, " "); //#6533
    } //#6533
    var _Y = $a(10); //#6537
    $puti(_Y, 0, $_.txt); //#6537
    $_.txt = _Y; //#6537
    var _b = $get($_.txt, 0); //#6538
    $put($_.txt, 8, $arrcpy($a(_b.length), _b)); //#6538
    var _g = $get($_.txt, 0); //#6539
    $put($_.txt, 9, $arrcpy($a(_g.length), _g)); //#6539
    $put($get($_.txt, 8), 0, "M"); //#6540
    $put($get($_.txt, 8), 1, -12); //#6540
    $put($get($_.txt, 9), 0, "S"); //#6541
    var _r = $get($_.txt, 9); //#6541
    $put(_r, 1, 69); //#6541
    $put($_.args, "txt", $_.txt); //#6543
    $put($_.args, "opt", $_.options); //#6544
    $k[$j++] = $_.args; //#6547
    if (!$_.dontdraw) { //#6547
        bwipp_renlinear(); //#6547
    } //#6547
    $_ = Object.getPrototypeOf($_); //#6549
} //bwipp_mands
function bwipp_code128() {
    $_ = Object.create($_); //#6580
    $_.dontdraw = false; //#6583
    $_.includetext = false; //#6584
    $_.textfont = "OCR-B"; //#6585
    $_.textsize = 10; //#6586
    $_.textxoffset = 0; //#6587
    $_.textyoffset = -8; //#6588
    $_.height = 1; //#6589
    $_.raw = false; //#6590
    $_.newencoder = false; //#6591
    $_.parse = false; //#6592
    $_.parsefnc = false; //#6593
    $_.suppressc = false; //#6594
    $_.unlatchextbeforec = false; //#6595
    $k[$j++] = $_; //#6597
    bwipp_processoptions(); //#6597
    $_.options = $k[--$j]; //#6597
    $_.barcode = $k[--$j]; //#6598
    bwipp_loadctx(bwipp_code128); //#6600
    if (!bwipp_code128.__6609__) { //#6609
        $_ = Object.create($_); //#6609
        $_.sta = -1; //#6604
        $_.stb = -2; //#6604
        $_.stc = -3; //#6604
        $_.swa = -4; //#6605
        $_.swb = -5; //#6605
        $_.swc = -6; //#6605
        $_.fn1 = -7; //#6606
        $_.fn2 = -8; //#6606
        $_.fn3 = -9; //#6606
        $_.fn4 = -10; //#6607
        $_.sft = -11; //#6607
        $_.stp = -12; //#6607
        $_.lka = -13; //#6608
        $_.lkc = -14; //#6608
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code128.$ctx[id] = $_[id]); //#6608
        bwipp_code128.__6609__ = 1; //#6608
        $_ = Object.getPrototypeOf($_); //#6608
    } //#6608
    var _A = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC2", $_.fn2],
        ["FNC3", $_.fn3],
        ["LNKA", $_.lka],
        ["LNKC", $_.lkc]
    ]); //#6620
    $_.fncvals = _A; //#6621
    $k[$j++] = 'msg'; //#6622
    $k[$j++] = $_.barcode; //#6622
    $k[$j++] = $_.fncvals; //#6622
    bwipp_parseinput(); //#6622
    var _D = $k[--$j]; //#6622
    $_[$k[--$j]] = _D; //#6622
    $_.msglen = $_.msg.length; //#6623
    $_.encoding = "legacy"; //#6625
    if ($_.newencoder) { //#6626
        $_.encoding = "new"; //#6626
    } //#6626
    if ($_.raw) { //#6627
        $_.encoding = "raw"; //#6627
    } //#6627
    if ($eq($_.encoding, "raw")) { //#6641
        $_.cws = $a($_.barcode.length); //#6630
        $_.i = 0; //#6631
        $_.j = 0; //#6631
        for (;;) { //#6638
            if ($_.i == $_.barcode.length) { //#6633
                break; //#6633
            } //#6633
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#6634
            $put($_.cws, $_.j, $_.cw); //#6635
            $_.i = $_.i + 4; //#6636
            $_.j = $_.j + 1; //#6637
        } //#6637
        $_.cws = $geti($_.cws, 0, $_.j); //#6639
        $_.text = ""; //#6640
    } //#6640
    if (!bwipp_code128.__6696__) { //#6696
        $_ = Object.create($_); //#6696
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sft, $_.sft, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.sta, $_.sta, $_.sta]), $a([$_.stb, $_.stb, $_.stb]), $a([$_.stc, $_.stc, $_.stc]), $a([$_.stp, $_.stp, $_.stp])]); //#6683
        $_.charvals = $a([new Map, new Map, new Map]); //#6686
        for (var _2o = 0, _2n = $_.charmaps.length - 1; _2o <= _2n; _2o += 1) { //#6695
            $_.i = _2o; //#6688
            $_.encs = $get($_.charmaps, $_.i); //#6689
            for (var _2s = 0; _2s <= 2; _2s += 1) { //#6694
                $_.j = _2s; //#6691
                var _2v = $get($_.encs, $_.j); //#6692
                $k[$j++] = _2v; //#6692
                if ($eq($type(_2v), 'stringtype')) { //#6692
                    var _2y = $get($k[--$j], 0); //#6692
                    $k[$j++] = _2y; //#6692
                } //#6692
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#6693
            } //#6693
        } //#6693
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code128.$ctx[id] = $_[id]); //#6693
        bwipp_code128.__6696__ = 1; //#6693
        $_ = Object.getPrototypeOf($_); //#6693
    } //#6693
    if ($eq($_.encoding, "legacy")) { //#6928
        $_.seta = $get($_.charvals, 0); //#6701
        $put($_.seta, $_.lka, $get($_.seta, $_.swb)); //#6701
        $put($_.seta, $_.lkc, $get($_.seta, $_.swc)); //#6701
        $_.setb = $get($_.charvals, 1); //#6702
        $put($_.setb, $_.lka, $get($_.setb, $_.swc)); //#6702
        $put($_.setb, $_.lkc, $get($_.setb, $_.swa)); //#6702
        $_.setc = $get($_.charvals, 2); //#6703
        $put($_.setc, $_.lka, $get($_.setc, $_.swa)); //#6703
        $put($_.setc, $_.lkc, $get($_.setc, $_.swb)); //#6703
        $_.text = $s($_.msglen); //#6705
        for (var _3k = 0, _3j = $_.msglen - 1; _3k <= _3j; _3k += 1) { //#6709
            $_.i = _3k; //#6707
            var _3p = $get($_.msg, $_.i); //#6708
            $k[$j++] = $_.text; //#6708
            $k[$j++] = $_.i; //#6708
            $k[$j++] = _3p; //#6708
            if (_3p < 0) { //#6708
                $j--; //#6708
                $k[$j++] = 32; //#6708
            } //#6708
            var _3q = $k[--$j]; //#6708
            var _3r = $k[--$j]; //#6708
            $put($k[--$j], _3r, _3q); //#6708
        } //#6708
        $k[$j++] = Infinity; //#6712
        for (var _3u = 0, _3v = $_.msglen; _3u < _3v; _3u++) { //#6712
            $k[$j++] = 0; //#6712
        } //#6712
        $k[$j++] = 0; //#6712
        $_.numSA = $a(); //#6712
        $k[$j++] = Infinity; //#6713
        for (var _3y = 0, _3z = $_.msglen; _3y < _3z; _3y++) { //#6713
            $k[$j++] = 0; //#6713
        } //#6713
        $k[$j++] = 0; //#6713
        $_.numEA = $a(); //#6713
        for (var _42 = $_.msglen - 1; _42 >= 0; _42 -= 1) { //#6723
            $_.i = _42; //#6715
            if ($get($_.msg, $_.i) >= 0) { //#6722
                if ($get($_.msg, $_.i) >= 128) { //#6720
                    $put($_.numEA, $_.i, $f($get($_.numEA, $_.i + 1) + 1)); //#6718
                } else { //#6720
                    $put($_.numSA, $_.i, $f($get($_.numSA, $_.i + 1) + 1)); //#6720
                } //#6720
            } //#6720
        } //#6720
        $_.ea = false; //#6726
        $_.msgtmp = $a([]); //#6726
        for (var _4M = 0, _4L = $_.msglen - 1; _4M <= _4L; _4M += 1) { //#6741
            $_.i = _4M; //#6728
            $_.c = $get($_.msg, $_.i); //#6729
            if ((!$xo($_.ea, $_.c < 128)) && ($_.c >= 0)) { //#6739
                if ($_.ea) { //#6731
                    $k[$j++] = $_.numSA; //#6731
                } else { //#6731
                    $k[$j++] = $_.numEA; //#6731
                } //#6731
                var _4Y = $get($k[--$j], $_.i); //#6731
                var _4b = ($f(_4Y + $_.i) == $_.msglen) ? 3 : 5; //#6732
                if (_4Y < _4b) { //#6737
                    $k[$j++] = Infinity; //#6734
                    $aload($_.msgtmp); //#6734
                    $k[$j++] = $_.fn4; //#6734
                    $_.msgtmp = $a(); //#6734
                } else { //#6737
                    $k[$j++] = Infinity; //#6736
                    $aload($_.msgtmp); //#6736
                    $k[$j++] = $_.fn4; //#6736
                    $k[$j++] = $_.fn4; //#6736
                    $_.msgtmp = $a(); //#6736
                    $_.ea = !$_.ea; //#6737
                } //#6737
            } //#6737
            $k[$j++] = Infinity; //#6740
            $aload($_.msgtmp); //#6740
            if ($_.c >= 0) { //#6740
                $k[$j++] = $_.c & 127; //#6740
            } else { //#6740
                $k[$j++] = $_.c; //#6740
            } //#6740
            $_.msgtmp = $a(); //#6740
        } //#6740
        $_.msg = $_.msgtmp; //#6742
        $_.msglen = $_.msg.length; //#6743
        $_.numsscr = function() {
            $_.s = 0; //#6747
            $_.p = $k[--$j]; //#6748
            for (;;) { //#6760
                if ($_.p >= $_.msglen) { //#6749
                    break; //#6749
                } //#6749
                var _4w = $get($_.msg, $_.p); //#6750
                var _4y = $get($_.setc, _4w) !== undefined; //#6751
                $k[$j++] = _4w; //#6751
                if (!_4y) { //#6751
                    $j--; //#6751
                    break; //#6751
                } //#6751
                var _4z = $k[--$j]; //#6752
                $k[$j++] = _4z; //#6757
                if (_4z <= -1) { //#6756
                    var _51 = $k[--$j]; //#6754
                    if ((_51 == $_.fn1) && (($_.s % 2) == 0)) { //#6754
                        $_.s = $_.s + 1; //#6754
                    } else { //#6754
                        break; //#6754
                    } //#6754
                } else { //#6756
                    $j--; //#6756
                } //#6756
                $_.s = $_.s + 1; //#6758
                $_.p = $f($_.p + 1); //#6759
            } //#6759
            $k[$j++] = $_.s; //#6761
        }; //#6761
        $_.enca = function() {
            $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#6766
            $_.j = $_.j + 1; //#6767
        }; //#6767
        $_.encb = function() {
            $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#6770
            $_.j = $_.j + 1; //#6771
        }; //#6771
        $_.encc = function() {
            var _5J = $k[--$j]; //#6774
            $k[$j++] = _5J; //#6778
            if ($ne($type(_5J), 'arraytype')) { //#6777
                var _5N = $get($_.setc, $k[--$j]); //#6775
                $k[$j++] = _5N; //#6775
            } else { //#6777
                $aload($k[--$j]); //#6777
                var _5P = $k[--$j]; //#6777
                var _5Q = $k[--$j]; //#6777
                $k[$j++] = $f($f(_5P - 48) + ($f(_5Q - 48) * 10)); //#6777
            } //#6777
            $put($_.cws, $_.j, $k[--$j]); //#6779
            $_.j = $_.j + 1; //#6780
        }; //#6780
        $_.anotb = function() {
            var _5V = $k[--$j]; //#6784
            var _5X = $get($_.seta, _5V) !== undefined; //#6784
            var _5Z = $get($_.setb, _5V) !== undefined; //#6784
            $k[$j++] = _5X && (!_5Z); //#6784
        }; //#6784
        $_.bnota = function() {
            var _5a = $k[--$j]; //#6785
            var _5c = $get($_.setb, _5a) !== undefined; //#6785
            var _5e = $get($_.seta, _5a) !== undefined; //#6785
            $k[$j++] = _5c && (!_5e); //#6785
        }; //#6785
        $k[$j++] = Infinity; //#6788
        for (var _5g = 0, _5h = $_.msg.length; _5g < _5h; _5g++) { //#6788
            $k[$j++] = 0; //#6788
        } //#6788
        $k[$j++] = 9999; //#6788
        $_.nextanotb = $a(); //#6788
        $k[$j++] = Infinity; //#6789
        for (var _5k = 0, _5l = $_.msg.length; _5k < _5l; _5k++) { //#6789
            $k[$j++] = 0; //#6789
        } //#6789
        $k[$j++] = 9999; //#6789
        $_.nextbnota = $a(); //#6789
        for (var _5o = $_.msg.length - 1; _5o >= 0; _5o -= 1) { //#6802
            $_.i = _5o; //#6791
            $k[$j++] = $get($_.msg, $_.i); //#6792
            $_.anotb(); //#6792
            if ($k[--$j]) { //#6795
                $put($_.nextanotb, $_.i, 0); //#6793
            } else { //#6795
                $put($_.nextanotb, $_.i, $f($get($_.nextanotb, $_.i + 1) + 1)); //#6795
            } //#6795
            $k[$j++] = $get($_.msg, $_.i); //#6797
            $_.bnota(); //#6797
            if ($k[--$j]) { //#6800
                $put($_.nextbnota, $_.i, 0); //#6798
            } else { //#6800
                $put($_.nextbnota, $_.i, $f($get($_.nextbnota, $_.i + 1) + 1)); //#6800
            } //#6800
        } //#6800
        $_.abeforeb = function() {
            var _6B = $k[--$j]; //#6805
            $k[$j++] = $lt($get($_.nextanotb, _6B), $get($_.nextbnota, _6B)); //#6805
        }; //#6805
        $_.bbeforea = function() {
            var _6G = $k[--$j]; //#6806
            $k[$j++] = $lt($get($_.nextbnota, _6G), $get($_.nextanotb, _6G)); //#6806
        }; //#6806
        $_.cws = $a(($_.barcode.length * 2) + 3); //#6808
        $_.j = 0; //#6811
        if ($_.msglen > 0) { //#6812
            $k[$j++] = 0; //#6812
            $_.numsscr(); //#6812
        } else { //#6812
            $k[$j++] = -1; //#6812
        } //#6812
        $_.nums = $k[--$j]; //#6812
        for (;;) { //#6837
            if ($_.msglen == 0) { //#6818
                $k[$j++] = $_.stb; //#6815
                $_.enca(); //#6815
                $_.cset = "setb"; //#6816
                break; //#6817
            } //#6817
            if (($_.msglen == 2) && ($_.nums == 2)) { //#6823
                $k[$j++] = $_.stc; //#6820
                $_.enca(); //#6820
                $_.cset = "setc"; //#6821
                break; //#6822
            } //#6822
            if ($_.nums >= 4) { //#6828
                $k[$j++] = $_.stc; //#6825
                $_.enca(); //#6825
                $_.cset = "setc"; //#6826
                break; //#6827
            } //#6827
            $k[$j++] = 0; //#6829
            $_.abeforeb(); //#6829
            if ($k[--$j]) { //#6833
                $k[$j++] = $_.sta; //#6830
                $_.enca(); //#6830
                $_.cset = "seta"; //#6831
                break; //#6832
            } //#6832
            $k[$j++] = $_.stb; //#6834
            $_.enca(); //#6834
            $_.cset = "setb"; //#6835
            break; //#6836
        } //#6836
        $_.i = 0; //#6840
        for (;;) { //#6925
            if ($_.i == $_.msglen) { //#6841
                break; //#6841
            } //#6841
            $k[$j++] = $_.i; //#6843
            $_.numsscr(); //#6843
            $_.nums = $k[--$j]; //#6843
            for (;;) { //#6923
                if ((($eq($_.cset, "seta") || $eq($_.cset, "setb")) && ($_.nums >= 4)) && ($get($_.msg, $_.i) != $_.fn1)) { //#6862
                    if (($_.nums % 2) == 0) { //#6859
                        $k[$j++] = $_.swc; //#6850
                        if ($eq($_.cset, "seta")) { //#6850
                            $_.enca(); //#6850
                        } else { //#6850
                            $_.encb(); //#6850
                        } //#6850
                        $_.cset = "setc"; //#6851
                        break; //#6852
                    } else { //#6859
                        $k[$j++] = $get($_.msg, $_.i); //#6854
                        if ($eq($_.cset, "seta")) { //#6854
                            $_.enca(); //#6854
                        } else { //#6854
                            $_.encb(); //#6854
                        } //#6854
                        $_.i = $_.i + 1; //#6855
                        $k[$j++] = $_.i; //#6856
                        $_.numsscr(); //#6856
                        if ($k[--$j] >= 4) { //#6860
                            $k[$j++] = $_.swc; //#6857
                            if ($eq($_.cset, "seta")) { //#6857
                                $_.enca(); //#6857
                            } else { //#6857
                                $_.encb(); //#6857
                            } //#6857
                            $_.cset = "setc"; //#6858
                            break; //#6859
                        } //#6859
                    } //#6859
                } //#6859
                $k[$j++] = $eq($_.cset, "setb"); //#6863
                $k[$j++] = $get($_.msg, $_.i); //#6863
                $_.anotb(); //#6863
                var _70 = $k[--$j]; //#6863
                var _71 = $k[--$j]; //#6863
                if ((_71 && _70)) { //#6875
                    if ($_.i < ($_.msglen - 1)) { //#6871
                        $k[$j++] = $_.i + 1; //#6865
                        $_.bbeforea(); //#6865
                        if ($k[--$j]) { //#6870
                            $k[$j++] = $_.sft; //#6866
                            $_.encb(); //#6866
                            $k[$j++] = $get($_.msg, $_.i); //#6867
                            $_.enca(); //#6867
                            $_.i = $_.i + 1; //#6868
                            break; //#6869
                        } //#6869
                    } //#6869
                    $k[$j++] = $_.swa; //#6872
                    $_.encb(); //#6872
                    $_.cset = "seta"; //#6873
                    break; //#6874
                } //#6874
                $k[$j++] = $eq($_.cset, "seta"); //#6876
                $k[$j++] = $get($_.msg, $_.i); //#6876
                $_.bnota(); //#6876
                var _7G = $k[--$j]; //#6876
                var _7H = $k[--$j]; //#6876
                if ((_7H && _7G)) { //#6888
                    if ($_.i < ($_.msglen - 1)) { //#6884
                        $k[$j++] = $_.i + 1; //#6878
                        $_.abeforeb(); //#6878
                        if ($k[--$j]) { //#6883
                            $k[$j++] = $_.sft; //#6879
                            $_.enca(); //#6879
                            $k[$j++] = $get($_.msg, $_.i); //#6880
                            $_.encb(); //#6880
                            $_.i = $_.i + 1; //#6881
                            break; //#6882
                        } //#6882
                    } //#6882
                    $k[$j++] = $_.swb; //#6885
                    $_.enca(); //#6885
                    $_.cset = "setb"; //#6886
                    break; //#6887
                } //#6887
                if (($eq($_.cset, "setc") && ($_.nums < 2)) && (($get($_.msg, $_.i) > -1) || ($get($_.msg, $_.i) == $_.fn4))) { //#6898
                    $k[$j++] = $_.i; //#6890
                    $_.abeforeb(); //#6890
                    if ($k[--$j]) { //#6894
                        $k[$j++] = $_.swa; //#6891
                        $_.encc(); //#6891
                        $_.cset = "seta"; //#6892
                        break; //#6893
                    } //#6893
                    $k[$j++] = $_.swb; //#6895
                    $_.encc(); //#6895
                    $_.cset = "setb"; //#6896
                    break; //#6897
                } //#6897
                if ($eq($_.cset, "seta")) { //#6905
                    $k[$j++] = $get($_.msg, $_.i); //#6902
                    $_.enca(); //#6902
                    $_.i = $_.i + 1; //#6903
                    break; //#6904
                } //#6904
                if ($eq($_.cset, "setb")) { //#6910
                    $k[$j++] = $get($_.msg, $_.i); //#6907
                    $_.encb(); //#6907
                    $_.i = $_.i + 1; //#6908
                    break; //#6909
                } //#6909
                if ($eq($_.cset, "setc")) { //#6920
                    if ($get($_.msg, $_.i) <= -1) { //#6917
                        $k[$j++] = $get($_.msg, $_.i); //#6913
                        $_.encc(); //#6913
                        $_.i = $_.i + 1; //#6914
                    } else { //#6917
                        $k[$j++] = $geti($_.msg, $_.i, 2); //#6916
                        $_.encc(); //#6916
                        $_.i = $_.i + 2; //#6917
                    } //#6917
                    break; //#6919
                } //#6919
                break; //#6922
            } //#6922
        } //#6922
        $_.cws = $geti($_.cws, 0, $_.j); //#6926
    } //#6926
    if ($eq($_.encoding, "new")) { //#7097
        $k[$j++] = Infinity; //#6933
        $k[$j++] = $_.fn3; //#6933
        $k[$j++] = 96; //#6933
        $k[$j++] = $_.fn2; //#6933
        $k[$j++] = 97; //#6933
        $k[$j++] = $_.fn1; //#6933
        $k[$j++] = 102; //#6933
        $k[$j++] = $_.stp; //#6933
        $k[$j++] = 106; //#6933
        $k[$j++] = $_.lka; //#6933
        $k[$j++] = 100; //#6933
        $k[$j++] = $_.lkc; //#6933
        $k[$j++] = 99; //#6933
        $_.seta = $d(); //#6933
        $k[$j++] = Infinity; //#6934
        $k[$j++] = $_.fn3; //#6934
        $k[$j++] = 96; //#6934
        $k[$j++] = $_.fn2; //#6934
        $k[$j++] = 97; //#6934
        $k[$j++] = $_.fn1; //#6934
        $k[$j++] = 102; //#6934
        $k[$j++] = $_.stp; //#6934
        $k[$j++] = 106; //#6934
        $k[$j++] = $_.lka; //#6934
        $k[$j++] = 99; //#6934
        $k[$j++] = $_.lkc; //#6934
        $k[$j++] = 101; //#6934
        $_.setb = $d(); //#6934
        $k[$j++] = Infinity; //#6935
        $k[$j++] = $_.fn1; //#6935
        $k[$j++] = 102; //#6935
        $k[$j++] = $_.stp; //#6935
        $k[$j++] = 106; //#6935
        $k[$j++] = $_.lka; //#6935
        $k[$j++] = 101; //#6935
        $k[$j++] = $_.lkc; //#6935
        $k[$j++] = 100; //#6935
        $_.setc = $d(); //#6935
        $_.text = $s($_.msglen); //#6937
        for (var _8S = 0, _8R = $_.msglen - 1; _8S <= _8R; _8S += 1) { //#6941
            $_.i = _8S; //#6939
            var _8X = $get($_.msg, $_.i); //#6940
            $k[$j++] = $_.text; //#6940
            $k[$j++] = $_.i; //#6940
            $k[$j++] = _8X; //#6940
            if (_8X < 0) { //#6940
                $j--; //#6940
                $k[$j++] = 32; //#6940
            } //#6940
            var _8Y = $k[--$j]; //#6940
            var _8Z = $k[--$j]; //#6940
            $put($k[--$j], _8Z, _8Y); //#6940
        } //#6940
        $_.latch_a0 = $a(["", "e", "e", "ee", "eee", "eee"]); //#6954
        $_.latch_b0 = $a(["d", "", "d", "ddd", "dd", "ddd"]); //#6955
        $_.latch_c0 = $a(["c", "c", "", "eec", "ddc", "dddc"]); //#6956
        $_.latch_a1 = $a(["ee", "eee", "eee", "", "e", "e"]); //#6957
        $_.latch_b1 = $a(["ddd", "dd", "ddd", "d", "", "d"]); //#6958
        $_.latch_c1 = $a(["eec", "ddc", "dddc", "c", "c", ""]); //#6959
        $k[$j++] = Infinity; //#6961
        var _8h = $_.latch_a0; //#6961
        for (var _8i = 0, _8j = _8h.length; _8i < _8j; _8i++) { //#6961
            $k[$j++] = $get(_8h, _8i).length; //#6961
        } //#6961
        $_.latch_length_a0 = $a(); //#6961
        $k[$j++] = Infinity; //#6962
        var _8m = $_.latch_a1; //#6962
        for (var _8n = 0, _8o = _8m.length; _8n < _8o; _8n++) { //#6962
            $k[$j++] = $get(_8m, _8n).length; //#6962
        } //#6962
        $_.latch_length_a1 = $a(); //#6962
        $k[$j++] = Infinity; //#6963
        var _8r = $_.latch_b0; //#6963
        for (var _8s = 0, _8t = _8r.length; _8s < _8t; _8s++) { //#6963
            $k[$j++] = $get(_8r, _8s).length; //#6963
        } //#6963
        $_.latch_length_b0 = $a(); //#6963
        $k[$j++] = Infinity; //#6964
        var _8w = $_.latch_b1; //#6964
        for (var _8x = 0, _8y = _8w.length; _8x < _8y; _8x++) { //#6964
            $k[$j++] = $get(_8w, _8x).length; //#6964
        } //#6964
        $_.latch_length_b1 = $a(); //#6964
        $k[$j++] = Infinity; //#6965
        var _91 = $_.latch_c0; //#6965
        for (var _92 = 0, _93 = _91.length; _92 < _93; _92++) { //#6965
            $k[$j++] = $get(_91, _92).length; //#6965
        } //#6965
        $_.latch_length_c0 = $a(); //#6965
        $k[$j++] = Infinity; //#6966
        var _96 = $_.latch_c1; //#6966
        for (var _97 = 0, _98 = _96.length; _97 < _98; _97++) { //#6966
            $k[$j++] = $get(_96, _97).length; //#6966
        } //#6966
        $_.latch_length_c1 = $a(); //#6966
        $_.latch_sequence = $a([$_.latch_a0, $_.latch_b0, $_.latch_c0, $_.latch_a1, $_.latch_b1, $_.latch_c1]); //#6969
        var _9I = $a([function() {
            $_.enc_a0(); //#6970
        }, function() {
            $_.enc_b0(); //#6970
        }, function() {
            $_.enc_c(); //#6970
        }, function() {
            $_.enc_a1(); //#6970
        }, function() {
            $_.enc_b1(); //#6970
        }, function() {
            $_.enc_c(); //#6970
        }]); //#6970
        $_.encode = _9I; //#6970
        $_.start_code = $a([103, 104, 105]); //#6971
        $_.state_priority = $a([1, 0, 2, 4, 3, 5]); //#6973
        $_.start_state = $a([0, 1, 2, 0, 1, 2]); //#6974
        $_.start_length = $a([1, 1, 1, 1, 1, 1]); //#6975
        $k[$j++] = Infinity; //#6978
        var _9N = $a([5, 4, 3, 2, 1, 0]); //#6978
        for (var _9O = 0, _9P = _9N.length; _9O < _9P; _9O++) { //#6978
            $k[$j++] = $get($_.state_priority, $get(_9N, _9O)); //#6978
        } //#6978
        $_.reverse_priority = $a(); //#6978
        $k[$j++] = Infinity; //#6981
        var _9U = $_.reverse_priority; //#6981
        for (var _9V = 0, _9W = _9U.length; _9V < _9W; _9V++) { //#6981
            var _9X = $get(_9U, _9V); //#6981
            $k[$j++] = _9X; //#6981
            $k[$j++] = $get($_.latch_length_a0, _9X); //#6981
            $k[$j++] = _9X; //#6981
        } //#6981
        $_.prioritized_latch_length_a0 = $a(); //#6981
        $k[$j++] = Infinity; //#6982
        var _9b = $_.reverse_priority; //#6982
        for (var _9c = 0, _9d = _9b.length; _9c < _9d; _9c++) { //#6982
            var _9e = $get(_9b, _9c); //#6982
            $k[$j++] = _9e; //#6982
            $k[$j++] = $get($_.latch_length_a1, _9e); //#6982
            $k[$j++] = _9e; //#6982
        } //#6982
        $_.prioritized_latch_length_a1 = $a(); //#6982
        $k[$j++] = Infinity; //#6983
        var _9i = $_.reverse_priority; //#6983
        for (var _9j = 0, _9k = _9i.length; _9j < _9k; _9j++) { //#6983
            var _9l = $get(_9i, _9j); //#6983
            $k[$j++] = _9l; //#6983
            $k[$j++] = $get($_.latch_length_b0, _9l); //#6983
            $k[$j++] = _9l; //#6983
        } //#6983
        $_.prioritized_latch_length_b0 = $a(); //#6983
        $k[$j++] = Infinity; //#6984
        var _9p = $_.reverse_priority; //#6984
        for (var _9q = 0, _9r = _9p.length; _9q < _9r; _9q++) { //#6984
            var _9s = $get(_9p, _9q); //#6984
            $k[$j++] = _9s; //#6984
            $k[$j++] = $get($_.latch_length_b1, _9s); //#6984
            $k[$j++] = _9s; //#6984
        } //#6984
        $_.prioritized_latch_length_b1 = $a(); //#6984
        $k[$j++] = Infinity; //#6985
        var _9w = $_.reverse_priority; //#6985
        for (var _9x = 0, _9y = _9w.length; _9x < _9y; _9x++) { //#6985
            var _9z = $get(_9w, _9x); //#6985
            $k[$j++] = _9z; //#6985
            $k[$j++] = $get($_.latch_length_c0, _9z); //#6985
            $k[$j++] = _9z; //#6985
        } //#6985
        $_.prioritized_latch_length_c0 = $a(); //#6985
        $k[$j++] = Infinity; //#6986
        var _A3 = $_.reverse_priority; //#6986
        for (var _A4 = 0, _A5 = _A3.length; _A4 < _A5; _A4++) { //#6986
            var _A6 = $get(_A3, _A4); //#6986
            $k[$j++] = _A6; //#6986
            $k[$j++] = $get($_.latch_length_c1, _A6); //#6986
            $k[$j++] = _A6; //#6986
        } //#6986
        $_.prioritized_latch_length_c1 = $a(); //#6986
        $_.max_int = 2147483647; //#6988
        $_.can_a = function() {
            if ($_.c >= 0) { //#6991
                $k[$j++] = true; //#6991
            } else { //#6991
                var _AD = $get($_.seta, $_.c) !== undefined; //#6991
                $k[$j++] = _AD; //#6991
            } //#6991
        }; //#6991
        $_.can_b = function() {
            if ($_.c >= 0) { //#6992
                $k[$j++] = true; //#6992
            } else { //#6992
                var _AH = $get($_.setb, $_.c) !== undefined; //#6992
                $k[$j++] = _AH; //#6992
            } //#6992
        }; //#6992
        $_.can_c0 = function() {
            if ($_.num_digits >= 2) { //#6993
                $k[$j++] = true; //#6993
            } else { //#6993
                var _AL = $get($_.setc, $_.c) !== undefined; //#6993
                $k[$j++] = _AL; //#6993
            } //#6993
        }; //#6993
        $_.can_c1 = function() {
            if ($_.num_digits >= 2) { //#6994
                $k[$j++] = true; //#6994
            } else { //#6994
                var _AP = $get($_.setc, $_.c) !== undefined; //#6994
                $k[$j++] = _AP; //#6994
            } //#6994
        }; //#6994
        if ($_.suppressc) { //#6997
            $_.can_c0 = function() {
                $k[$j++] = false; //#6997
            }; //#6997
        } //#6997
        if ($_.suppressc || $_.unlatchextbeforec) { //#6998
            $_.can_c1 = function() {
                $k[$j++] = false; //#6998
            }; //#6998
        } //#6998
        $_.out_a0 = function() {
            $k[$j++] = 1; //#7001
            if ($_.c >= 0) { //#7001
                if ($_.c >= 128) { //#7001
                    var _AV = $k[--$j]; //#7001
                    $k[$j++] = $f(_AV + 1); //#7001
                } //#7001
                if (($_.c & 127) >= 96) { //#7001
                    var _AX = $k[--$j]; //#7001
                    $k[$j++] = $f(_AX + 1); //#7001
                } //#7001
            } //#7001
        }; //#7001
        $_.out_a1 = function() {
            $k[$j++] = 1; //#7002
            if ($_.c >= 0) { //#7002
                if ($_.c < 128) { //#7002
                    var _Aa = $k[--$j]; //#7002
                    $k[$j++] = $f(_Aa + 1); //#7002
                } //#7002
                if (($_.c & 127) >= 96) { //#7002
                    var _Ac = $k[--$j]; //#7002
                    $k[$j++] = $f(_Ac + 1); //#7002
                } //#7002
            } //#7002
        }; //#7002
        $_.out_b0 = function() {
            $k[$j++] = 1; //#7003
            if ($_.c >= 0) { //#7003
                if ($_.c >= 128) { //#7003
                    var _Af = $k[--$j]; //#7003
                    $k[$j++] = $f(_Af + 1); //#7003
                } //#7003
                if (($_.c & 127) < 32) { //#7003
                    var _Ah = $k[--$j]; //#7003
                    $k[$j++] = $f(_Ah + 1); //#7003
                } //#7003
            } //#7003
        }; //#7003
        $_.out_b1 = function() {
            $k[$j++] = 1; //#7004
            if ($_.c >= 0) { //#7004
                if ($_.c < 128) { //#7004
                    var _Ak = $k[--$j]; //#7004
                    $k[$j++] = $f(_Ak + 1); //#7004
                } //#7004
                if (($_.c & 127) < 32) { //#7004
                    var _Am = $k[--$j]; //#7004
                    $k[$j++] = $f(_Am + 1); //#7004
                } //#7004
            } //#7004
        }; //#7004
        $_.map_ab = function() {
            var _An = $k[--$j]; //#7007
            $k[$j++] = _An; //#7007
            if (_An < 32) { //#7007
                var _Ao = $k[--$j]; //#7007
                $k[$j++] = $f(_Ao + 64); //#7007
            } else { //#7007
                var _Ap = $k[--$j]; //#7007
                $k[$j++] = $f(_Ap - 32); //#7007
            } //#7007
        }; //#7007
        $_.enc_a0 = function() {
            $k[$j++] = Infinity; //#7008
            if ($_.c < 0) { //#7008
                $k[$j++] = $get($_.seta, $_.c); //#7008
            } else { //#7008
                if ($_.c >= 128) { //#7008
                    $k[$j++] = 101; //#7008
                } //#7008
                var _Aw = $_.c & 127; //#7008
                $k[$j++] = _Aw; //#7008
                if (_Aw >= 96) { //#7008
                    var _Ax = $k[--$j]; //#7008
                    $k[$j++] = 98; //#7008
                    $k[$j++] = _Ax; //#7008
                } //#7008
                $_.map_ab(); //#7008
            } //#7008
            var _Ay = $a(); //#7008
            $k[$j++] = _Ay; //#7008
        }; //#7008
        $_.enc_a1 = function() {
            $k[$j++] = Infinity; //#7009
            if ($_.c < 0) { //#7009
                $k[$j++] = $get($_.seta, $_.c); //#7009
            } else { //#7009
                if ($_.c < 128) { //#7009
                    $k[$j++] = 101; //#7009
                } //#7009
                var _B5 = $_.c & 127; //#7009
                $k[$j++] = _B5; //#7009
                if (_B5 >= 96) { //#7009
                    var _B6 = $k[--$j]; //#7009
                    $k[$j++] = 98; //#7009
                    $k[$j++] = _B6; //#7009
                } //#7009
                $_.map_ab(); //#7009
            } //#7009
            var _B7 = $a(); //#7009
            $k[$j++] = _B7; //#7009
        }; //#7009
        $_.enc_b0 = function() {
            $k[$j++] = Infinity; //#7010
            if ($_.c < 0) { //#7010
                $k[$j++] = $get($_.setb, $_.c); //#7010
            } else { //#7010
                if ($_.c >= 128) { //#7010
                    $k[$j++] = 100; //#7010
                } //#7010
                var _BE = $_.c & 127; //#7010
                $k[$j++] = _BE; //#7010
                if (_BE < 32) { //#7010
                    var _BF = $k[--$j]; //#7010
                    $k[$j++] = 98; //#7010
                    $k[$j++] = _BF; //#7010
                } //#7010
                $_.map_ab(); //#7010
            } //#7010
            var _BG = $a(); //#7010
            $k[$j++] = _BG; //#7010
        }; //#7010
        $_.enc_b1 = function() {
            $k[$j++] = Infinity; //#7011
            if ($_.c < 0) { //#7011
                $k[$j++] = $get($_.setb, $_.c); //#7011
            } else { //#7011
                if ($_.c < 128) { //#7011
                    $k[$j++] = 100; //#7011
                } //#7011
                var _BN = $_.c & 127; //#7011
                $k[$j++] = _BN; //#7011
                if (_BN < 32) { //#7011
                    var _BO = $k[--$j]; //#7011
                    $k[$j++] = 98; //#7011
                    $k[$j++] = _BO; //#7011
                } //#7011
                $_.map_ab(); //#7011
            } //#7011
            var _BP = $a(); //#7011
            $k[$j++] = _BP; //#7011
        }; //#7011
        $_.enc_c = function() {
            $k[$j++] = Infinity; //#7012
            if ($_.c < 0) { //#7012
                $k[$j++] = $get($_.setc, $_.c); //#7012
            } else { //#7012
                $k[$j++] = $f(($f($get($_.msg, $_.n) - 48) * 10) + $f($get($_.msg, $_.n + 1) - 48)); //#7012
            } //#7012
            var _Ba = $a(); //#7012
            $k[$j++] = _Ba; //#7012
        }; //#7012
        $_.get_best_prior_state = function() {
            var _Bd = $get($_.bln_0, $k[--$j]); //#7017
            $_.len = $f($k[--$j] + _Bd); //#7017
            $_.o = $k[--$j]; //#7017
            var _Bi = $get($_.bln_0, $k[--$j]); //#7018
            var _Bk = $f($k[--$j] + _Bi); //#7018
            $k[$j++] = _Bk; //#7018
            if (_Bk < $_.len) { //#7018
                $_.len = $k[--$j]; //#7018
                $_.o = $k[--$j]; //#7018
            } else { //#7018
                $j -= 2; //#7018
            } //#7018
            var _Bq = $get($_.bln_0, $k[--$j]); //#7019
            var _Bs = $f($k[--$j] + _Bq); //#7019
            $k[$j++] = _Bs; //#7019
            if (_Bs < $_.len) { //#7019
                $_.len = $k[--$j]; //#7019
                $_.o = $k[--$j]; //#7019
            } else { //#7019
                $j -= 2; //#7019
            } //#7019
            var _By = $get($_.bln_0, $k[--$j]); //#7020
            var _C0 = $f($k[--$j] + _By); //#7020
            $k[$j++] = _C0; //#7020
            if (_C0 < $_.len) { //#7020
                $_.len = $k[--$j]; //#7020
                $_.o = $k[--$j]; //#7020
            } else { //#7020
                $j -= 2; //#7020
            } //#7020
            var _C6 = $get($_.bln_0, $k[--$j]); //#7021
            var _C8 = $f($k[--$j] + _C6); //#7021
            $k[$j++] = _C8; //#7021
            if (_C8 < $_.len) { //#7021
                $_.len = $k[--$j]; //#7021
                $_.o = $k[--$j]; //#7021
            } else { //#7021
                $j -= 2; //#7021
            } //#7021
            var _CE = $get($_.bln_0, $k[--$j]); //#7022
            if ($f($k[--$j] + _CE) < $_.len) { //#7022
                $_.o = $k[--$j]; //#7022
            } else { //#7022
                $j--; //#7022
            } //#7022
            $k[$j++] = $_.o; //#7023
        }; //#7023
        $_.bln_0 = $_.start_length; //#7029
        $_.bln_1 = $_.start_length; //#7029
        $k[$j++] = Infinity; //#7029
        for (var _CL = 0, _CM = 4; _CL < _CM; _CL++) { //#7029
            $k[$j++] = $a([0, 0, 0, 0, 0, 0]); //#7029
        } //#7029
        $_.bln = $a(); //#7029
        $_.bps_0 = $_.start_state; //#7030
        $_.bps_1 = $_.start_state; //#7030
        $k[$j++] = Infinity; //#7030
        for (var _CR = 0, _CS = 4; _CR < _CS; _CR++) { //#7030
            $k[$j++] = $a([0, 0, 0, 0, 0, 0]); //#7030
        } //#7030
        $_.bps = $a(); //#7030
        $k[$j++] = Infinity; //#7033
        for (var _CW = 0, _CX = $_.msg.length; _CW < _CX; _CW++) { //#7033
            $k[$j++] = $a([0, 0, 0, 0, 0, 0]); //#7033
        } //#7033
        $_.path = $a(); //#7033
        $_.make_tables = function() {
            $_.num_digits = 0; //#7036
            for (var _Cc = 0, _Cb = $_.msg.length - 1; _Cc <= _Cb; _Cc += 1) { //#7067
                $_.n = _Cc; //#7038
                $_.c = $get($_.msg, $_.n); //#7039
                $k[$j++] = 'num_digits'; //#7042
                if (($_.c >= 48) && ($_.c < 58)) { //#7042
                    $k[$j++] = $_.num_digits + 1; //#7042
                } else { //#7042
                    $k[$j++] = 0; //#7042
                } //#7042
                var _Cj = $k[--$j]; //#7042
                $_[$k[--$j]] = _Cj; //#7042
                $_.bln_2 = $_.bln_1; //#7045
                $_.bln_1 = $_.bln_0; //#7045
                $_.bln_0 = $get($_.bln, $_.n & 3); //#7045
                $_.bps_2 = $_.bps_1; //#7046
                $_.bps_1 = $_.bps_0; //#7046
                $_.bps_0 = $get($_.bps, $_.n & 3); //#7046
                $k[$j++] = 'bps_c'; //#7049
                if ($_.num_digits >= 2) { //#7049
                    $k[$j++] = $_.bps_2; //#7049
                } else { //#7049
                    $k[$j++] = $_.bps_1; //#7049
                } //#7049
                var _Cy = $k[--$j]; //#7049
                $_[$k[--$j]] = _Cy; //#7049
                $k[$j++] = 'bln_c'; //#7050
                if ($_.num_digits >= 2) { //#7050
                    $k[$j++] = $_.bln_2; //#7050
                } else { //#7050
                    $k[$j++] = $_.bln_1; //#7050
                } //#7050
                var _D3 = $k[--$j]; //#7050
                $_[$k[--$j]] = _D3; //#7050
                $k[$j++] = $_.bln_0; //#7053
                $k[$j++] = 0; //#7053
                $_.can_a(); //#7053
                if ($k[--$j]) { //#7053
                    $_.p = $get($_.bps_1, 0); //#7053
                    $put($get($_.path, $_.n), 0, $_.p); //#7053
                    $k[$j++] = $f($get($_.bln_1, $_.p) + $get($_.latch_length_a0, $_.p)); //#7053
                    $_.out_a0(); //#7053
                    var _DJ = $k[--$j]; //#7053
                    var _DK = $k[--$j]; //#7053
                    $k[$j++] = $f(_DK + _DJ); //#7053
                } else { //#7053
                    $k[$j++] = $_.max_int; //#7053
                } //#7053
                var _DM = $k[--$j]; //#7053
                var _DN = $k[--$j]; //#7053
                $put($k[--$j], _DN, _DM); //#7053
                $k[$j++] = $_.bln_0; //#7054
                $k[$j++] = 3; //#7054
                $_.can_a(); //#7054
                if ($k[--$j]) { //#7054
                    $_.p = $get($_.bps_1, 3); //#7054
                    $put($get($_.path, $_.n), 3, $_.p); //#7054
                    $k[$j++] = $f($get($_.bln_1, $_.p) + $get($_.latch_length_a1, $_.p)); //#7054
                    $_.out_a1(); //#7054
                    var _Dd = $k[--$j]; //#7054
                    var _De = $k[--$j]; //#7054
                    $k[$j++] = $f(_De + _Dd); //#7054
                } else { //#7054
                    $k[$j++] = $_.max_int; //#7054
                } //#7054
                var _Dg = $k[--$j]; //#7054
                var _Dh = $k[--$j]; //#7054
                $put($k[--$j], _Dh, _Dg); //#7054
                $k[$j++] = $_.bln_0; //#7055
                $k[$j++] = 1; //#7055
                $_.can_b(); //#7055
                if ($k[--$j]) { //#7055
                    $_.p = $get($_.bps_1, 1); //#7055
                    $put($get($_.path, $_.n), 1, $_.p); //#7055
                    $k[$j++] = $f($get($_.bln_1, $_.p) + $get($_.latch_length_b0, $_.p)); //#7055
                    $_.out_b0(); //#7055
                    var _Dx = $k[--$j]; //#7055
                    var _Dy = $k[--$j]; //#7055
                    $k[$j++] = $f(_Dy + _Dx); //#7055
                } else { //#7055
                    $k[$j++] = $_.max_int; //#7055
                } //#7055
                var _E0 = $k[--$j]; //#7055
                var _E1 = $k[--$j]; //#7055
                $put($k[--$j], _E1, _E0); //#7055
                $k[$j++] = $_.bln_0; //#7056
                $k[$j++] = 4; //#7056
                $_.can_b(); //#7056
                if ($k[--$j]) { //#7056
                    $_.p = $get($_.bps_1, 4); //#7056
                    $put($get($_.path, $_.n), 4, $_.p); //#7056
                    $k[$j++] = $f($get($_.bln_1, $_.p) + $get($_.latch_length_b1, $_.p)); //#7056
                    $_.out_b1(); //#7056
                    var _EH = $k[--$j]; //#7056
                    var _EI = $k[--$j]; //#7056
                    $k[$j++] = $f(_EI + _EH); //#7056
                } else { //#7056
                    $k[$j++] = $_.max_int; //#7056
                } //#7056
                var _EK = $k[--$j]; //#7056
                var _EL = $k[--$j]; //#7056
                $put($k[--$j], _EL, _EK); //#7056
                $k[$j++] = $_.bln_0; //#7057
                $k[$j++] = 2; //#7057
                $_.can_c0(); //#7057
                if ($k[--$j]) { //#7057
                    $_.p = $get($_.bps_c, 2); //#7057
                    $put($get($_.path, $_.n), 2, $_.p); //#7057
                    $k[$j++] = $f($f($get($_.bln_c, $_.p) + $get($_.latch_length_c0, $_.p)) + 1); //#7057
                } else { //#7057
                    $k[$j++] = $_.max_int; //#7057
                } //#7057
                var _Ec = $k[--$j]; //#7057
                var _Ed = $k[--$j]; //#7057
                $put($k[--$j], _Ed, _Ec); //#7057
                $k[$j++] = $_.bln_0; //#7058
                $k[$j++] = 5; //#7058
                $_.can_c1(); //#7058
                if ($k[--$j]) { //#7058
                    $_.p = $get($_.bps_c, 5); //#7058
                    $put($get($_.path, $_.n), 5, $_.p); //#7058
                    $k[$j++] = $f($f($get($_.bln_c, $_.p) + $get($_.latch_length_c1, $_.p)) + 1); //#7058
                } else { //#7058
                    $k[$j++] = $_.max_int; //#7058
                } //#7058
                var _Eu = $k[--$j]; //#7058
                var _Ev = $k[--$j]; //#7058
                $put($k[--$j], _Ev, _Eu); //#7058
                $k[$j++] = $_.bps_0; //#7061
                $k[$j++] = 0; //#7061
                $aload($_.prioritized_latch_length_a0); //#7061
                $_.get_best_prior_state(); //#7061
                var _Ez = $k[--$j]; //#7061
                var _F0 = $k[--$j]; //#7061
                $put($k[--$j], _F0, _Ez); //#7061
                $k[$j++] = $_.bps_0; //#7062
                $k[$j++] = 3; //#7062
                $aload($_.prioritized_latch_length_a1); //#7062
                $_.get_best_prior_state(); //#7062
                var _F4 = $k[--$j]; //#7062
                var _F5 = $k[--$j]; //#7062
                $put($k[--$j], _F5, _F4); //#7062
                $k[$j++] = $_.bps_0; //#7063
                $k[$j++] = 1; //#7063
                $aload($_.prioritized_latch_length_b0); //#7063
                $_.get_best_prior_state(); //#7063
                var _F9 = $k[--$j]; //#7063
                var _FA = $k[--$j]; //#7063
                $put($k[--$j], _FA, _F9); //#7063
                $k[$j++] = $_.bps_0; //#7064
                $k[$j++] = 4; //#7064
                $aload($_.prioritized_latch_length_b1); //#7064
                $_.get_best_prior_state(); //#7064
                var _FE = $k[--$j]; //#7064
                var _FF = $k[--$j]; //#7064
                $put($k[--$j], _FF, _FE); //#7064
                $k[$j++] = $_.bps_0; //#7065
                $k[$j++] = 2; //#7065
                $aload($_.prioritized_latch_length_c0); //#7065
                $_.get_best_prior_state(); //#7065
                var _FJ = $k[--$j]; //#7065
                var _FK = $k[--$j]; //#7065
                $put($k[--$j], _FK, _FJ); //#7065
                $k[$j++] = $_.bps_0; //#7066
                $k[$j++] = 5; //#7066
                $aload($_.prioritized_latch_length_c1); //#7066
                $_.get_best_prior_state(); //#7066
                var _FO = $k[--$j]; //#7066
                var _FP = $k[--$j]; //#7066
                $put($k[--$j], _FP, _FO); //#7066
            } //#7066
        }; //#7066
        $_.backtrack = function() {
            $_.n = $_.msg.length; //#7071
            var _FS = $_.reverse_priority; //#7074
            for (var _FT = 0, _FU = _FS.length; _FT < _FU; _FT++) { //#7074
                var _FV = $get(_FS, _FT); //#7074
                var _FX = $get($_.bln_0, _FV); //#7074
                $k[$j++] = _FV; //#7074
                $k[$j++] = _FX; //#7074
                $k[$j++] = _FX; //#7074
            } //#7074
            $j--; //#7075
            $_.len = $k[--$j]; //#7075
            $_.state = $k[--$j]; //#7075
            for (var _Fa = 0, _Fb = 5; _Fa < _Fb; _Fa++) { //#7076
                if ($lt($k[--$j], $_.len)) { //#7076
                    $_.len = $k[--$j]; //#7076
                    $_.state = $k[--$j]; //#7076
                } else { //#7076
                    $j -= 2; //#7076
                } //#7076
            } //#7076
            $k[$j++] = $a($_.len); //#7089
            for (;;) { //#7089
                if ($_.n <= 0) { //#7080
                    break; //#7080
                } //#7080
                $_.prior_state = $get($get($_.path, $_.n - 1), $_.state); //#7081
                $k[$j++] = Infinity; //#7082
                $forall($get($get($_.latch_sequence, $_.state), $_.prior_state)); //#7082
                $_.latch = $a(); //#7082
                var _G0 = ((($_.state == 2) || ($_.state == 5)) && ($get($_.msg, $_.n - 1) >= 48)) ? 2 : 1; //#7083
                $_.n = $_.n - _G0; //#7083
                $_.c = $get($_.msg, $_.n); //#7084
                $k[$j++] = 'enc'; //#7085
                if ($get($_.encode, $_.state)() === true) {
                    break;
                } //#7085
                var _G7 = $k[--$j]; //#7085
                $_[$k[--$j]] = _G7; //#7085
                $_.len = $f($f($_.len - $_.latch.length) - $_.enc.length); //#7086
                var _GC = $k[--$j]; //#7087
                var _GD = $_.len; //#7087
                var _GE = $_.latch; //#7087
                $puti(_GC, _GD, _GE); //#7087
                $puti(_GC, $f(_GD + _GE.length), $_.enc); //#7087
                $_.state = $_.prior_state; //#7088
                $k[$j++] = _GC; //#7088
            } //#7088
            var _GH = $k[--$j]; //#7090
            $put(_GH, 0, $get($_.start_code, $_.state)); //#7090
            $k[$j++] = _GH; //#7090
        }; //#7090
        $_.make_tables(); //#7093
        $_.backtrack(); //#7093
        $_.cws = $k[--$j]; //#7095
    } //#7095
    $_.j = $_.cws.length; //#7100
    var _GO = $a($_.j + 2); //#7101
    $puti(_GO, 0, $_.cws); //#7101
    $_.cws = _GO; //#7101
    $_.csum = $get($_.cws, 0); //#7102
    for (var _GU = 1, _GT = $_.j - 1; _GU <= _GT; _GU += 1) { //#7106
        $_.i = _GU; //#7104
        $_.csum = $f($_.csum + ($get($_.cws, $_.i) * $_.i)); //#7105
    } //#7105
    $_.csum = $_.csum % 103; //#7107
    $put($_.cws, $_.j, $_.csum); //#7108
    $put($_.cws, $_.j + 1, $get($_.seta, $_.stp)); //#7109
    var _Gk = $get($_.options, 'debugcws') !== undefined; //#7111
    if (_Gk) { //#7111
        $k[$j++] = 'bwipp.debugcws#7111'; //#7111
        $k[$j++] = $_.cws; //#7111
        bwipp_raiseerror(); //#7111
    } //#7111
    if (!bwipp_code128.__7133__) { //#7133
        $_ = Object.create($_); //#7133
        $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "2331112"]); //#7132
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code128.$ctx[id] = $_[id]); //#7132
        bwipp_code128.__7133__ = 1; //#7132
        $_ = Object.getPrototypeOf($_); //#7132
    } //#7132
    $_.sbs = $s(($_.cws.length * 6) + 1); //#7136
    for (var _Gs = 0, _Gr = $_.cws.length - 1; _Gs <= _Gr; _Gs += 1) { //#7140
        $_.i = _Gs; //#7138
        $puti($_.sbs, $_.i * 6, $get($_.encs, $get($_.cws, $_.i))); //#7139
    } //#7139
    $k[$j++] = Infinity; //#7143
    $k[$j++] = Infinity; //#7145
    var _H0 = $_.sbs; //#7145
    for (var _H1 = 0, _H2 = _H0.length; _H1 < _H2; _H1++) { //#7145
        $k[$j++] = $get(_H0, _H1) - 48; //#7145
    } //#7145
    var _H4 = $a(); //#7145
    $k[$j++] = Infinity; //#7146
    for (var _H6 = 0, _H7 = ~~(($_.sbs.length + 1) / 2); _H6 < _H7; _H6++) { //#7146
        $k[$j++] = $_.height; //#7146
    } //#7146
    var _H9 = $a(); //#7146
    $k[$j++] = Infinity; //#7147
    for (var _HB = 0, _HC = ~~(($_.sbs.length + 1) / 2); _HB < _HC; _HB++) { //#7147
        $k[$j++] = 0; //#7147
    } //#7147
    var _HD = $a(); //#7147
    $k[$j++] = 'ren'; //#7150
    $k[$j++] = 'renlinear'; //#7150
    $k[$j++] = 'sbs'; //#7150
    $k[$j++] = _H4; //#7150
    $k[$j++] = 'bhs'; //#7150
    $k[$j++] = _H9; //#7150
    $k[$j++] = 'bbs'; //#7150
    $k[$j++] = _HD; //#7150
    $k[$j++] = 'txt'; //#7150
    $k[$j++] = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#7150
    $k[$j++] = 'textxalign'; //#7150
    $k[$j++] = "center"; //#7150
    $k[$j++] = 'opt'; //#7150
    $k[$j++] = $_.options; //#7150
    var _HM = $d(); //#7150
    $k[$j++] = _HM; //#7153
    if (!$_.dontdraw) { //#7153
        bwipp_renlinear(); //#7153
    } //#7153
    $_ = Object.getPrototypeOf($_); //#7155
    $_ = Object.getPrototypeOf($_); //#7157
} //bwipp_code128
function bwipp_gs1_128() {
    $_ = Object.create($_); //#7188
    $_.dontdraw = false; //#7191
    $_.includetext = false; //#7192
    $_.textfont = "OCR-B"; //#7193
    $_.textsize = 10; //#7194
    $_.textxoffset = 0; //#7195
    $_.textyoffset = -8; //#7196
    $_.height = 0.5; //#7197
    $_.linkagea = false; //#7198
    $_.linkagec = false; //#7199
    $_.parse = false; //#7200
    $_.dontlint = false; //#7201
    $_.lintreqs = false; //#7202
    $k[$j++] = $_; //#7204
    bwipp_processoptions(); //#7204
    $_.options = $k[--$j]; //#7204
    $_.barcode = $k[--$j]; //#7205
    if ($_.linkagea && $_.linkagec) { //#7209
        $k[$j++] = 'bwipp.gs1128badLinkage#7208'; //#7208
        $k[$j++] = "linkagea and linkagec cannot be used together"; //#7208
        bwipp_raiseerror(); //#7208
    } //#7208
    $_.text = $_.barcode; //#7211
    $k[$j++] = $_.barcode; //#7213
    $k[$j++] = 'ai'; //#7213
    bwipp_gs1process(); //#7213
    $_.fncs = $k[--$j]; //#7214
    $_.vals = $k[--$j]; //#7215
    $_.ais = $k[--$j]; //#7216
    $_.fnc1 = -1; //#7219
    $_.c128 = $a([$_.fnc1]); //#7220
    for (var _D = 0, _C = $_.ais.length - 1; _D <= _C; _D += 1) { //#7236
        $_.i = _D; //#7222
        $_.ai = $get($_.ais, $_.i); //#7223
        $_.val = $get($_.vals, $_.i); //#7224
        var _N = $a(($_.c128.length + $_.ai.length) + $_.val.length); //#7225
        $puti(_N, 0, $_.c128); //#7226
        $k[$j++] = _N; //#7227
        $k[$j++] = _N; //#7227
        $k[$j++] = $_.c128.length; //#7227
        $k[$j++] = $_.ai; //#7227
        $k[$j++] = Infinity; //#7227
        var _R = $k[--$j]; //#7227
        var _S = $k[--$j]; //#7227
        $k[$j++] = _R; //#7227
        $forall(_S); //#7227
        var _T = $a(); //#7227
        var _U = $k[--$j]; //#7227
        $puti($k[--$j], _U, _T); //#7227
        var _W = $k[--$j]; //#7228
        $k[$j++] = _W; //#7228
        $k[$j++] = _W; //#7228
        $k[$j++] = $_.c128.length + $_.ai.length; //#7228
        $k[$j++] = $_.val; //#7228
        $k[$j++] = Infinity; //#7228
        var _a = $k[--$j]; //#7228
        var _b = $k[--$j]; //#7228
        $k[$j++] = _a; //#7228
        $forall(_b); //#7228
        var _c = $a(); //#7228
        var _d = $k[--$j]; //#7228
        $puti($k[--$j], _d, _c); //#7228
        $_.c128 = $k[--$j]; //#7229
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#7235
            var _m = $a($_.c128.length + 1); //#7231
            $puti(_m, 0, $_.c128); //#7232
            $put(_m, $_.c128.length, $_.fnc1); //#7233
            $_.c128 = _m; //#7234
        } //#7234
    } //#7234
    $_.barcode = $s(($_.c128.length + 1) * 5); //#7239
    $_.i = 0; //#7240
    $_.j = 0; //#7240
    for (;;) { //#7250
        if ($_.i == $_.c128.length) { //#7241
            break; //#7241
        } //#7241
        var _w = $get($_.c128, $_.i); //#7242
        $k[$j++] = _w; //#7247
        if (_w == $_.fnc1) { //#7246
            $j--; //#7243
            $puti($_.barcode, $_.j, "^FNC1"); //#7243
            $_.j = $_.j + 4; //#7244
        } else { //#7246
            $put($_.barcode, $_.j, $k[--$j]); //#7246
        } //#7246
        $_.i = $_.i + 1; //#7248
        $_.j = $_.j + 1; //#7249
    } //#7249
    if ($_.linkagea || $_.linkagec) { //#7254
        $k[$j++] = $_.barcode; //#7252
        $k[$j++] = $_.j; //#7252
        if ($_.linkagea) { //#7252
            $k[$j++] = "^LNKA"; //#7252
        } else { //#7252
            $k[$j++] = "^LNKC"; //#7252
        } //#7252
        var _1B = $k[--$j]; //#7252
        var _1C = $k[--$j]; //#7252
        $puti($k[--$j], _1C, _1B); //#7252
        $_.j = $_.j + 5; //#7253
    } //#7253
    $_.barcode = $geti($_.barcode, 0, $_.j); //#7255
    delete $_.options["parse"]; //#7258
    $put($_.options, "height", $_.height); //#7259
    $put($_.options, "dontdraw", true); //#7260
    $put($_.options, "parsefnc", true); //#7261
    $k[$j++] = 'args'; //#7262
    $k[$j++] = $_.barcode; //#7262
    $k[$j++] = $_.options; //#7262
    bwipp_code128(); //#7262
    var _1P = $k[--$j]; //#7262
    $_[$k[--$j]] = _1P; //#7262
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7264
    $put($_.args, "textxalign", "center"); //#7265
    $put($_.args, "opt", $_.options); //#7266
    $k[$j++] = $_.args; //#7269
    if (!$_.dontdraw) { //#7269
        bwipp_renlinear(); //#7269
    } //#7269
    $_ = Object.getPrototypeOf($_); //#7271
} //bwipp_gs1_128
function bwipp_ean14() {
    $_ = Object.create($_); //#7300
    $_.dontdraw = false; //#7303
    $_.includetext = false; //#7304
    $_.textfont = "OCR-B"; //#7305
    $_.textsize = 10; //#7306
    $_.textxoffset = 0; //#7307
    $_.textyoffset = -8; //#7308
    $_.height = 1; //#7309
    $k[$j++] = $_; //#7311
    bwipp_processoptions(); //#7311
    $_.options = $k[--$j]; //#7311
    $_.barcode = $k[--$j]; //#7312
    $_.text = $_.barcode; //#7315
    var _3 = $_.barcode; //#7316
    $k[$j++] = $s(_3.length); //#7317
    $k[$j++] = 0; //#7317
    $forall(_3, function() { //#7317
        var _5 = $k[--$j]; //#7317
        $k[$j++] = _5; //#7317
        if (_5 != 32) { //#7317
            var _6 = $k[--$j]; //#7317
            var _7 = $k[--$j]; //#7317
            var _8 = $k[--$j]; //#7317
            $put(_8, _7, _6); //#7317
            $k[$j++] = _8; //#7317
            $k[$j++] = $f(_7 + 1); //#7317
        } else { //#7317
            $j--; //#7317
        } //#7317
    }); //#7317
    var _9 = $k[--$j]; //#7318
    $_.barcode = $geti($k[--$j], 0, _9); //#7318
    $_.hasspace = $_.text.length != $_.barcode.length; //#7319
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#7324
        $k[$j++] = 'bwipp.ean14badLength#7323'; //#7323
        $k[$j++] = "EAN-14 must be 13 or 14 digits"; //#7323
        bwipp_raiseerror(); //#7323
    } //#7323
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#7327
        $k[$j++] = 'bwipp.ean14badAI#7326'; //#7326
        $k[$j++] = "EAN-14 must begin with (01) application identifier"; //#7326
        bwipp_raiseerror(); //#7326
    } //#7326
    var _K = $geti($_.barcode, 4, $_.barcode.length - 4); //#7328
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#7332
        var _N = $get(_K, _L); //#7332
        if ((_N < 48) || (_N > 57)) { //#7331
            $k[$j++] = 'bwipp.ean14badCharacter#7330'; //#7330
            $k[$j++] = "EAN-14 must contain only digits"; //#7330
            bwipp_raiseerror(); //#7330
        } //#7330
    } //#7330
    $_.checksum = 0; //#7335
    for (var _O = 0; _O <= 12; _O += 1) { //#7339
        $_.i = _O; //#7337
        $k[$j++] = 'checksum'; //#7338
        $k[$j++] = $_.checksum; //#7338
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#7338
        if (($_.i % 2) == 0) { //#7338
            var _U = $k[--$j]; //#7338
            $k[$j++] = _U * 3; //#7338
        } //#7338
        var _V = $k[--$j]; //#7338
        var _W = $k[--$j]; //#7338
        $_[$k[--$j]] = $f(_W + _V); //#7338
    } //#7338
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7340
    if ($_.barcode.length == 18) { //#7354
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#7344
            $k[$j++] = 'bwipp.ean14badCheckDigit#7343'; //#7343
            $k[$j++] = "Incorrect EAN-14 check digit provided"; //#7343
            bwipp_raiseerror(); //#7343
        } //#7343
    } else { //#7354
        var _d = $s(18); //#7346
        $puti(_d, 0, $_.barcode); //#7347
        $put(_d, 17, $_.checksum + 48); //#7348
        $_.barcode = _d; //#7349
        var _i = $_.hasspace ? 2 : 1; //#7350
        var _j = $s($_.text.length + _i); //#7350
        $puti(_j, _j.length - 2, " "); //#7351
        $put(_j, _j.length - 1, $_.checksum + 48); //#7352
        $puti(_j, 0, $_.text); //#7353
        $_.text = _j; //#7354
    } //#7354
    $_.gtin = $geti($_.barcode, 4, 14); //#7356
    $_.barcode = $s(21); //#7359
    $puti($_.barcode, 0, "^FNC101"); //#7360
    var _r = $_.gtin; //#7361
    $puti($_.barcode, 7, _r); //#7361
    $put($_.options, "dontdraw", true); //#7364
    $put($_.options, "parsefnc", true); //#7365
    $k[$j++] = 'args'; //#7366
    $k[$j++] = $_.barcode; //#7366
    $k[$j++] = $_.options; //#7366
    bwipp_code128(); //#7366
    var _w = $k[--$j]; //#7366
    $_[$k[--$j]] = _w; //#7366
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7368
    $put($_.args, "textxalign", "center"); //#7369
    $put($_.args, "opt", $_.options); //#7370
    $k[$j++] = $_.args; //#7373
    if (!$_.dontdraw) { //#7373
        bwipp_renlinear(); //#7373
    } //#7373
    $_ = Object.getPrototypeOf($_); //#7375
} //bwipp_ean14
function bwipp_sscc18() {
    $_ = Object.create($_); //#7404
    $_.dontdraw = false; //#7407
    $_.includetext = false; //#7408
    $_.textfont = "OCR-B"; //#7409
    $_.textsize = 10; //#7410
    $_.textxoffset = 0; //#7411
    $_.textyoffset = -8; //#7412
    $_.height = 1; //#7413
    $k[$j++] = $_; //#7415
    bwipp_processoptions(); //#7415
    $_.options = $k[--$j]; //#7415
    $_.barcode = $k[--$j]; //#7416
    $_.text = $_.barcode; //#7419
    var _3 = $_.barcode; //#7420
    $k[$j++] = $s(_3.length); //#7421
    $k[$j++] = 0; //#7421
    $forall(_3, function() { //#7421
        var _5 = $k[--$j]; //#7421
        $k[$j++] = _5; //#7421
        if (_5 != 32) { //#7421
            var _6 = $k[--$j]; //#7421
            var _7 = $k[--$j]; //#7421
            var _8 = $k[--$j]; //#7421
            $put(_8, _7, _6); //#7421
            $k[$j++] = _8; //#7421
            $k[$j++] = $f(_7 + 1); //#7421
        } else { //#7421
            $j--; //#7421
        } //#7421
    }); //#7421
    var _9 = $k[--$j]; //#7422
    $_.barcode = $geti($k[--$j], 0, _9); //#7422
    $_.hasspace = $_.text.length != $_.barcode.length; //#7423
    if (($_.barcode.length != 21) && ($_.barcode.length != 22)) { //#7428
        $k[$j++] = 'bwipp.sscc18badLength#7427'; //#7427
        $k[$j++] = "SSCC-18 must be 17 or 18 digits"; //#7427
        bwipp_raiseerror(); //#7427
    } //#7427
    if ($ne($geti($_.barcode, 0, 4), "\(00\)")) { //#7431
        $k[$j++] = 'bwipp.sscc18badAI#7430'; //#7430
        $k[$j++] = "SSCC-18 must begin with (00) application identifier"; //#7430
        bwipp_raiseerror(); //#7430
    } //#7430
    var _K = $geti($_.barcode, 4, $_.barcode.length - 4); //#7432
    for (var _L = 0, _M = _K.length; _L < _M; _L++) { //#7436
        var _N = $get(_K, _L); //#7436
        if ((_N < 48) || (_N > 57)) { //#7435
            $k[$j++] = 'bwipp.sscc18badCharacter#7434'; //#7434
            $k[$j++] = "SSCC-18 must contain only digits"; //#7434
            bwipp_raiseerror(); //#7434
        } //#7434
    } //#7434
    $_.checksum = 0; //#7439
    for (var _O = 0; _O <= 16; _O += 1) { //#7443
        $_.i = _O; //#7441
        $k[$j++] = 'checksum'; //#7442
        $k[$j++] = $_.checksum; //#7442
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#7442
        if (($_.i % 2) == 0) { //#7442
            var _U = $k[--$j]; //#7442
            $k[$j++] = _U * 3; //#7442
        } //#7442
        var _V = $k[--$j]; //#7442
        var _W = $k[--$j]; //#7442
        $_[$k[--$j]] = $f(_W + _V); //#7442
    } //#7442
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#7444
    if ($_.barcode.length == 22) { //#7458
        if ($get($_.barcode, 21) != ($_.checksum + 48)) { //#7448
            $k[$j++] = 'bwipp.sscc18badCheckDigit#7447'; //#7447
            $k[$j++] = "Incorrect SSCC-18 check digit provided"; //#7447
            bwipp_raiseerror(); //#7447
        } //#7447
    } else { //#7458
        var _d = $s(22); //#7450
        $puti(_d, 0, $_.barcode); //#7451
        $put(_d, 21, $_.checksum + 48); //#7452
        $_.barcode = _d; //#7453
        var _i = $_.hasspace ? 2 : 1; //#7454
        var _j = $s($_.text.length + _i); //#7454
        $puti(_j, _j.length - 2, " "); //#7455
        $put(_j, _j.length - 1, $_.checksum + 48); //#7456
        $puti(_j, 0, $_.text); //#7457
        $_.text = _j; //#7458
    } //#7458
    $_.sscc = $geti($_.barcode, 4, 18); //#7460
    $_.barcode = $s(25); //#7463
    $puti($_.barcode, 0, "^FNC100"); //#7464
    var _r = $_.sscc; //#7465
    $puti($_.barcode, 7, _r); //#7465
    $put($_.options, "dontdraw", true); //#7468
    $put($_.options, "parsefnc", true); //#7469
    $k[$j++] = 'args'; //#7470
    $k[$j++] = $_.barcode; //#7470
    $k[$j++] = $_.options; //#7470
    bwipp_code128(); //#7470
    var _w = $k[--$j]; //#7470
    $_[$k[--$j]] = _w; //#7470
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7472
    $put($_.args, "textxalign", "center"); //#7473
    $put($_.args, "opt", $_.options); //#7474
    $k[$j++] = $_.args; //#7477
    if (!$_.dontdraw) { //#7477
        bwipp_renlinear(); //#7477
    } //#7477
    $_ = Object.getPrototypeOf($_); //#7479
} //bwipp_sscc18
function bwipp_code39() {
    $_ = Object.create($_); //#7509
    $_.dontdraw = false; //#7512
    $_.includecheck = false; //#7513
    $_.validatecheck = false; //#7514
    $_.includetext = false; //#7515
    $_.includecheckintext = false; //#7516
    $_.hidestars = false; //#7517
    $_.textfont = "OCR-B"; //#7518
    $_.textsize = 10; //#7519
    $_.textyoffset = -8; //#7520
    $_.height = 1; //#7521
    $k[$j++] = $_; //#7523
    bwipp_processoptions(); //#7523
    $_.options = $k[--$j]; //#7523
    $_.barcode = $k[--$j]; //#7524
    if ($eq($_.barcode, "")) { //#7528
        $k[$j++] = 'bwipp.code39emptyData#7527'; //#7527
        $k[$j++] = "The data must not be empty"; //#7527
        bwipp_raiseerror(); //#7527
    } //#7527
    bwipp_loadctx(bwipp_code39); //#7530
    if (!bwipp_code39.__7550__) { //#7550
        $_ = Object.create($_); //#7550
        $_.encs = $a(["1113313111", "3113111131", "1133111131", "3133111111", "1113311131", "3113311111", "1133311111", "1113113131", "3113113111", "1133113111", "3111131131", "1131131131", "3131131111", "1111331131", "3111331111", "1131331111", "1111133131", "3111133111", "1131133111", "1111333111", "3111111331", "1131111331", "3131111311", "1111311331", "3111311311", "1131311311", "1111113331", "3111113311", "1131113311", "1111313311", "3311111131", "1331111131", "3331111111", "1311311131", "3311311111", "1331311111", "1311113131", "3311113111", "1331113111", "1313131111", "1313111311", "1311131311", "1113131311", "1311313111"]); //#7544
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#7547
        $_.charvals = new Map; //#7548
        for (var _4 = 0; _4 <= 42; _4 += 1) { //#7549
            $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#7549
        } //#7549
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code39.$ctx[id] = $_[id]); //#7549
        bwipp_code39.__7550__ = 1; //#7549
        $_ = Object.getPrototypeOf($_); //#7549
    } //#7549
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#7557
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#7554
        if (!_F) { //#7556
            $k[$j++] = 'bwipp.code39badCharacter#7555'; //#7555
            $k[$j++] = "Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#7555
            bwipp_raiseerror(); //#7555
        } //#7555
    } //#7555
    $k[$j++] = 'barlen'; //#7559
    $k[$j++] = $_.barcode.length; //#7559
    if ($_.validatecheck) { //#7559
        var _I = $k[--$j]; //#7559
        $k[$j++] = $f(_I - 1); //#7559
    } //#7559
    var _J = $k[--$j]; //#7559
    $_[$k[--$j]] = _J; //#7559
    $_.checksum = 0; //#7561
    for (var _N = 0, _M = $f($_.barlen - 1); _N <= _M; _N += 1) { //#7565
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _N, 1)) + $_.checksum); //#7564
    } //#7564
    $_.checksum = $_.checksum % 43; //#7566
    if ($_.validatecheck) { //#7573
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#7570
            $k[$j++] = 'bwipp.code39badCheckDigit#7569'; //#7569
            $k[$j++] = "Incorrect Code 39 check digit provided"; //#7569
            bwipp_raiseerror(); //#7569
        } //#7569
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#7571
        $_.includecheck = true; //#7572
    } //#7572
    var _g = $_.includecheck ? 3 : 2; //#7575
    $_.sbs = $s($f($_.barlen + _g) * 10); //#7575
    var _k = $_.includecheck ? 3 : 2; //#7576
    $_.txt = $a($f($_.barlen + _k)); //#7576
    $puti($_.sbs, 0, $get($_.encs, 43)); //#7579
    if (!$_.hidestars) { //#7583
        $put($_.txt, 0, $a(["*", 0, $_.textyoffset, $_.textfont, $_.textsize])); //#7581
    } else { //#7583
        $put($_.txt, 0, $a(["", 0, $_.textyoffset, $_.textfont, $_.textsize])); //#7583
    } //#7583
    for (var _12 = 0, _11 = $f($_.barlen - 1); _12 <= _11; _12 += 1) { //#7591
        $_.i = _12; //#7587
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#7588
        $puti($_.sbs, ($_.i * 10) + 10, $get($_.encs, $_.indx)); //#7589
        $put($_.txt, $_.i + 1, $a([$geti($_.barcode, $_.i, 1), ($_.i + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7590
    } //#7590
    if ($_.includecheck) { //#7612
        $puti($_.sbs, $f(($_.barlen * 10) + 10), $get($_.encs, $_.checksum)); //#7595
        if ($_.includecheckintext) { //#7599
            $put($_.txt, $f($_.barlen + 1), $a([$geti($_.barchars, $_.checksum, 1), $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7597
        } else { //#7599
            $put($_.txt, $f($_.barlen + 1), $a(["", $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7599
        } //#7599
        $puti($_.sbs, $f(($_.barlen * 10) + 20), $get($_.encs, 43)); //#7601
        if (!$_.hidestars) { //#7605
            $put($_.txt, $f($_.barlen + 2), $a(["*", $f($_.barlen + 2) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7603
        } else { //#7605
            $put($_.txt, $f($_.barlen + 2), $a(["", $f($_.barlen + 2) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7605
        } //#7605
    } else { //#7612
        $puti($_.sbs, $f(($_.barlen * 10) + 10), $get($_.encs, 43)); //#7608
        if (!$_.hidestars) { //#7612
            $put($_.txt, $f($_.barlen + 1), $a(["*", $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7610
        } else { //#7612
            $put($_.txt, $f($_.barlen + 1), $a(["", $f($_.barlen + 1) * 16, $_.textyoffset, $_.textfont, $_.textsize])); //#7612
        } //#7612
    } //#7612
    $k[$j++] = Infinity; //#7617
    $k[$j++] = Infinity; //#7619
    var _2N = $_.sbs; //#7619
    for (var _2O = 0, _2P = _2N.length; _2O < _2P; _2O++) { //#7619
        $k[$j++] = $get(_2N, _2O) - 48; //#7619
    } //#7619
    var _2R = $a(); //#7619
    $k[$j++] = Infinity; //#7620
    for (var _2T = 0, _2U = ~~(($_.sbs.length + 1) / 2); _2T < _2U; _2T++) { //#7620
        $k[$j++] = $_.height; //#7620
    } //#7620
    var _2W = $a(); //#7620
    $k[$j++] = Infinity; //#7621
    for (var _2Y = 0, _2Z = ~~(($_.sbs.length + 1) / 2); _2Y < _2Z; _2Y++) { //#7621
        $k[$j++] = 0; //#7621
    } //#7621
    var _2a = $a(); //#7621
    $k[$j++] = 'ren'; //#7624
    $k[$j++] = 'renlinear'; //#7624
    $k[$j++] = 'sbs'; //#7624
    $k[$j++] = _2R; //#7624
    $k[$j++] = 'bhs'; //#7624
    $k[$j++] = _2W; //#7624
    $k[$j++] = 'bbs'; //#7624
    $k[$j++] = _2a; //#7624
    if ($_.includetext) { //#7624
        $k[$j++] = 'txt'; //#7623
        $k[$j++] = $_.txt; //#7623
    } //#7623
    $k[$j++] = 'opt'; //#7625
    $k[$j++] = $_.options; //#7625
    var _2e = $d(); //#7625
    $k[$j++] = _2e; //#7628
    if (!$_.dontdraw) { //#7628
        bwipp_renlinear(); //#7628
    } //#7628
    $_ = Object.getPrototypeOf($_); //#7630
    $_ = Object.getPrototypeOf($_); //#7632
} //bwipp_code39
function bwipp_code39ext() {
    $_ = Object.create($_); //#7664
    $_.dontdraw = false; //#7667
    $_.includetext = false; //#7668
    $_.parse = false; //#7669
    $k[$j++] = $_; //#7671
    bwipp_processoptions(); //#7671
    $_.options = $k[--$j]; //#7671
    $_.barcode = $k[--$j]; //#7672
    bwipp_loadctx(bwipp_code39ext); //#7674
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#7680
    $_.fncvals = _3; //#7681
    $k[$j++] = 'barcode'; //#7682
    $k[$j++] = $_.barcode; //#7682
    $k[$j++] = $_.fncvals; //#7682
    bwipp_parseinput(); //#7682
    var _6 = $k[--$j]; //#7682
    $_[$k[--$j]] = _6; //#7682
    $_.barlen = $_.barcode.length; //#7683
    delete $_.options["parse"]; //#7684
    $forall($_.barcode, function() { //#7691
        if ($k[--$j] >= 128) { //#7690
            $k[$j++] = 'bwipp.code39extBadCharacter#7689'; //#7689
            $k[$j++] = "Code 39 Extended must contain only ASCII characters"; //#7689
            bwipp_raiseerror(); //#7689
        } //#7689
    }); //#7689
    if (!bwipp_code39ext.__7705__) { //#7705
        $_ = Object.create($_); //#7705
        $_.extencs = $a
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code39ext.$ctx[id] = $_[id]); //#7704
        bwipp_code39ext.__7705__ = 1; //#7704
        $_ = Object.getPrototypeOf($_); //#7704
    } //#7704
    $_.newcode = $s($_.barlen * 2); //#7707
    $_.newtext = $s($_.barlen * 2); //#7708
    $_.j = 0; //#7709
    for (var _K = 0, _J = $_.barlen - 1; _K <= _J; _K += 1) { //#7717
        $_.i = _K; //#7711
        $_.extchar = $get($_.extencs, $get($_.barcode, $_.i)); //#7712
        $puti($_.newcode, $_.j, $_.extchar); //#7713
        var _X = $get($_.barcode, $_.i); //#7714
        $k[$j++] = $_.newtext; //#7714
        $k[$j++] = $_.j; //#7714
        $k[$j++] = _X; //#7714
        if ((_X < 32) || (_X == 127)) { //#7714
            $j--; //#7714
            $k[$j++] = 32; //#7714
        } //#7714
        var _Y = $k[--$j]; //#7714
        var _Z = $k[--$j]; //#7714
        $put($k[--$j], _Z, _Y); //#7714
        if ($_.extchar.length != 1) { //#7715
            $put($_.newtext, $_.j + 1, 32); //#7715
        } //#7715
        $_.j = $_.j + $_.extchar.length; //#7716
    } //#7716
    $_.newcode = $geti($_.newcode, 0, $_.j); //#7718
    $_.newtext = $geti($_.newtext, 0, $_.j); //#7719
    $put($_.options, "dontdraw", true); //#7722
    $k[$j++] = 'args'; //#7723
    $k[$j++] = $_.newcode; //#7723
    $k[$j++] = $_.options; //#7723
    bwipp_code39(); //#7723
    var _p = $k[--$j]; //#7723
    $_[$k[--$j]] = _p; //#7723
    if ($_.includetext) { //#7735
        $_.txt = $get($_.args, "txt"); //#7727
        for (var _w = 0, _v = $_.newtext.length - 1; _w <= _v; _w += 1) { //#7733
            $_.i = _w; //#7729
            $_.txtentry = $get($_.txt, $_.i + 1); //#7730
            $put($_.txtentry, 0, $geti($_.newtext, $_.i, 1)); //#7731
            $put($_.txt, $_.i + 1, $_.txtentry); //#7732
        } //#7732
        $put($_.args, "txt", $_.txt); //#7734
    } //#7734
    $put($_.args, "opt", $_.options); //#7736
    $k[$j++] = $_.args; //#7739
    if (!$_.dontdraw) { //#7739
        bwipp_renlinear(); //#7739
    } //#7739
    $_ = Object.getPrototypeOf($_); //#7741
    $_ = Object.getPrototypeOf($_); //#7743
} //bwipp_code39ext
function bwipp_code32() {
    $_ = Object.create($_); //#7772
    $_.dontdraw = false; //#7775
    $_.includetext = false; //#7776
    $_.textfont = "OCR-B"; //#7777
    $_.textsize = 10; //#7778
    $_.textyoffset = -8; //#7779
    $_.textxoffset = 0; //#7780
    $_.height = 1; //#7781
    $k[$j++] = $_; //#7783
    bwipp_processoptions(); //#7783
    $_.options = $k[--$j]; //#7783
    $_.barcode = $k[--$j]; //#7784
    if (($_.barcode.length != 8) && ($_.barcode.length != 9)) { //#7789
        $k[$j++] = 'bwipp.code32badLength#7788'; //#7788
        $k[$j++] = "Italian Pharmacode must be 8 or 9 digits"; //#7788
        bwipp_raiseerror(); //#7788
    } //#7788
    $forall($_.barcode, function() { //#7794
        var _5 = $k[--$j]; //#7791
        if ((_5 < 48) || (_5 > 57)) { //#7793
            $k[$j++] = 'bwipp.code32badCharacter#7792'; //#7792
            $k[$j++] = "Italian Pharmacode must contain only digits"; //#7792
            bwipp_raiseerror(); //#7792
        } //#7792
    }); //#7792
    $_.checksum = 0; //#7797
    for (var _6 = 0; _6 <= 7; _6 += 1) { //#7802
        $_.i = _6; //#7799
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#7800
        if (($_.i % 2) != 0) { //#7800
            var _B = $k[--$j]; //#7800
            $k[$j++] = _B * 2; //#7800
        } //#7800
        var _C = $k[--$j]; //#7800
        $k[$j++] = _C; //#7800
        if (_C > 9) { //#7800
            var _D = $k[--$j]; //#7800
            $k[$j++] = $f(_D - 9); //#7800
        } //#7800
        $_.checksum = $f($k[--$j] + $_.checksum); //#7801
    } //#7801
    $_.checksum = $_.checksum % 10; //#7803
    if ($_.barcode.length == 9) { //#7808
        if ($get($_.barcode, 8) != $f($_.checksum + 48)) { //#7807
            $k[$j++] = 'bwipp.code32badCheckDigit#7806'; //#7806
            $k[$j++] = "Incorrect Italian Pharmacode check digit provided"; //#7806
            bwipp_raiseerror(); //#7806
        } //#7806
    } //#7806
    var _L = $s(10); //#7809
    $puti(_L, 0, $_.barcode); //#7810
    $put(_L, 8, $f($_.checksum + 48)); //#7811
    $_.text = _L; //#7812
    $_.val = $cvrs($s(6), $cvi($_.text), 32); //#7815
    $_.barcode = $s(6); //#7816
    for (var _S = 0; _S <= 5; _S += 1) { //#7817
        $put($_.barcode, _S, 48); //#7817
    } //#7817
    $puti($_.barcode, 6 - $_.val.length, $_.val); //#7818
    for (var _X = 0; _X <= 5; _X += 1) { //#7825
        var _Z = $get($_.barcode, _X); //#7822
        $k[$j++] = _X; //#7823
        $k[$j++] = _Z; //#7823
        $k[$j++] = _Z; //#7823
        for (var _a = 0, _b = "AEIO".length; _a < _b; _a++) { //#7823
            if ($k[--$j] >= $get("AEIO", _a)) { //#7823
                var _e = $k[--$j]; //#7823
                $k[$j++] = $f(_e + 1); //#7823
            } //#7823
            var _f = $k[--$j]; //#7823
            $k[$j++] = _f; //#7823
            $k[$j++] = _f; //#7823
        } //#7823
        $j--; //#7823
        $k[$j++] = $_.barcode; //#7824
        $r(3, 1); //#7824
        var _h = $k[--$j]; //#7824
        var _i = $k[--$j]; //#7824
        $put($k[--$j], _i, _h); //#7824
    } //#7824
    $puti($_.text, 1, $geti($_.text, 0, 9)); //#7828
    $put($_.text, 0, 65); //#7829
    $put($_.options, "dontdraw", true); //#7832
    $k[$j++] = 'args'; //#7833
    $k[$j++] = $_.barcode; //#7833
    $k[$j++] = $_.options; //#7833
    bwipp_code39(); //#7833
    var _r = $k[--$j]; //#7833
    $_[$k[--$j]] = _r; //#7833
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#7835
    $put($_.args, "textxalign", "center"); //#7836
    $put($_.args, "opt", $_.options); //#7837
    $k[$j++] = $_.args; //#7840
    if (!$_.dontdraw) { //#7840
        bwipp_renlinear(); //#7840
    } //#7840
    $_ = Object.getPrototypeOf($_); //#7842
} //bwipp_code32
function bwipp_pzn() {
    $_ = Object.create($_); //#7871
    $_.dontdraw = false; //#7874
    $_.includetext = false; //#7875
    $_.textfont = "OCR-B"; //#7876
    $_.textsize = 10; //#7877
    $_.textyoffset = -8; //#7878
    $_.textxoffset = 0; //#7879
    $_.height = 1; //#7880
    $_.pzn8 = false; //#7881
    $k[$j++] = $_; //#7883
    bwipp_processoptions(); //#7883
    $_.options = $k[--$j]; //#7883
    $_.barcode = $k[--$j]; //#7884
    if ($_.pzn8) { //#7893
        if (($_.barcode.length != 7) && ($_.barcode.length != 8)) { //#7890
            $k[$j++] = 'bwipp.pzn8badLength#7889'; //#7889
            $k[$j++] = "PZN8 must be 7 or 8 digits"; //#7889
            bwipp_raiseerror(); //#7889
        } //#7889
    } else { //#7893
        if (($_.barcode.length != 6) && ($_.barcode.length != 7)) { //#7894
            $k[$j++] = 'bwipp.pzn7badLength#7893'; //#7893
            $k[$j++] = "PZN7 must be 6 or 7 digits"; //#7893
            bwipp_raiseerror(); //#7893
        } //#7893
    } //#7893
    $forall($_.barcode, function() { //#7900
        var _8 = $k[--$j]; //#7897
        if ((_8 < 48) || (_8 > 57)) { //#7899
            $k[$j++] = 'bwipp.pznBadCharacter#7898'; //#7898
            $k[$j++] = "PZN must contain only digits"; //#7898
            bwipp_raiseerror(); //#7898
        } //#7898
    }); //#7898
    var _A = $_.pzn8 ? 9 : 8; //#7903
    $_.msglen = _A; //#7903
    $_.checksum = 0; //#7904
    for (var _D = 0, _C = $_.msglen - 3; _D <= _C; _D += 1) { //#7909
        $_.i = _D; //#7906
        var _J = $_.pzn8 ? 1 : 2; //#7907
        $_.checksum = $f(($f($get($_.barcode, $_.i) - 48) * ($_.i + _J)) + $_.checksum); //#7908
    } //#7908
    $_.checksum = $_.checksum % 11; //#7910
    if ($_.checksum == 10) { //#7913
        $k[$j++] = 'bwipp.pznBadInputSequence#7912'; //#7912
        $k[$j++] = "Incorrect PZN input sequence provided"; //#7912
        bwipp_raiseerror(); //#7912
    } //#7912
    if ($_.barcode.length == ($_.msglen - 1)) { //#7918
        if ($get($_.barcode, $_.msglen - 2) != $f($_.checksum + 48)) { //#7917
            $k[$j++] = 'bwipp.pznBadCheckDigit#7916'; //#7916
            $k[$j++] = "Incorrect PZN check digit provided"; //#7916
            bwipp_raiseerror(); //#7916
        } //#7916
    } //#7916
    var _U = $s($_.msglen); //#7919
    $put(_U, 0, 45); //#7920
    $puti(_U, 1, $_.barcode); //#7921
    $put(_U, $_.msglen - 1, $f($_.checksum + 48)); //#7922
    $_.msg = _U; //#7923
    $put($_.options, "dontdraw", true); //#7926
    $k[$j++] = 'args'; //#7927
    $k[$j++] = $_.msg; //#7927
    $k[$j++] = $_.options; //#7927
    bwipp_code39(); //#7927
    var _b = $k[--$j]; //#7927
    $_[$k[--$j]] = _b; //#7927
    $_.text = $s($_.msglen + 5); //#7930
    $puti($_.text, 0, "PZN - "); //#7931
    $puti($_.text, 6, $geti($_.msg, 1, $_.msglen - 1)); //#7932
    var _r = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#7934
    $put($_.args, "txt", _r); //#7934
    $put($_.args, "textxalign", "center"); //#7935
    $put($_.args, "opt", $_.options); //#7936
    $k[$j++] = $_.args; //#7939
    if (!$_.dontdraw) { //#7939
        bwipp_renlinear(); //#7939
    } //#7939
    $_ = Object.getPrototypeOf($_); //#7941
} //bwipp_pzn
function bwipp_code93() {
    $_ = Object.create($_); //#7972
    $_.dontdraw = false; //#7975
    $_.includecheck = false; //#7976
    $_.includetext = false; //#7977
    $_.textfont = "OCR-B"; //#7978
    $_.textsize = 10; //#7979
    $_.textyoffset = -8; //#7980
    $_.height = 1; //#7981
    $_.parse = false; //#7982
    $_.parsefnc = false; //#7983
    $k[$j++] = $_; //#7985
    bwipp_processoptions(); //#7985
    $_.options = $k[--$j]; //#7985
    $_.barcode = $k[--$j]; //#7986
    bwipp_loadctx(bwipp_code93); //#7988
    if (!bwipp_code93.__8016__) { //#8016
        $_ = Object.create($_); //#8016
        $_.encs = $a(["131112", "111213", "111312", "111411", "121113", "121212", "121311", "111114", "131211", "141111", "211113", "211212", "211311", "221112", "221211", "231111", "112113", "112212", "112311", "122112", "132111", "111123", "111222", "111321", "121122", "131121", "212112", "212211", "211122", "211221", "221121", "222111", "112122", "112221", "122121", "123111", "121131", "311112", "311211", "321111", "112131", "113121", "211131", "121221", "312111", "311121", "122211", "111141", "1111411"]); //#8002
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#8005
        $_.charvals = new Map; //#8006
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#8007
            $put($_.charvals, $get($_.barchars, _3), _3); //#8007
        } //#8007
        $_.sft1 = -1; //#8009
        $_.sft2 = -2; //#8009
        $_.sft3 = -3; //#8009
        $_.sft4 = -4; //#8009
        var _8 = $_.sft1; //#8011
        $put($_.charvals, _8, 43); //#8011
        $put($_.charvals, $_.sft2, 44); //#8012
        $put($_.charvals, $_.sft3, 45); //#8013
        $put($_.charvals, $_.sft4, 46); //#8014
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code93.$ctx[id] = $_[id]); //#8014
        bwipp_code93.__8016__ = 1; //#8014
        $_ = Object.getPrototypeOf($_); //#8014
    } //#8014
    var _M = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["SFT$", $_.sft1],
        ["SFT%", $_.sft2],
        ["SFT/", $_.sft3],
        ["SFT+", $_.sft4]
    ]); //#8025
    $_.fncvals = _M; //#8026
    $k[$j++] = 'msg'; //#8027
    $k[$j++] = $_.barcode; //#8027
    $k[$j++] = $_.fncvals; //#8027
    bwipp_parseinput(); //#8027
    var _P = $k[--$j]; //#8027
    $_[$k[--$j]] = _P; //#8027
    $_.msglen = $_.msg.length; //#8028
    $forall($_.msg, function() { //#8035
        var _V = $get($_.charvals, $k[--$j]) !== undefined; //#8032
        if (!_V) { //#8034
            $k[$j++] = 'bwipp.code93BadCharacter#8033'; //#8033
            $k[$j++] = "Code 93 must only contain digits, capital letters, spaces, the symbols -.$/+ and shift non-data characters"; //#8033
            bwipp_raiseerror(); //#8033
        } //#8033
    }); //#8033
    if ($_.includecheck) { //#8040
        $_.sbs = $s(($_.msglen * 6) + 25); //#8038
    } else { //#8040
        $_.sbs = $s(($_.msglen * 6) + 13); //#8040
    } //#8040
    $_.txt = $a($_.msglen); //#8042
    $puti($_.sbs, 0, $get($_.encs, 47)); //#8045
    $_.checksum1 = 0; //#8047
    $_.checksum2 = 0; //#8047
    for (var _i = 0, _h = $_.msglen - 1; _i <= _h; _i += 1) { //#8056
        $_.i = _i; //#8049
        $_.indx = $get($_.charvals, $get($_.msg, $_.i)); //#8050
        $puti($_.sbs, ($_.i * 6) + 6, $get($_.encs, $_.indx)); //#8051
        var _v = $get($_.msg, $_.i); //#8052
        $k[$j++] = 'char'; //#8052
        $k[$j++] = _v; //#8052
        if (_v < 0) { //#8052
            $j--; //#8052
            $k[$j++] = " "; //#8052
        } else { //#8052
            var _w = $s(1); //#8052
            $k[$j++] = _w; //#8052
            $k[$j++] = _w; //#8052
            $k[$j++] = 0; //#8052
            $r(4, -1); //#8052
            var _x = $k[--$j]; //#8052
            var _y = $k[--$j]; //#8052
            $put($k[--$j], _y, _x); //#8052
        } //#8052
        var _10 = $k[--$j]; //#8052
        $_[$k[--$j]] = _10; //#8052
        $put($_.txt, $_.i, $a([$_.char, ($_.i * 9) + 9, $_.textyoffset, $_.textfont, $_.textsize])); //#8053
        $_.checksum1 = $f($_.checksum1 + ((((($_.msglen - $_.i) - 1) % 20) + 1) * $_.indx)); //#8054
        $_.checksum2 = $f($_.checksum2 + (((($_.msglen - $_.i) % 15) + 1) * $_.indx)); //#8055
    } //#8055
    if ($_.includecheck) { //#8068
        $_.checksum1 = $_.checksum1 % 47; //#8060
        $_.checksum2 = $f($_.checksum2 + $_.checksum1) % 47; //#8061
        $puti($_.sbs, ($_.msglen * 6) + 6, $get($_.encs, $_.checksum1)); //#8062
        $puti($_.sbs, ($_.msglen * 6) + 12, $get($_.encs, $_.checksum2)); //#8063
        $puti($_.sbs, ($_.msglen * 6) + 18, $get($_.encs, 48)); //#8065
    } else { //#8068
        $puti($_.sbs, ($_.msglen * 6) + 6, $get($_.encs, 48)); //#8068
    } //#8068
    $k[$j++] = Infinity; //#8072
    $k[$j++] = Infinity; //#8074
    var _1e = $_.sbs; //#8074
    for (var _1f = 0, _1g = _1e.length; _1f < _1g; _1f++) { //#8074
        $k[$j++] = $get(_1e, _1f) - 48; //#8074
    } //#8074
    var _1i = $a(); //#8074
    $k[$j++] = Infinity; //#8075
    for (var _1k = 0, _1l = ~~(($_.sbs.length + 1) / 2); _1k < _1l; _1k++) { //#8075
        $k[$j++] = $_.height; //#8075
    } //#8075
    var _1n = $a(); //#8075
    $k[$j++] = Infinity; //#8076
    for (var _1p = 0, _1q = ~~(($_.sbs.length + 1) / 2); _1p < _1q; _1p++) { //#8076
        $k[$j++] = 0; //#8076
    } //#8076
    var _1r = $a(); //#8076
    $k[$j++] = 'ren'; //#8079
    $k[$j++] = 'renlinear'; //#8079
    $k[$j++] = 'sbs'; //#8079
    $k[$j++] = _1i; //#8079
    $k[$j++] = 'bhs'; //#8079
    $k[$j++] = _1n; //#8079
    $k[$j++] = 'bbs'; //#8079
    $k[$j++] = _1r; //#8079
    if ($_.includetext) { //#8079
        $k[$j++] = 'txt'; //#8078
        $k[$j++] = $_.txt; //#8078
    } //#8078
    $k[$j++] = 'opt'; //#8080
    $k[$j++] = $_.options; //#8080
    var _1v = $d(); //#8080
    $k[$j++] = _1v; //#8083
    if (!$_.dontdraw) { //#8083
        bwipp_renlinear(); //#8083
    } //#8083
    $_ = Object.getPrototypeOf($_); //#8085
    $_ = Object.getPrototypeOf($_); //#8087
} //bwipp_code93
function bwipp_code93ext() {
    $_ = Object.create($_); //#8119
    $_.dontdraw = false; //#8122
    $_.includetext = false; //#8123
    $_.parse = false; //#8124
    $k[$j++] = $_; //#8126
    bwipp_processoptions(); //#8126
    $_.options = $k[--$j]; //#8126
    $_.barcode = $k[--$j]; //#8127
    bwipp_loadctx(bwipp_code93ext); //#8129
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#8135
    $_.fncvals = _3; //#8136
    $k[$j++] = 'barcode'; //#8137
    $k[$j++] = $_.barcode; //#8137
    $k[$j++] = $_.fncvals; //#8137
    bwipp_parseinput(); //#8137
    var _6 = $k[--$j]; //#8137
    $_[$k[--$j]] = _6; //#8137
    var _8 = $_.barcode; //#8138
    $_.barlen = _8.length; //#8138
    delete $_.options["parse"]; //#8139
    if (!bwipp_code93ext.__8161__) { //#8161
        $_ = Object.create($_); //#8161
        $_.extencs = $a
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code93ext.$ctx[id] = $_[id]); //#8160
        bwipp_code93ext.__8161__ = 1; //#8160
        $_ = Object.getPrototypeOf($_); //#8160
    } //#8160
    $_.newcode = $s($_.barlen * 6); //#8163
    $_.newtext = $s($_.barlen * 6); //#8164
    $_.j = 0; //#8165
    $_.k = 0; //#8165
    for (var _I = 0, _H = $_.barlen - 1; _I <= _H; _I += 1) { //#8179
        $_.i = _I; //#8167
        var _L = $get($_.barcode, $_.i); //#8168
        $k[$j++] = _L; //#8171
        if (_L > 127) { //#8171
            $j--; //#8170
            $k[$j++] = 'bwipp.code93extbadCharacter#8170'; //#8170
            $k[$j++] = "Code 93 Extended only support ASCII characters with values 0 to 127"; //#8170
            bwipp_raiseerror(); //#8170
        } //#8170
        $_.extchar = $get($_.extencs, $k[--$j]); //#8172
        $_.extlen = $_.extchar.length; //#8173
        $puti($_.newcode, $_.j, $_.extchar); //#8174
        var _X = $get($_.barcode, $_.i); //#8175
        $k[$j++] = $_.newtext; //#8175
        $k[$j++] = $_.k; //#8175
        $k[$j++] = _X; //#8175
        if ((_X < 32) || (_X == 127)) { //#8175
            $j--; //#8175
            $k[$j++] = 32; //#8175
        } //#8175
        var _Y = $k[--$j]; //#8175
        var _Z = $k[--$j]; //#8175
        $put($k[--$j], _Z, _Y); //#8175
        if ($_.extlen != 1) { //#8176
            $put($_.newtext, $_.k + 1, 32); //#8176
        } //#8176
        $_.j = $_.j + $_.extlen; //#8177
        var _i = ($_.extlen == 1) ? 1 : 2; //#8178
        $_.k = $_.k + _i; //#8178
    } //#8178
    $_.newcode = $geti($_.newcode, 0, $_.j); //#8180
    $_.newtext = $geti($_.newtext, 0, $_.k); //#8181
    $put($_.options, "dontdraw", true); //#8184
    $put($_.options, "parsefnc", true); //#8185
    $k[$j++] = 'args'; //#8186
    $k[$j++] = $_.newcode; //#8186
    $k[$j++] = $_.options; //#8186
    bwipp_code93(); //#8186
    var _t = $k[--$j]; //#8186
    $_[$k[--$j]] = _t; //#8186
    if ($_.includetext) { //#8198
        $_.txt = $get($_.args, "txt"); //#8190
        for (var _10 = 0, _z = $_.newtext.length - 1; _10 <= _z; _10 += 1) { //#8196
            $_.i = _10; //#8192
            $_.txtentry = $get($_.txt, $_.i); //#8193
            $put($_.txtentry, 0, $geti($_.newtext, $_.i, 1)); //#8194
            $put($_.txt, $_.i, $_.txtentry); //#8195
        } //#8195
        $put($_.args, "txt", $_.txt); //#8197
    } //#8197
    $put($_.args, "opt", $_.options); //#8199
    $k[$j++] = $_.args; //#8202
    if (!$_.dontdraw) { //#8202
        bwipp_renlinear(); //#8202
    } //#8202
    $_ = Object.getPrototypeOf($_); //#8204
    $_ = Object.getPrototypeOf($_); //#8206
} //bwipp_code93ext
function bwipp_interleaved2of5() {
    $_ = Object.create($_); //#8236
    $_.dontdraw = false; //#8239
    $_.includecheck = false; //#8240
    $_.includetext = false; //#8241
    $_.includecheckintext = false; //#8242
    $_.textfont = "OCR-B"; //#8243
    $_.textsize = 10; //#8244
    $_.textyoffset = -8; //#8245
    $_.height = 1; //#8246
    $k[$j++] = $_; //#8248
    bwipp_processoptions(); //#8248
    $_.options = $k[--$j]; //#8248
    $_.barcode = $k[--$j]; //#8249
    bwipp_loadctx(bwipp_interleaved2of5); //#8251
    $forall($_.barcode, function() { //#8258
        var _3 = $k[--$j]; //#8255
        if ((_3 < 48) || (_3 > 57)) { //#8257
            $k[$j++] = 'bwipp.interleaved2of5badCharacter#8256'; //#8256
            $k[$j++] = "Interleaved 2 of 5 must contain only digits"; //#8256
            bwipp_raiseerror(); //#8256
        } //#8256
    }); //#8256
    $_.barlen = $_.barcode.length; //#8260
    if (((($_.barlen % 2) == 0) && $_.includecheck) || ((($_.barlen % 2) != 0) && (!$_.includecheck))) { //#8271
        $_.pad = $s($_.barlen + 1); //#8266
        $put($_.pad, 0, 48); //#8267
        $puti($_.pad, 1, $_.barcode); //#8268
        $_.barcode = $_.pad; //#8269
        $_.barlen = $_.barlen + 1; //#8270
    } //#8270
    if ($_.includecheck) { //#8290
        $_.checksum = 0; //#8275
        for (var _J = 0, _I = $_.barlen - 1; _J <= _I; _J += 1) { //#8283
            $_.i = _J; //#8277
            if (($_.i % 2) == 0) { //#8281
                $_.checksum = $_.checksum + (($get($_.barcode, $_.i) - 48) * 3); //#8279
            } else { //#8281
                $_.checksum = $_.checksum + ($get($_.barcode, $_.i) - 48); //#8281
            } //#8281
        } //#8281
        $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8284
        $_.pad = $s($_.barlen + 1); //#8285
        $puti($_.pad, 0, $_.barcode); //#8286
        $put($_.pad, $_.barlen, $_.checksum + 48); //#8287
        $_.barcode = $_.pad; //#8288
        $_.barlen = $_.barlen + 1; //#8289
    } //#8289
    if (!bwipp_interleaved2of5.__8302__) { //#8302
        $_ = Object.create($_); //#8302
        $_.encs = $a(["11221", "21112", "12112", "22111", "11212", "21211", "12211", "11122", "21121", "12121", "1111", "2111"]); //#8298
        $_.barchars = "0123456789"; //#8301
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_interleaved2of5.$ctx[id] = $_[id]); //#8301
        bwipp_interleaved2of5.__8302__ = 1; //#8301
        $_ = Object.getPrototypeOf($_); //#8301
    } //#8301
    $_.sbs = $s(($_.barlen * 5) + 8); //#8304
    $_.txt = $a($_.barlen); //#8305
    $puti($_.sbs, 0, $get($_.encs, 10)); //#8308
    for (var _o = 0, _n = $_.barlen - 1; _o <= _n; _o += 2) { //#8342
        $_.i = _o; //#8311
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#8313
        $j--; //#8314
        $_.indx = $k[--$j].length; //#8315
        $j -= 2; //#8316
        $_.enca = $get($_.encs, $_.indx); //#8317
        $search($_.barchars, $geti($_.barcode, $_.i + 1, 1)); //#8319
        $j--; //#8320
        $_.indx = $k[--$j].length; //#8321
        $j -= 2; //#8322
        $_.encb = $get($_.encs, $_.indx); //#8323
        $_.intl = $s($_.enca.length * 2); //#8326
        for (var _19 = 0, _18 = $_.enca.length - 1; _19 <= _18; _19 += 1) { //#8333
            $_.j = _19; //#8328
            $_.achar = $get($_.enca, $_.j); //#8329
            $_.bchar = $get($_.encb, $_.j); //#8330
            $put($_.intl, $_.j * 2, $_.achar); //#8331
            $put($_.intl, ($_.j * 2) + 1, $_.bchar); //#8332
        } //#8332
        $puti($_.sbs, ($_.i * 5) + 4, $_.intl); //#8335
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#8336
        if (($_.includecheck && (!$_.includecheckintext)) && (($_.barlen - 2) == $_.i)) { //#8340
            $put($_.txt, $_.i + 1, $a([" ", (($_.i + 1) * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#8338
        } else { //#8340
            $put($_.txt, $_.i + 1, $a([$geti($_.barcode, $_.i + 1, 1), (($_.i + 1) * 9) + 4, $_.textyoffset, $_.textfont, $_.textsize])); //#8340
        } //#8340
    } //#8340
    $puti($_.sbs, ($_.barlen * 5) + 4, $get($_.encs, 11)); //#8345
    $k[$j++] = Infinity; //#8348
    $k[$j++] = Infinity; //#8350
    var _1y = $_.sbs; //#8350
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#8350
        $k[$j++] = $get(_1y, _1z) - 48; //#8350
    } //#8350
    var _22 = $a(); //#8350
    $k[$j++] = Infinity; //#8351
    for (var _24 = 0, _25 = ~~(($_.sbs.length + 1) / 2); _24 < _25; _24++) { //#8351
        $k[$j++] = $_.height; //#8351
    } //#8351
    var _27 = $a(); //#8351
    $k[$j++] = Infinity; //#8352
    for (var _29 = 0, _2A = ~~(($_.sbs.length + 1) / 2); _29 < _2A; _29++) { //#8352
        $k[$j++] = 0; //#8352
    } //#8352
    var _2B = $a(); //#8352
    $k[$j++] = 'ren'; //#8355
    $k[$j++] = 'renlinear'; //#8355
    $k[$j++] = 'sbs'; //#8355
    $k[$j++] = _22; //#8355
    $k[$j++] = 'bhs'; //#8355
    $k[$j++] = _27; //#8355
    $k[$j++] = 'bbs'; //#8355
    $k[$j++] = _2B; //#8355
    if ($_.includetext) { //#8355
        $k[$j++] = 'txt'; //#8354
        $k[$j++] = $_.txt; //#8354
    } //#8354
    $k[$j++] = 'barratio'; //#8358
    $k[$j++] = 2; //#8358
    $k[$j++] = 'spaceratio'; //#8358
    $k[$j++] = 2; //#8358
    $k[$j++] = 'opt'; //#8358
    $k[$j++] = $_.options; //#8358
    var _2F = $d(); //#8358
    $k[$j++] = _2F; //#8361
    if (!$_.dontdraw) { //#8361
        bwipp_renlinear(); //#8361
    } //#8361
    $_ = Object.getPrototypeOf($_); //#8363
    $_ = Object.getPrototypeOf($_); //#8365
} //bwipp_interleaved2of5
function bwipp_itf14() {
    $_ = Object.create($_); //#8394
    $_.dontdraw = false; //#8397
    $_.includetext = false; //#8398
    $_.includecheckintext = true; //#8399
    $_.textfont = "OCR-B"; //#8400
    $_.textsize = 10; //#8401
    $_.textxoffset = 0; //#8402
    $_.textyoffset = 3.5; //#8403
    $_.height = 0.5; //#8404
    $_.showborder = true; //#8405
    $_.borderwidth = 4; //#8406
    $_.borderleft = 10; //#8407
    $_.borderright = 10; //#8408
    $_.bordertop = -0.55; //#8409
    $_.borderbottom = -0.55; //#8410
    $k[$j++] = $_; //#8412
    bwipp_processoptions(); //#8412
    $_.options = $k[--$j]; //#8412
    $_.barcode = $k[--$j]; //#8413
    $_.text = $_.barcode; //#8416
    var _3 = $_.barcode; //#8417
    $k[$j++] = $s(_3.length); //#8418
    $k[$j++] = 0; //#8418
    $forall(_3, function() { //#8418
        var _5 = $k[--$j]; //#8418
        $k[$j++] = _5; //#8418
        if (_5 != 32) { //#8418
            var _6 = $k[--$j]; //#8418
            var _7 = $k[--$j]; //#8418
            var _8 = $k[--$j]; //#8418
            $put(_8, _7, _6); //#8418
            $k[$j++] = _8; //#8418
            $k[$j++] = $f(_7 + 1); //#8418
        } else { //#8418
            $j--; //#8418
        } //#8418
    }); //#8418
    var _9 = $k[--$j]; //#8419
    $_.barcode = $geti($k[--$j], 0, _9); //#8419
    $_.hasspace = $_.text.length != $_.barcode.length; //#8420
    if (($_.barcode.length != 13) && ($_.barcode.length != 14)) { //#8425
        $k[$j++] = 'bwipp.itf14badLength#8424'; //#8424
        $k[$j++] = "ITF-14 must be 13 or 14 digits"; //#8424
        bwipp_raiseerror(); //#8424
    } //#8424
    var _G = $_.barcode; //#8426
    for (var _H = 0, _I = _G.length; _H < _I; _H++) { //#8430
        var _J = $get(_G, _H); //#8430
        if ((_J < 48) || (_J > 57)) { //#8429
            $k[$j++] = 'bwipp.itf14badCharacter#8428'; //#8428
            $k[$j++] = "ITF-14 must contain only digits"; //#8428
            bwipp_raiseerror(); //#8428
        } //#8428
    } //#8428
    $_.checksum = 0; //#8433
    for (var _K = 0; _K <= 12; _K += 1) { //#8437
        $_.i = _K; //#8435
        $k[$j++] = 'checksum'; //#8436
        $k[$j++] = $_.checksum; //#8436
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#8436
        if (($_.i % 2) == 0) { //#8436
            var _Q = $k[--$j]; //#8436
            $k[$j++] = _Q * 3; //#8436
        } //#8436
        var _R = $k[--$j]; //#8436
        var _S = $k[--$j]; //#8436
        $_[$k[--$j]] = $f(_S + _R); //#8436
    } //#8436
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8438
    if ($_.barcode.length == 14) { //#8452
        if ($get($_.barcode, 13) != ($_.checksum + 48)) { //#8442
            $k[$j++] = 'bwipp.itf14badCheckDigit#8441'; //#8441
            $k[$j++] = "Incorrect ITF-14 check digit provided"; //#8441
            bwipp_raiseerror(); //#8441
        } //#8441
    } else { //#8452
        var _Z = $s(14); //#8444
        $puti(_Z, 0, $_.barcode); //#8445
        $put(_Z, 13, $_.checksum + 48); //#8446
        $_.barcode = _Z; //#8447
        var _e = $_.hasspace ? 2 : 1; //#8448
        var _f = $s($_.text.length + _e); //#8448
        $puti(_f, _f.length - 2, " "); //#8449
        $put(_f, _f.length - 1, $_.checksum + 48); //#8450
        $puti(_f, 0, $_.text); //#8451
        $_.text = _f; //#8452
    } //#8452
    var _i = $_.options; //#8456
    $put(_i, "dontdraw", true); //#8456
    $put($_.options, "showborder", $_.showborder); //#8457
    $put($_.options, "borderwidth", $_.borderwidth); //#8458
    $put($_.options, "borderleft", $_.borderleft); //#8459
    $put($_.options, "borderright", $_.borderright); //#8460
    var _r = $_.options; //#8461
    $put(_r, "bordertop", $_.bordertop); //#8461
    $put($_.options, "borderbottom", $_.borderbottom); //#8462
    $put($_.options, "height", $_.height); //#8463
    $put($_.options, "textyoffset", $_.textyoffset); //#8464
    $k[$j++] = 'args'; //#8465
    $k[$j++] = $_.barcode; //#8465
    $k[$j++] = $_.options; //#8465
    bwipp_interleaved2of5(); //#8465
    var _11 = $k[--$j]; //#8465
    $_[$k[--$j]] = _11; //#8465
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#8467
    $put($_.args, "textxalign", "center"); //#8468
    $put($_.args, "opt", $_.options); //#8469
    $k[$j++] = $_.args; //#8472
    if (!$_.dontdraw) { //#8472
        bwipp_renlinear(); //#8472
    } //#8472
    $_ = Object.getPrototypeOf($_); //#8474
} //bwipp_itf14
function bwipp_identcode() {
    $_ = Object.create($_); //#8503
    $_.dontdraw = false; //#8506
    $_.includetext = false; //#8507
    $_.textfont = "OCR-B"; //#8508
    $_.textsize = 10; //#8509
    $_.textxoffset = 0; //#8510
    $_.textyoffset = -8; //#8511
    $_.height = 1; //#8512
    $k[$j++] = $_; //#8514
    bwipp_processoptions(); //#8514
    $_.options = $k[--$j]; //#8514
    $_.barcode = $k[--$j]; //#8515
    if (($_.barcode.length != 11) && ($_.barcode.length != 12)) { //#8520
        $k[$j++] = 'bwipp.identcodeBadLength#8519'; //#8519
        $k[$j++] = "Deutsche Post Identcode must be 11 or 12 digits"; //#8519
        bwipp_raiseerror(); //#8519
    } //#8519
    $forall($_.barcode, function() { //#8525
        var _5 = $k[--$j]; //#8522
        if ((_5 < 48) || (_5 > 57)) { //#8524
            $k[$j++] = 'bwipp.identcodeBadCharacter#8523'; //#8523
            $k[$j++] = "Deutsche Post Identcode must contain only digits"; //#8523
            bwipp_raiseerror(); //#8523
        } //#8523
    }); //#8523
    $_.checksum = 0; //#8528
    for (var _6 = 0; _6 <= 10; _6 += 1) { //#8532
        $_.i = _6; //#8530
        $k[$j++] = 'checksum'; //#8531
        $k[$j++] = $_.checksum; //#8531
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#8531
        if (($_.i % 2) == 0) { //#8531
            var _C = $k[--$j]; //#8531
            $k[$j++] = _C * 4; //#8531
        } else { //#8531
            var _D = $k[--$j]; //#8531
            $k[$j++] = _D * 9; //#8531
        } //#8531
        var _E = $k[--$j]; //#8531
        var _F = $k[--$j]; //#8531
        $_[$k[--$j]] = $f(_F + _E); //#8531
    } //#8531
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8533
    if ($_.barcode.length == 12) { //#8538
        if ($get($_.barcode, 11) != ($_.checksum + 48)) { //#8537
            $k[$j++] = 'bwipp.identcodeBadCheckDigit#8536'; //#8536
            $k[$j++] = "Incorrect Deutsche Post Identcode check digit provided"; //#8536
            bwipp_raiseerror(); //#8536
        } //#8536
    } //#8536
    var _M = $s(12); //#8539
    $puti(_M, 0, $_.barcode); //#8540
    $put(_M, 11, $_.checksum + 48); //#8541
    $_.barcode = _M; //#8542
    $_.text = $strcpy($s(16), "  .       .     "); //#8545
    $puti($_.text, 0, $geti($_.barcode, 0, 2)); //#8546
    $puti($_.text, 3, $geti($_.barcode, 2, 3)); //#8547
    $puti($_.text, 7, $geti($_.barcode, 5, 3)); //#8548
    $puti($_.text, 11, $geti($_.barcode, 8, 3)); //#8549
    $puti($_.text, 15, $geti($_.barcode, 11, 1)); //#8550
    $put($_.options, "dontdraw", true); //#8553
    $put($_.options, "includecheck", false); //#8554
    var _i = $_.barcode; //#8555
    $k[$j++] = 'args'; //#8555
    $k[$j++] = _i; //#8555
    $k[$j++] = $_.options; //#8555
    bwipp_interleaved2of5(); //#8555
    var _k = $k[--$j]; //#8555
    $_[$k[--$j]] = _k; //#8555
    var _r = $_.textsize; //#8557
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, _r])])); //#8557
    $put($_.args, "textxalign", "center"); //#8558
    $put($_.args, "opt", $_.options); //#8559
    $k[$j++] = $_.args; //#8562
    if (!$_.dontdraw) { //#8562
        bwipp_renlinear(); //#8562
    } //#8562
    $_ = Object.getPrototypeOf($_); //#8564
} //bwipp_identcode
function bwipp_leitcode() {
    $_ = Object.create($_); //#8593
    $_.dontdraw = false; //#8596
    $_.includetext = false; //#8597
    $_.textfont = "OCR-B"; //#8598
    $_.textsize = 10; //#8599
    $_.textxoffset = 0; //#8600
    $_.textyoffset = -8; //#8601
    $_.height = 1; //#8602
    $k[$j++] = $_; //#8604
    bwipp_processoptions(); //#8604
    $_.options = $k[--$j]; //#8604
    $_.barcode = $k[--$j]; //#8605
    if (($_.barcode.length != 13) && ($_.barcode.length != 14)) { //#8610
        $k[$j++] = 'bwipp.leitcodeBadLength#8609'; //#8609
        $k[$j++] = "Deutsche Post Leitcode must be 13 or 14 digits"; //#8609
        bwipp_raiseerror(); //#8609
    } //#8609
    $forall($_.barcode, function() { //#8615
        var _5 = $k[--$j]; //#8612
        if ((_5 < 48) || (_5 > 57)) { //#8614
            $k[$j++] = 'bwipp.leitcodeBadCharacter#8613'; //#8613
            $k[$j++] = "Deutsche Post Leitcode must contain only digits"; //#8613
            bwipp_raiseerror(); //#8613
        } //#8613
    }); //#8613
    $_.checksum = 0; //#8618
    for (var _6 = 0; _6 <= 12; _6 += 1) { //#8622
        $_.i = _6; //#8620
        $k[$j++] = 'checksum'; //#8621
        $k[$j++] = $_.checksum; //#8621
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#8621
        if (($_.i % 2) == 0) { //#8621
            var _C = $k[--$j]; //#8621
            $k[$j++] = _C * 4; //#8621
        } else { //#8621
            var _D = $k[--$j]; //#8621
            $k[$j++] = _D * 9; //#8621
        } //#8621
        var _E = $k[--$j]; //#8621
        var _F = $k[--$j]; //#8621
        $_[$k[--$j]] = $f(_F + _E); //#8621
    } //#8621
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8623
    if ($_.barcode.length == 14) { //#8628
        if ($get($_.barcode, 13) != ($_.checksum + 48)) { //#8627
            $k[$j++] = 'bwipp.leitcodeBadCheckDigit#8626'; //#8626
            $k[$j++] = "Incorrect Deutsche Post Leitcode check digit provided"; //#8626
            bwipp_raiseerror(); //#8626
        } //#8626
    } //#8626
    var _M = $s(14); //#8629
    $puti(_M, 0, $_.barcode); //#8630
    $put(_M, 13, $_.checksum + 48); //#8631
    $_.barcode = _M; //#8632
    $_.text = $strcpy($s(18), "     .   .   .    "); //#8635
    $puti($_.text, 0, $geti($_.barcode, 0, 5)); //#8636
    $puti($_.text, 6, $geti($_.barcode, 5, 3)); //#8637
    $puti($_.text, 10, $geti($_.barcode, 8, 3)); //#8638
    $puti($_.text, 14, $geti($_.barcode, 11, 2)); //#8639
    $puti($_.text, 17, $geti($_.barcode, 13, 1)); //#8640
    $put($_.options, "dontdraw", true); //#8643
    $put($_.options, "includecheck", false); //#8644
    var _i = $_.barcode; //#8645
    $k[$j++] = 'args'; //#8645
    $k[$j++] = _i; //#8645
    $k[$j++] = $_.options; //#8645
    bwipp_interleaved2of5(); //#8645
    var _k = $k[--$j]; //#8645
    $_[$k[--$j]] = _k; //#8645
    var _r = $_.textsize; //#8647
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, _r])])); //#8647
    $put($_.args, "textxalign", "center"); //#8648
    $put($_.args, "opt", $_.options); //#8649
    $k[$j++] = $_.args; //#8652
    if (!$_.dontdraw) { //#8652
        bwipp_renlinear(); //#8652
    } //#8652
    $_ = Object.getPrototypeOf($_); //#8654
} //bwipp_leitcode
function bwipp_databaromni() {
    $_ = Object.create($_); //#8685
    $_.dontdraw = false; //#8688
    $_.height = 33 / 72; //#8689
    $_.linkage = false; //#8690
    $_.format = "omni"; //#8691
    $_.barxmult = 33; //#8692
    $k[$j++] = $_; //#8694
    bwipp_processoptions(); //#8694
    $_.options = $k[--$j]; //#8694
    $_.barcode = $k[--$j]; //#8695
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#8699
        $k[$j++] = 'bwipp.databaromniBadLength#8698'; //#8698
        $k[$j++] = "GS1 DataBar Omnidirectional must be 13 or 14 digits"; //#8698
        bwipp_raiseerror(); //#8698
    } //#8698
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#8702
        $k[$j++] = 'bwipp.databaromniBadAI#8701'; //#8701
        $k[$j++] = "GS1 DataBar Omnidirectional must begin with (01) application identifier"; //#8701
        bwipp_raiseerror(); //#8701
    } //#8701
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#8703
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#8707
        var _B = $get(_8, _9); //#8707
        if ((_B < 48) || (_B > 57)) { //#8706
            $k[$j++] = 'bwipp.databaromniBadCharacter#8705'; //#8705
            $k[$j++] = "GS1 DataBar Omnidirectional must contain only digits"; //#8705
            bwipp_raiseerror(); //#8705
        } //#8705
    } //#8705
    if ($_.barxmult < 33) { //#8711
        $k[$j++] = 'bwipp.databarStackedOmniBarXmult#8710'; //#8710
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must have a barxmult of at least 33"; //#8710
        bwipp_raiseerror(); //#8710
    } //#8710
    if ((($ne($_.format, "omni") && $ne($_.format, "stacked")) && $ne($_.format, "stackedomni")) && $ne($_.format, "truncated")) { //#8715
        $k[$j++] = 'bwipp.databaromniBadFormat#8714'; //#8714
        $k[$j++] = "Valid formats are omni, stacked, stackedomni and truncated"; //#8714
        bwipp_raiseerror(); //#8714
    } //#8714
    if ($eq($_.format, "truncated")) { //#8717
        $_.height = 13 / 72; //#8717
    } //#8717
    bwipp_loadctx(bwipp_databaromni); //#8719
    $_.checksum = 0; //#8722
    for (var _I = 0; _I <= 12; _I += 1) { //#8726
        $_.i = _I; //#8724
        $k[$j++] = 'checksum'; //#8725
        $k[$j++] = $_.checksum; //#8725
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#8725
        if (($_.i % 2) == 0) { //#8725
            var _O = $k[--$j]; //#8725
            $k[$j++] = _O * 3; //#8725
        } //#8725
        var _P = $k[--$j]; //#8725
        var _Q = $k[--$j]; //#8725
        $_[$k[--$j]] = $f(_Q + _P); //#8725
    } //#8725
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#8727
    if ($_.barcode.length == 18) { //#8732
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#8731
            $k[$j++] = 'bwipp.databaromniBadCheckDigit#8730'; //#8730
            $k[$j++] = "Incorrect GS1 DataBar Omnidirectional check digit provided"; //#8730
            bwipp_raiseerror(); //#8730
        } //#8730
    } //#8730
    var _X = $s(18); //#8733
    $puti(_X, 0, $_.barcode); //#8734
    $put(_X, 17, $_.checksum + 48); //#8735
    $_.barcode = _X; //#8736
    $_.txt = $a($_.barcode.length); //#8739
    for (var _e = 0, _d = $_.barcode.length - 1; _e <= _d; _e += 1) { //#8743
        $_.i = _e; //#8741
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#8742
    } //#8742
    $_.ncr = function() {
        var _l = $k[--$j]; //#8746
        var _m = $k[--$j]; //#8746
        var _n = $f(_m - _l); //#8746
        if (_l < $f(_m - _l)) { //#8746
            var _ = _n; //#8746
            _n = _l; //#8746
            _l = _; //#8746
        } //#8746
        $k[$j++] = _n; //#8753
        $k[$j++] = 1; //#8753
        $k[$j++] = 1; //#8753
        for (var _p = _m, _o = $f(_l + 1); _p >= _o; _p -= 1) { //#8753
            var _q = $k[--$j]; //#8749
            var _r = $k[--$j]; //#8750
            var _s = $k[--$j]; //#8750
            $k[$j++] = _s; //#8752
            $k[$j++] = _r; //#8752
            $k[$j++] = _q * _p; //#8752
            if ($le(_r, _s)) { //#8752
                var _t = $k[--$j]; //#8751
                var _u = $k[--$j]; //#8751
                $k[$j++] = $f(_u + 1); //#8751
                $k[$j++] = ~~(_t / _u); //#8751
            } //#8751
        } //#8751
        for (;;) { //#8757
            var _v = $k[--$j]; //#8755
            var _w = $k[--$j]; //#8755
            var _x = $k[--$j]; //#8755
            $k[$j++] = _x; //#8755
            $k[$j++] = _w; //#8755
            $k[$j++] = _v; //#8755
            if ($gt(_w, _x)) { //#8755
                break; //#8755
            } //#8755
            var _y = $k[--$j]; //#8756
            var _z = $k[--$j]; //#8756
            $k[$j++] = $f(_z + 1); //#8756
            $k[$j++] = ~~(_y / _z); //#8756
        } //#8756
        var _10 = $k[--$j]; //#8758
        var _11 = $k[--$j]; //#8758
        $k[$j++] = _10; //#8758
        $k[$j++] = _11; //#8758
        $j--; //#8758
        var _12 = $k[--$j]; //#8758
        var _13 = $k[--$j]; //#8758
        $k[$j++] = _12; //#8758
        $k[$j++] = _13; //#8758
        $j--; //#8758
    }; //#8758
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#8762
        $_.el = $k[--$j]; //#8763
        $_.mw = $k[--$j]; //#8764
        $_.nm = $k[--$j]; //#8765
        $_.val = $k[--$j]; //#8766
        $_.out = $a($_.el); //#8767
        $_.mask = 0; //#8768
        for (var _1D = 0, _1C = $f($_.el - 2); _1D <= _1C; _1D += 1) { //#8795
            $_.bar = _1D; //#8770
            $_.ew = 1; //#8771
            var _1F = $_.bar; //#8772
            $_.mask = $_.mask | ((_1F < 0 ? 1 >>> -_1F : 1 << _1F)); //#8772
            for (;;) { //#8791
                $k[$j++] = 'sval'; //#8773
                $k[$j++] = $f($f($_.nm - $_.ew) - 1); //#8773
                $k[$j++] = $f($f($_.el - $_.bar) - 2); //#8773
                $_.ncr(); //#8773
                var _1K = $k[--$j]; //#8773
                $_[$k[--$j]] = _1K; //#8773
                if (($_.oe && ($_.mask == 0)) && (($f(($f($f($_.nm - $_.ew) - ($_.el * 2))) + ($_.bar * 2))) >= -2)) { //#8776
                    $k[$j++] = 'sval'; //#8775
                    $k[$j++] = $_.sval; //#8775
                    $k[$j++] = $f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar); //#8775
                    $k[$j++] = $f($f($_.el - $_.bar) - 2); //#8775
                    $_.ncr(); //#8775
                    var _1Z = $k[--$j]; //#8775
                    var _1a = $k[--$j]; //#8775
                    $_[$k[--$j]] = $f(_1a - _1Z); //#8775
                } //#8775
                if ($f($_.el - $_.bar) > 2) { //#8785
                    $_.lval = 0; //#8778
                    for (var _1k = $f(($f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar)) + 2), _1j = $f($_.mw + 1); _1k >= _1j; _1k -= 1) { //#8782
                        $k[$j++] = $f(($f($f($_.nm - _1k) - $_.ew)) - 1); //#8780
                        $k[$j++] = $f($f($_.el - $_.bar) - 3); //#8780
                        $_.ncr(); //#8780
                        $_.lval = $f($k[--$j] + $_.lval); //#8781
                    } //#8781
                    $_.sval = $f($_.sval - ($_.lval * ($f($f($_.el - $_.bar) - 1)))); //#8783
                } else { //#8785
                    if ($f($_.nm - $_.ew) > $_.mw) { //#8785
                        $_.sval = $f($_.sval - 1); //#8785
                    } //#8785
                } //#8785
                $_.val = $f($_.val - $_.sval); //#8787
                if ($_.val < 0) { //#8788
                    break; //#8788
                } //#8788
                $_.ew = $_.ew + 1; //#8789
                var _24 = $_.bar; //#8790
                $_.mask = $_.mask & (~((_24 < 0 ? 1 >>> -_24 : 1 << _24))); //#8790
            } //#8790
            $_.val = $f($_.val + $_.sval); //#8792
            $_.nm = $f($_.nm - $_.ew); //#8793
            $put($_.out, $_.bar, $_.ew); //#8794
        } //#8794
        $put($_.out, $f($_.el - 1), $_.nm); //#8796
        $k[$j++] = $_.out; //#8797
    }; //#8797
    $k[$j++] = Infinity; //#8800
    var _2H = $_.linkage ? 1 : 0; //#8801
    var _2J = $geti($_.barcode, 4, 13); //#8802
    $k[$j++] = _2H; //#8802
    for (var _2K = 0, _2L = _2J.length; _2K < _2L; _2K++) { //#8802
        $k[$j++] = $f($get(_2J, _2K) - 48); //#8802
    } //#8802
    $_.binval = $a(); //#8802
    for (var _2O = 0; _2O <= 12; _2O += 1) { //#8809
        $_.i = _2O; //#8806
        var _2P = $_.binval; //#8807
        var _2Q = $_.i; //#8807
        $put(_2P, _2Q + 1, $f($get(_2P, _2Q + 1) + (($get($_.binval, $_.i) % 4537077) * 10))); //#8807
        $put($_.binval, $_.i, ~~($get($_.binval, $_.i) / 4537077)); //#8808
    } //#8808
    $_.right = $get($_.binval, 13) % 4537077; //#8810
    var _2c = $_.binval; //#8811
    $put(_2c, 13, ~~($get(_2c, 13) / 4537077)); //#8811
    $_.left = 0; //#8813
    $_.i = true; //#8814
    for (var _2e = 0; _2e <= 13; _2e += 1) { //#8824
        $_.j = _2e; //#8816
        var _2h = $get($_.binval, $_.j); //#8817
        $k[$j++] = _2h; //#8823
        if ((_2h == 0) && $_.i) { //#8822
            $j--; //#8819
        } else { //#8822
            $_.i = false; //#8821
            $k[$j++] = 'left'; //#8822
            $k[$j++] = $_.left; //#8822
            $r(3, -1); //#8822
            var _2l = $k[--$j]; //#8822
            var _2m = $k[--$j]; //#8822
            $_[$k[--$j]] = $f(_2m + (_2l * (~~Math.pow(10, 13 - $_.j)))); //#8822
        } //#8822
    } //#8822
    $_.d1 = ~~($_.left / 1597); //#8826
    $_.d2 = $_.left % 1597; //#8827
    $_.d3 = ~~($_.right / 1597); //#8828
    $_.d4 = $_.right % 1597; //#8829
    if (!bwipp_databaromni.__8846__) { //#8846
        $_ = Object.create($_); //#8846
        $_.tab164 = $a([160, 0, 12, 4, 8, 1, 161, 1, 960, 161, 10, 6, 6, 3, 80, 10, 2014, 961, 8, 8, 4, 5, 31, 34, 2714, 2015, 6, 10, 3, 6, 10, 70, 2840, 2715, 4, 12, 1, 8, 1, 126]); //#8838
        $_.tab154 = $a([335, 0, 5, 10, 2, 7, 4, 84, 1035, 336, 7, 8, 4, 5, 20, 35, 1515, 1036, 9, 6, 6, 3, 48, 10, 1596, 1516, 11, 4, 8, 1, 81, 1]); //#8845
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databaromni.$ctx[id] = $_[id]); //#8845
        bwipp_databaromni.__8846__ = 1; //#8845
        $_ = Object.getPrototypeOf($_); //#8845
    } //#8845
    $_.i = 0; //#8848
    for (;;) { //#8858
        if ($_.d1 <= $get($_.tab164, $_.i)) { //#8856
            $aload($geti($_.tab164, $_.i + 1, 7)); //#8850
            $_.d1te = $k[--$j]; //#8851
            $_.d1to = $k[--$j]; //#8851
            $_.d1mwe = $k[--$j]; //#8852
            $_.d1mwo = $k[--$j]; //#8852
            $_.d1ele = $k[--$j]; //#8853
            $_.d1elo = $k[--$j]; //#8853
            $_.d1gs = $k[--$j]; //#8854
            break; //#8855
        } //#8855
        $_.i = $_.i + 8; //#8857
    } //#8857
    $_.i = 0; //#8860
    for (;;) { //#8870
        if ($_.d2 <= $get($_.tab154, $_.i)) { //#8868
            $aload($geti($_.tab154, $_.i + 1, 7)); //#8862
            $_.d2te = $k[--$j]; //#8863
            $_.d2to = $k[--$j]; //#8863
            $_.d2mwe = $k[--$j]; //#8864
            $_.d2mwo = $k[--$j]; //#8864
            $_.d2ele = $k[--$j]; //#8865
            $_.d2elo = $k[--$j]; //#8865
            $_.d2gs = $k[--$j]; //#8866
            break; //#8867
        } //#8867
        $_.i = $_.i + 8; //#8869
    } //#8869
    $_.i = 0; //#8872
    for (;;) { //#8882
        if ($_.d3 <= $get($_.tab164, $_.i)) { //#8880
            $aload($geti($_.tab164, $_.i + 1, 7)); //#8874
            $_.d3te = $k[--$j]; //#8875
            $_.d3to = $k[--$j]; //#8875
            $_.d3mwe = $k[--$j]; //#8876
            $_.d3mwo = $k[--$j]; //#8876
            $_.d3ele = $k[--$j]; //#8877
            $_.d3elo = $k[--$j]; //#8877
            $_.d3gs = $k[--$j]; //#8878
            break; //#8879
        } //#8879
        $_.i = $_.i + 8; //#8881
    } //#8881
    $_.i = 0; //#8884
    for (;;) { //#8894
        if ($_.d4 <= $get($_.tab154, $_.i)) { //#8892
            $aload($geti($_.tab154, $_.i + 1, 7)); //#8886
            $_.d4te = $k[--$j]; //#8887
            $_.d4to = $k[--$j]; //#8887
            $_.d4mwe = $k[--$j]; //#8888
            $_.d4mwo = $k[--$j]; //#8888
            $_.d4ele = $k[--$j]; //#8889
            $_.d4elo = $k[--$j]; //#8889
            $_.d4gs = $k[--$j]; //#8890
            break; //#8891
        } //#8891
        $_.i = $_.i + 8; //#8893
    } //#8893
    $k[$j++] = 'd1wo'; //#8896
    $k[$j++] = ~~($f($_.d1 - $_.d1gs) / $_.d1te); //#8896
    $k[$j++] = $_.d1elo; //#8896
    $k[$j++] = $_.d1mwo; //#8896
    $k[$j++] = 4; //#8896
    $k[$j++] = false; //#8896
    $_.getRSSwidths(); //#8896
    var _3y = $k[--$j]; //#8896
    $_[$k[--$j]] = _3y; //#8896
    $k[$j++] = 'd1we'; //#8897
    $k[$j++] = $f($_.d1 - $_.d1gs) % $_.d1te; //#8897
    $k[$j++] = $_.d1ele; //#8897
    $k[$j++] = $_.d1mwe; //#8897
    $k[$j++] = 4; //#8897
    $k[$j++] = true; //#8897
    $_.getRSSwidths(); //#8897
    var _45 = $k[--$j]; //#8897
    $_[$k[--$j]] = _45; //#8897
    $k[$j++] = 'd2wo'; //#8898
    $k[$j++] = $f($_.d2 - $_.d2gs) % $_.d2to; //#8898
    $k[$j++] = $_.d2elo; //#8898
    $k[$j++] = $_.d2mwo; //#8898
    $k[$j++] = 4; //#8898
    $k[$j++] = true; //#8898
    $_.getRSSwidths(); //#8898
    var _4C = $k[--$j]; //#8898
    $_[$k[--$j]] = _4C; //#8898
    $k[$j++] = 'd2we'; //#8899
    $k[$j++] = ~~($f($_.d2 - $_.d2gs) / $_.d2to); //#8899
    $k[$j++] = $_.d2ele; //#8899
    $k[$j++] = $_.d2mwe; //#8899
    $k[$j++] = 4; //#8899
    $k[$j++] = false; //#8899
    $_.getRSSwidths(); //#8899
    var _4J = $k[--$j]; //#8899
    $_[$k[--$j]] = _4J; //#8899
    $k[$j++] = 'd3wo'; //#8900
    $k[$j++] = ~~($f($_.d3 - $_.d3gs) / $_.d3te); //#8900
    $k[$j++] = $_.d3elo; //#8900
    $k[$j++] = $_.d3mwo; //#8900
    $k[$j++] = 4; //#8900
    $k[$j++] = false; //#8900
    $_.getRSSwidths(); //#8900
    var _4Q = $k[--$j]; //#8900
    $_[$k[--$j]] = _4Q; //#8900
    $k[$j++] = 'd3we'; //#8901
    $k[$j++] = $f($_.d3 - $_.d3gs) % $_.d3te; //#8901
    $k[$j++] = $_.d3ele; //#8901
    $k[$j++] = $_.d3mwe; //#8901
    $k[$j++] = 4; //#8901
    $k[$j++] = true; //#8901
    $_.getRSSwidths(); //#8901
    var _4X = $k[--$j]; //#8901
    $_[$k[--$j]] = _4X; //#8901
    $k[$j++] = 'd4wo'; //#8902
    $k[$j++] = $f($_.d4 - $_.d4gs) % $_.d4to; //#8902
    $k[$j++] = $_.d4elo; //#8902
    $k[$j++] = $_.d4mwo; //#8902
    $k[$j++] = 4; //#8902
    $k[$j++] = true; //#8902
    $_.getRSSwidths(); //#8902
    var _4e = $k[--$j]; //#8902
    $_[$k[--$j]] = _4e; //#8902
    $k[$j++] = 'd4we'; //#8903
    $k[$j++] = ~~($f($_.d4 - $_.d4gs) / $_.d4to); //#8903
    $k[$j++] = $_.d4ele; //#8903
    $k[$j++] = $_.d4mwe; //#8903
    $k[$j++] = 4; //#8903
    $k[$j++] = false; //#8903
    $_.getRSSwidths(); //#8903
    var _4l = $k[--$j]; //#8903
    $_[$k[--$j]] = _4l; //#8903
    $_.d1w = $a(8); //#8905
    for (var _4o = 0; _4o <= 3; _4o += 1) { //#8910
        $_.i = _4o; //#8907
        $put($_.d1w, $_.i * 2, $get($_.d1wo, $_.i)); //#8908
        $put($_.d1w, ($_.i * 2) + 1, $get($_.d1we, $_.i)); //#8909
    } //#8909
    $_.d2w = $a(8); //#8912
    for (var _50 = 0; _50 <= 3; _50 += 1) { //#8917
        $_.i = _50; //#8914
        $put($_.d2w, 7 - ($_.i * 2), $get($_.d2wo, $_.i)); //#8915
        $put($_.d2w, 6 - ($_.i * 2), $get($_.d2we, $_.i)); //#8916
    } //#8916
    $_.d3w = $a(8); //#8919
    for (var _5C = 0; _5C <= 3; _5C += 1) { //#8924
        $_.i = _5C; //#8921
        $put($_.d3w, 7 - ($_.i * 2), $get($_.d3wo, $_.i)); //#8922
        $put($_.d3w, 6 - ($_.i * 2), $get($_.d3we, $_.i)); //#8923
    } //#8923
    $_.d4w = $a(8); //#8926
    for (var _5O = 0; _5O <= 3; _5O += 1) { //#8931
        $_.i = _5O; //#8928
        $put($_.d4w, $_.i * 2, $get($_.d4wo, $_.i)); //#8929
        $put($_.d4w, ($_.i * 2) + 1, $get($_.d4we, $_.i)); //#8930
    } //#8930
    $k[$j++] = Infinity; //#8933
    $aload($_.d1w); //#8934
    $aload($_.d2w); //#8935
    $aload($_.d3w); //#8936
    $aload($_.d4w); //#8937
    $_.widths = $a(); //#8937
    if (!bwipp_databaromni.__8953__) { //#8953
        $_ = Object.create($_); //#8953
        $_.checkweights = $a([1, 3, 9, 27, 2, 6, 18, 54, 58, 72, 24, 8, 29, 36, 12, 4, 74, 51, 17, 32, 37, 65, 48, 16, 64, 34, 23, 69, 49, 68, 46, 59]); //#8946
        $_.checkwidths = $a([3, 8, 2, 1, 1, 3, 5, 5, 1, 1, 3, 3, 7, 1, 1, 3, 1, 9, 1, 1, 2, 7, 4, 1, 1, 2, 5, 6, 1, 1, 2, 3, 8, 1, 1, 1, 5, 7, 1, 1, 1, 3, 9, 1, 1]); //#8952
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databaromni.$ctx[id] = $_[id]); //#8952
        bwipp_databaromni.__8953__ = 1; //#8952
        $_ = Object.getPrototypeOf($_); //#8952
    } //#8952
    $_.checksum = 0; //#8955
    for (var _5h = 0; _5h <= 31; _5h += 1) { //#8959
        $_.i = _5h; //#8957
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweights, $_.i))); //#8958
    } //#8958
    $_.checksum = $_.checksum % 79; //#8960
    if ($_.checksum >= 8) { //#8961
        $_.checksum = $f($_.checksum + 1); //#8961
    } //#8961
    if ($_.checksum >= 72) { //#8962
        $_.checksum = $f($_.checksum + 1); //#8962
    } //#8962
    $_.checklt = $geti($_.checkwidths, (~~($_.checksum / 9)) * 5, 5); //#8963
    $_.checkrtrev = $geti($_.checkwidths, ($_.checksum % 9) * 5, 5); //#8964
    $_.checkrt = $a(5); //#8965
    for (var _61 = 0; _61 <= 4; _61 += 1) { //#8969
        $_.i = _61; //#8967
        $put($_.checkrt, $_.i, $get($_.checkrtrev, 4 - $_.i)); //#8968
    } //#8968
    if ($eq($_.format, "omni") || $eq($_.format, "truncated")) { //#9115
        $k[$j++] = Infinity; //#8974
        $k[$j++] = 1; //#8976
        $aload($_.d1w); //#8976
        $aload($_.checklt); //#8977
        $aload($_.d2w); //#8978
        $aload($_.d4w); //#8979
        $aload($_.checkrt); //#8980
        $aload($_.d3w); //#8981
        $k[$j++] = 1; //#8982
        $k[$j++] = 1; //#8982
        $_.sbs = $a(); //#8982
        $k[$j++] = Infinity; //#8985
        var _6G = $_.sbs; //#8987
        $k[$j++] = Infinity; //#8988
        for (var _6I = 0, _6J = ~~(($_.sbs.length + 1) / 2); _6I < _6J; _6I++) { //#8988
            $k[$j++] = $_.height; //#8988
        } //#8988
        var _6L = $a(); //#8988
        $k[$j++] = Infinity; //#8989
        for (var _6N = 0, _6O = ~~(($_.sbs.length + 1) / 2); _6N < _6O; _6N++) { //#8989
            $k[$j++] = 0; //#8989
        } //#8989
        var _6P = $a(); //#8989
        $k[$j++] = 'ren'; //#8994
        $k[$j++] = 'renlinear'; //#8994
        $k[$j++] = 'sbs'; //#8994
        $k[$j++] = _6G; //#8994
        $k[$j++] = 'bhs'; //#8994
        $k[$j++] = _6L; //#8994
        $k[$j++] = 'bbs'; //#8994
        $k[$j++] = _6P; //#8994
        $k[$j++] = 'txt'; //#8994
        $k[$j++] = $_.txt; //#8994
        $k[$j++] = 'textxalign'; //#8994
        $k[$j++] = "center"; //#8994
        $k[$j++] = 'borderleft'; //#8994
        $k[$j++] = 0; //#8994
        $k[$j++] = 'borderright'; //#8994
        $k[$j++] = 0; //#8994
        $k[$j++] = 'opt'; //#8994
        $k[$j++] = $_.options; //#8994
        var _6S = $d(); //#8994
        $k[$j++] = _6S; //#8997
        if (!$_.dontdraw) { //#8997
            bwipp_renlinear(); //#8997
        } //#8997
    } else { //#9115
        $k[$j++] = Infinity; //#9001
        $k[$j++] = 1; //#9003
        $k[$j++] = 1; //#9003
        $aload($_.d1w); //#9003
        $aload($_.checklt); //#9004
        $aload($_.d2w); //#9005
        $k[$j++] = 1; //#9006
        $k[$j++] = 1; //#9006
        $k[$j++] = 0; //#9006
        $_.top = $a(); //#9006
        $k[$j++] = Infinity; //#9008
        $k[$j++] = 1; //#9010
        $k[$j++] = 1; //#9010
        $aload($_.d4w); //#9010
        $aload($_.checkrt); //#9011
        $aload($_.d3w); //#9012
        $k[$j++] = 1; //#9013
        $k[$j++] = 1; //#9013
        $k[$j++] = 0; //#9013
        $_.bot = $a(); //#9013
        for (var _6c = 0; _6c <= 24; _6c += 2) { //#9019
            $_.i = _6c; //#9016
            for (var _6g = 0, _6h = $get($_.top, $_.i); _6g < _6h; _6g++) { //#9017
                $k[$j++] = 0; //#9017
            } //#9017
            for (var _6l = 0, _6m = $get($_.top, $_.i + 1); _6l < _6m; _6l++) { //#9018
                $k[$j++] = 1; //#9018
            } //#9018
        } //#9018
        $astore($a(50)); //#9020
        $_.top = $k[--$j]; //#9020
        for (var _6p = 0; _6p <= 24; _6p += 2) { //#9025
            $_.i = _6p; //#9022
            for (var _6t = 0, _6u = $get($_.bot, $_.i); _6t < _6u; _6t++) { //#9023
                $k[$j++] = 1; //#9023
            } //#9023
            for (var _6y = 0, _6z = $get($_.bot, $_.i + 1); _6y < _6z; _6y++) { //#9024
                $k[$j++] = 0; //#9024
            } //#9024
        } //#9024
        $astore($a(50)); //#9026
        $_.bot = $k[--$j]; //#9026
        if ($eq($_.format, "stacked")) { //#9048
            $_.sep = $a(50); //#9030
            $put($_.sep, 0, 0); //#9031
            for (var _75 = 1; _75 <= 49; _75 += 1) { //#9039
                $_.i = _75; //#9033
                if ($eq($get($_.top, $_.i), $get($_.bot, $_.i))) { //#9037
                    $put($_.sep, $_.i, $f(1 - $get($_.top, $_.i))); //#9035
                } else { //#9037
                    $put($_.sep, $_.i, $f(1 - $get($_.sep, $_.i - 1))); //#9037
                } //#9037
            } //#9037
            $puti($_.sep, 0, $a([0, 0, 0, 0])); //#9040
            $puti($_.sep, 46, $a([0, 0, 0, 0])); //#9041
            $k[$j++] = Infinity; //#9042
            for (var _7Q = 0, _7R = 5; _7Q < _7R; _7Q++) { //#9043
                $aload($_.top); //#9043
            } //#9043
            $aload($_.sep); //#9044
            for (var _7U = 0, _7V = 7; _7U < _7V; _7U++) { //#9045
                $aload($_.bot); //#9045
            } //#9045
            $_.pixs = $a(); //#9045
            $_.pixy = ~~($_.pixs.length / 50); //#9047
        } //#9047
        if ($eq($_.format, "stackedomni")) { //#9098
            $k[$j++] = Infinity; //#9052
            $forall($_.top, function() { //#9052
                var _7b = $k[--$j]; //#9052
                $k[$j++] = $f(1 - _7b); //#9052
            }); //#9052
            $_.sep1 = $a(); //#9052
            $puti($_.sep1, 0, $a([0, 0, 0, 0])); //#9053
            $puti($_.sep1, 46, $a([0, 0, 0, 0])); //#9054
            for (var _7h = 18; _7h <= 30; _7h += 1) { //#9067
                $_.i = _7h; //#9056
                if ($get($_.top, $_.i) == 0) { //#9064
                    if ($get($_.top, $_.i - 1) == 1) { //#9061
                        $k[$j++] = 1; //#9059
                    } else { //#9061
                        var _7r = ($get($_.sep1, $_.i - 1) == 0) ? 1 : 0; //#9061
                        $k[$j++] = _7r; //#9061
                    } //#9061
                } else { //#9064
                    $k[$j++] = 0; //#9064
                } //#9064
                $put($_.sep1, $_.i, $k[--$j]); //#9066
            } //#9066
            $k[$j++] = Infinity; //#9068
            $k[$j++] = 0; //#9068
            $k[$j++] = 0; //#9068
            $k[$j++] = 0; //#9068
            $k[$j++] = 0; //#9068
            for (var _7v = 0, _7w = 21; _7v < _7w; _7v++) { //#9068
                $k[$j++] = 0; //#9068
                $k[$j++] = 1; //#9068
            } //#9068
            $k[$j++] = 0; //#9068
            $k[$j++] = 0; //#9068
            $k[$j++] = 0; //#9068
            $k[$j++] = 0; //#9068
            $_.sep2 = $a(); //#9068
            $k[$j++] = Infinity; //#9069
            $forall($_.bot, function() { //#9069
                var _7z = $k[--$j]; //#9069
                $k[$j++] = $f(1 - _7z); //#9069
            }); //#9069
            $_.sep3 = $a(); //#9069
            $puti($_.sep3, 0, $a([0, 0, 0, 0])); //#9070
            $puti($_.sep3, 46, $a([0, 0, 0, 0])); //#9071
            for (var _85 = 19; _85 <= 31; _85 += 1) { //#9084
                $_.i = _85; //#9073
                if ($get($_.bot, $_.i) == 0) { //#9081
                    if ($get($_.bot, $_.i - 1) == 1) { //#9078
                        $k[$j++] = 1; //#9076
                    } else { //#9078
                        var _8F = ($get($_.sep3, $_.i - 1) == 0) ? 1 : 0; //#9078
                        $k[$j++] = _8F; //#9078
                    } //#9078
                } else { //#9081
                    $k[$j++] = 0; //#9081
                } //#9081
                $put($_.sep3, $_.i, $k[--$j]); //#9083
            } //#9083
            $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#9085
            $k[$j++] = true; //#9086
            for (var _8K = 0; _8K <= 12; _8K += 1) { //#9086
                var _8P = $k[--$j]; //#9086
                $k[$j++] = _8P && $eq($get($_.bot, _8K + 19), $get($_.f3, _8K)); //#9086
            } //#9086
            if ($k[--$j]) { //#9089
                $puti($_.sep3, 19, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#9088
            } //#9088
            $k[$j++] = Infinity; //#9090
            for (var _8U = 0, _8V = $_.barxmult; _8U < _8V; _8U++) { //#9091
                $aload($_.top); //#9091
            } //#9091
            $aload($_.sep1); //#9092
            $aload($_.sep2); //#9093
            $aload($_.sep3); //#9094
            for (var _8b = 0, _8c = $_.barxmult; _8b < _8c; _8b++) { //#9095
                $aload($_.bot); //#9095
            } //#9095
            $_.pixs = $a(); //#9095
            $_.pixy = ~~($_.pixs.length / 50); //#9097
        } //#9097
        var _8k = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", 50],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", 50 / 72],
            ["borderleft", 0],
            ["borderright", 0],
            ["bordertop", 0],
            ["borderbottom", 0],
            ["opt", $_.options]
        ]); //#9112
        $k[$j++] = _8k; //#9115
        if (!$_.dontdraw) { //#9115
            bwipp_renmatrix(); //#9115
        } //#9115
    } //#9115
    $_ = Object.getPrototypeOf($_); //#9119
    $_ = Object.getPrototypeOf($_); //#9121
} //bwipp_databaromni
function bwipp_databarstacked() {
    $_ = Object.create($_); //#9150
    $_.dontdraw = false; //#9153
    $k[$j++] = $_; //#9155
    bwipp_processoptions(); //#9155
    $_.options = $k[--$j]; //#9155
    $_.barcode = $k[--$j]; //#9156
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#9161
        $k[$j++] = 'bwipp.databarstackedBadLength#9160'; //#9160
        $k[$j++] = "GS1 DataBar Stacked must be 13 or 14 digits"; //#9160
        bwipp_raiseerror(); //#9160
    } //#9160
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#9164
        $k[$j++] = 'bwipp.databarstackedBadAI#9163'; //#9163
        $k[$j++] = "GS1 DataBar Stacked must begin with (01) application identifier"; //#9163
        bwipp_raiseerror(); //#9163
    } //#9163
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#9165
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#9169
        var _B = $get(_8, _9); //#9169
        if ((_B < 48) || (_B > 57)) { //#9168
            $k[$j++] = 'bwipp.databarstackedBadCharacter#9167'; //#9167
            $k[$j++] = "GS1 DataBar Stacked must contain only digits"; //#9167
            bwipp_raiseerror(); //#9167
        } //#9167
    } //#9167
    $_.checksum = 0; //#9172
    for (var _C = 0; _C <= 12; _C += 1) { //#9176
        $_.i = _C; //#9174
        $k[$j++] = 'checksum'; //#9175
        $k[$j++] = $_.checksum; //#9175
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#9175
        if (($_.i % 2) == 0) { //#9175
            var _I = $k[--$j]; //#9175
            $k[$j++] = _I * 3; //#9175
        } //#9175
        var _J = $k[--$j]; //#9175
        var _K = $k[--$j]; //#9175
        $_[$k[--$j]] = $f(_K + _J); //#9175
    } //#9175
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#9177
    if ($_.barcode.length == 18) { //#9182
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#9181
            $k[$j++] = 'bwipp.databarstackedBadCheckDigit#9180'; //#9180
            $k[$j++] = "Incorrect GS1 DataBar Stacked check digit provided"; //#9180
            bwipp_raiseerror(); //#9180
        } //#9180
    } //#9180
    var _R = $s(18); //#9183
    $puti(_R, 0, $_.barcode); //#9184
    $put(_R, 17, $_.checksum + 48); //#9185
    $_.barcode = _R; //#9186
    $put($_.options, "dontdraw", true); //#9189
    $put($_.options, "format", "stacked"); //#9190
    $k[$j++] = 'args'; //#9192
    $k[$j++] = $_.barcode; //#9192
    $k[$j++] = $_.options; //#9192
    bwipp_databaromni(); //#9192
    var _Y = $k[--$j]; //#9192
    $_[$k[--$j]] = _Y; //#9192
    $put($_.args, "opt", $_.options); //#9194
    $k[$j++] = $_.args; //#9197
    if (!$_.dontdraw) { //#9197
        bwipp_renmatrix(); //#9197
    } //#9197
    $_ = Object.getPrototypeOf($_); //#9199
} //bwipp_databarstacked
function bwipp_databarstackedomni() {
    $_ = Object.create($_); //#9228
    $_.dontdraw = false; //#9231
    $k[$j++] = $_; //#9233
    bwipp_processoptions(); //#9233
    $_.options = $k[--$j]; //#9233
    $_.barcode = $k[--$j]; //#9234
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#9239
        $k[$j++] = 'bwipp.databarstackedomniBadAI#9238'; //#9238
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must begin with (01) application identifier"; //#9238
        bwipp_raiseerror(); //#9238
    } //#9238
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#9242
        $k[$j++] = 'bwipp.databarstackedomniBadLength#9241'; //#9241
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must be 13 or 14 digits"; //#9241
        bwipp_raiseerror(); //#9241
    } //#9241
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#9243
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#9247
        var _B = $get(_8, _9); //#9247
        if ((_B < 48) || (_B > 57)) { //#9246
            $k[$j++] = 'bwipp.databarstackedomniBadCharacter#9245'; //#9245
            $k[$j++] = "GS1 DataBar Stacked Omnidirectional must contain only digits"; //#9245
            bwipp_raiseerror(); //#9245
        } //#9245
    } //#9245
    $_.checksum = 0; //#9250
    for (var _C = 0; _C <= 12; _C += 1) { //#9254
        $_.i = _C; //#9252
        $k[$j++] = 'checksum'; //#9253
        $k[$j++] = $_.checksum; //#9253
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#9253
        if (($_.i % 2) == 0) { //#9253
            var _I = $k[--$j]; //#9253
            $k[$j++] = _I * 3; //#9253
        } //#9253
        var _J = $k[--$j]; //#9253
        var _K = $k[--$j]; //#9253
        $_[$k[--$j]] = $f(_K + _J); //#9253
    } //#9253
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#9255
    if ($_.barcode.length == 18) { //#9260
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#9259
            $k[$j++] = 'bwipp.databarstackedomniBadCheckDigit#9258'; //#9258
            $k[$j++] = "Incorrect GS1 DataBar Stacked Omnidirectional check digit provided"; //#9258
            bwipp_raiseerror(); //#9258
        } //#9258
    } //#9258
    var _R = $s(18); //#9261
    $puti(_R, 0, $_.barcode); //#9262
    $put(_R, 17, $_.checksum + 48); //#9263
    $_.barcode = _R; //#9264
    $put($_.options, "dontdraw", true); //#9267
    $put($_.options, "format", "stackedomni"); //#9268
    $k[$j++] = 'args'; //#9270
    $k[$j++] = $_.barcode; //#9270
    $k[$j++] = $_.options; //#9270
    bwipp_databaromni(); //#9270
    var _Y = $k[--$j]; //#9270
    $_[$k[--$j]] = _Y; //#9270
    $put($_.args, "opt", $_.options); //#9272
    $k[$j++] = $_.args; //#9275
    if (!$_.dontdraw) { //#9275
        bwipp_renmatrix(); //#9275
    } //#9275
    $_ = Object.getPrototypeOf($_); //#9277
} //bwipp_databarstackedomni
function bwipp_databartruncated() {
    $_ = Object.create($_); //#9306
    $_.dontdraw = false; //#9309
    $k[$j++] = $_; //#9311
    bwipp_processoptions(); //#9311
    $_.options = $k[--$j]; //#9311
    $_.barcode = $k[--$j]; //#9312
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#9317
        $k[$j++] = 'bwipp.databartruncatedBadLength#9316'; //#9316
        $k[$j++] = "GS1 DataBar Truncated must be 13 or 14 digits"; //#9316
        bwipp_raiseerror(); //#9316
    } //#9316
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#9320
        $k[$j++] = 'bwipp.databartruncatedBadAI#9319'; //#9319
        $k[$j++] = "GS1 DataBar Truncated must begin with (01) application identifier"; //#9319
        bwipp_raiseerror(); //#9319
    } //#9319
    var _8 = $geti($_.barcode, 4, $_.barcode.length - 4); //#9321
    for (var _9 = 0, _A = _8.length; _9 < _A; _9++) { //#9325
        var _B = $get(_8, _9); //#9325
        if ((_B < 48) || (_B > 57)) { //#9324
            $k[$j++] = 'bwipp.databartruncatedBadCharacter#9323'; //#9323
            $k[$j++] = "GS1 DataBar Truncated must contain only digits"; //#9323
            bwipp_raiseerror(); //#9323
        } //#9323
    } //#9323
    $_.checksum = 0; //#9328
    for (var _C = 0; _C <= 12; _C += 1) { //#9332
        $_.i = _C; //#9330
        $k[$j++] = 'checksum'; //#9331
        $k[$j++] = $_.checksum; //#9331
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#9331
        if (($_.i % 2) == 0) { //#9331
            var _I = $k[--$j]; //#9331
            $k[$j++] = _I * 3; //#9331
        } //#9331
        var _J = $k[--$j]; //#9331
        var _K = $k[--$j]; //#9331
        $_[$k[--$j]] = $f(_K + _J); //#9331
    } //#9331
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#9333
    if ($_.barcode.length == 18) { //#9338
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#9337
            $k[$j++] = 'bwipp.databartruncatedBadCheckDigit#9336'; //#9336
            $k[$j++] = "Incorrect GS1 DataBar Truncated check digit provided"; //#9336
            bwipp_raiseerror(); //#9336
        } //#9336
    } //#9336
    var _R = $s(18); //#9339
    $puti(_R, 0, $_.barcode); //#9340
    $put(_R, 17, $_.checksum + 48); //#9341
    $_.barcode = _R; //#9342
    $put($_.options, "dontdraw", true); //#9345
    $put($_.options, "format", "truncated"); //#9346
    $k[$j++] = 'args'; //#9348
    $k[$j++] = $_.barcode; //#9348
    $k[$j++] = $_.options; //#9348
    bwipp_databaromni(); //#9348
    var _Y = $k[--$j]; //#9348
    $_[$k[--$j]] = _Y; //#9348
    $put($_.args, "opt", $_.options); //#9350
    $k[$j++] = $_.args; //#9353
    if (!$_.dontdraw) { //#9353
        bwipp_renlinear(); //#9353
    } //#9353
    $_ = Object.getPrototypeOf($_); //#9355
} //bwipp_databartruncated
function bwipp_databarlimited() {
    $_ = Object.create($_); //#9385
    $_.dontdraw = false; //#9388
    $_.height = 10 / 72; //#9389
    $_.linkage = false; //#9390
    $k[$j++] = $_; //#9392
    bwipp_processoptions(); //#9392
    $_.options = $k[--$j]; //#9392
    $_.barcode = $k[--$j]; //#9393
    bwipp_loadctx(bwipp_databarlimited); //#9395
    if (($_.barcode.length != 17) && ($_.barcode.length != 18)) { //#9400
        $k[$j++] = 'bwipp.databarlimitedBadLength#9399'; //#9399
        $k[$j++] = "GS1 DataBar Limited must be 13 or 14 digits"; //#9399
        bwipp_raiseerror(); //#9399
    } //#9399
    if ($ne($geti($_.barcode, 0, 4), "\(01\)")) { //#9403
        $k[$j++] = 'bwipp.databarlimitedBadAI#9402'; //#9402
        $k[$j++] = "GS1 DataBar Limited must begin with (01) application identifier"; //#9402
        bwipp_raiseerror(); //#9402
    } //#9402
    var _7 = $get($_.barcode, 4); //#9404
    if ((_7 < 48) || (_7 > 49)) { //#9406
        $k[$j++] = 'bwipp.databarlimitedBadStartDigit#9405'; //#9405
        $k[$j++] = "GS1 DataBar Limited must begin with 0 or 1"; //#9405
        bwipp_raiseerror(); //#9405
    } //#9405
    var _A = $geti($_.barcode, 5, $_.barcode.length - 5); //#9407
    for (var _B = 0, _C = _A.length; _B < _C; _B++) { //#9411
        var _D = $get(_A, _B); //#9411
        if ((_D < 48) || (_D > 57)) { //#9410
            $k[$j++] = 'bwipp.databarlimitedBadCharacter#9409'; //#9409
            $k[$j++] = "GS1 DataBar Limited must contain only digits"; //#9409
            bwipp_raiseerror(); //#9409
        } //#9409
    } //#9409
    $_.checksum = 0; //#9414
    for (var _E = 0; _E <= 12; _E += 1) { //#9418
        $_.i = _E; //#9416
        $k[$j++] = 'checksum'; //#9417
        $k[$j++] = $_.checksum; //#9417
        $k[$j++] = $f($get($_.barcode, $_.i + 4) - 48); //#9417
        if (($_.i % 2) == 0) { //#9417
            var _K = $k[--$j]; //#9417
            $k[$j++] = _K * 3; //#9417
        } //#9417
        var _L = $k[--$j]; //#9417
        var _M = $k[--$j]; //#9417
        $_[$k[--$j]] = $f(_M + _L); //#9417
    } //#9417
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#9419
    if ($_.barcode.length == 18) { //#9424
        if ($get($_.barcode, 17) != ($_.checksum + 48)) { //#9423
            $k[$j++] = 'bwipp.databarlimitedBadCheckDigit#9422'; //#9422
            $k[$j++] = "Incorrect GS1 DataBar Limited check digit provided"; //#9422
            bwipp_raiseerror(); //#9422
        } //#9422
    } //#9422
    var _T = $s(18); //#9425
    $puti(_T, 0, $_.barcode); //#9426
    $put(_T, 17, $_.checksum + 48); //#9427
    $_.barcode = _T; //#9428
    if (!bwipp_databarlimited.__9433__) { //#9433
        $_ = Object.create($_); //#9433
        $_.linkval = $a([2, 0, 1, 5, 1, 3, 3, 5, 3, 1, 0, 9, 6]); //#9432
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarlimited.$ctx[id] = $_[id]); //#9432
        bwipp_databarlimited.__9433__ = 1; //#9432
        $_ = Object.getPrototypeOf($_); //#9432
    } //#9432
    $k[$j++] = Infinity; //#9434
    var _Z = $geti($_.barcode, 4, 13); //#9435
    for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#9435
        $k[$j++] = $f($get(_Z, _a) - 48); //#9435
    } //#9435
    $_.binval = $a(); //#9435
    if ($_.linkage) { //#9442
        for (var _h = 0, _g = $_.binval.length - 1; _h <= _g; _h += 1) { //#9441
            $_.i = _h; //#9439
            $put($_.binval, $_.i, $f($get($_.binval, $_.i) + $get($_.linkval, $_.i))); //#9440
        } //#9440
    } //#9440
    $_.txt = $a($_.barcode.length); //#9445
    for (var _u = 0, _t = $_.barcode.length - 1; _u <= _t; _u += 1) { //#9449
        $_.i = _u; //#9447
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#9448
    } //#9448
    $_.ncr = function() {
        var _11 = $k[--$j]; //#9452
        var _12 = $k[--$j]; //#9452
        var _13 = $f(_12 - _11); //#9452
        if (_11 < $f(_12 - _11)) { //#9452
            var _ = _13; //#9452
            _13 = _11; //#9452
            _11 = _; //#9452
        } //#9452
        $k[$j++] = _13; //#9459
        $k[$j++] = 1; //#9459
        $k[$j++] = 1; //#9459
        for (var _15 = _12, _14 = $f(_11 + 1); _15 >= _14; _15 -= 1) { //#9459
            var _16 = $k[--$j]; //#9455
            var _17 = $k[--$j]; //#9456
            var _18 = $k[--$j]; //#9456
            $k[$j++] = _18; //#9458
            $k[$j++] = _17; //#9458
            $k[$j++] = _16 * _15; //#9458
            if ($le(_17, _18)) { //#9458
                var _19 = $k[--$j]; //#9457
                var _1A = $k[--$j]; //#9457
                $k[$j++] = $f(_1A + 1); //#9457
                $k[$j++] = ~~(_19 / _1A); //#9457
            } //#9457
        } //#9457
        for (;;) { //#9463
            var _1B = $k[--$j]; //#9461
            var _1C = $k[--$j]; //#9461
            var _1D = $k[--$j]; //#9461
            $k[$j++] = _1D; //#9461
            $k[$j++] = _1C; //#9461
            $k[$j++] = _1B; //#9461
            if ($gt(_1C, _1D)) { //#9461
                break; //#9461
            } //#9461
            var _1E = $k[--$j]; //#9462
            var _1F = $k[--$j]; //#9462
            $k[$j++] = $f(_1F + 1); //#9462
            $k[$j++] = ~~(_1E / _1F); //#9462
        } //#9462
        var _1G = $k[--$j]; //#9464
        var _1H = $k[--$j]; //#9464
        $k[$j++] = _1G; //#9464
        $k[$j++] = _1H; //#9464
        $j--; //#9464
        var _1I = $k[--$j]; //#9464
        var _1J = $k[--$j]; //#9464
        $k[$j++] = _1I; //#9464
        $k[$j++] = _1J; //#9464
        $j--; //#9464
    }; //#9464
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#9468
        $_.el = $k[--$j]; //#9469
        $_.mw = $k[--$j]; //#9470
        $_.nm = $k[--$j]; //#9471
        $_.val = $k[--$j]; //#9472
        $_.out = $a($_.el); //#9473
        $_.mask = 0; //#9474
        for (var _1T = 0, _1S = $f($_.el - 2); _1T <= _1S; _1T += 1) { //#9501
            $_.bar = _1T; //#9476
            $_.ew = 1; //#9477
            var _1V = $_.bar; //#9478
            $_.mask = $_.mask | ((_1V < 0 ? 1 >>> -_1V : 1 << _1V)); //#9478
            for (;;) { //#9497
                $k[$j++] = 'sval'; //#9479
                $k[$j++] = $f($f($_.nm - $_.ew) - 1); //#9479
                $k[$j++] = $f($f($_.el - $_.bar) - 2); //#9479
                $_.ncr(); //#9479
                var _1a = $k[--$j]; //#9479
                $_[$k[--$j]] = _1a; //#9479
                if (($_.oe && ($_.mask == 0)) && (($f(($f($f($_.nm - $_.ew) - ($_.el * 2))) + ($_.bar * 2))) >= -2)) { //#9482
                    $k[$j++] = 'sval'; //#9481
                    $k[$j++] = $_.sval; //#9481
                    $k[$j++] = $f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar); //#9481
                    $k[$j++] = $f($f($_.el - $_.bar) - 2); //#9481
                    $_.ncr(); //#9481
                    var _1p = $k[--$j]; //#9481
                    var _1q = $k[--$j]; //#9481
                    $_[$k[--$j]] = $f(_1q - _1p); //#9481
                } //#9481
                if ($f($_.el - $_.bar) > 2) { //#9491
                    $_.lval = 0; //#9484
                    for (var _20 = $f(($f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar)) + 2), _1z = $f($_.mw + 1); _20 >= _1z; _20 -= 1) { //#9488
                        $k[$j++] = $f(($f($f($_.nm - _20) - $_.ew)) - 1); //#9486
                        $k[$j++] = $f($f($_.el - $_.bar) - 3); //#9486
                        $_.ncr(); //#9486
                        $_.lval = $f($k[--$j] + $_.lval); //#9487
                    } //#9487
                    $_.sval = $f($_.sval - ($_.lval * ($f($f($_.el - $_.bar) - 1)))); //#9489
                } else { //#9491
                    if ($f($_.nm - $_.ew) > $_.mw) { //#9491
                        $_.sval = $f($_.sval - 1); //#9491
                    } //#9491
                } //#9491
                $_.val = $f($_.val - $_.sval); //#9493
                if ($_.val < 0) { //#9494
                    break; //#9494
                } //#9494
                $_.ew = $_.ew + 1; //#9495
                var _2K = $_.bar; //#9496
                $_.mask = $_.mask & (~((_2K < 0 ? 1 >>> -_2K : 1 << _2K))); //#9496
            } //#9496
            $_.val = $f($_.val + $_.sval); //#9498
            $_.nm = $f($_.nm - $_.ew); //#9499
            $put($_.out, $_.bar, $_.ew); //#9500
        } //#9500
        $put($_.out, $f($_.el - 1), $_.nm); //#9502
        $k[$j++] = $_.out; //#9503
    }; //#9503
    for (var _2W = 0; _2W <= 11; _2W += 1) { //#9510
        $_.i = _2W; //#9507
        var _2X = $_.binval; //#9508
        var _2Y = $_.i; //#9508
        $put(_2X, _2Y + 1, $f($get(_2X, _2Y + 1) + (($get($_.binval, $_.i) % 2013571) * 10))); //#9508
        $put($_.binval, $_.i, ~~($get($_.binval, $_.i) / 2013571)); //#9509
    } //#9509
    $_.d2 = $get($_.binval, 12) % 2013571; //#9511
    var _2k = $_.binval; //#9512
    $put(_2k, 12, ~~($get(_2k, 12) / 2013571)); //#9512
    $_.d1 = 0; //#9514
    $_.i = true; //#9515
    for (var _2m = 0; _2m <= 12; _2m += 1) { //#9525
        $_.j = _2m; //#9517
        var _2p = $get($_.binval, $_.j); //#9518
        $k[$j++] = _2p; //#9524
        if ((_2p == 0) && $_.i) { //#9523
            $j--; //#9520
        } else { //#9523
            $_.i = false; //#9522
            $k[$j++] = 'd1'; //#9523
            $k[$j++] = $_.d1; //#9523
            $r(3, -1); //#9523
            var _2t = $k[--$j]; //#9523
            var _2u = $k[--$j]; //#9523
            $_[$k[--$j]] = $f(_2u + (_2t * (~~Math.pow(10, 12 - $_.j)))); //#9523
        } //#9523
    } //#9523
    if (!bwipp_databarlimited.__9537__) { //#9537
        $_ = Object.create($_); //#9537
        $_.tab267 = $a([183063, 0, 17, 9, 6, 3, 6538, 28, 820063, 183064, 13, 13, 5, 4, 875, 728, 1000775, 820064, 9, 17, 3, 6, 28, 6454, 1491020, 1000776, 15, 11, 5, 4, 2415, 203, 1979844, 1491021, 11, 15, 4, 5, 203, 2408, 1996938, 1979845, 19, 7, 8, 1, 17094, 1, 2013570, 1996939, 7, 19, 1, 8, 1, 16632]); //#9536
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarlimited.$ctx[id] = $_[id]); //#9536
        bwipp_databarlimited.__9537__ = 1; //#9536
        $_ = Object.getPrototypeOf($_); //#9536
    } //#9536
    $_.i = 0; //#9539
    for (;;) { //#9549
        if ($_.d1 <= $get($_.tab267, $_.i)) { //#9547
            $aload($geti($_.tab267, $_.i + 1, 7)); //#9541
            $_.d1te = $k[--$j]; //#9542
            $_.d1to = $k[--$j]; //#9542
            $_.d1mwe = $k[--$j]; //#9543
            $_.d1mwo = $k[--$j]; //#9543
            $_.d1ele = $k[--$j]; //#9544
            $_.d1elo = $k[--$j]; //#9544
            $_.d1gs = $k[--$j]; //#9545
            break; //#9546
        } //#9546
        $_.i = $_.i + 8; //#9548
    } //#9548
    $_.i = 0; //#9551
    for (;;) { //#9561
        if ($_.d2 <= $get($_.tab267, $_.i)) { //#9559
            $aload($geti($_.tab267, $_.i + 1, 7)); //#9553
            $_.d2te = $k[--$j]; //#9554
            $_.d2to = $k[--$j]; //#9554
            $_.d2mwe = $k[--$j]; //#9555
            $_.d2mwo = $k[--$j]; //#9555
            $_.d2ele = $k[--$j]; //#9556
            $_.d2elo = $k[--$j]; //#9556
            $_.d2gs = $k[--$j]; //#9557
            break; //#9558
        } //#9558
        $_.i = $_.i + 8; //#9560
    } //#9560
    $k[$j++] = 'd1wo'; //#9563
    $k[$j++] = ~~($f($_.d1 - $_.d1gs) / $_.d1te); //#9563
    $k[$j++] = $_.d1elo; //#9563
    $k[$j++] = $_.d1mwo; //#9563
    $k[$j++] = 7; //#9563
    $k[$j++] = false; //#9563
    $_.getRSSwidths(); //#9563
    var _3X = $k[--$j]; //#9563
    $_[$k[--$j]] = _3X; //#9563
    $k[$j++] = 'd1we'; //#9564
    $k[$j++] = $f($_.d1 - $_.d1gs) % $_.d1te; //#9564
    $k[$j++] = $_.d1ele; //#9564
    $k[$j++] = $_.d1mwe; //#9564
    $k[$j++] = 7; //#9564
    $k[$j++] = true; //#9564
    $_.getRSSwidths(); //#9564
    var _3e = $k[--$j]; //#9564
    $_[$k[--$j]] = _3e; //#9564
    $k[$j++] = 'd2wo'; //#9565
    $k[$j++] = ~~($f($_.d2 - $_.d2gs) / $_.d2te); //#9565
    $k[$j++] = $_.d2elo; //#9565
    $k[$j++] = $_.d2mwo; //#9565
    $k[$j++] = 7; //#9565
    $k[$j++] = false; //#9565
    $_.getRSSwidths(); //#9565
    var _3l = $k[--$j]; //#9565
    $_[$k[--$j]] = _3l; //#9565
    $k[$j++] = 'd2we'; //#9566
    $k[$j++] = $f($_.d2 - $_.d2gs) % $_.d2te; //#9566
    $k[$j++] = $_.d2ele; //#9566
    $k[$j++] = $_.d2mwe; //#9566
    $k[$j++] = 7; //#9566
    $k[$j++] = true; //#9566
    $_.getRSSwidths(); //#9566
    var _3s = $k[--$j]; //#9566
    $_[$k[--$j]] = _3s; //#9566
    $_.d1w = $a(14); //#9568
    for (var _3v = 0; _3v <= 6; _3v += 1) { //#9573
        $_.i = _3v; //#9570
        $put($_.d1w, $_.i * 2, $get($_.d1wo, $_.i)); //#9571
        $put($_.d1w, ($_.i * 2) + 1, $get($_.d1we, $_.i)); //#9572
    } //#9572
    $_.d2w = $a(14); //#9575
    for (var _47 = 0; _47 <= 6; _47 += 1) { //#9580
        $_.i = _47; //#9577
        $put($_.d2w, $_.i * 2, $get($_.d2wo, $_.i)); //#9578
        $put($_.d2w, ($_.i * 2) + 1, $get($_.d2we, $_.i)); //#9579
    } //#9579
    $k[$j++] = Infinity; //#9582
    $aload($_.d1w); //#9583
    $aload($_.d2w); //#9584
    $_.widths = $a(); //#9584
    if (!bwipp_databarlimited.__9608__) { //#9608
        $_ = Object.create($_); //#9608
        $_.checkweights = $a([1, 3, 9, 27, 81, 65, 17, 51, 64, 14, 42, 37, 22, 66, 20, 60, 2, 6, 18, 54, 73, 41, 34, 13, 39, 28, 84, 74]); //#9591
        $k[$j++] = Infinity; //#9593
        for (var _4M = 0; _4M <= 43; _4M += 1) { //#9594
            $k[$j++] = _4M; //#9594
        } //#9594
        $k[$j++] = 45; //#9596
        $k[$j++] = 52; //#9596
        $k[$j++] = 57; //#9596
        for (var _4N = 63; _4N <= 66; _4N += 1) { //#9596
            $k[$j++] = _4N; //#9596
        } //#9596
        for (var _4O = 73; _4O <= 79; _4O += 1) { //#9597
            $k[$j++] = _4O; //#9597
        } //#9597
        $k[$j++] = 82; //#9599
        for (var _4P = 126; _4P <= 130; _4P += 1) { //#9599
            $k[$j++] = _4P; //#9599
        } //#9599
        $k[$j++] = 132; //#9601
        for (var _4Q = 141; _4Q <= 146; _4Q += 1) { //#9601
            $k[$j++] = _4Q; //#9601
        } //#9601
        for (var _4R = 210; _4R <= 217; _4R += 1) { //#9602
            $k[$j++] = _4R; //#9602
        } //#9602
        $k[$j++] = 220; //#9604
        for (var _4S = 316; _4S <= 320; _4S += 1) { //#9604
            $k[$j++] = _4S; //#9604
        } //#9604
        $k[$j++] = 322; //#9606
        $k[$j++] = 323; //#9606
        $k[$j++] = 326; //#9606
        $k[$j++] = 337; //#9606
        $_.checkseq = $a(); //#9606
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarlimited.$ctx[id] = $_[id]); //#9607
        bwipp_databarlimited.__9608__ = 1; //#9607
        $_ = Object.getPrototypeOf($_); //#9607
    } //#9607
    $_.checksum = 0; //#9610
    for (var _4V = 0; _4V <= 27; _4V += 1) { //#9614
        $_.i = _4V; //#9612
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweights, $_.i))); //#9613
    } //#9613
    $_.checksum = $_.checksum % 89; //#9615
    $_.seq = $get($_.checkseq, $_.checksum); //#9616
    $k[$j++] = 'swidths'; //#9617
    $k[$j++] = ~~($_.seq / 21); //#9617
    $k[$j++] = 8; //#9617
    $k[$j++] = 3; //#9617
    $k[$j++] = 6; //#9617
    $k[$j++] = false; //#9617
    $_.getRSSwidths(); //#9617
    var _4i = $k[--$j]; //#9617
    $_[$k[--$j]] = _4i; //#9617
    $k[$j++] = 'bwidths'; //#9618
    $k[$j++] = $_.seq % 21; //#9618
    $k[$j++] = 8; //#9618
    $k[$j++] = 3; //#9618
    $k[$j++] = 6; //#9618
    $k[$j++] = false; //#9618
    $_.getRSSwidths(); //#9618
    var _4l = $k[--$j]; //#9618
    $_[$k[--$j]] = _4l; //#9618
    $_.checkwidths = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]); //#9620
    for (var _4o = 0; _4o <= 5; _4o += 1) { //#9625
        $_.i = _4o; //#9622
        $put($_.checkwidths, $_.i * 2, $get($_.swidths, $_.i)); //#9623
        $put($_.checkwidths, ($_.i * 2) + 1, $get($_.bwidths, $_.i)); //#9624
    } //#9624
    $k[$j++] = Infinity; //#9627
    $k[$j++] = 1; //#9629
    $aload($_.d1w); //#9629
    $aload($_.checkwidths); //#9630
    $aload($_.d2w); //#9631
    $k[$j++] = 1; //#9632
    $k[$j++] = 1; //#9632
    $k[$j++] = 5; //#9632
    $_.sbs = $a(); //#9632
    $k[$j++] = Infinity; //#9636
    var _53 = $_.sbs; //#9638
    $k[$j++] = Infinity; //#9639
    for (var _55 = 0, _56 = ~~(($_.sbs.length + 1) / 2); _55 < _56; _55++) { //#9639
        $k[$j++] = $_.height; //#9639
    } //#9639
    var _58 = $a(); //#9639
    $k[$j++] = Infinity; //#9640
    for (var _5A = 0, _5B = ~~(($_.sbs.length + 1) / 2); _5A < _5B; _5A++) { //#9640
        $k[$j++] = 0; //#9640
    } //#9640
    var _5C = $a(); //#9640
    $k[$j++] = 'ren'; //#9645
    $k[$j++] = 'renlinear'; //#9645
    $k[$j++] = 'sbs'; //#9645
    $k[$j++] = _53; //#9645
    $k[$j++] = 'bhs'; //#9645
    $k[$j++] = _58; //#9645
    $k[$j++] = 'bbs'; //#9645
    $k[$j++] = _5C; //#9645
    $k[$j++] = 'txt'; //#9645
    $k[$j++] = $_.txt; //#9645
    $k[$j++] = 'textxalign'; //#9645
    $k[$j++] = "center"; //#9645
    $k[$j++] = 'borderleft'; //#9645
    $k[$j++] = 0; //#9645
    $k[$j++] = 'borderright'; //#9645
    $k[$j++] = 0; //#9645
    $k[$j++] = 'opt'; //#9645
    $k[$j++] = $_.options; //#9645
    var _5F = $d(); //#9645
    $k[$j++] = _5F; //#9648
    if (!$_.dontdraw) { //#9648
        bwipp_renlinear(); //#9648
    } //#9648
    $_ = Object.getPrototypeOf($_); //#9650
    $_ = Object.getPrototypeOf($_); //#9652
} //bwipp_databarlimited
function bwipp_databarexpanded() {
    $_ = Object.create($_); //#9684
    $_.parse = false; //#9687
    $_.dontlint = false; //#9688
    $_.lintreqs = true; //#9689
    $_.dontdraw = false; //#9690
    $_.height = 34 / 72; //#9691
    $_.format = "expanded"; //#9692
    $_.segments = -1; //#9693
    $_.linkage = false; //#9694
    $_.barxmult = 34; //#9695
    $k[$j++] = $_; //#9697
    bwipp_processoptions(); //#9697
    $_.options = $k[--$j]; //#9697
    $_.barcode = $k[--$j]; //#9698
    bwipp_loadctx(bwipp_databarexpanded); //#9700
    if ($_.barxmult < 34) { //#9704
        $k[$j++] = 'bwipp.databarStackedOmniBarXmult#9703'; //#9703
        $k[$j++] = "GS1 DataBar Expanded Stacked must have a barxmult of at least 34"; //#9703
        bwipp_raiseerror(); //#9703
    } //#9703
    if ($ne($_.format, "expanded") && $ne($_.format, "expandedstacked")) { //#9708
        $k[$j++] = 'bwipp.databarexpandedBadFormat#9707'; //#9707
        $k[$j++] = "Valid formats are expanded and expandedstacked"; //#9707
        bwipp_raiseerror(); //#9707
    } //#9707
    if ($_.segments == -1) { //#9714
        var _7 = $eq($_.format, "expandedstacked") ? 4 : 22; //#9711
        $_.segments = _7; //#9711
    } else { //#9714
        if ((($_.segments < 2) || ($_.segments > 22)) || (($_.segments % 2) != 0)) { //#9715
            $k[$j++] = 'bwipp.gs1databarexpandedBadSegments#9714'; //#9714
            $k[$j++] = "The number of segments must be even from 2 to 22"; //#9714
            bwipp_raiseerror(); //#9714
        } //#9714
    } //#9714
    $k[$j++] = $_.barcode; //#9718
    $k[$j++] = 'ai'; //#9718
    bwipp_gs1process(); //#9718
    $_.fncs = $k[--$j]; //#9719
    $_.vals = $k[--$j]; //#9720
    $_.ais = $k[--$j]; //#9721
    for (;;) { //#9809
        if ($_.ais.length == 2) { //#9733
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3103")) { //#9732
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 32767)) { //#9731
                    $k[$j++] = "0100"; //#9730
                    $k[$j++] = false; //#9730
                    break; //#9730
                } //#9730
            } //#9730
        } //#9730
        if ($_.ais.length == 2) { //#9742
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3202")) { //#9741
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 9999)) { //#9740
                    $k[$j++] = "0101"; //#9739
                    $k[$j++] = false; //#9739
                    break; //#9739
                } //#9739
            } //#9739
        } //#9739
        if ($_.ais.length == 2) { //#9751
            if ($eq($get($_.ais, 0), "01") && $eq($get($_.ais, 1), "3203")) { //#9750
                if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 22767)) { //#9749
                    $k[$j++] = "0101"; //#9748
                    $k[$j++] = false; //#9748
                    break; //#9748
                } //#9748
            } //#9748
        } //#9748
        var _k = $_.ais.length; //#9754
        if ((_k == 2) || (_k == 3)) { //#9785
            $k[$j++] = 'ai310x'; //#9755
            $k[$j++] = false; //#9755
            for (var _l = 3100; _l <= 3109; _l += 1) { //#9755
                var _q = $k[--$j]; //#9755
                $k[$j++] = _q || $eq($cvrs($s(4), _l, 10), $get($_.ais, 1)); //#9755
            } //#9755
            var _r = $k[--$j]; //#9755
            $_[$k[--$j]] = _r; //#9755
            $k[$j++] = 'ai320x'; //#9756
            $k[$j++] = false; //#9756
            for (var _t = 3200; _t <= 3209; _t += 1) { //#9756
                var _y = $k[--$j]; //#9756
                $k[$j++] = _y || $eq($cvrs($s(4), _t, 10), $get($_.ais, 1)); //#9756
            } //#9756
            var _z = $k[--$j]; //#9756
            $_[$k[--$j]] = _z; //#9756
            if ($_.ais.length == 3) { //#9760
                var _12 = $a(["11", "13", "15", "17"]); //#9758
                $k[$j++] = 'aibad'; //#9758
                $k[$j++] = true; //#9758
                for (var _13 = 0, _14 = _12.length; _13 < _14; _13++) { //#9758
                    var _18 = $k[--$j]; //#9758
                    $k[$j++] = _18 && $ne($get(_12, _13), $get($_.ais, 2)); //#9758
                } //#9758
                var _19 = $k[--$j]; //#9758
                $_[$k[--$j]] = _19; //#9758
            } else { //#9760
                $_.aibad = false; //#9760
            } //#9760
            if (($eq($get($_.ais, 0), "01") && $or($_.ai310x, $_.ai320x)) && (!$_.aibad)) { //#9784
                if ($_.ais.length == 3) { //#9781
                    var _1P = $cvi($geti($get($_.vals, 2), 2, 2)); //#9766
                    var _1T = $cvi($geti($get($_.vals, 2), 4, 2)); //#9767
                    if ((($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 99999)) && ((_1P >= 1) && (_1P <= 12))) && ((_1T >= 0) && (_1T <= 31))) { //#9776
                        if ($_.ai310x && $eq($get($_.ais, 2), "11")) { //#9768
                            $k[$j++] = "0111000"; //#9768
                            $k[$j++] = false; //#9768
                            break; //#9768
                        } //#9768
                        if ($_.ai320x && $eq($get($_.ais, 2), "11")) { //#9769
                            $k[$j++] = "0111001"; //#9769
                            $k[$j++] = false; //#9769
                            break; //#9769
                        } //#9769
                        if ($_.ai310x && $eq($get($_.ais, 2), "13")) { //#9770
                            $k[$j++] = "0111010"; //#9770
                            $k[$j++] = false; //#9770
                            break; //#9770
                        } //#9770
                        if ($_.ai320x && $eq($get($_.ais, 2), "13")) { //#9771
                            $k[$j++] = "0111011"; //#9771
                            $k[$j++] = false; //#9771
                            break; //#9771
                        } //#9771
                        if ($_.ai310x && $eq($get($_.ais, 2), "15")) { //#9772
                            $k[$j++] = "0111100"; //#9772
                            $k[$j++] = false; //#9772
                            break; //#9772
                        } //#9772
                        if ($_.ai320x && $eq($get($_.ais, 2), "15")) { //#9773
                            $k[$j++] = "0111101"; //#9773
                            $k[$j++] = false; //#9773
                            break; //#9773
                        } //#9773
                        if ($_.ai310x && $eq($get($_.ais, 2), "17")) { //#9774
                            $k[$j++] = "0111110"; //#9774
                            $k[$j++] = false; //#9774
                            break; //#9774
                        } //#9774
                        if ($_.ai320x && $eq($get($_.ais, 2), "17")) { //#9775
                            $k[$j++] = "0111111"; //#9775
                            $k[$j++] = false; //#9775
                            break; //#9775
                        } //#9775
                    } //#9775
                } else { //#9781
                    if ($eq($geti($get($_.vals, 0), 0, 1), "9") && ($cvi($get($_.vals, 1)) <= 99999)) { //#9782
                        if ($_.ai310x) { //#9780
                            $k[$j++] = "0111000"; //#9780
                            $k[$j++] = false; //#9780
                            break; //#9780
                        } //#9780
                        if ($_.ai320x) { //#9781
                            $k[$j++] = "0111001"; //#9781
                            $k[$j++] = false; //#9781
                            break; //#9781
                        } //#9781
                    } //#9781
                } //#9781
            } //#9781
        } //#9781
        if ($_.ais.length >= 2) { //#9793
            $k[$j++] = 'ai392x'; //#9789
            $k[$j++] = false; //#9789
            for (var _20 = 3920; _20 <= 3923; _20 += 1) { //#9789
                var _25 = $k[--$j]; //#9789
                $k[$j++] = _25 || $eq($cvrs($s(4), _20, 10), $get($_.ais, 1)); //#9789
            } //#9789
            var _26 = $k[--$j]; //#9789
            $_[$k[--$j]] = _26; //#9789
            if ($eq($get($_.ais, 0), "01") && $_.ai392x) { //#9792
                if ($eq($geti($get($_.vals, 0), 0, 1), "9")) { //#9791
                    $k[$j++] = "01100"; //#9791
                    $k[$j++] = true; //#9791
                    break; //#9791
                } //#9791
            } //#9791
        } //#9791
        if ($_.ais.length >= 2) { //#9801
            $k[$j++] = 'ai393x'; //#9797
            $k[$j++] = false; //#9797
            for (var _2F = 3930; _2F <= 3933; _2F += 1) { //#9797
                var _2K = $k[--$j]; //#9797
                $k[$j++] = _2K || $eq($cvrs($s(4), _2F, 10), $get($_.ais, 1)); //#9797
            } //#9797
            var _2L = $k[--$j]; //#9797
            $_[$k[--$j]] = _2L; //#9797
            if ($eq($get($_.ais, 0), "01") && $_.ai393x) { //#9800
                if ($eq($geti($get($_.vals, 0), 0, 1), "9")) { //#9799
                    $k[$j++] = "01101"; //#9799
                    $k[$j++] = true; //#9799
                    break; //#9799
                } //#9799
            } //#9799
        } //#9799
        if ($eq($get($_.ais, 0), "01")) { //#9804
            $k[$j++] = "1"; //#9804
            $k[$j++] = true; //#9804
            break; //#9804
        } //#9804
        $k[$j++] = "00"; //#9807
        $k[$j++] = true; //#9807
        break; //#9807
    } //#9807
    $_.gpfallow = $k[--$j]; //#9810
    $_.method = $k[--$j]; //#9811
    $_.conv12to40 = function() {
        var _2Y = $strcpy($s(40), "0000000000000000000000000000000000000000"); //#9814
        var _2Z = $k[--$j]; //#9815
        var _2d = $cvrs($s(10), $cvi($geti(_2Z, 0, 3)), 2); //#9815
        $puti($geti(_2Y, 0, 10), 10 - _2d.length, _2d); //#9815
        var _2h = $cvrs($s(10), $cvi($geti(_2Z, 3, 3)), 2); //#9816
        $puti($geti(_2Y, 10, 10), 10 - _2h.length, _2h); //#9816
        var _2l = $cvrs($s(10), $cvi($geti(_2Z, 6, 3)), 2); //#9817
        $puti($geti(_2Y, 20, 10), 10 - _2l.length, _2l); //#9817
        var _2p = $cvrs($s(10), $cvi($geti(_2Z, 9, 3)), 2); //#9818
        $puti($geti(_2Y, 30, 10), 10 - _2p.length, _2p); //#9818
        $k[$j++] = _2Y; //#9819
        $k[$j++] = _2Z; //#9819
        $j--; //#9819
    }; //#9819
    $_.conv13to44 = function() {
        var _2r = $strcpy($s(44), "00000000000000000000000000000000000000000000"); //#9823
        var _2s = $k[--$j]; //#9824
        var _2w = $cvrs($s(4), $cvi($geti(_2s, 0, 1)), 2); //#9824
        $puti($geti(_2r, 0, 4), 4 - _2w.length, _2w); //#9824
        $k[$j++] = _2r; //#9825
        $k[$j++] = _2r; //#9825
        $k[$j++] = $geti(_2s, 1, 12); //#9825
        $_.conv12to40(); //#9825
        var _2y = $k[--$j]; //#9825
        $puti($k[--$j], 4, _2y); //#9825
    }; //#9825
    $_.tobin = function() {
        var _31 = $s($k[--$j]); //#9829
        $k[$j++] = _31; //#9829
        for (var _33 = 0, _32 = _31.length - 1; _33 <= _32; _33 += 1) { //#9829
            var _34 = $k[--$j]; //#9829
            $put(_34, _33, 48); //#9829
            $k[$j++] = _34; //#9829
        } //#9829
        var _35 = $k[--$j]; //#9830
        $k[$j++] = _35; //#9830
        $k[$j++] = _35; //#9830
        $r(3, -1); //#9830
        var _36 = $k[--$j]; //#9830
        var _37 = $k[--$j]; //#9830
        var _39 = $cvrs($s(_37.length), _36, 2); //#9830
        $puti(_37, _37.length - _39.length, _39); //#9830
    }; //#9830
    $_.fnc1 = -1; //#9833
    $_.lnumeric = -2; //#9833
    $_.lalphanumeric = -3; //#9833
    $_.liso646 = -4; //#9833
    if ($eq($_.method, "00")) { //#9838
        $_.cdf = $a([]); //#9836
        $_.gpf = $a([]); //#9837
    } //#9837
    if ($eq($_.method, "1")) { //#9847
        $k[$j++] = 'cdf'; //#9841
        $k[$j++] = $geti($get($_.vals, 0), 0, 13); //#9841
        $_.conv13to44(); //#9841
        var _3H = $k[--$j]; //#9841
        $_[$k[--$j]] = _3H; //#9841
        $k[$j++] = Infinity; //#9842
        var _3J = $_.cdf; //#9842
        for (var _3K = 0, _3L = _3J.length; _3K < _3L; _3K++) { //#9842
            $k[$j++] = $f($get(_3J, _3K) - 48); //#9842
        } //#9842
        $_.cdf = $a(); //#9842
        $_.gpf = $a([]); //#9843
        $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#9844
        $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#9845
        $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#9846
    } //#9846
    if ($eq($_.method, "0100")) { //#9858
        $_.cdf = $s(55); //#9850
        $k[$j++] = $_.cdf; //#9851
        $k[$j++] = 0; //#9851
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9851
        $_.conv12to40(); //#9851
        var _3e = $k[--$j]; //#9851
        var _3f = $k[--$j]; //#9851
        $puti($k[--$j], _3f, _3e); //#9851
        $k[$j++] = $_.cdf; //#9852
        $k[$j++] = 40; //#9852
        $k[$j++] = $cvi($get($_.vals, 1)); //#9852
        $k[$j++] = 15; //#9852
        $_.tobin(); //#9852
        var _3k = $k[--$j]; //#9852
        var _3l = $k[--$j]; //#9852
        $puti($k[--$j], _3l, _3k); //#9852
        $k[$j++] = Infinity; //#9853
        var _3n = $_.cdf; //#9853
        for (var _3o = 0, _3p = _3n.length; _3o < _3p; _3o++) { //#9853
            $k[$j++] = $get(_3n, _3o) - 48; //#9853
        } //#9853
        $_.cdf = $a(); //#9853
        $_.gpf = $a([]); //#9854
        $_.ais = $a([]); //#9855
        $_.vals = $a([]); //#9856
        $_.fncs = $a([]); //#9857
    } //#9857
    if ($eq($_.method, "0101")) { //#9874
        $_.cdf = $s(55); //#9861
        $k[$j++] = $_.cdf; //#9862
        $k[$j++] = 0; //#9862
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9862
        $_.conv12to40(); //#9862
        var _42 = $k[--$j]; //#9862
        var _43 = $k[--$j]; //#9862
        $puti($k[--$j], _43, _42); //#9862
        if ($eq($get($_.ais, 1), "3202")) { //#9866
            $k[$j++] = $cvi($get($_.vals, 1)); //#9864
            $k[$j++] = 15; //#9864
            $_.tobin(); //#9864
        } else { //#9866
            $k[$j++] = $cvi($get($_.vals, 1)) + 10000; //#9866
            $k[$j++] = 15; //#9866
            $_.tobin(); //#9866
        } //#9866
        $puti($_.cdf, 40, $k[--$j]); //#9868
        $k[$j++] = Infinity; //#9869
        var _4D = $_.cdf; //#9869
        for (var _4E = 0, _4F = _4D.length; _4E < _4F; _4E++) { //#9869
            $k[$j++] = $get(_4D, _4E) - 48; //#9869
        } //#9869
        $_.cdf = $a(); //#9869
        $_.gpf = $a([]); //#9870
        $_.ais = $a([]); //#9871
        $_.vals = $a([]); //#9872
        $_.fncs = $a([]); //#9873
    } //#9873
    if ($_.method.length == 7) { //#9896
        $_.cdf = $s(76); //#9877
        $k[$j++] = $_.cdf; //#9878
        $k[$j++] = 0; //#9878
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9878
        $_.conv12to40(); //#9878
        var _4S = $k[--$j]; //#9878
        var _4T = $k[--$j]; //#9878
        $puti($k[--$j], _4T, _4S); //#9878
        var _4V = $s(6); //#9879
        $puti(_4V, 0, $geti($get($_.ais, 1), 3, 1)); //#9879
        $puti(_4V, 1, $geti($get($_.vals, 1), 1, 5)); //#9880
        $k[$j++] = $cvi(_4V); //#9880
        $k[$j++] = 20; //#9880
        $_.tobin(); //#9880
        $puti($_.cdf, 40, $k[--$j]); //#9881
        if ($_.ais.length == 3) { //#9888
            var _4g = $get($_.vals, 2); //#9883
            $k[$j++] = ($cvi($geti(_4g, 0, 2)) * 384) + ((($cvi($geti(_4g, 2, 2)) - 1) * 32) + $cvi($geti(_4g, 4, 2))); //#9886
        } else { //#9888
            $k[$j++] = 38400; //#9888
        } //#9888
        $k[$j++] = 16; //#9890
        $_.tobin(); //#9890
        $puti($_.cdf, 60, $k[--$j]); //#9890
        $k[$j++] = Infinity; //#9891
        var _4m = $_.cdf; //#9891
        for (var _4n = 0, _4o = _4m.length; _4n < _4o; _4n++) { //#9891
            $k[$j++] = $get(_4m, _4n) - 48; //#9891
        } //#9891
        $_.cdf = $a(); //#9891
        $_.gpf = $a([]); //#9892
        $_.ais = $a([]); //#9893
        $_.vals = $a([]); //#9894
        $_.fncs = $a([]); //#9895
    } //#9895
    if ($eq($_.method, "01100")) { //#9907
        $_.cdf = $s(42); //#9899
        $k[$j++] = $_.cdf; //#9900
        $k[$j++] = 0; //#9900
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9900
        $_.conv12to40(); //#9900
        var _51 = $k[--$j]; //#9900
        var _52 = $k[--$j]; //#9900
        $puti($k[--$j], _52, _51); //#9900
        $k[$j++] = $_.cdf; //#9901
        $k[$j++] = 40; //#9901
        $k[$j++] = $cvi($geti($get($_.ais, 1), 3, 1)); //#9901
        $k[$j++] = 2; //#9901
        $_.tobin(); //#9901
        var _58 = $k[--$j]; //#9901
        var _59 = $k[--$j]; //#9901
        $puti($k[--$j], _59, _58); //#9901
        $k[$j++] = Infinity; //#9902
        var _5B = $_.cdf; //#9902
        for (var _5C = 0, _5D = _5B.length; _5C < _5D; _5C++) { //#9902
            $k[$j++] = $get(_5B, _5C) - 48; //#9902
        } //#9902
        $_.cdf = $a(); //#9902
        $k[$j++] = Infinity; //#9903
        $forall($get($_.vals, 1)); //#9903
        if ($_.ais.length > 2) { //#9903
            $k[$j++] = $_.fnc1; //#9903
        } //#9903
        $_.gpf = $a(); //#9903
        $_.ais = $geti($_.ais, 2, $_.ais.length - 2); //#9904
        $_.vals = $geti($_.vals, 2, $_.vals.length - 2); //#9905
        $_.fncs = $geti($_.fncs, 2, $_.fncs.length - 2); //#9906
    } //#9906
    if ($eq($_.method, "01101")) { //#9919
        $_.cdf = $s(52); //#9910
        $k[$j++] = $_.cdf; //#9911
        $k[$j++] = 0; //#9911
        $k[$j++] = $geti($get($_.vals, 0), 1, 12); //#9911
        $_.conv12to40(); //#9911
        var _5a = $k[--$j]; //#9911
        var _5b = $k[--$j]; //#9911
        $puti($k[--$j], _5b, _5a); //#9911
        $k[$j++] = $_.cdf; //#9912
        $k[$j++] = 40; //#9912
        $k[$j++] = $cvi($geti($get($_.ais, 1), 3, 1)); //#9912
        $k[$j++] = 2; //#9912
        $_.tobin(); //#9912
        var _5h = $k[--$j]; //#9912
        var _5i = $k[--$j]; //#9912
        $puti($k[--$j], _5i, _5h); //#9912
        $k[$j++] = $_.cdf; //#9913
        $k[$j++] = 42; //#9913
        $k[$j++] = $cvi($geti($get($_.vals, 1), 0, 3)); //#9913
        $k[$j++] = 10; //#9913
        $_.tobin(); //#9913
        var _5o = $k[--$j]; //#9913
        var _5p = $k[--$j]; //#9913
        $puti($k[--$j], _5p, _5o); //#9913
        $k[$j++] = Infinity; //#9914
        var _5r = $_.cdf; //#9914
        for (var _5s = 0, _5t = _5r.length; _5s < _5t; _5s++) { //#9914
            $k[$j++] = $get(_5r, _5s) - 48; //#9914
        } //#9914
        $_.cdf = $a(); //#9914
        $k[$j++] = Infinity; //#9915
        var _5x = $get($_.vals, 1); //#9915
        var _5y = $geti(_5x, 3, _5x.length - 3); //#9915
        for (var _5z = 0, _60 = _5y.length; _5z < _60; _5z++) { //#9915
            $k[$j++] = $get(_5y, _5z); //#9915
        } //#9915
        if ($_.ais.length > 2) { //#9915
            $k[$j++] = $_.fnc1; //#9915
        } //#9915
        $_.gpf = $a(); //#9915
        $_.ais = $geti($_.ais, 2, $_.ais.length - 2); //#9916
        $_.vals = $geti($_.vals, 2, $_.vals.length - 2); //#9917
        $_.fncs = $geti($_.fncs, 2, $_.fncs.length - 2); //#9918
    } //#9918
    if ($_.gpfallow) { //#9925
        $_.vlf = $a(2); //#9923
    } else { //#9925
        $_.vlf = $a([]); //#9925
    } //#9925
    if (!bwipp_databarexpanded.__9966__) { //#9966
        $_ = Object.create($_); //#9966
        $k[$j++] = Infinity; //#9929
        for (var _6H = 0; _6H <= 119; _6H += 1) { //#9938
            var _6J = $strcpy($s(2), "00"); //#9931
            var _6L = $cvrs($s(2), _6H, 11); //#9931
            $puti(_6J, 2 - _6L.length, _6L); //#9932
            $k[$j++] = _6H; //#9933
            $k[$j++] = _6J; //#9933
            if ($get(_6J, 0) == 65) { //#9933
                var _6N = $k[--$j]; //#9933
                $put(_6N, 0, 94); //#9933
                $k[$j++] = _6N; //#9933
            } //#9933
            var _6O = $k[--$j]; //#9934
            $k[$j++] = _6O; //#9934
            if ($get(_6O, 1) == 65) { //#9934
                var _6Q = $k[--$j]; //#9934
                $put(_6Q, 1, 94); //#9934
                $k[$j++] = _6Q; //#9934
            } //#9934
            var _6R = $k[--$j]; //#9935
            var _6U = $strcpy($s(7), "0000000"); //#9936
            var _6W = $cvrs($s(7), $f($k[--$j] + 8), 2); //#9936
            $puti(_6U, 7 - _6W.length, _6W); //#9937
            $k[$j++] = _6R; //#9937
            $k[$j++] = _6U; //#9937
        } //#9937
        $k[$j++] = $_.lalphanumeric; //#9939
        $k[$j++] = "0000"; //#9939
        $_.numeric = $d(); //#9940
        $k[$j++] = Infinity; //#9942
        for (var _6Z = 48; _6Z <= 57; _6Z += 1) { //#9943
            $k[$j++] = _6Z; //#9943
            $k[$j++] = _6Z - 43; //#9943
            $k[$j++] = 5; //#9943
            $_.tobin(); //#9943
        } //#9943
        $k[$j++] = $_.fnc1; //#9945
        $k[$j++] = "01111"; //#9945
        for (var _6b = 65; _6b <= 90; _6b += 1) { //#9945
            $k[$j++] = _6b; //#9945
            $k[$j++] = _6b - 33; //#9945
            $k[$j++] = 6; //#9945
            $_.tobin(); //#9945
        } //#9945
        $k[$j++] = 42; //#9947
        $k[$j++] = "111010"; //#9947
        for (var _6c = 44; _6c <= 47; _6c += 1) { //#9947
            $k[$j++] = _6c; //#9947
            $k[$j++] = _6c + 15; //#9947
            $k[$j++] = 6; //#9947
            $_.tobin(); //#9947
        } //#9947
        $k[$j++] = $_.lnumeric; //#9949
        $k[$j++] = "000"; //#9949
        $k[$j++] = $_.liso646; //#9949
        $k[$j++] = "00100"; //#9949
        $_.alphanumeric = $d(); //#9950
        $k[$j++] = Infinity; //#9952
        for (var _6g = 48; _6g <= 57; _6g += 1) { //#9953
            $k[$j++] = _6g; //#9953
            $k[$j++] = _6g - 43; //#9953
            $k[$j++] = 5; //#9953
            $_.tobin(); //#9953
        } //#9953
        $k[$j++] = $_.fnc1; //#9955
        $k[$j++] = "01111"; //#9955
        for (var _6i = 65; _6i <= 90; _6i += 1) { //#9955
            $k[$j++] = _6i; //#9955
            $k[$j++] = _6i - 1; //#9955
            $k[$j++] = 7; //#9955
            $_.tobin(); //#9955
        } //#9955
        for (var _6j = 97; _6j <= 122; _6j += 1) { //#9956
            $k[$j++] = _6j; //#9956
            $k[$j++] = _6j - 7; //#9956
            $k[$j++] = 7; //#9956
            $_.tobin(); //#9956
        } //#9956
        $k[$j++] = 33; //#9959
        $k[$j++] = "11101000"; //#9959
        $k[$j++] = 34; //#9959
        $k[$j++] = "11101001"; //#9959
        for (var _6k = 37; _6k <= 47; _6k += 1) { //#9959
            $k[$j++] = _6k; //#9959
            $k[$j++] = _6k + 197; //#9959
            $k[$j++] = 8; //#9959
            $_.tobin(); //#9959
        } //#9959
        for (var _6l = 58; _6l <= 63; _6l += 1) { //#9960
            $k[$j++] = _6l; //#9960
            $k[$j++] = _6l + 187; //#9960
            $k[$j++] = 8; //#9960
            $_.tobin(); //#9960
        } //#9960
        $k[$j++] = 95; //#9964
        $k[$j++] = "11111011"; //#9964
        $k[$j++] = 32; //#9964
        $k[$j++] = "11111100"; //#9964
        $k[$j++] = $_.lnumeric; //#9964
        $k[$j++] = "000"; //#9964
        $k[$j++] = $_.lalphanumeric; //#9964
        $k[$j++] = "00100"; //#9964
        $_.iso646 = $d(); //#9965
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#9965
        bwipp_databarexpanded.__9966__ = 1; //#9965
        $_ = Object.getPrototypeOf($_); //#9965
    } //#9965
    for (var _6s = 0, _6r = $_.ais.length - 1; _6s <= _6r; _6s += 1) { //#9984
        $_.i = _6s; //#9970
        $_.ai = $get($_.ais, $_.i); //#9971
        $_.val = $get($_.vals, $_.i); //#9972
        var _72 = $a(($_.gpf.length + $_.ai.length) + $_.val.length); //#9973
        $puti(_72, 0, $_.gpf); //#9974
        $k[$j++] = _72; //#9975
        $k[$j++] = _72; //#9975
        $k[$j++] = $_.gpf.length; //#9975
        $k[$j++] = $_.ai; //#9975
        $k[$j++] = Infinity; //#9975
        var _76 = $k[--$j]; //#9975
        var _77 = $k[--$j]; //#9975
        $k[$j++] = _76; //#9975
        $forall(_77); //#9975
        var _78 = $a(); //#9975
        var _79 = $k[--$j]; //#9975
        $puti($k[--$j], _79, _78); //#9975
        var _7B = $k[--$j]; //#9976
        $k[$j++] = _7B; //#9976
        $k[$j++] = _7B; //#9976
        $k[$j++] = $_.gpf.length + $_.ai.length; //#9976
        $k[$j++] = $_.val; //#9976
        $k[$j++] = Infinity; //#9976
        var _7F = $k[--$j]; //#9976
        var _7G = $k[--$j]; //#9976
        $k[$j++] = _7F; //#9976
        $forall(_7G); //#9976
        var _7H = $a(); //#9976
        var _7I = $k[--$j]; //#9976
        $puti($k[--$j], _7I, _7H); //#9976
        $_.gpf = $k[--$j]; //#9977
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#9983
            var _7R = $a($_.gpf.length + 1); //#9979
            $puti(_7R, 0, $_.gpf); //#9980
            $put(_7R, $_.gpf.length, $_.fnc1); //#9981
            $_.gpf = _7R; //#9982
        } //#9982
    } //#9982
    $_.rembits = function() {
        var _7V = $k[--$j]; //#9988
        var _7W = 48; //#9990
        var _7X = (~~Math.ceil(_7V / 12)) * 12; //#9990
        if (((~~Math.ceil(_7V / 12)) * 12) < 48) { //#9990
            var _ = _7W; //#9990
            _7W = _7X; //#9990
            _7X = _; //#9990
        } //#9990
        var _7Y = ~~(_7X / 12); //#9991
        $k[$j++] = _7V; //#9995
        $k[$j++] = _7X; //#9995
        $k[$j++] = _7Y; //#9995
        if ((_7Y % $_.segments) == 1) { //#9994
            var _7a = $k[--$j]; //#9992
            var _7b = $k[--$j]; //#9992
            $k[$j++] = $f(_7a + 1) * 12; //#9992
            $k[$j++] = _7b; //#9992
            $j--; //#9992
        } else { //#9994
            $j--; //#9994
        } //#9994
        var _7c = $k[--$j]; //#9996
        var _7d = $k[--$j]; //#9996
        $k[$j++] = $f(_7c - _7d); //#9996
    }; //#9996
    $_.encode = function() {
        var _7e = $k[--$j]; //#10000
        $k[$j++] = _7e; //#10000
        if ($ne(_7e, 'raw')) { //#10000
            var _7f = $k[--$j]; //#10000
            var _7h = $get(_7f, $k[--$j]); //#10000
            $k[$j++] = _7h; //#10000
        } else { //#10000
            $j--; //#10000
        } //#10000
        var _7i = $k[--$j]; //#10001
        $k[$j++] = _7i; //#10003
        if ((_7i.length + $_.j) >= 252) { //#10003
            $j--; //#10002
            $k[$j++] = 'bwipp.gs1databarexpandedTooLong#10002'; //#10002
            $k[$j++] = "Maximum length exceeded"; //#10002
            bwipp_raiseerror(); //#10002
        } //#10002
        $k[$j++] = Infinity; //#10004
        var _7k = $k[--$j]; //#10004
        var _7l = $k[--$j]; //#10004
        $k[$j++] = _7k; //#10004
        $forall(_7l, function() { //#10004
            var _7m = $k[--$j]; //#10004
            $k[$j++] = $f(_7m - 48); //#10004
        }); //#10004
        var _7n = $a(); //#10004
        $puti($_.gpfenc, $_.j, _7n); //#10006
        $_.j = _7n.length + $_.j; //#10007
    }; //#10007
    $k[$j++] = Infinity; //#10011
    for (var _7s = 0, _7t = $_.gpf.length; _7s < _7t; _7s++) { //#10011
        $k[$j++] = 0; //#10011
    } //#10011
    $k[$j++] = 0; //#10011
    $k[$j++] = -1; //#10011
    $_.numericruns = $a(); //#10011
    $k[$j++] = Infinity; //#10012
    for (var _7w = 0, _7x = $_.gpf.length; _7w < _7x; _7w++) { //#10012
        $k[$j++] = 0; //#10012
    } //#10012
    $k[$j++] = 0; //#10012
    $_.alphanumericruns = $a(); //#10012
    $k[$j++] = Infinity; //#10013
    for (var _80 = 0, _81 = $_.gpf.length; _80 < _81; _80++) { //#10013
        $k[$j++] = 0; //#10013
    } //#10013
    $k[$j++] = 9999; //#10013
    $_.nextiso646only = $a(); //#10013
    for (var _84 = $_.gpf.length - 1; _84 >= 0; _84 -= 1) { //#10035
        $_.i = _84; //#10015
        var _89 = $strcpy($s(2), "00"); //#10017
        var _8C = $get($_.gpf, $_.i); //#10018
        $k[$j++] = $get($_.gpf, $_.i); //#10018
        $k[$j++] = _89; //#10018
        $k[$j++] = _89; //#10018
        $k[$j++] = 0; //#10018
        $k[$j++] = _8C; //#10018
        if (_8C == $_.fnc1) { //#10018
            $j--; //#10018
            $k[$j++] = 94; //#10018
        } //#10018
        var _8E = $k[--$j]; //#10018
        var _8F = $k[--$j]; //#10018
        $put($k[--$j], _8F, _8E); //#10018
        if ($_.i < ($_.gpf.length - 1)) { //#10019
            var _8J = $k[--$j]; //#10019
            var _8M = $get($_.gpf, $_.i + 1); //#10019
            $k[$j++] = _8J; //#10019
            $k[$j++] = _8J; //#10019
            $k[$j++] = 1; //#10019
            $k[$j++] = _8M; //#10019
            if (_8M == $_.fnc1) { //#10019
                $j--; //#10019
                $k[$j++] = 94; //#10019
            } //#10019
            var _8O = $k[--$j]; //#10019
            var _8P = $k[--$j]; //#10019
            $put($k[--$j], _8P, _8O); //#10019
        } //#10019
        var _8T = $get($_.numeric, $k[--$j]) !== undefined; //#10020
        if (_8T) { //#10023
            $put($_.numericruns, $_.i, $f($get($_.numericruns, $_.i + 2) + 2)); //#10021
        } else { //#10023
            $put($_.numericruns, $_.i, 0); //#10023
        } //#10023
        var _8b = $k[--$j]; //#10025
        var _8d = $get($_.alphanumeric, _8b) !== undefined; //#10025
        $k[$j++] = _8b; //#10029
        if (_8d) { //#10028
            $put($_.alphanumericruns, $_.i, $f($get($_.alphanumericruns, $_.i + 1) + 1)); //#10026
        } else { //#10028
            $put($_.alphanumericruns, $_.i, 0); //#10028
        } //#10028
        var _8l = $k[--$j]; //#10030
        var _8n = $get($_.iso646, _8l) !== undefined; //#10030
        var _8p = $get($_.alphanumeric, _8l) !== undefined; //#10030
        if (_8n && (!_8p)) { //#10033
            $put($_.nextiso646only, $_.i, 0); //#10031
        } else { //#10033
            $put($_.nextiso646only, $_.i, $f($get($_.nextiso646only, $_.i + 1) + 1)); //#10033
        } //#10033
    } //#10033
    $_.gpfenc = $a(252); //#10038
    $_.i = 0; //#10039
    $_.j = 0; //#10039
    $_.mode = "numeric"; //#10039
    for (;;) { //#10129
        if ($_.i == $_.gpf.length) { //#10041
            break; //#10041
        } //#10041
        for (;;) { //#10128
            if ($eq($_.mode, "numeric")) { //#10077
                if ($_.i <= ($_.gpf.length - 2)) { //#10074
                    var _93 = $s(2); //#10046
                    var _96 = $get($_.gpf, $_.i); //#10047
                    $k[$j++] = _93; //#10047
                    $k[$j++] = _93; //#10047
                    $k[$j++] = 0; //#10047
                    $k[$j++] = _96; //#10047
                    if (_96 == $_.fnc1) { //#10047
                        $j--; //#10047
                        $k[$j++] = 94; //#10047
                    } //#10047
                    var _98 = $k[--$j]; //#10047
                    var _99 = $k[--$j]; //#10047
                    $put($k[--$j], _99, _98); //#10047
                    var _9B = $k[--$j]; //#10048
                    var _9E = $get($_.gpf, $_.i + 1); //#10048
                    $k[$j++] = _9B; //#10048
                    $k[$j++] = _9B; //#10048
                    $k[$j++] = 1; //#10048
                    $k[$j++] = _9E; //#10048
                    if (_9E == $_.fnc1) { //#10048
                        $j--; //#10048
                        $k[$j++] = 94; //#10048
                    } //#10048
                    var _9G = $k[--$j]; //#10048
                    var _9H = $k[--$j]; //#10048
                    $put($k[--$j], _9H, _9G); //#10048
                    var _9J = $k[--$j]; //#10049
                    var _9L = $get($_.numeric, _9J) !== undefined; //#10049
                    $k[$j++] = _9J; //#10053
                    if (_9L) { //#10053
                        $k[$j++] = $_.numeric; //#10050
                        $_.encode(); //#10050
                        $_.i = $_.i + 2; //#10051
                        break; //#10052
                    } //#10052
                    $j--; //#10054
                    $k[$j++] = $_.lalphanumeric; //#10055
                    $k[$j++] = $_.numeric; //#10055
                    $_.encode(); //#10055
                    $_.mode = "alphanumeric"; //#10056
                    break; //#10057
                } else { //#10074
                    var _9S = $get($_.gpf, $_.i); //#10059
                    if ((_9S < 48) || (_9S > 57)) { //#10063
                        $k[$j++] = $_.lalphanumeric; //#10060
                        $k[$j++] = $_.numeric; //#10060
                        $_.encode(); //#10060
                        $_.mode = "alphanumeric"; //#10061
                        break; //#10062
                    } //#10062
                    $k[$j++] = 'rem'; //#10064
                    $k[$j++] = ((((12 + 1) + $_.method.length) + $_.vlf.length) + $_.cdf.length) + $_.j; //#10064
                    $_.rembits(); //#10064
                    var _9Z = $k[--$j]; //#10064
                    $_[$k[--$j]] = _9Z; //#10064
                    if (($_.rem >= 4) && ($_.rem <= 6)) { //#10074
                        var _9g = $geti($strcpy($s(6), "000000"), 0, $_.rem); //#10066
                        var _9l = $cvrs($s(4), $f($get($_.gpf, $_.i) - 47), 2); //#10067
                        $puti(_9g, 4 - _9l.length, _9l); //#10068
                        $k[$j++] = _9g; //#10068
                        $k[$j++] = 'raw'; //#10068
                        $_.encode(); //#10068
                        $_.i = $_.i + 1; //#10069
                        break; //#10070
                    } else { //#10074
                        var _9n = $s(2); //#10072
                        $put(_9n, 0, $get($_.gpf, $_.i)); //#10072
                        $put(_9n, 1, 94); //#10072
                        $k[$j++] = _9n; //#10072
                        $k[$j++] = $_.numeric; //#10072
                        $_.encode(); //#10072
                        $_.i = $_.i + 1; //#10073
                        break; //#10074
                    } //#10074
                } //#10074
            } //#10074
            if ($eq($_.mode, "alphanumeric")) { //#10104
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#10085
                    $k[$j++] = $_.fnc1; //#10081
                    $k[$j++] = $_.alphanumeric; //#10081
                    $_.encode(); //#10081
                    $_.mode = "numeric"; //#10082
                    $_.i = $_.i + 1; //#10083
                    break; //#10084
                } //#10084
                var _A3 = $get($_.gpf, $_.i); //#10086
                var _A5 = $get($_.iso646, _A3) !== undefined; //#10086
                var _A7 = $get($_.alphanumeric, _A3) !== undefined; //#10086
                if (_A5 && (!_A7)) { //#10090
                    $k[$j++] = $_.liso646; //#10087
                    $k[$j++] = $_.alphanumeric; //#10087
                    $_.encode(); //#10087
                    $_.mode = "iso646"; //#10088
                    break; //#10089
                } //#10089
                if ($get($_.numericruns, $_.i) >= 6) { //#10095
                    $k[$j++] = $_.lnumeric; //#10092
                    $k[$j++] = $_.alphanumeric; //#10092
                    $_.encode(); //#10092
                    $_.mode = "numeric"; //#10093
                    break; //#10094
                } //#10094
                var _AH = $get($_.numericruns, $_.i); //#10096
                if ((_AH >= 4) && ($f(_AH + $_.i) == $_.gpf.length)) { //#10100
                    $k[$j++] = $_.lnumeric; //#10097
                    $k[$j++] = $_.alphanumeric; //#10097
                    $_.encode(); //#10097
                    $_.mode = "numeric"; //#10098
                    break; //#10099
                } //#10099
                $k[$j++] = $get($_.gpf, $_.i); //#10101
                $k[$j++] = $_.alphanumeric; //#10101
                $_.encode(); //#10101
                $_.i = $_.i + 1; //#10102
                break; //#10103
            } //#10103
            if ($eq($_.mode, "iso646")) { //#10126
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#10112
                    $k[$j++] = $_.fnc1; //#10108
                    $k[$j++] = $_.iso646; //#10108
                    $_.encode(); //#10108
                    $_.mode = "numeric"; //#10109
                    $_.i = $_.i + 1; //#10110
                    break; //#10111
                } //#10111
                if (($get($_.numericruns, $_.i) >= 4) && ($get($_.nextiso646only, $_.i) >= 10)) { //#10117
                    $k[$j++] = $_.lnumeric; //#10114
                    $k[$j++] = $_.iso646; //#10114
                    $_.encode(); //#10114
                    $_.mode = "numeric"; //#10115
                    break; //#10116
                } //#10116
                if (($get($_.alphanumericruns, $_.i) >= 5) && ($get($_.nextiso646only, $_.i) >= 10)) { //#10122
                    $k[$j++] = $_.lalphanumeric; //#10119
                    $k[$j++] = $_.iso646; //#10119
                    $_.encode(); //#10119
                    $_.mode = "alphanumeric"; //#10120
                    break; //#10121
                } //#10121
                $k[$j++] = $get($_.gpf, $_.i); //#10123
                $k[$j++] = $_.iso646; //#10123
                $_.encode(); //#10123
                $_.i = $_.i + 1; //#10124
                break; //#10125
            } //#10125
        } //#10125
    } //#10125
    $_.gpf = $geti($_.gpfenc, 0, $_.j); //#10130
    var _B1 = ((((1 + 12) + $_.method.length) + $_.vlf.length) + $_.cdf.length) + $_.gpf.length; //#10134
    $k[$j++] = _B1; //#10134
    $k[$j++] = _B1; //#10134
    $_.rembits(); //#10134
    var _B2 = $k[--$j]; //#10134
    $_.pad = $a(_B2); //#10134
    $k[$j++] = _B2; //#10141
    if ($_.vlf.length != 0) { //#10140
        var _B5 = $k[--$j]; //#10136
        var _B7 = ~~($f($k[--$j] + _B5) / 12); //#10137
        $put($_.vlf, 0, _B7 % 2); //#10137
        var _B9 = (_B7 <= 14) ? 0 : 1; //#10138
        $put($_.vlf, 1, _B9); //#10138
    } else { //#10140
        $j -= 2; //#10140
    } //#10140
    if ($_.pad.length > 0) { //#10150
        for (var _BE = 0, _BD = $_.pad.length - 1; _BE <= _BD; _BE += 5) { //#10146
            $_.i = _BE; //#10144
            var _BF = $_.pad; //#10145
            var _BG = $_.i; //#10145
            var _BH = $a([0, 0, 1, 0, 0]); //#10145
            var _BI = $_.pad; //#10145
            var _BJ = $_.i; //#10145
            var _BK = 5; //#10145
            var _BL = _BI.length - _BJ; //#10145
            if ((_BI.length - _BJ) > 5) { //#10145
                var _ = _BK; //#10145
                _BK = _BL; //#10145
                _BL = _; //#10145
            } //#10145
            $puti(_BF, _BG, $geti(_BH, 0, _BL)); //#10145
        } //#10145
        if ($eq($_.mode, "numeric")) { //#10149
            $k[$j++] = Infinity; //#10148
            $k[$j++] = 0; //#10148
            $k[$j++] = 0; //#10148
            $k[$j++] = 0; //#10148
            $k[$j++] = 0; //#10148
            $aload($_.pad); //#10148
            $_.pad = $geti($a(), 0, $_.pad.length); //#10148
        } //#10148
    } //#10148
    $k[$j++] = Infinity; //#10153
    var _BT = $_.linkage ? 1 : 0; //#10154
    $k[$j++] = _BT; //#10155
    $forall($_.method, function() { //#10155
        var _BV = $k[--$j]; //#10155
        $k[$j++] = $f(_BV - 48); //#10155
    }); //#10155
    $aload($_.vlf); //#10156
    $aload($_.cdf); //#10157
    $aload($_.gpf); //#10158
    $aload($_.pad); //#10159
    $_.binval = $a(); //#10159
    $_.datalen = ~~($_.binval.length / 12); //#10161
    $_.ncr = function() {
        var _Bc = $k[--$j]; //#10164
        var _Bd = $k[--$j]; //#10164
        var _Be = $f(_Bd - _Bc); //#10164
        if (_Bc < $f(_Bd - _Bc)) { //#10164
            var _ = _Be; //#10164
            _Be = _Bc; //#10164
            _Bc = _; //#10164
        } //#10164
        $k[$j++] = _Be; //#10171
        $k[$j++] = 1; //#10171
        $k[$j++] = 1; //#10171
        for (var _Bg = _Bd, _Bf = $f(_Bc + 1); _Bg >= _Bf; _Bg -= 1) { //#10171
            var _Bh = $k[--$j]; //#10167
            var _Bi = $k[--$j]; //#10168
            var _Bj = $k[--$j]; //#10168
            $k[$j++] = _Bj; //#10170
            $k[$j++] = _Bi; //#10170
            $k[$j++] = _Bh * _Bg; //#10170
            if ($le(_Bi, _Bj)) { //#10170
                var _Bk = $k[--$j]; //#10169
                var _Bl = $k[--$j]; //#10169
                $k[$j++] = $f(_Bl + 1); //#10169
                $k[$j++] = ~~(_Bk / _Bl); //#10169
            } //#10169
        } //#10169
        for (;;) { //#10175
            var _Bm = $k[--$j]; //#10173
            var _Bn = $k[--$j]; //#10173
            var _Bo = $k[--$j]; //#10173
            $k[$j++] = _Bo; //#10173
            $k[$j++] = _Bn; //#10173
            $k[$j++] = _Bm; //#10173
            if ($gt(_Bn, _Bo)) { //#10173
                break; //#10173
            } //#10173
            var _Bp = $k[--$j]; //#10174
            var _Bq = $k[--$j]; //#10174
            $k[$j++] = $f(_Bq + 1); //#10174
            $k[$j++] = ~~(_Bp / _Bq); //#10174
        } //#10174
        var _Br = $k[--$j]; //#10176
        var _Bs = $k[--$j]; //#10176
        $k[$j++] = _Br; //#10176
        $k[$j++] = _Bs; //#10176
        $j--; //#10176
        var _Bt = $k[--$j]; //#10176
        var _Bu = $k[--$j]; //#10176
        $k[$j++] = _Bt; //#10176
        $k[$j++] = _Bu; //#10176
        $j--; //#10176
    }; //#10176
    $_.getRSSwidths = function() {
        $_.oe = $k[--$j]; //#10180
        $_.el = $k[--$j]; //#10181
        $_.mw = $k[--$j]; //#10182
        $_.nm = $k[--$j]; //#10183
        $_.val = $k[--$j]; //#10184
        $_.out = $a($_.el); //#10185
        $_.mask = 0; //#10186
        for (var _C4 = 0, _C3 = $f($_.el - 2); _C4 <= _C3; _C4 += 1) { //#10213
            $_.bar = _C4; //#10188
            $_.ew = 1; //#10189
            var _C6 = $_.bar; //#10190
            $_.mask = $_.mask | ((_C6 < 0 ? 1 >>> -_C6 : 1 << _C6)); //#10190
            for (;;) { //#10209
                $k[$j++] = 'sval'; //#10191
                $k[$j++] = $f($f($_.nm - $_.ew) - 1); //#10191
                $k[$j++] = $f($f($_.el - $_.bar) - 2); //#10191
                $_.ncr(); //#10191
                var _CB = $k[--$j]; //#10191
                $_[$k[--$j]] = _CB; //#10191
                if (($_.oe && ($_.mask == 0)) && (($f(($f($f($_.nm - $_.ew) - ($_.el * 2))) + ($_.bar * 2))) >= -2)) { //#10194
                    $k[$j++] = 'sval'; //#10193
                    $k[$j++] = $_.sval; //#10193
                    $k[$j++] = $f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar); //#10193
                    $k[$j++] = $f($f($_.el - $_.bar) - 2); //#10193
                    $_.ncr(); //#10193
                    var _CQ = $k[--$j]; //#10193
                    var _CR = $k[--$j]; //#10193
                    $_[$k[--$j]] = $f(_CR - _CQ); //#10193
                } //#10193
                if ($f($_.el - $_.bar) > 2) { //#10203
                    $_.lval = 0; //#10196
                    for (var _Cb = $f(($f(($f($f($_.nm - $_.ew) - $_.el)) + $_.bar)) + 2), _Ca = $f($_.mw + 1); _Cb >= _Ca; _Cb -= 1) { //#10200
                        $k[$j++] = $f(($f($f($_.nm - _Cb) - $_.ew)) - 1); //#10198
                        $k[$j++] = $f($f($_.el - $_.bar) - 3); //#10198
                        $_.ncr(); //#10198
                        $_.lval = $f($k[--$j] + $_.lval); //#10199
                    } //#10199
                    $_.sval = $f($_.sval - ($_.lval * ($f($f($_.el - $_.bar) - 1)))); //#10201
                } else { //#10203
                    if ($f($_.nm - $_.ew) > $_.mw) { //#10203
                        $_.sval = $f($_.sval - 1); //#10203
                    } //#10203
                } //#10203
                $_.val = $f($_.val - $_.sval); //#10205
                if ($_.val < 0) { //#10206
                    break; //#10206
                } //#10206
                $_.ew = $_.ew + 1; //#10207
                var _Cv = $_.bar; //#10208
                $_.mask = $_.mask & (~((_Cv < 0 ? 1 >>> -_Cv : 1 << _Cv))); //#10208
            } //#10208
            $_.val = $f($_.val + $_.sval); //#10210
            $_.nm = $f($_.nm - $_.ew); //#10211
            $put($_.out, $_.bar, $_.ew); //#10212
        } //#10212
        $put($_.out, $f($_.el - 1), $_.nm); //#10214
        $k[$j++] = $_.out; //#10215
    }; //#10215
    if (!bwipp_databarexpanded.__10226__) { //#10226
        $_ = Object.create($_); //#10226
        $_.tab174 = $a([347, 0, 12, 5, 7, 2, 87, 4, 1387, 348, 10, 7, 5, 4, 52, 20, 2947, 1388, 8, 9, 4, 5, 30, 52, 3987, 2948, 6, 11, 3, 6, 10, 104, 4191, 3988, 4, 13, 1, 8, 1, 204]); //#10225
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#10225
        bwipp_databarexpanded.__10226__ = 1; //#10225
        $_ = Object.getPrototypeOf($_); //#10225
    } //#10225
    $_.dxw = $a($_.datalen); //#10228
    for (var _DD = 0, _DC = $_.datalen - 1; _DD <= _DC; _DD += 1) { //#10269
        $_.x = _DD; //#10232
        $_.d = $geti($_.binval, $_.x * 12, 12); //#10234
        $k[$j++] = 'd'; //#10235
        $k[$j++] = 0; //#10235
        for (var _DH = 0; _DH <= 11; _DH += 1) { //#10235
            $_.j = _DH; //#10235
            var _DM = $k[--$j]; //#10235
            $k[$j++] = $f(_DM + ((~~Math.pow(2, 11 - $_.j)) * $get($_.d, $_.j))); //#10235
        } //#10235
        var _DN = $k[--$j]; //#10235
        $_[$k[--$j]] = _DN; //#10235
        $_.j = 0; //#10237
        for (;;) { //#10247
            if ($le($_.d, $get($_.tab174, $_.j))) { //#10245
                $aload($geti($_.tab174, $_.j + 1, 7)); //#10239
                $_.dte = $k[--$j]; //#10240
                $_.dto = $k[--$j]; //#10240
                $_.dmwe = $k[--$j]; //#10241
                $_.dmwo = $k[--$j]; //#10241
                $_.dele = $k[--$j]; //#10242
                $_.delo = $k[--$j]; //#10242
                $_.dgs = $k[--$j]; //#10243
                break; //#10244
            } //#10244
            $_.j = $_.j + 8; //#10246
        } //#10246
        $k[$j++] = 'dwo'; //#10249
        $k[$j++] = ~~($f($_.d - $_.dgs) / $_.dte); //#10249
        $k[$j++] = $_.delo; //#10249
        $k[$j++] = $_.dmwo; //#10249
        $k[$j++] = 4; //#10249
        $k[$j++] = true; //#10249
        $_.getRSSwidths(); //#10249
        var _Dj = $k[--$j]; //#10249
        $_[$k[--$j]] = _Dj; //#10249
        $k[$j++] = 'dwe'; //#10250
        $k[$j++] = $f($_.d - $_.dgs) % $_.dte; //#10250
        $k[$j++] = $_.dele; //#10250
        $k[$j++] = $_.dmwe; //#10250
        $k[$j++] = 4; //#10250
        $k[$j++] = false; //#10250
        $_.getRSSwidths(); //#10250
        var _Dq = $k[--$j]; //#10250
        $_[$k[--$j]] = _Dq; //#10250
        $_.dw = $a(8); //#10252
        if (($_.x % 2) == 0) { //#10263
            for (var _Du = 0; _Du <= 3; _Du += 1) { //#10258
                $_.j = _Du; //#10255
                $put($_.dw, 7 - ($_.j * 2), $get($_.dwo, $_.j)); //#10256
                $put($_.dw, 6 - ($_.j * 2), $get($_.dwe, $_.j)); //#10257
            } //#10257
        } else { //#10263
            for (var _E5 = 0; _E5 <= 3; _E5 += 1) { //#10264
                $_.j = _E5; //#10261
                $put($_.dw, $_.j * 2, $get($_.dwo, $_.j)); //#10262
                $put($_.dw, ($_.j * 2) + 1, $get($_.dwe, $_.j)); //#10263
            } //#10263
        } //#10263
        $put($_.dxw, $_.x, $_.dw); //#10267
    } //#10267
    if (!bwipp_databarexpanded.__10293__) { //#10293
        $_ = Object.create($_); //#10293
        $_.finderwidths = $a([1, 8, 4, 1, 1, 1, 1, 4, 8, 1, 3, 6, 4, 1, 1, 1, 1, 4, 6, 3, 3, 4, 6, 1, 1, 1, 1, 6, 4, 3, 3, 2, 8, 1, 1, 1, 1, 8, 2, 3, 2, 6, 5, 1, 1, 1, 1, 5, 6, 2, 2, 2, 9, 1, 1, 1, 1, 9, 2, 2]); //#10279
        $_.finderseq = $a([$a([0, 1]), $a([0, 3, 2]), $a([0, 5, 2, 7]), $a([0, 9, 2, 7, 4]), $a([0, 9, 2, 7, 6, 11]), $a([0, 9, 2, 7, 8, 11, 10]), $a([0, 1, 2, 3, 4, 5, 6, 7]), $a([0, 1, 2, 3, 4, 5, 6, 9, 8]), $a([0, 1, 2, 3, 4, 5, 6, 9, 10, 11]), $a([0, 1, 2, 3, 4, 7, 6, 9, 8, 11, 10])]); //#10292
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#10292
        bwipp_databarexpanded.__10293__ = 1; //#10292
        $_ = Object.getPrototypeOf($_); //#10292
    } //#10292
    $_.seq = $get($_.finderseq, ~~(($_.datalen - 2) / 2)); //#10295
    $_.fxw = $a($_.seq.length); //#10296
    for (var _Ed = 0, _Ec = $_.seq.length - 1; _Ed <= _Ec; _Ed += 1) { //#10300
        $_.x = _Ed; //#10298
        $put($_.fxw, $_.x, $geti($_.finderwidths, $get($_.seq, $_.x) * 5, 5)); //#10299
    } //#10299
    if (!bwipp_databarexpanded.__10329__) { //#10329
        $_ = Object.create($_); //#10329
        $_.checkweights = $a([-1, -1, -1, -1, -1, -1, -1, -1, 77, 96, 32, 81, 27, 9, 3, 1, 20, 60, 180, 118, 143, 7, 21, 63, 205, 209, 140, 117, 39, 13, 145, 189, 193, 157, 49, 147, 19, 57, 171, 91, 132, 44, 85, 169, 197, 136, 186, 62, 185, 133, 188, 142, 4, 12, 36, 108, 50, 87, 29, 80, 97, 173, 128, 113, 150, 28, 84, 41, 123, 158, 52, 156, 166, 196, 206, 139, 187, 203, 138, 46, 76, 17, 51, 153, 37, 111, 122, 155, 146, 119, 110, 107, 106, 176, 129, 43, 16, 48, 144, 10, 30, 90, 59, 177, 164, 125, 112, 178, 200, 137, 116, 109, 70, 210, 208, 202, 184, 130, 179, 115, 190, 204, 68, 93, 31, 151, 191, 134, 148, 22, 66, 198, 172, 94, 71, 2, 40, 154, 192, 64, 162, 54, 18, 6, 120, 149, 25, 75, 14, 42, 126, 167, 175, 199, 207, 69, 23, 78, 26, 79, 103, 98, 83, 38, 114, 131, 182, 124, 159, 53, 88, 170, 127, 183, 61, 161, 55, 165, 73, 8, 24, 72, 5, 15, 89, 100, 174, 58, 160, 194, 135, 45]); //#10328
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_databarexpanded.$ctx[id] = $_[id]); //#10328
        bwipp_databarexpanded.__10329__ = 1; //#10328
        $_ = Object.getPrototypeOf($_); //#10328
    } //#10328
    $k[$j++] = Infinity; //#10331
    $forall($_.seq, function() { //#10332
        $aload($geti($_.checkweights, $k[--$j] * 16, 16)); //#10332
    }); //#10332
    var _Er = $a(); //#10332
    $_.checkweightseq = $geti(_Er, 8, _Er.length - 8); //#10333
    $k[$j++] = Infinity; //#10335
    var _Et = $_.dxw; //#10336
    for (var _Eu = 0, _Ev = _Et.length; _Eu < _Ev; _Eu++) { //#10336
        $aload($get(_Et, _Eu)); //#10336
    } //#10336
    $_.widths = $a(); //#10336
    $_.checksum = 0; //#10339
    for (var _F0 = 0, _Ez = $_.widths.length - 1; _F0 <= _Ez; _F0 += 1) { //#10343
        $_.i = _F0; //#10341
        $_.checksum = $f($_.checksum + ($get($_.widths, $_.i) * $get($_.checkweightseq, $_.i))); //#10342
    } //#10342
    $_.checksum = $f(($_.checksum % 211) + (($_.datalen - 3) * 211)); //#10344
    $_.i = 0; //#10346
    for (;;) { //#10356
        if ($_.checksum <= $get($_.tab174, $_.i)) { //#10354
            $aload($geti($_.tab174, $_.i + 1, 7)); //#10348
            $_.cte = $k[--$j]; //#10349
            $_.cto = $k[--$j]; //#10349
            $_.cmwe = $k[--$j]; //#10350
            $_.cmwo = $k[--$j]; //#10350
            $_.cele = $k[--$j]; //#10351
            $_.celo = $k[--$j]; //#10351
            $_.cgs = $k[--$j]; //#10352
            break; //#10353
        } //#10353
        $_.i = $_.i + 8; //#10355
    } //#10355
    $k[$j++] = 'cwo'; //#10358
    $k[$j++] = ~~($f($_.checksum - $_.cgs) / $_.cte); //#10358
    $k[$j++] = $_.celo; //#10358
    $k[$j++] = $_.cmwo; //#10358
    $k[$j++] = 4; //#10358
    $k[$j++] = true; //#10358
    $_.getRSSwidths(); //#10358
    var _FU = $k[--$j]; //#10358
    $_[$k[--$j]] = _FU; //#10358
    $k[$j++] = 'cwe'; //#10359
    $k[$j++] = $f($_.checksum - $_.cgs) % $_.cte; //#10359
    $k[$j++] = $_.cele; //#10359
    $k[$j++] = $_.cmwe; //#10359
    $k[$j++] = 4; //#10359
    $k[$j++] = false; //#10359
    $_.getRSSwidths(); //#10359
    var _Fb = $k[--$j]; //#10359
    $_[$k[--$j]] = _Fb; //#10359
    $_.cw = $a(8); //#10361
    for (var _Fe = 0; _Fe <= 3; _Fe += 1) { //#10366
        $_.i = _Fe; //#10363
        $put($_.cw, $_.i * 2, $get($_.cwo, $_.i)); //#10364
        $put($_.cw, ($_.i * 2) + 1, $get($_.cwe, $_.i)); //#10365
    } //#10365
    var _Fp = $a(22); //#10368
    $put(_Fp, 0, $_.cw); //#10369
    $puti(_Fp, 1, $_.dxw); //#10369
    $_.dxw = $geti(_Fp, 0, $_.datalen + 1); //#10370
    $_.datalen = $_.dxw.length; //#10371
    $_.rows = $a(~~Math.ceil($_.datalen / $_.segments)); //#10374
    $_.numrows = $_.rows.length; //#10375
    for (var _G1 = 0, _G0 = $_.numrows - 1; _G1 <= _G0; _G1 += 1) { //#10390
        $_.r = _G1; //#10377
        $k[$j++] = Infinity; //#10378
        if ((($_.segments % 4) != 0) && (($_.r % 2) == 1)) { //#10379
            $k[$j++] = 0; //#10379
        } //#10379
        $k[$j++] = 1; //#10387
        $k[$j++] = 1; //#10387
        for (var _G6 = 0, _G5 = $_.segments - 1; _G6 <= _G5; _G6 += 1) { //#10387
            $_.pos = _G6 + ($_.r * $_.segments); //#10382
            if ($_.pos < $_.datalen) { //#10386
                $aload($get($_.dxw, $_.pos)); //#10384
                if (($_.pos % 2) == 0) { //#10385
                    $aload($get($_.fxw, ~~($_.pos / 2))); //#10385
                } //#10385
            } //#10385
        } //#10385
        var _GI = $counttomark() + 2; //#10389
        $k[$j++] = 1; //#10389
        $k[$j++] = 1; //#10389
        $astore($a(_GI)); //#10389
        $put($_.rows, $_.r, $k[--$j]); //#10389
        $j--; //#10389
    } //#10389
    if ($ne($_.format, "expandedstacked")) { //#10522
        var _GP = $get($_.rows, 0); //#10395
        $_.sbs = $geti(_GP, 1, _GP.length - 1); //#10395
        $k[$j++] = Infinity; //#10397
        $k[$j++] = 1; //#10403
        for (var _GT = 0, _GS = $_.datalen - 1; _GT <= _GS; _GT += 1) { //#10403
            $_.i = _GT; //#10400
            $aload($get($_.dxw, $_.i)); //#10401
            if (($_.i % 2) == 0) { //#10402
                $aload($get($_.fxw, ~~($_.i / 2))); //#10402
            } //#10402
        } //#10402
        $k[$j++] = 1; //#10404
        $k[$j++] = 1; //#10404
        $_.sbs = $a(); //#10404
        $k[$j++] = Infinity; //#10407
        var _Gc = $_.sbs; //#10409
        $k[$j++] = Infinity; //#10410
        for (var _Ge = 0, _Gf = ~~(($_.sbs.length + 1) / 2); _Ge < _Gf; _Ge++) { //#10410
            $k[$j++] = $_.height; //#10410
        } //#10410
        var _Gh = $a(); //#10410
        $k[$j++] = Infinity; //#10411
        for (var _Gj = 0, _Gk = ~~(($_.sbs.length + 1) / 2); _Gj < _Gk; _Gj++) { //#10411
            $k[$j++] = 0; //#10411
        } //#10411
        var _Gl = $a(); //#10411
        $k[$j++] = 'ren'; //#10416
        $k[$j++] = 'renlinear'; //#10416
        $k[$j++] = 'sbs'; //#10416
        $k[$j++] = _Gc; //#10416
        $k[$j++] = 'bhs'; //#10416
        $k[$j++] = _Gh; //#10416
        $k[$j++] = 'bbs'; //#10416
        $k[$j++] = _Gl; //#10416
        $k[$j++] = 'borderleft'; //#10416
        $k[$j++] = 0; //#10416
        $k[$j++] = 'borderright'; //#10416
        $k[$j++] = 0; //#10416
        $k[$j++] = 'bordertop'; //#10416
        $k[$j++] = 0; //#10416
        $k[$j++] = 'borderbottom'; //#10416
        $k[$j++] = 0; //#10416
        $k[$j++] = 'opt'; //#10416
        $k[$j++] = $_.options; //#10416
        var _Gn = $d(); //#10416
        $k[$j++] = _Gn; //#10419
        if (!$_.dontdraw) { //#10419
            bwipp_renlinear(); //#10419
        } //#10419
    } else { //#10522
        $_.seps = $a($_.numrows); //#10423
        for (var _Gt = 0, _Gs = $_.numrows - 1; _Gt <= _Gs; _Gt += 1) { //#10479
            $_.r = _Gt; //#10426
            $_.row = $get($_.rows, $_.r); //#10427
            $k[$j++] = Infinity; //#10430
            for (var _Gz = 0, _Gy = $_.row.length - 1; _Gz <= _Gy; _Gz += 2) { //#10435
                $_.i = _Gz; //#10432
                for (var _H3 = 0, _H4 = $get($_.row, $_.i); _H3 < _H4; _H3++) { //#10433
                    $k[$j++] = 0; //#10433
                } //#10433
                if ($_.i < ($_.row.length - 1)) { //#10434
                    for (var _HA = 0, _HB = $get($_.row, $_.i + 1); _HA < _HB; _HA++) { //#10434
                        $k[$j++] = 1; //#10434
                    } //#10434
                } //#10434
            } //#10434
            $astore($a($counttomark())); //#10436
            $_.row = $k[--$j]; //#10436
            $j--; //#10436
            $k[$j++] = Infinity; //#10439
            $forall($_.row, function() { //#10439
                var _HG = $k[--$j]; //#10439
                $k[$j++] = $f(1 - _HG); //#10439
            }); //#10439
            $_.sep = $a(); //#10439
            $k[$j++] = Infinity; //#10440
            for (var _HK = 19, _HJ = $_.row.length - 13; _HK <= _HJ; _HK += 98) { //#10441
                $k[$j++] = _HK; //#10441
            } //#10441
            for (var _HN = 68, _HM = $_.row.length - 13; _HN <= _HM; _HN += 98) { //#10442
                $k[$j++] = _HN; //#10442
            } //#10442
            $_.finderpos = $a(); //#10442
            var _HP = $_.finderpos; //#10444
            for (var _HQ = 0, _HR = _HP.length; _HQ < _HR; _HQ++) { //#10458
                var _HS = $get(_HP, _HQ); //#10458
                for (var _HU = _HS, _HT = $f(_HS + 14); _HU <= _HT; _HU += 1) { //#10457
                    $_.i = _HU; //#10446
                    if ($get($_.row, $_.i) == 0) { //#10454
                        if ($get($_.row, $_.i - 1) == 1) { //#10451
                            $k[$j++] = 1; //#10449
                        } else { //#10451
                            var _He = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#10451
                            $k[$j++] = _He; //#10451
                        } //#10451
                    } else { //#10454
                        $k[$j++] = 0; //#10454
                    } //#10454
                    $put($_.sep, $_.i, $k[--$j]); //#10456
                } //#10456
            } //#10456
            $puti($_.sep, 0, $a([0, 0, 0, 0])); //#10459
            $puti($_.sep, $_.row.length - 4, $a([0, 0, 0, 0])); //#10460
            if ((($_.segments % 4) == 0) && (($_.r % 2) == 1)) { //#10474
                if (($get($_.rows, $_.r).length != $get($_.rows, 0).length) && (($_.finderpos.length % 2) == 1)) { //#10472
                    $k[$j++] = Infinity; //#10466
                    $k[$j++] = 0; //#10466
                    $aload($_.row); //#10466
                    $_.row = $a(); //#10466
                    $k[$j++] = Infinity; //#10467
                    $k[$j++] = 0; //#10467
                    $aload($_.sep); //#10467
                    $_.sep = $a(); //#10467
                } else { //#10472
                    for (var _I0 = $_.row.length - 1; _I0 >= 0; _I0 -= 1) { //#10469
                        $k[$j++] = $get($_.row, _I0); //#10469
                    } //#10469
                    $astore($_.row); //#10470
                    $j--; //#10470
                    for (var _I5 = $_.sep.length - 1; _I5 >= 0; _I5 -= 1) { //#10471
                        $k[$j++] = $get($_.sep, _I5); //#10471
                    } //#10471
                    $astore($_.sep); //#10472
                    $j--; //#10472
                } //#10472
            } //#10472
            $put($_.rows, $_.r, $_.row); //#10476
            $put($_.seps, $_.r, $_.sep); //#10477
        } //#10477
        $_.pixx = $get($_.rows, 0).length; //#10482
        $k[$j++] = Infinity; //#10483
        for (var _II = 0, _IJ = $_.pixx; _II < _IJ; _II++) { //#10483
            $k[$j++] = 0; //#10483
        } //#10483
        var _IK = $a(); //#10483
        $puti(_IK, 0, $get($_.rows, $_.numrows - 1)); //#10483
        $put($_.rows, $_.numrows - 1, _IK); //#10484
        $k[$j++] = Infinity; //#10485
        for (var _IR = 0, _IS = $_.pixx; _IR < _IS; _IR++) { //#10485
            $k[$j++] = 0; //#10485
        } //#10485
        var _IT = $a(); //#10485
        $puti(_IT, 0, $get($_.seps, $_.numrows - 1)); //#10485
        $put($_.seps, $_.numrows - 1, _IT); //#10486
        $k[$j++] = Infinity; //#10489
        for (var _Ia = 0, _Ib = (~~($_.pixx / 2)) + 1; _Ia < _Ib; _Ia++) { //#10489
            $k[$j++] = 0; //#10489
            $k[$j++] = 1; //#10489
        } //#10489
        $_.sep = $geti($a(), 0, $_.pixx); //#10489
        $puti($_.sep, 0, $a([0, 0, 0, 0])); //#10490
        $puti($_.sep, $_.pixx - 4, $a([0, 0, 0, 0])); //#10491
        $k[$j++] = Infinity; //#10494
        for (var _Im = 0, _Il = $_.numrows - 1; _Im <= _Il; _Im += 1) { //#10505
            $_.r = _Im; //#10496
            if ($_.r != 0) { //#10499
                $aload($get($_.seps, $_.r)); //#10498
            } //#10498
            for (var _Is = 0, _It = $_.barxmult; _Is < _It; _Is++) { //#10500
                $aload($get($_.rows, $_.r)); //#10500
            } //#10500
            if ($_.r != ($_.numrows - 1)) { //#10504
                $aload($get($_.seps, $_.r)); //#10502
                $aload($_.sep); //#10503
            } //#10503
        } //#10503
        $_.pixs = $a(); //#10503
        var _JC = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", ~~($_.pixs.length / $_.pixx)],
            ["height", (~~($_.pixs.length / $_.pixx)) / 72],
            ["width", $_.pixx / 72],
            ["borderleft", 0],
            ["borderright", 0],
            ["bordertop", 0],
            ["borderbottom", 0],
            ["opt", $_.options]
        ]); //#10519
        $k[$j++] = _JC; //#10522
        if (!$_.dontdraw) { //#10522
            bwipp_renmatrix(); //#10522
        } //#10522
    } //#10522
    $_ = Object.getPrototypeOf($_); //#10526
    $_ = Object.getPrototypeOf($_); //#10528
} //bwipp_databarexpanded
function bwipp_databarexpandedstacked() {
    $_ = Object.create($_); //#10557
    $_.dontdraw = false; //#10560
    $k[$j++] = $_; //#10562
    bwipp_processoptions(); //#10562
    $_.options = $k[--$j]; //#10562
    $_.barcode = $k[--$j]; //#10563
    $put($_.options, "dontdraw", true); //#10566
    $put($_.options, "format", "expandedstacked"); //#10567
    $k[$j++] = 'args'; //#10569
    $k[$j++] = $_.barcode; //#10569
    $k[$j++] = $_.options; //#10569
    bwipp_databarexpanded(); //#10569
    var _6 = $k[--$j]; //#10569
    $_[$k[--$j]] = _6; //#10569
    $put($_.args, "opt", $_.options); //#10571
    $k[$j++] = $_.args; //#10574
    if (!$_.dontdraw) { //#10574
        bwipp_renmatrix(); //#10574
    } //#10574
    $_ = Object.getPrototypeOf($_); //#10576
} //bwipp_databarexpandedstacked
function bwipp_gs1northamericancoupon() {
    $_ = Object.create($_); //#10606
    $_.dontdraw = false; //#10609
    $_.includetext = false; //#10610
    $_.coupontextfont = "OCR-B"; //#10611
    $_.coupontextsize = 9; //#10612
    $_.coupontextxoffset = null; //#10613
    $_.coupontextyoffset = null; //#10614
    $_.parse = false; //#10615
    $_.dontlint = false; //#10616
    $_.lintreqs = true; //#10617
    $k[$j++] = $_; //#10619
    bwipp_processoptions(); //#10619
    $_.options = $k[--$j]; //#10619
    $_.barcode = $k[--$j]; //#10620
    $k[$j++] = $_.barcode; //#10622
    $k[$j++] = 'ai'; //#10622
    bwipp_gs1process(); //#10622
    $j--; //#10623
    $_.vals = $k[--$j]; //#10624
    $_.ais = $k[--$j]; //#10625
    if ($_.ais.length != 1) { //#10630
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure#10629'; //#10629
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#10629
        bwipp_raiseerror(); //#10629
    } //#10629
    if ($ne($get($_.ais, 0), "8110")) { //#10633
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure#10632'; //#10632
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#10632
        bwipp_raiseerror(); //#10632
    } //#10632
    $_.val = $get($_.vals, 0); //#10636
    $_.vli = $f($get($_.val, 0) - 48); //#10637
    if (($_.vli < 0) || ($_.vli > 6)) { //#10640
        $k[$j++] = 'bwipp.gs1northamericancouponBadVLI#10639'; //#10639
        $k[$j++] = "The AI (8110) data should start with a Company Prefix length indicator in the range 0 to 6"; //#10639
        bwipp_raiseerror(); //#10639
    } //#10639
    $_.gcp = $geti($_.val, 1, $f($_.vli + 6)); //#10641
    $_.cod = $geti($_.val, $f($_.vli + 7), 6); //#10642
    $_.coupontext = $s($_.gcp.length + 7); //#10643
    $puti($_.coupontext, 0, $_.gcp); //#10644
    $puti($_.coupontext, $_.gcp.length, "-"); //#10645
    $puti($_.coupontext, $_.gcp.length + 1, $_.cod); //#10646
    $put($_.options, "dontdraw", true); //#10649
    $k[$j++] = 'args'; //#10651
    $k[$j++] = $_.barcode; //#10651
    $k[$j++] = $_.options; //#10651
    bwipp_databarexpandedstacked(); //#10651
    var _W = $k[--$j]; //#10651
    $_[$k[--$j]] = _W; //#10651
    if ($_.includetext) { //#10670
        if ($eq($_.coupontextxoffset, null)) { //#10657
            $_.coupontextxoffset = 0; //#10656
        } //#10656
        if ($eq($_.coupontextyoffset, null)) { //#10660
            $_.coupontextyoffset = $f(($get($_.args, "height") * 72) + 3); //#10659
        } //#10659
        var _e = $get($_.args, "txt") !== undefined; //#10661
        if (_e) { //#10668
            $_.txt = $get($_.args, "txt"); //#10662
            $_.newtxt = $a($_.txt.length + 1); //#10663
            $puti($_.newtxt, 0, $_.txt); //#10664
            $put($_.newtxt, $_.newtxt.length - 1, $a([$_.coupontext, $_.coupontextxoffset, $_.coupontextyoffset, $_.coupontextfont, $_.coupontextsize])); //#10665
            $put($_.args, "txt", $_.newtxt); //#10666
        } else { //#10668
            $put($_.args, "txt", $a([$a([$_.coupontext, $_.coupontextxoffset, $_.coupontextyoffset, $_.coupontextfont, $_.coupontextsize])])); //#10668
        } //#10668
    } //#10668
    $put($_.args, "opt", $_.options); //#10672
    $k[$j++] = $_.args; //#10675
    if (!$_.dontdraw) { //#10675
        bwipp_renmatrix(); //#10675
    } //#10675
    $_ = Object.getPrototypeOf($_); //#10677
} //bwipp_gs1northamericancoupon
function bwipp_pharmacode() {
    $_ = Object.create($_); //#10705
    $_.dontdraw = false; //#10708
    $_.height = (8 * 2.835) / 72; //#10709
    $_.nwidth = 0.5 * 2.835; //#10710
    $_.wwidth = 1.5 * 2.835; //#10711
    $_.swidth = 1 * 2.835; //#10712
    $k[$j++] = $_; //#10714
    bwipp_processoptions(); //#10714
    $_.options = $k[--$j]; //#10714
    $_.barcode = $k[--$j]; //#10715
    if (($_.barcode.length < 1) || ($_.barcode.length > 6)) { //#10720
        $k[$j++] = 'bwipp.pharmacodeBadLength#10719'; //#10719
        $k[$j++] = "Pharmacode must be 1 to 6 digits"; //#10719
        bwipp_raiseerror(); //#10719
    } //#10719
    $forall($_.barcode, function() { //#10725
        var _5 = $k[--$j]; //#10722
        if ((_5 < 48) || (_5 > 57)) { //#10724
            $k[$j++] = 'bwipp.pharmacodeBadCharacter#10723'; //#10723
            $k[$j++] = "Pharmacode must contain only digits"; //#10723
            bwipp_raiseerror(); //#10723
        } //#10723
    }); //#10723
    var _7 = $cvi($_.barcode); //#10726
    if ((_7 < 3) || (_7 > 131070)) { //#10728
        $k[$j++] = 'bwipp.pharmacodeBadValue#10727'; //#10727
        $k[$j++] = "Pharmacode value must be between 3 and 131070"; //#10727
        bwipp_raiseerror(); //#10727
    } //#10727
    $_.txt = $a($_.barcode.length); //#10731
    for (var _C = 0, _B = $_.barcode.length - 1; _C <= _B; _C += 1) { //#10735
        $_.i = _C; //#10733
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#10734
    } //#10734
    $_.barcode = $cvrs($s(17), $cvi($_.barcode) + 1, 2); //#10738
    $_.barcode = $geti($_.barcode, 1, $_.barcode.length - 1); //#10739
    $_.barlen = $_.barcode.length; //#10741
    $_.sbs = $a($_.barlen * 2); //#10742
    for (var _U = 0, _T = $_.barlen - 1; _U <= _T; _U += 1) { //#10753
        $_.i = _U; //#10745
        $_.enc = $geti($_.barcode, $_.i, 1); //#10746
        if ($eq($_.enc, "0")) { //#10750
            $put($_.sbs, $_.i * 2, $_.nwidth); //#10748
        } else { //#10750
            $put($_.sbs, $_.i * 2, $_.wwidth); //#10750
        } //#10750
        $put($_.sbs, ($_.i * 2) + 1, $_.swidth); //#10752
    } //#10752
    $k[$j++] = Infinity; //#10756
    var _i = $_.sbs; //#10758
    $k[$j++] = Infinity; //#10759
    for (var _k = 0, _l = ~~(($_.sbs.length + 1) / 2); _k < _l; _k++) { //#10759
        $k[$j++] = $_.height; //#10759
    } //#10759
    var _n = $a(); //#10759
    $k[$j++] = Infinity; //#10760
    for (var _p = 0, _q = ~~(($_.sbs.length + 1) / 2); _p < _q; _p++) { //#10760
        $k[$j++] = 0; //#10760
    } //#10760
    var _r = $a(); //#10760
    $k[$j++] = 'ren'; //#10763
    $k[$j++] = 'renlinear'; //#10763
    $k[$j++] = 'sbs'; //#10763
    $k[$j++] = _i; //#10763
    $k[$j++] = 'bhs'; //#10763
    $k[$j++] = _n; //#10763
    $k[$j++] = 'bbs'; //#10763
    $k[$j++] = _r; //#10763
    $k[$j++] = 'txt'; //#10763
    $k[$j++] = $_.txt; //#10763
    $k[$j++] = 'textxalign'; //#10763
    $k[$j++] = "center"; //#10763
    $k[$j++] = 'opt'; //#10763
    $k[$j++] = $_.options; //#10763
    var _u = $d(); //#10763
    $k[$j++] = _u; //#10766
    if (!$_.dontdraw) { //#10766
        bwipp_renlinear(); //#10766
    } //#10766
    $_ = Object.getPrototypeOf($_); //#10768
} //bwipp_pharmacode
function bwipp_pharmacode2() {
    $_ = Object.create($_); //#10796
    $_.dontdraw = false; //#10799
    $_.includetext = false; //#10800
    $_.height = 4; //#10801
    $k[$j++] = $_; //#10803
    bwipp_processoptions(); //#10803
    $_.options = $k[--$j]; //#10803
    $_.barcode = $k[--$j]; //#10804
    if (($_.barcode.length < 1) || ($_.barcode.length > 8)) { //#10809
        $k[$j++] = 'bwipp.pharmacode2BadLength#10808'; //#10808
        $k[$j++] = "Two-track Pharmacode must be 1 to 6 digits"; //#10808
        bwipp_raiseerror(); //#10808
    } //#10808
    $forall($_.barcode, function() { //#10814
        var _5 = $k[--$j]; //#10811
        if ((_5 < 48) || (_5 > 57)) { //#10813
            $k[$j++] = 'bwipp.pharmacode2badCharacter#10812'; //#10812
            $k[$j++] = "Two-track Pharmacode must contain only digits"; //#10812
            bwipp_raiseerror(); //#10812
        } //#10812
    }); //#10812
    var _7 = $cvi($_.barcode); //#10815
    if ((_7 < 4) || (_7 > 64570080)) { //#10817
        $k[$j++] = 'bwipp.pharmacode2badValue#10816'; //#10816
        $k[$j++] = "Two-track Pharmacode value must be between 4 and 64570080"; //#10816
        bwipp_raiseerror(); //#10816
    } //#10816
    $_.txt = $a($_.barcode.length); //#10820
    for (var _C = 0, _B = $_.barcode.length - 1; _C <= _B; _C += 1) { //#10824
        $_.i = _C; //#10822
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#10823
    } //#10823
    $_.encstr = $s(16); //#10826
    $_.sbs = $a(32); //#10827
    $_.bar = (1 / 25.4) * $_.height; //#10828
    $_.spc = (1 / 25.4) * 72; //#10829
    $_.i = 15; //#10832
    $_.val = $cvi($_.barcode); //#10833
    for (;;) { //#10840
        if ($_.val == 0) { //#10835
            break; //#10835
        } //#10835
        var _P = $_.val % 3; //#10836
        $_.val = ~~($f($_.val - $get($a([3, 1, 2]), _P)) / 3); //#10837
        $put($_.encstr, $_.i, $get($a([2, 0, 1]), _P)); //#10838
        $_.i = $_.i - 1; //#10839
    } //#10839
    $_.encstr = $geti($_.encstr, $_.i + 1, 15 - $_.i); //#10841
    $_.bhs = $a($_.encstr.length); //#10844
    $_.bbs = $a($_.encstr.length); //#10845
    for (var _i = 0, _h = $_.encstr.length - 1; _i <= _h; _i += 1) { //#10851
        $_.i = _i; //#10847
        var _l = $get($_.encstr, $_.i); //#10848
        $put($_.bhs, $_.i, $_.bar * $get($a([1, 1, 2]), _l)); //#10849
        $put($_.bbs, $_.i, $get($a([0, $_.bar, 0]), _l)); //#10850
    } //#10850
    $k[$j++] = Infinity; //#10854
    var _w = $_.bhs; //#10856
    var _x = $_.bbs; //#10857
    $k[$j++] = Infinity; //#10858
    for (var _z = 0, _10 = $_.encstr.length * 2; _z < _10; _z++) { //#10858
        $k[$j++] = $_.spc; //#10858
    } //#10858
    var _12 = $a(); //#10858
    $k[$j++] = 'ren'; //#10862
    $k[$j++] = 'renlinear'; //#10862
    $k[$j++] = 'bhs'; //#10862
    $k[$j++] = _w; //#10862
    $k[$j++] = 'bbs'; //#10862
    $k[$j++] = _x; //#10862
    $k[$j++] = 'sbs'; //#10862
    $k[$j++] = _12; //#10862
    $k[$j++] = 'txt'; //#10862
    $k[$j++] = $_.txt; //#10862
    $k[$j++] = 'textxalign'; //#10862
    $k[$j++] = "center"; //#10862
    $k[$j++] = 'textyoffset'; //#10862
    $k[$j++] = 4; //#10862
    $k[$j++] = 'opt'; //#10862
    $k[$j++] = $_.options; //#10862
    var _15 = $d(); //#10862
    $k[$j++] = _15; //#10865
    if (!$_.dontdraw) { //#10865
        bwipp_renlinear(); //#10865
    } //#10865
    $_ = Object.getPrototypeOf($_); //#10867
} //bwipp_pharmacode2
function bwipp_code2of5() {
    $_ = Object.create($_); //#10897
    $_.dontdraw = false; //#10900
    $_.includecheck = false; //#10901
    $_.validatecheck = false; //#10902
    $_.includetext = false; //#10903
    $_.includecheckintext = false; //#10904
    $_.textfont = "OCR-B"; //#10905
    $_.textsize = 10; //#10906
    $_.textyoffset = -8; //#10907
    $_.height = 1; //#10908
    $_.version = "industrial"; //#10909
    $k[$j++] = $_; //#10911
    bwipp_processoptions(); //#10911
    $_.options = $k[--$j]; //#10911
    $_.barcode = $k[--$j]; //#10912
    if ($eq($_.barcode, "")) { //#10916
        $k[$j++] = 'bwipp.code2of5emptyData#10915'; //#10915
        $k[$j++] = "The data must not be empty"; //#10915
        bwipp_raiseerror(); //#10915
    } //#10915
    bwipp_loadctx(bwipp_code2of5); //#10918
    $forall($_.barcode, function() { //#10925
        var _4 = $k[--$j]; //#10922
        if ((_4 < 48) || (_4 > 57)) { //#10924
            $k[$j++] = 'bwipp.code2of5badCharacter#10923'; //#10923
            $k[$j++] = "Code 25 must contain only digits"; //#10923
            bwipp_raiseerror(); //#10923
        } //#10923
    }); //#10923
    $k[$j++] = 'barlen'; //#10927
    $k[$j++] = $_.barcode.length; //#10927
    if ($_.validatecheck) { //#10927
        var _7 = $k[--$j]; //#10927
        $k[$j++] = $f(_7 - 1); //#10927
    } //#10927
    var _8 = $k[--$j]; //#10927
    $_[$k[--$j]] = _8; //#10927
    $_.checksum = 0; //#10929
    for (var _C = 0, _B = $f($_.barlen - 1); _C <= _B; _C += 1) { //#10933
        $_.i = _C; //#10931
        $k[$j++] = 'checksum'; //#10932
        $k[$j++] = $_.checksum; //#10932
        $k[$j++] = $f($get($_.barcode, $_.i) - 48); //#10932
        if (($f($_.barlen - $_.i) % 2) != 0) { //#10932
            var _J = $k[--$j]; //#10932
            $k[$j++] = _J * 3; //#10932
        } //#10932
        var _K = $k[--$j]; //#10932
        var _L = $k[--$j]; //#10932
        $_[$k[--$j]] = $f(_L + _K); //#10932
    } //#10932
    $_.checksum = (10 - ($_.checksum % 10)) % 10; //#10934
    if ($_.validatecheck) { //#10941
        if ($get($_.barcode, $_.barlen) != ($_.checksum + 48)) { //#10938
            $k[$j++] = 'bwipp.code2of5badCheckDigit#10937'; //#10937
            $k[$j++] = "Incorrect Code 25 check digit provided"; //#10937
            bwipp_raiseerror(); //#10937
        } //#10937
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#10939
        $_.includecheck = true; //#10940
    } //#10940
    if (!bwipp_code2of5.__10969__) { //#10969
        $_ = Object.create($_); //#10969
        var _b = new Map([
            ["industrial", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "313111", "31113"])],
            ["iata", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "1111", "311"])],
            ["matrix", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "311111", "31111"])],
            ["coop", $a(["331111", "111331", "113131", "113311", "131131", "131311", "133111", "311131", "311311", "313111", "3131", "133"])],
            ["datalogic", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "1111", "311"])]
        ]); //#10966
        $_.versions = _b; //#10968
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code2of5.$ctx[id] = $_[id]); //#10968
        bwipp_code2of5.__10969__ = 1; //#10968
        $_ = Object.getPrototypeOf($_); //#10968
    } //#10968
    var _f = $get($_.versions, $_.version) !== undefined; //#10971
    if (!_f) { //#10973
        $k[$j++] = 'bwipp.code2of5badVersion#10972'; //#10972
        $k[$j++] = "Unrecognised Code 25 version"; //#10972
        bwipp_raiseerror(); //#10972
    } //#10972
    $_.encs = $get($_.versions, $_.version); //#10974
    $_.cs = $get($_.encs, 0).length; //#10976
    $k[$j++] = 'cw'; //#10977
    $k[$j++] = 0; //#10977
    $forall($get($_.encs, 0), function() { //#10977
        var _n = $k[--$j]; //#10977
        var _o = $k[--$j]; //#10977
        $k[$j++] = $f(_o + $f(_n - 48)); //#10977
    }); //#10977
    var _p = $k[--$j]; //#10977
    $_[$k[--$j]] = _p; //#10977
    $_.ss = $get($_.encs, 10).length; //#10978
    $k[$j++] = 'sw'; //#10979
    $k[$j++] = 0; //#10979
    $forall($get($_.encs, 10), function() { //#10979
        var _v = $k[--$j]; //#10979
        var _w = $k[--$j]; //#10979
        $k[$j++] = $f(_w + $f(_v - 48)); //#10979
    }); //#10979
    var _x = $k[--$j]; //#10979
    $_[$k[--$j]] = _x; //#10979
    var _10 = $get($_.encs, 11); //#10980
    $_.es = _10.length; //#10980
    if (!bwipp_code2of5.__10985__) { //#10985
        $_ = Object.create($_); //#10985
        $_.barchars = "0123456789"; //#10984
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code2of5.$ctx[id] = $_[id]); //#10984
        bwipp_code2of5.__10985__ = 1; //#10984
        $_ = Object.getPrototypeOf($_); //#10984
    } //#10984
    $k[$j++] = 'sbs'; //#10987
    $k[$j++] = $_.barlen; //#10987
    if ($_.includecheck) { //#10987
        var _14 = $k[--$j]; //#10987
        $k[$j++] = $f(_14 + 1); //#10987
    } //#10987
    var _19 = $s($f(($f(($k[--$j] * $_.cs) + $_.ss)) + $_.es)); //#10987
    $_[$k[--$j]] = _19; //#10987
    $k[$j++] = 'txt'; //#10988
    $k[$j++] = $_.barlen; //#10988
    if ($_.includecheck) { //#10988
        var _1D = $k[--$j]; //#10988
        $k[$j++] = $f(_1D + 1); //#10988
    } //#10988
    var _1F = $a($k[--$j]); //#10988
    $_[$k[--$j]] = _1F; //#10988
    $puti($_.sbs, 0, $get($_.encs, 10)); //#10991
    for (var _1M = 0, _1L = $f($_.barlen - 1); _1M <= _1L; _1M += 1) { //#11002
        $_.i = _1M; //#10993
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#10995
        $j--; //#10996
        $_.indx = $k[--$j].length; //#10997
        $j -= 2; //#10998
        $_.enc = $get($_.encs, $_.indx); //#10999
        $puti($_.sbs, ($_.i * $_.cs) + $_.ss, $_.enc); //#11000
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $f(($_.i * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#11001
    } //#11001
    if ($_.includecheck) { //#11014
        $puti($_.sbs, $f(($_.barlen * $_.cs) + $_.ss), $get($_.encs, $_.checksum)); //#11006
        $puti($_.sbs, $f(($f(($_.barlen * $_.cs) + $_.cs)) + $_.ss), $get($_.encs, 11)); //#11007
        if ($_.includecheckintext) { //#11011
            $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), $f(($_.barlen * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#11009
        } else { //#11011
            $put($_.txt, $_.barlen, $a([" ", $f(($_.barlen * $_.cw) + $_.sw), $_.textyoffset, $_.textfont, $_.textsize])); //#11011
        } //#11011
    } else { //#11014
        $puti($_.sbs, $f(($_.barlen * $_.cs) + $_.ss), $get($_.encs, 11)); //#11014
    } //#11014
    $k[$j++] = Infinity; //#11018
    $k[$j++] = Infinity; //#11020
    $forall($_.sbs, function() { //#11020
        var _2U = $k[--$j]; //#11020
        $k[$j++] = $f(_2U - 48); //#11020
    }); //#11020
    var _2V = $a(); //#11020
    $k[$j++] = Infinity; //#11021
    for (var _2X = 0, _2Y = ~~(($_.sbs.length + 1) / 2); _2X < _2Y; _2X++) { //#11021
        $k[$j++] = $_.height; //#11021
    } //#11021
    var _2a = $a(); //#11021
    $k[$j++] = Infinity; //#11022
    for (var _2c = 0, _2d = ~~(($_.sbs.length + 1) / 2); _2c < _2d; _2c++) { //#11022
        $k[$j++] = 0; //#11022
    } //#11022
    var _2e = $a(); //#11022
    $k[$j++] = 'ren'; //#11025
    $k[$j++] = 'renlinear'; //#11025
    $k[$j++] = 'sbs'; //#11025
    $k[$j++] = _2V; //#11025
    $k[$j++] = 'bhs'; //#11025
    $k[$j++] = _2a; //#11025
    $k[$j++] = 'bbs'; //#11025
    $k[$j++] = _2e; //#11025
    if ($_.includetext) { //#11025
        $k[$j++] = 'txt'; //#11024
        $k[$j++] = $_.txt; //#11024
    } //#11024
    $k[$j++] = 'opt'; //#11026
    $k[$j++] = $_.options; //#11026
    var _2i = $d(); //#11026
    $k[$j++] = _2i; //#11029
    if (!$_.dontdraw) { //#11029
        bwipp_renlinear(); //#11029
    } //#11029
    $_ = Object.getPrototypeOf($_); //#11031
    $_ = Object.getPrototypeOf($_); //#11033
} //bwipp_code2of5
function bwipp_industrial2of5() {
    $_ = Object.create($_); //#11062
    $_.dontdraw = false; //#11065
    $k[$j++] = $_; //#11067
    bwipp_processoptions(); //#11067
    $_.options = $k[--$j]; //#11067
    $_.barcode = $k[--$j]; //#11068
    $put($_.options, "dontdraw", true); //#11071
    $put($_.options, "version", "industrial"); //#11072
    $k[$j++] = 'args'; //#11074
    $k[$j++] = $_.barcode; //#11074
    $k[$j++] = $_.options; //#11074
    bwipp_code2of5(); //#11074
    var _6 = $k[--$j]; //#11074
    $_[$k[--$j]] = _6; //#11074
    $put($_.args, "opt", $_.options); //#11076
    $k[$j++] = $_.args; //#11079
    if (!$_.dontdraw) { //#11079
        bwipp_renlinear(); //#11079
    } //#11079
    $_ = Object.getPrototypeOf($_); //#11081
} //bwipp_industrial2of5
function bwipp_iata2of5() {
    $_ = Object.create($_); //#11110
    $_.dontdraw = false; //#11113
    $k[$j++] = $_; //#11115
    bwipp_processoptions(); //#11115
    $_.options = $k[--$j]; //#11115
    $_.barcode = $k[--$j]; //#11116
    $put($_.options, "dontdraw", true); //#11119
    $put($_.options, "version", "iata"); //#11120
    $k[$j++] = 'args'; //#11122
    $k[$j++] = $_.barcode; //#11122
    $k[$j++] = $_.options; //#11122
    bwipp_code2of5(); //#11122
    var _6 = $k[--$j]; //#11122
    $_[$k[--$j]] = _6; //#11122
    $put($_.args, "opt", $_.options); //#11124
    $k[$j++] = $_.args; //#11127
    if (!$_.dontdraw) { //#11127
        bwipp_renlinear(); //#11127
    } //#11127
    $_ = Object.getPrototypeOf($_); //#11129
} //bwipp_iata2of5
function bwipp_matrix2of5() {
    $_ = Object.create($_); //#11158
    $_.dontdraw = false; //#11161
    $k[$j++] = $_; //#11163
    bwipp_processoptions(); //#11163
    $_.options = $k[--$j]; //#11163
    $_.barcode = $k[--$j]; //#11164
    $put($_.options, "dontdraw", true); //#11167
    $put($_.options, "version", "matrix"); //#11168
    $k[$j++] = 'args'; //#11170
    $k[$j++] = $_.barcode; //#11170
    $k[$j++] = $_.options; //#11170
    bwipp_code2of5(); //#11170
    var _6 = $k[--$j]; //#11170
    $_[$k[--$j]] = _6; //#11170
    $put($_.args, "opt", $_.options); //#11172
    $k[$j++] = $_.args; //#11175
    if (!$_.dontdraw) { //#11175
        bwipp_renlinear(); //#11175
    } //#11175
    $_ = Object.getPrototypeOf($_); //#11177
} //bwipp_matrix2of5
function bwipp_coop2of5() {
    $_ = Object.create($_); //#11206
    $_.dontdraw = false; //#11209
    $k[$j++] = $_; //#11211
    bwipp_processoptions(); //#11211
    $_.options = $k[--$j]; //#11211
    $_.barcode = $k[--$j]; //#11212
    $put($_.options, "dontdraw", true); //#11215
    $put($_.options, "version", "coop"); //#11216
    $k[$j++] = 'args'; //#11218
    $k[$j++] = $_.barcode; //#11218
    $k[$j++] = $_.options; //#11218
    bwipp_code2of5(); //#11218
    var _6 = $k[--$j]; //#11218
    $_[$k[--$j]] = _6; //#11218
    $put($_.args, "opt", $_.options); //#11220
    $k[$j++] = $_.args; //#11223
    if (!$_.dontdraw) { //#11223
        bwipp_renlinear(); //#11223
    } //#11223
    $_ = Object.getPrototypeOf($_); //#11225
} //bwipp_coop2of5
function bwipp_datalogic2of5() {
    $_ = Object.create($_); //#11254
    $_.dontdraw = false; //#11257
    $k[$j++] = $_; //#11259
    bwipp_processoptions(); //#11259
    $_.options = $k[--$j]; //#11259
    $_.barcode = $k[--$j]; //#11260
    $put($_.options, "dontdraw", true); //#11263
    $put($_.options, "version", "datalogic"); //#11264
    $k[$j++] = 'args'; //#11266
    $k[$j++] = $_.barcode; //#11266
    $k[$j++] = $_.options; //#11266
    bwipp_code2of5(); //#11266
    var _6 = $k[--$j]; //#11266
    $_[$k[--$j]] = _6; //#11266
    $put($_.args, "opt", $_.options); //#11268
    $k[$j++] = $_.args; //#11271
    if (!$_.dontdraw) { //#11271
        bwipp_renlinear(); //#11271
    } //#11271
    $_ = Object.getPrototypeOf($_); //#11273
} //bwipp_datalogic2of5
function bwipp_code11() {
    $_ = Object.create($_); //#11303
    $_.dontdraw = false; //#11306
    $_.includecheck = false; //#11307
    $_.validatecheck = false; //#11308
    $_.includetext = false; //#11309
    $_.includecheckintext = false; //#11310
    $_.textfont = "OCR-B"; //#11311
    $_.textsize = 10; //#11312
    $_.textyoffset = -8; //#11313
    $_.height = 1; //#11314
    $k[$j++] = $_; //#11316
    bwipp_processoptions(); //#11316
    $_.options = $k[--$j]; //#11316
    $_.barcode = $k[--$j]; //#11317
    if ($eq($_.barcode, "")) { //#11321
        $k[$j++] = 'bwipp.code11emptyData#11320'; //#11320
        $k[$j++] = "The data must not be empty"; //#11320
        bwipp_raiseerror(); //#11320
    } //#11320
    bwipp_loadctx(bwipp_code11); //#11323
    if (!bwipp_code11.__11337__) { //#11337
        $_ = Object.create($_); //#11337
        $_.encs = $a(["111131", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "311111", "113111", "113311"]); //#11331
        $_.barchars = "0123456789-"; //#11334
        $_.charvals = new Map; //#11335
        for (var _4 = 0; _4 <= 10; _4 += 1) { //#11336
            $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#11336
        } //#11336
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code11.$ctx[id] = $_[id]); //#11336
        bwipp_code11.__11337__ = 1; //#11336
        $_ = Object.getPrototypeOf($_); //#11336
    } //#11336
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#11344
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#11341
        if (!_F) { //#11343
            $k[$j++] = 'bwipp.code11badCharacter#11342'; //#11342
            $k[$j++] = "Code 11 must contain only digits and dashes"; //#11342
            bwipp_raiseerror(); //#11342
        } //#11342
    } //#11342
    $_.barlen = $_.barcode.length; //#11346
    if ($_.validatecheck) { //#11352
        if ($_.barlen == 11) { //#11350
            $k[$j++] = 'bwipp.code11badLength#11349'; //#11349
            $k[$j++] = "Code 11 cannot be 11 characters using check digits"; //#11349
            bwipp_raiseerror(); //#11349
        } //#11349
        var _L = ($_.barlen <= 10) ? 1 : 2; //#11351
        $_.barlen = $_.barlen - _L; //#11351
    } //#11351
    $k[$j++] = 'numchecks'; //#11354
    if ($_.includecheck || $_.validatecheck) { //#11354
        var _P = ($_.barlen >= 10) ? 2 : 1; //#11354
        $k[$j++] = _P; //#11354
    } else { //#11354
        $k[$j++] = 0; //#11354
    } //#11354
    var _Q = $k[--$j]; //#11354
    $_[$k[--$j]] = _Q; //#11354
    $_.checksum1 = 0; //#11355
    $_.checksum2 = 0; //#11355
    for (var _U = 0, _T = $_.barlen - 1; _U <= _T; _U += 1) { //#11361
        $_.i = _U; //#11357
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11358
        $_.checksum1 = $f($_.checksum1 + ((((($_.barlen - $_.i) - 1) % 10) + 1) * $_.indx)); //#11359
        $_.checksum2 = $f($_.checksum2 + (((($_.barlen - $_.i) % 9) + 1) * $_.indx)); //#11360
    } //#11360
    $_.checksum1 = $_.checksum1 % 11; //#11362
    $_.checksum2 = $f($_.checksum2 + $_.checksum1) % 11; //#11363
    if ($_.validatecheck) { //#11377
        if ($_.numchecks == 1) { //#11372
            var _r = $_.checksum1; //#11366
            if ($get($_.barcode, $_.barlen) != $get($_.barchars, _r)) { //#11368
                $k[$j++] = 'bwipp.code11badCheckDigit#11367'; //#11367
                $k[$j++] = "Incorrect Code 11 check digit provided"; //#11367
                bwipp_raiseerror(); //#11367
            } //#11367
        } else { //#11372
            if (($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum1)) || ($get($_.barcode, $_.barlen + 1) != $get($_.barchars, $_.checksum2))) { //#11373
                $k[$j++] = 'bwipp.code11badCheckDigits#11372'; //#11372
                $k[$j++] = "Incorrect Code 11 check digits provided"; //#11372
                bwipp_raiseerror(); //#11372
            } //#11372
        } //#11372
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#11375
        $_.includecheck = true; //#11376
    } //#11376
    $_.sbs = $s($f(($f($_.barlen + $_.numchecks) * 6) + 12)); //#11379
    $_.txt = $a($f($_.barlen + $_.numchecks)); //#11380
    $puti($_.sbs, 0, $get($_.encs, 11)); //#11383
    $_.xpos = 8; //#11385
    for (var _1J = 0, _1I = $_.barlen - 1; _1J <= _1I; _1J += 1) { //#11395
        $_.i = _1J; //#11387
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11388
        $_.enc = $get($_.encs, $_.indx); //#11389
        $puti($_.sbs, ($_.i * 6) + 6, $_.enc); //#11390
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11391
        for (var _1f = 0; _1f <= 5; _1f += 1) { //#11394
            $_.xpos = $f($f($get($_.enc, _1f) - 48) + $_.xpos); //#11393
        } //#11393
    } //#11393
    if ($_.includecheck) { //#11424
        if ($_.barlen >= 10) { //#11421
            $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, $_.checksum1)); //#11400
            $puti($_.sbs, ($_.barlen * 6) + 12, $get($_.encs, $_.checksum2)); //#11401
            if ($_.includecheckintext) { //#11411
                $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11403
                $_.enc = $get($_.encs, $_.checksum1); //#11404
                for (var _29 = 0; _29 <= 5; _29 += 1) { //#11407
                    $_.xpos = $f($f($get($_.enc, _29) - 48) + $_.xpos); //#11406
                } //#11406
                $put($_.txt, $_.barlen + 1, $a([$geti($_.barchars, $_.checksum2, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11408
            } else { //#11411
                $put($_.txt, $_.barlen, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11410
                $put($_.txt, $_.barlen + 1, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11411
            } //#11411
            $puti($_.sbs, ($_.barlen * 6) + 18, $get($_.encs, 11)); //#11413
        } else { //#11421
            $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, $_.checksum1)); //#11415
            if ($_.includecheckintext) { //#11419
                $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11417
            } else { //#11419
                $put($_.txt, $_.barlen, $a(["", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11419
            } //#11419
            $puti($_.sbs, ($_.barlen * 6) + 12, $get($_.encs, 11)); //#11421
        } //#11421
    } else { //#11424
        $puti($_.sbs, ($_.barlen * 6) + 6, $get($_.encs, 11)); //#11424
    } //#11424
    $k[$j++] = Infinity; //#11428
    $k[$j++] = Infinity; //#11430
    var _3A = $_.sbs; //#11430
    for (var _3B = 0, _3C = _3A.length; _3B < _3C; _3B++) { //#11430
        $k[$j++] = $get(_3A, _3B) - 48; //#11430
    } //#11430
    var _3E = $a(); //#11430
    $k[$j++] = Infinity; //#11431
    for (var _3G = 0, _3H = ~~(($_.sbs.length + 1) / 2); _3G < _3H; _3G++) { //#11431
        $k[$j++] = $_.height; //#11431
    } //#11431
    var _3J = $a(); //#11431
    $k[$j++] = Infinity; //#11432
    for (var _3L = 0, _3M = ~~(($_.sbs.length + 1) / 2); _3L < _3M; _3L++) { //#11432
        $k[$j++] = 0; //#11432
    } //#11432
    var _3N = $a(); //#11432
    $k[$j++] = 'ren'; //#11435
    $k[$j++] = 'renlinear'; //#11435
    $k[$j++] = 'sbs'; //#11435
    $k[$j++] = _3E; //#11435
    $k[$j++] = 'bhs'; //#11435
    $k[$j++] = _3J; //#11435
    $k[$j++] = 'bbs'; //#11435
    $k[$j++] = _3N; //#11435
    if ($_.includetext) { //#11435
        $k[$j++] = 'txt'; //#11434
        $k[$j++] = $_.txt; //#11434
    } //#11434
    $k[$j++] = 'opt'; //#11436
    $k[$j++] = $_.options; //#11436
    var _3R = $d(); //#11436
    $k[$j++] = _3R; //#11439
    if (!$_.dontdraw) { //#11439
        bwipp_renlinear(); //#11439
    } //#11439
    $_ = Object.getPrototypeOf($_); //#11441
    $_ = Object.getPrototypeOf($_); //#11443
} //bwipp_code11
function bwipp_bc412() {
    $_ = Object.create($_); //#11473
    $_.dontdraw = false; //#11476
    $_.includecheck = false; //#11477
    $_.validatecheck = false; //#11478
    $_.includetext = false; //#11479
    $_.includecheckintext = false; //#11480
    $_.includestartstop = false; //#11481
    $_.semi = false; //#11482
    $_.textfont = "OCR-B"; //#11483
    $_.textsize = 10; //#11484
    $_.textyoffset = -8; //#11485
    $_.height = 1; //#11486
    $k[$j++] = $_; //#11488
    bwipp_processoptions(); //#11488
    $_.options = $k[--$j]; //#11488
    $_.barcode = $k[--$j]; //#11489
    if ($eq($_.barcode, "")) { //#11493
        $k[$j++] = 'bwipp.bc412emptyData#11492'; //#11492
        $k[$j++] = "The data must not be empty"; //#11492
        bwipp_raiseerror(); //#11492
    } //#11492
    if ($_.semi) { //#11498
        $_.includestartstop = true; //#11497
    } //#11497
    bwipp_loadctx(bwipp_bc412); //#11500
    if (!bwipp_bc412.__11507__) { //#11507
        $_ = Object.create($_); //#11507
        $_.barchars = "0R9GLVHA8EZ4NTS1J2Q6C7DYKBUIX3FWP5M"; //#11504
        $_.charvals = new Map; //#11505
        for (var _4 = 0; _4 <= 34; _4 += 1) { //#11506
            $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#11506
        } //#11506
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_bc412.$ctx[id] = $_[id]); //#11506
        bwipp_bc412.__11507__ = 1; //#11506
        $_ = Object.getPrototypeOf($_); //#11506
    } //#11506
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#11514
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#11511
        if (!_F) { //#11513
            $k[$j++] = 'bwipp.bc412badCharacter#11512'; //#11512
            $k[$j++] = "BC412 must contain only digits and capital letters except O"; //#11512
            bwipp_raiseerror(); //#11512
        } //#11512
    } //#11512
    if ($_.semi) { //#11570
        if ($_.validatecheck) { //#11524
            if (($_.barcode.length < 8) || ($_.barcode.length > 19)) { //#11521
                $k[$j++] = 'bwipp.bc412semivalidateBadLength#11520'; //#11520
                $k[$j++] = "BC412 semi with check digit must be 8 to 19 characters long"; //#11520
                bwipp_raiseerror(); //#11520
            } //#11520
        } else { //#11524
            if (($_.barcode.length < 7) || ($_.barcode.length > 18)) { //#11525
                $k[$j++] = 'bwipp.bc412semiBadLength#11524'; //#11524
                $k[$j++] = "BC412 semi must be 7 to 18 characters long"; //#11524
                bwipp_raiseerror(); //#11524
            } //#11524
        } //#11524
        $_.barlen = $_.barcode.length; //#11528
        if (!$_.validatecheck) { //#11536
            $_.barlen = $_.barlen + 1; //#11530
            $_.sbarcode = $s($_.barlen); //#11531
            $put($_.sbarcode, 0, $get($_.barcode, 0)); //#11532
            $put($_.sbarcode, 1, 48); //#11533
            $puti($_.sbarcode, 2, $geti($_.barcode, 1, $_.barlen - 2)); //#11534
            $_.barcode = $_.sbarcode; //#11535
        } //#11535
        $_.sumodd = 0; //#11537
        $_.sumeven = 0; //#11537
        for (var _c = 0, _b = $_.barlen - 1; _c <= _b; _c += 1) { //#11546
            $_.i = _c; //#11539
            $k[$j++] = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11545
            if (($_.i % 2) == 0) { //#11544
                $_.sumodd = $f($k[--$j] + $_.sumodd); //#11542
            } else { //#11544
                $_.sumeven = $f($k[--$j] + $_.sumeven); //#11544
            } //#11544
        } //#11544
        $_.checksum = ($f(($_.sumodd % 35) + (($_.sumeven % 35) * 2))) % 35; //#11547
        if ($_.validatecheck) { //#11554
            if ($_.checksum != 0) { //#11551
                $k[$j++] = 'bwipp.bc412semiBadCheckDigit#11550'; //#11550
                $k[$j++] = "Incorrect BC412 semi check digit provided"; //#11550
                bwipp_raiseerror(); //#11550
            } //#11550
        } else { //#11554
            $_.checksum = ($_.checksum * 17) % 35; //#11553
            $put($_.barcode, 1, $get($_.barchars, $_.checksum)); //#11554
        } //#11554
    } else { //#11570
        $k[$j++] = 'barlen'; //#11557
        $k[$j++] = $_.barcode.length; //#11557
        if ($_.validatecheck) { //#11557
            var _y = $k[--$j]; //#11557
            $k[$j++] = $f(_y - 1); //#11557
        } //#11557
        var _z = $k[--$j]; //#11557
        $_[$k[--$j]] = _z; //#11557
        $_.checksum = 0; //#11559
        for (var _13 = 0, _12 = $_.barlen - 1; _13 <= _12; _13 += 1) { //#11563
            $_.checksum = $f($get($_.charvals, $geti($_.barcode, _13, 1)) + $_.checksum); //#11562
        } //#11562
        $_.checksum = $_.checksum % 35; //#11564
        if ($_.validatecheck) { //#11571
            if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#11568
                $k[$j++] = 'bwipp.bc412badCheckDigit#11567'; //#11567
                $k[$j++] = "Incorrect BC412 check digit provided"; //#11567
                bwipp_raiseerror(); //#11567
            } //#11567
            $_.barcode = $geti($_.barcode, 0, $_.barlen); //#11569
            $_.includecheck = true; //#11570
        } //#11570
    } //#11570
    if (!bwipp_bc412.__11586__) { //#11586
        $_ = Object.create($_); //#11586
        $_.encs = $a(["11111115", "13111212", "11131113", "12111213", "12121311", "13131111", "12111312", "11131212", "11121411", "11151111", "15111111", "11111511", "12131211", "13121112", "13111311", "11111214", "12121113", "11111313", "13111113", "11121213", "11141112", "11121312", "11141211", "14121111", "12121212", "11131311", "13121211", "12111411", "14111211", "11111412", "12111114", "14111112", "12141111", "11121114", "12131112", "12", "111"]); //#11585
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_bc412.$ctx[id] = $_[id]); //#11585
        bwipp_bc412.__11586__ = 1; //#11585
        $_ = Object.getPrototypeOf($_); //#11585
    } //#11585
    $_.sbs = $s((($_.barlen + 1) * 8) + 5); //#11588
    if ($_.includecheck) { //#11592
        $_.txt = $a($_.barlen + 1); //#11590
    } else { //#11592
        $_.txt = $a($_.barlen); //#11592
    } //#11592
    if ($_.includestartstop) { //#11602
        $puti($_.sbs, 0, $get($_.encs, 35)); //#11597
        $_.pos = 2; //#11598
        $_.txtpos = 3; //#11599
    } else { //#11602
        $_.pos = 0; //#11601
        $_.txtpos = 0; //#11602
    } //#11602
    for (var _1Z = 0, _1Y = $_.barlen - 1; _1Z <= _1Y; _1Z += 1) { //#11611
        $_.i = _1Z; //#11606
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11607
        $puti($_.sbs, $_.pos, $get($_.encs, $_.indx)); //#11608
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11609
        $_.pos = $_.pos + 8; //#11610
    } //#11610
    if ($_.includecheck) { //#11622
        $puti($_.sbs, $_.pos, $get($_.encs, $_.checksum)); //#11615
        if ($_.includecheckintext) { //#11619
            $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($_.barlen * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11617
        } else { //#11619
            $put($_.txt, $_.barlen, $a(["", ($_.barlen * 12) + $_.txtpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11619
        } //#11619
        $_.pos = $_.pos + 8; //#11621
    } //#11621
    if ($_.includestartstop) { //#11628
        $puti($_.sbs, $_.pos, $get($_.encs, 36)); //#11626
        $_.pos = $_.pos + 3; //#11627
    } //#11627
    $_.sbs = $geti($_.sbs, 0, $_.pos); //#11631
    $k[$j++] = Infinity; //#11632
    $k[$j++] = Infinity; //#11634
    var _2W = $_.sbs; //#11634
    for (var _2X = 0, _2Y = _2W.length; _2X < _2Y; _2X++) { //#11634
        $k[$j++] = $f($get(_2W, _2X) - 48); //#11634
    } //#11634
    var _2a = $a(); //#11634
    $k[$j++] = Infinity; //#11635
    for (var _2c = 0, _2d = ~~(($_.sbs.length + 1) / 2); _2c < _2d; _2c++) { //#11635
        $k[$j++] = $_.height; //#11635
    } //#11635
    var _2f = $a(); //#11635
    $k[$j++] = Infinity; //#11636
    for (var _2h = 0, _2i = ~~(($_.sbs.length + 1) / 2); _2h < _2i; _2h++) { //#11636
        $k[$j++] = 0; //#11636
    } //#11636
    var _2j = $a(); //#11636
    $k[$j++] = 'ren'; //#11639
    $k[$j++] = 'renlinear'; //#11639
    $k[$j++] = 'sbs'; //#11639
    $k[$j++] = _2a; //#11639
    $k[$j++] = 'bhs'; //#11639
    $k[$j++] = _2f; //#11639
    $k[$j++] = 'bbs'; //#11639
    $k[$j++] = _2j; //#11639
    if ($_.includetext) { //#11639
        $k[$j++] = 'txt'; //#11638
        $k[$j++] = $_.txt; //#11638
    } //#11638
    $k[$j++] = 'opt'; //#11640
    $k[$j++] = $_.options; //#11640
    var _2n = $d(); //#11640
    $k[$j++] = _2n; //#11643
    if (!$_.dontdraw) { //#11643
        bwipp_renlinear(); //#11643
    } //#11643
    $_ = Object.getPrototypeOf($_); //#11645
    $_ = Object.getPrototypeOf($_); //#11647
} //bwipp_bc412
function bwipp_rationalizedCodabar() {
    $_ = Object.create($_); //#11677
    $_.dontdraw = false; //#11680
    $_.altstartstop = false; //#11681
    $_.includecheck = false; //#11682
    $_.validatecheck = false; //#11683
    $_.includetext = false; //#11684
    $_.includecheckintext = false; //#11685
    $_.textfont = "OCR-B"; //#11686
    $_.textsize = 10; //#11687
    $_.textyoffset = -8; //#11688
    $_.height = 1; //#11689
    $k[$j++] = $_; //#11691
    bwipp_processoptions(); //#11691
    $_.options = $k[--$j]; //#11691
    $_.barcode = $k[--$j]; //#11692
    if (($_.barcode.length < 2) || (($_.barcode.length < 3) && $_.validatecheck)) { //#11696
        $k[$j++] = 'bwipp.rationalizedCodabarBadLength#11695'; //#11695
        $k[$j++] = "Codabar must be at least 2 characters in length excluding any check digit"; //#11695
        bwipp_raiseerror(); //#11695
    } //#11695
    bwipp_loadctx(bwipp_rationalizedCodabar); //#11698
    if (!bwipp_rationalizedCodabar.__11712__) { //#11712
        $_ = Object.create($_); //#11712
        $_.encs = $a(["11111331", "11113311", "11131131", "33111111", "11311311", "31111311", "13111131", "13113111", "13311111", "31131111", "11133111", "11331111", "31113131", "31311131", "31313111", "11313131", "11331311", "13131131", "11131331", "11133311"]); //#11707
        $_.barcharsnormal = "0123456789-$:/.+ABCD"; //#11710
        $_.barcharsalt = "0123456789-$:/.+TN*E"; //#11711
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_rationalizedCodabar.$ctx[id] = $_[id]); //#11711
        bwipp_rationalizedCodabar.__11712__ = 1; //#11711
        $_ = Object.getPrototypeOf($_); //#11711
    } //#11711
    var _8 = $_.altstartstop ? $_.barcharsalt : $_.barcharsnormal; //#11714
    $_.barchars = _8; //#11714
    $_.charvals = new Map; //#11716
    for (var _9 = 0; _9 <= 19; _9 += 1) { //#11717
        $put($_.charvals, $geti($_.barchars, _9, 1), _9); //#11717
    } //#11717
    $_.bodyvals = new Map; //#11718
    for (var _D = 0; _D <= 15; _D += 1) { //#11719
        $put($_.bodyvals, $geti($_.barchars, _D, 1), _D); //#11719
    } //#11719
    $_.ssvals = new Map; //#11720
    for (var _H = 16; _H <= 19; _H += 1) { //#11721
        $put($_.ssvals, $geti($_.barchars, _H, 1), _H); //#11721
    } //#11721
    var _O = $get($_.ssvals, $geti($_.barcode, 0, 1)) !== undefined; //#11724
    var _T = $get($_.ssvals, $geti($_.barcode, $_.barcode.length - 1, 1)) !== undefined; //#11725
    if ((!_O) || (!_T)) { //#11731
        if ($_.altstartstop) { //#11729
            $k[$j++] = 'bwipp.rationalizedCodabarBadAltStartStop#11727'; //#11727
            $k[$j++] = "Codabar start and stop characters must be one of E N T or *"; //#11727
            bwipp_raiseerror(); //#11727
        } else { //#11729
            $k[$j++] = 'bwipp.rationalizedCodabarBadStartStop#11729'; //#11729
            $k[$j++] = "Codabar start and stop characters must be one of A B C or D"; //#11729
            bwipp_raiseerror(); //#11729
        } //#11729
    } //#11729
    for (var _X = 1, _W = $_.barcode.length - 2; _X <= _W; _X += 1) { //#11736
        var _b = $get($_.bodyvals, $geti($_.barcode, _X, 1)) !== undefined; //#11733
        if (!_b) { //#11735
            $k[$j++] = 'bwipp.rationalizedCodabarBadCharacter#11734'; //#11734
            $k[$j++] = "Codabar body must contain only digits and symbols - $ : / . +"; //#11734
            bwipp_raiseerror(); //#11734
        } //#11734
    } //#11734
    $k[$j++] = 'barlen'; //#11738
    $k[$j++] = $_.barcode.length; //#11738
    if ($_.validatecheck) { //#11738
        var _e = $k[--$j]; //#11738
        $k[$j++] = $f(_e - 1); //#11738
    } //#11738
    var _f = $k[--$j]; //#11738
    $_[$k[--$j]] = _f; //#11738
    $_.checksum = 0; //#11740
    for (var _j = 0, _i = $f($_.barlen - 2); _j <= _i; _j += 1) { //#11744
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _j, 1)) + $_.checksum); //#11743
    } //#11743
    var _r = $geti($_.barcode, $_.barcode.length - 1, 1); //#11745
    $_.checksum = $f($get($_.charvals, _r) + $_.checksum); //#11746
    $_.checksum = ($f(16 - ($_.checksum % 16))) % 16; //#11747
    if ($_.validatecheck) { //#11757
        if ($get($_.barcode, $f($_.barlen - 1)) != $get($_.barchars, $_.checksum)) { //#11751
            $k[$j++] = 'bwipp.rationalizedCodabarBadCheckDigit#11750'; //#11750
            $k[$j++] = "Incorrect Codabar check digit provided"; //#11750
            bwipp_raiseerror(); //#11750
        } //#11750
        var _14 = $s($_.barlen); //#11752
        $puti(_14, 0, $geti($_.barcode, 0, $f($_.barlen - 1))); //#11753
        $puti(_14, $f($_.barlen - 1), $geti($_.barcode, $_.barlen, 1)); //#11754
        $_.barcode = _14; //#11755
        $_.includecheck = true; //#11756
    } //#11756
    $k[$j++] = 'sbs'; //#11759
    $k[$j++] = $_.barlen; //#11759
    if ($_.includecheck) { //#11759
        var _1E = $k[--$j]; //#11759
        $k[$j++] = $f(_1E + 1); //#11759
    } //#11759
    var _1G = $s($k[--$j] * 8); //#11759
    $_[$k[--$j]] = _1G; //#11759
    $k[$j++] = 'txt'; //#11760
    $k[$j++] = $_.barlen; //#11760
    if ($_.includecheck) { //#11760
        var _1K = $k[--$j]; //#11760
        $k[$j++] = $f(_1K + 1); //#11760
    } //#11760
    var _1M = $a($k[--$j]); //#11760
    $_[$k[--$j]] = _1M; //#11760
    $_.xpos = 0; //#11762
    for (var _1Q = 0, _1P = $f($_.barlen - 2); _1Q <= _1P; _1Q += 1) { //#11772
        $_.i = _1Q; //#11764
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#11765
        $_.enc = $get($_.encs, $_.indx); //#11766
        $puti($_.sbs, $_.i * 8, $_.enc); //#11767
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11768
        for (var _1m = 0; _1m <= 7; _1m += 1) { //#11771
            $_.xpos = $f($f($get($_.enc, _1m) - 48) + $_.xpos); //#11770
        } //#11770
    } //#11770
    if ($_.includecheck) { //#11796
        $puti($_.sbs, $f(($_.barlen * 8) - 8), $get($_.encs, $_.checksum)); //#11777
        if ($_.includecheckintext) { //#11781
            $put($_.txt, $f($_.barlen - 1), $a([$geti($_.barchars, $_.checksum, 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11779
        } else { //#11781
            $put($_.txt, $f($_.barlen - 1), $a([" ", $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11781
        } //#11781
        for (var _2E = 0; _2E <= 7; _2E += 1) { //#11785
            $_.xpos = $f($f($get($get($_.encs, $_.checksum), _2E) - 48) + $_.xpos); //#11784
        } //#11784
        $_.indx = $get($_.charvals, $geti($_.barcode, $f($_.barlen - 1), 1)); //#11787
        $_.enc = $get($_.encs, $_.indx); //#11788
        $puti($_.sbs, $_.barlen * 8, $_.enc); //#11789
        $put($_.txt, $_.barlen, $a([$geti($_.barcode, $f($_.barlen - 1), 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11790
    } else { //#11796
        $_.indx = $get($_.charvals, $geti($_.barcode, $f($_.barlen - 1), 1)); //#11793
        $_.enc = $get($_.encs, $_.indx); //#11794
        $puti($_.sbs, $f(($_.barlen * 8) - 8), $_.enc); //#11795
        $put($_.txt, $f($_.barlen - 1), $a([$geti($_.barcode, $f($_.barlen - 1), 1), $_.xpos, $_.textyoffset, $_.textfont, $_.textsize])); //#11796
    } //#11796
    $k[$j++] = Infinity; //#11800
    $k[$j++] = Infinity; //#11802
    $forall($_.sbs, function() { //#11802
        var _31 = $k[--$j]; //#11802
        $k[$j++] = $f(_31 - 48); //#11802
    }); //#11802
    var _32 = $a(); //#11802
    $k[$j++] = Infinity; //#11803
    for (var _34 = 0, _35 = ~~(($_.sbs.length + 1) / 2); _34 < _35; _34++) { //#11803
        $k[$j++] = $_.height; //#11803
    } //#11803
    var _37 = $a(); //#11803
    $k[$j++] = Infinity; //#11804
    for (var _39 = 0, _3A = ~~(($_.sbs.length + 1) / 2); _39 < _3A; _39++) { //#11804
        $k[$j++] = 0; //#11804
    } //#11804
    var _3B = $a(); //#11804
    $k[$j++] = 'ren'; //#11807
    $k[$j++] = 'renlinear'; //#11807
    $k[$j++] = 'sbs'; //#11807
    $k[$j++] = _32; //#11807
    $k[$j++] = 'bhs'; //#11807
    $k[$j++] = _37; //#11807
    $k[$j++] = 'bbs'; //#11807
    $k[$j++] = _3B; //#11807
    if ($_.includetext) { //#11807
        $k[$j++] = 'txt'; //#11806
        $k[$j++] = $_.txt; //#11806
    } //#11806
    $k[$j++] = 'opt'; //#11808
    $k[$j++] = $_.options; //#11808
    var _3F = $d(); //#11808
    $k[$j++] = _3F; //#11811
    if (!$_.dontdraw) { //#11811
        bwipp_renlinear(); //#11811
    } //#11811
    $_ = Object.getPrototypeOf($_); //#11813
    $_ = Object.getPrototypeOf($_); //#11815
} //bwipp_rationalizedCodabar
function bwipp_onecode() {
    $_ = Object.create($_); //#11845
    $_.dontdraw = false; //#11848
    $_.height = 0.15; //#11849
    $k[$j++] = $_; //#11851
    bwipp_processoptions(); //#11851
    $_.options = $k[--$j]; //#11851
    $_.barcode = $k[--$j]; //#11852
    bwipp_loadctx(bwipp_onecode); //#11854
    $_.barlen = $_.barcode.length; //#11856
    $forall($_.barcode, function() { //#11862
        var _4 = $k[--$j]; //#11859
        if ((_4 < 48) || (_4 > 57)) { //#11861
            $k[$j++] = 'bwipp.onecodeBadCharacter#11860'; //#11860
            $k[$j++] = "The data must contain only digits"; //#11860
            bwipp_raiseerror(); //#11860
        } //#11860
    }); //#11860
    if (((($_.barlen != 20) && ($_.barlen != 25)) && ($_.barlen != 29)) && ($_.barlen != 31)) { //#11866
        $k[$j++] = 'bwipp.onecodeInvalidLength#11865'; //#11865
        $k[$j++] = "The data must be 20, 25, 29 or 31 digits"; //#11865
        bwipp_raiseerror(); //#11865
    } //#11865
    $k[$j++] = Infinity; //#11869
    var _B = $eq($geti($_.barcode, 5, 1), "9") ? 14 : 11; //#11872
    $k[$j++] = 2; //#11875
    $k[$j++] = 2; //#11875
    $k[$j++] = 5; //#11875
    $k[$j++] = 5; //#11875
    $k[$j++] = _B; //#11875
    $k[$j++] = _B; //#11875
    $k[$j++] = 20; //#11875
    $k[$j++] = 20; //#11875
    $k[$j++] = 25; //#11875
    $k[$j++] = 25; //#11875
    $k[$j++] = 29; //#11875
    $k[$j++] = 29; //#11875
    $_.txtdict = $d(); //#11876
    $_.txt = $a($_.barlen + 6); //#11877
    $_.spacecnt = 0; //#11878
    for (var _H = 0, _G = $_.barlen - 1; _H <= _G; _H += 1) { //#11886
        $_.i = _H; //#11880
        var _K = $get($_.txtdict, $_.i) !== undefined; //#11881
        if (_K) { //#11884
            $put($_.txt, $_.i + $_.spacecnt, $a([" ", 0, 0, "", 0])); //#11882
            $_.spacecnt = $_.spacecnt + 1; //#11883
        } //#11883
        $put($_.txt, $_.i + $_.spacecnt, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#11885
    } //#11885
    $_.txt = $geti($_.txt, 0, $_.barcode.length + $_.spacecnt); //#11887
    $_.normalize = function() {
        $_.base = $k[--$j]; //#11890
        $_.num = $k[--$j]; //#11891
        for (var _e = $_.num.length - 1; _e >= 1; _e -= 1) { //#11896
            $_.i = _e; //#11893
            var _f = $_.num; //#11894
            var _g = $_.i; //#11894
            $put(_f, _g - 1, $f($get(_f, _g - 1) + (~~($get($_.num, $_.i) / $_.base)))); //#11894
            $put($_.num, $_.i, $get($_.num, $_.i) % $_.base); //#11895
        } //#11895
        for (;;) { //#11902
            if ($lt($get($_.num, 0), $_.base)) { //#11898
                break; //#11898
            } //#11898
            $k[$j++] = Infinity; //#11899
            $k[$j++] = 0; //#11899
            $aload($_.num); //#11899
            $_.num = $a(); //#11899
            $put($_.num, 0, $f($get($_.num, 0) + (~~($get($_.num, 1) / $_.base)))); //#11900
            $put($_.num, 1, $get($_.num, 1) % $_.base); //#11901
        } //#11901
        $k[$j++] = Infinity; //#11904
        $_.i = true; //#11904
        var _17 = $_.num; //#11904
        for (var _18 = 0, _19 = _17.length; _18 < _19; _18++) { //#11904
            var _1A = $get(_17, _18); //#11904
            $k[$j++] = _1A; //#11904
            if ((_1A == 0) && $_.i) { //#11904
                $j--; //#11904
            } else { //#11904
                $_.i = false; //#11904
            } //#11904
        } //#11904
        $_.num = $a(); //#11904
        if ($_.num.length == 0) { //#11905
            $_.num = $a([0]); //#11905
        } //#11905
        $k[$j++] = $_.num; //#11906
    }; //#11906
    $_.bigadd = function() {
        var _1G = $k[--$j]; //#11910
        var _1H = $k[--$j]; //#11910
        $_.offset = Math.abs(_1G.length - _1H.length); //#11911
        if (_1G.length < _1H.length) { //#11912
            var _ = _1G; //#11912
            _1G = _1H; //#11912
            _1H = _; //#11912
        } //#11912
        $_.a = _1G; //#11913
        $_.b = _1H; //#11913
        for (var _1K = 0, _1J = $_.b.length - 1; _1K <= _1J; _1K += 1) { //#11916
            var _1L = $_.a; //#11915
            var _1M = $_.offset; //#11915
            $put(_1L, _1K + _1M, $f($get(_1L, _1K + _1M) + $get($_.b, _1K))); //#11915
        } //#11915
        $k[$j++] = $_.a; //#11917
    }; //#11917
    if (!bwipp_onecode.__11928__) { //#11928
        $_ = Object.create($_); //#11928
        var _1V = new Map([
            [20, $a([0])],
            [25, $a([1])],
            [29, $a([1, 0, 0, 0, 0, 1])],
            [31, $a([1, 0, 0, 0, 1, 0, 0, 0, 0, 1])]
        ]); //#11926
        $_.startvals = _1V; //#11927
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_onecode.$ctx[id] = $_[id]); //#11927
        bwipp_onecode.__11928__ = 1; //#11927
        $_ = Object.getPrototypeOf($_); //#11927
    } //#11927
    $k[$j++] = 'binval'; //#11930
    $k[$j++] = $get($_.startvals, $_.barlen); //#11930
    $k[$j++] = Infinity; //#11930
    var _1c = $geti($_.barcode, 20, $_.barlen - 20); //#11930
    for (var _1d = 0, _1e = _1c.length; _1d < _1e; _1d++) { //#11930
        $k[$j++] = $f($get(_1c, _1d) - 48); //#11930
    } //#11930
    var _1g = $a(); //#11930
    $k[$j++] = _1g; //#11930
    $_.bigadd(); //#11930
    var _1h = $k[--$j]; //#11930
    $_[$k[--$j]] = _1h; //#11930
    $k[$j++] = Infinity; //#11931
    $aload($_.binval); //#11931
    $k[$j++] = $f($get($_.barcode, 0) - 48); //#11931
    $_.binval = $a(); //#11931
    $k[$j++] = Infinity; //#11932
    var _1n = $_.binval; //#11932
    for (var _1o = 0, _1p = _1n.length; _1o < _1p; _1o++) { //#11932
        $k[$j++] = $get(_1n, _1o) * 5; //#11932
    } //#11932
    var _1r = $a(); //#11932
    $k[$j++] = 'binval'; //#11932
    $k[$j++] = _1r; //#11932
    $k[$j++] = $a([$f($get($_.barcode, 1) - 48)]); //#11932
    $_.bigadd(); //#11932
    $k[$j++] = 10; //#11932
    $_.normalize(); //#11932
    var _1v = $k[--$j]; //#11932
    $_[$k[--$j]] = _1v; //#11932
    $k[$j++] = Infinity; //#11933
    $aload($_.binval); //#11933
    var _1z = $geti($_.barcode, 2, 18); //#11933
    for (var _20 = 0, _21 = _1z.length; _20 < _21; _20++) { //#11933
        $k[$j++] = $f($get(_1z, _20) - 48); //#11933
    } //#11933
    $_.binval = $a(); //#11933
    $_.bytes = $a(13); //#11936
    var _25 = $_.binval; //#11937
    $_.bintmp = $arrcpy($a(_25.length), _25); //#11937
    for (var _28 = 12; _28 >= 0; _28 -= 1) { //#11947
        $_.i = _28; //#11939
        for (var _2B = 0, _2A = $_.bintmp.length - 2; _2B <= _2A; _2B += 1) { //#11944
            $_.j = _2B; //#11941
            var _2C = $_.bintmp; //#11942
            var _2D = $_.j; //#11942
            $put(_2C, _2D + 1, $f($get(_2C, _2D + 1) + (($get($_.bintmp, $_.j) % 256) * 10))); //#11942
            $put($_.bintmp, $_.j, ~~($get($_.bintmp, $_.j) / 256)); //#11943
        } //#11943
        $put($_.bytes, $_.i, $get($_.bintmp, $_.bintmp.length - 1) % 256); //#11945
        var _2S = $_.bintmp; //#11946
        var _2T = $_.bintmp; //#11946
        $put(_2S, _2T.length - 1, ~~($get(_2S, _2T.length - 1) / 256)); //#11946
    } //#11946
    $_.fcs = 2047; //#11950
    $_.dat = $get($_.bytes, 0) << 5; //#11951
    for (var _2X = 0, _2Y = 6; _2X < _2Y; _2X++) { //#11960
        if ((($_.fcs ^ $_.dat) & 1024) != 0) { //#11956
            $_.fcs = ($_.fcs << 1) ^ 3893; //#11954
        } else { //#11956
            $_.fcs = $_.fcs << 1; //#11956
        } //#11956
        $_.fcs = $_.fcs & 2047; //#11958
        $_.dat = $_.dat << 1; //#11959
    } //#11959
    for (var _2f = 1; _2f <= 12; _2f += 1) { //#11972
        $_.dat = $get($_.bytes, _2f) << 3; //#11962
        for (var _2i = 0, _2j = 8; _2i < _2j; _2i++) { //#11971
            if ((($_.fcs ^ $_.dat) & 1024) != 0) { //#11967
                $_.fcs = ($_.fcs << 1) ^ 3893; //#11965
            } else { //#11967
                $_.fcs = $_.fcs << 1; //#11967
            } //#11967
            $_.fcs = $_.fcs & 2047; //#11969
            $_.dat = $_.dat << 1; //#11970
        } //#11970
    } //#11970
    $_.codewords = $a(10); //#11975
    for (var _2r = 9; _2r >= 0; _2r -= 1) { //#11986
        $_.i = _2r; //#11977
        var _2t = ($_.i == 9) ? 636 : 1365; //#11978
        $_.b = _2t; //#11978
        for (var _2w = 0, _2v = $_.binval.length - 2; _2w <= _2v; _2w += 1) { //#11983
            $_.j = _2w; //#11980
            var _2x = $_.binval; //#11981
            var _2y = $_.j; //#11981
            $put(_2x, _2y + 1, $f($get(_2x, _2y + 1) + (($get($_.binval, $_.j) % $_.b) * 10))); //#11981
            $put($_.binval, $_.j, ~~($get($_.binval, $_.j) / $_.b)); //#11982
        } //#11982
        $put($_.codewords, $_.i, $get($_.binval, $_.binval.length - 1) % $_.b); //#11984
        var _3G = $_.binval; //#11985
        var _3H = $_.binval; //#11985
        $put(_3G, _3H.length - 1, ~~($get(_3G, _3H.length - 1) / $_.b)); //#11985
    } //#11985
    $put($_.codewords, 9, $get($_.codewords, 9) * 2); //#11989
    if (($_.fcs & 1024) != 0) { //#11992
        $put($_.codewords, 0, $f($get($_.codewords, 0) + 659)); //#11991
    } //#11991
    if (!bwipp_onecode.__12093__) { //#12093
        $_ = Object.create($_); //#12093
        $_.tab513 = $a([31, 7936, 47, 7808, 55, 7552, 59, 7040, 61, 6016, 62, 3968, 79, 7744, 87, 7488, 91, 6976, 93, 5952, 94, 3904, 103, 7360, 107, 6848, 109, 5824, 110, 3776, 115, 6592, 117, 5568, 118, 3520, 121, 5056, 122, 3008, 124, 1984, 143, 7712, 151, 7456, 155, 6944, 157, 5920, 158, 3872, 167, 7328, 171, 6816, 173, 5792, 174, 3744, 179, 6560, 181, 5536, 182, 3488, 185, 5024, 186, 2976, 188, 1952, 199, 7264, 203, 6752, 205, 5728, 206, 3680, 211, 6496, 213, 5472, 214, 3424, 217, 4960, 218, 2912, 220, 1888, 227, 6368, 229, 5344, 230, 3296, 233, 4832, 234, 2784, 236, 1760, 241, 4576, 242, 2528, 244, 1504, 248, 992, 271, 7696, 279, 7440, 283, 6928, 285, 5904, 286, 3856, 295, 7312, 299, 6800, 301, 5776, 302, 3728, 307, 6544, 309, 5520, 310, 3472, 313, 5008, 314, 2960, 316, 1936, 327, 7248, 331, 6736, 333, 5712, 334, 3664, 339, 6480, 341, 5456, 342, 3408, 345, 4944, 346, 2896, 348, 1872, 355, 6352, 357, 5328, 358, 3280, 361, 4816, 362, 2768, 364, 1744, 369, 4560, 370, 2512, 372, 1488, 376, 976, 391, 7216, 395, 6704, 397, 5680, 398, 3632, 403, 6448, 405, 5424, 406, 3376, 409, 4912, 410, 2864, 412, 1840, 419, 6320, 421, 5296, 422, 3248, 425, 4784, 426, 2736, 428, 1712, 433, 4528, 434, 2480, 436, 1456, 440, 944, 451, 6256, 453, 5232, 454, 3184, 457, 4720, 458, 2672, 460, 1648, 465, 4464, 466, 2416, 468, 1392, 472, 880, 481, 4336, 482, 2288, 484, 1264, 488, 752, 527, 7688, 535, 7432, 539, 6920, 541, 5896, 542, 3848, 551, 7304, 555, 6792, 557, 5768, 558, 3720, 563, 6536, 565, 5512, 566, 3464, 569, 5000, 570, 2952, 572, 1928, 583, 7240, 587, 6728, 589, 5704, 590, 3656, 595, 6472, 597, 5448, 598, 3400, 601, 4936, 602, 2888, 604, 1864, 611, 6344, 613, 5320, 614, 3272, 617, 4808, 618, 2760, 620, 1736, 625, 4552, 626, 2504, 628, 1480, 632, 968, 647, 7208, 651, 6696, 653, 5672, 654, 3624, 659, 6440, 661, 5416, 662, 3368, 665, 4904, 666, 2856, 668, 1832, 675, 6312, 677, 5288, 678, 3240, 681, 4776, 682, 2728, 684, 1704, 689, 4520, 690, 2472, 692, 1448, 696, 936, 707, 6248, 709, 5224, 710, 3176, 713, 4712, 714, 2664, 716, 1640, 721, 4456, 722, 2408, 724, 1384, 728, 872, 737, 4328, 738, 2280, 740, 1256, 775, 7192, 779, 6680, 781, 5656, 782, 3608, 787, 6424, 789, 5400, 790, 3352, 793, 4888, 794, 2840, 796, 1816, 803, 6296, 805, 5272, 806, 3224, 809, 4760, 810, 2712, 812, 1688, 817, 4504, 818, 2456, 820, 1432, 824, 920, 835, 6232, 837, 5208, 838, 3160, 841, 4696, 842, 2648, 844, 1624, 849, 4440, 850, 2392, 852, 1368, 865, 4312, 866, 2264, 868, 1240, 899, 6200, 901, 5176, 902, 3128, 905, 4664, 906, 2616, 908, 1592, 913, 4408, 914, 2360, 916, 1336, 929, 4280, 930, 2232, 932, 1208, 961, 4216, 962, 2168, 964, 1144, 1039, 7684, 1047, 7428, 1051, 6916, 1053, 5892, 1054, 3844, 1063, 7300, 1067, 6788, 1069, 5764, 1070, 3716, 1075, 6532, 1077, 5508, 1078, 3460, 1081, 4996, 1082, 2948, 1084, 1924, 1095, 7236, 1099, 6724, 1101, 5700, 1102, 3652, 1107, 6468, 1109, 5444, 1110, 3396, 1113, 4932, 1114, 2884, 1116, 1860, 1123, 6340, 1125, 5316, 1126, 3268, 1129, 4804, 1130, 2756, 1132, 1732, 1137, 4548, 1138, 2500, 1140, 1476, 1159, 7204, 1163, 6692, 1165, 5668, 1166, 3620, 1171, 6436, 1173, 5412, 1174, 3364, 1177, 4900, 1178, 2852, 1180, 1828, 1187, 6308, 1189, 5284, 1190, 3236, 1193, 4772, 1194, 2724, 1196, 1700, 1201, 4516, 1202, 2468, 1204, 1444, 1219, 6244, 1221, 5220, 1222, 3172, 1225, 4708, 1226, 2660, 1228, 1636, 1233, 4452, 1234, 2404, 1236, 1380, 1249, 4324, 1250, 2276, 1287, 7188, 1291, 6676, 1293, 5652, 1294, 3604, 1299, 6420, 1301, 5396, 1302, 3348, 1305, 4884, 1306, 2836, 1308, 1812, 1315, 6292, 1317, 5268, 1318, 3220, 1321, 4756, 1322, 2708, 1324, 1684, 1329, 4500, 1330, 2452, 1332, 1428, 1347, 6228, 1349, 5204, 1350, 3156, 1353, 4692, 1354, 2644, 1356, 1620, 1361, 4436, 1362, 2388, 1377, 4308, 1378, 2260, 1411, 6196, 1413, 5172, 1414, 3124, 1417, 4660, 1418, 2612, 1420, 1588, 1425, 4404, 1426, 2356, 1441, 4276, 1442, 2228, 1473, 4212, 1474, 2164, 1543, 7180, 1547, 6668, 1549, 5644, 1550, 3596, 1555, 6412, 1557, 5388, 1558, 3340, 1561, 4876, 1562, 2828, 1564, 1804, 1571, 6284, 1573, 5260, 1574, 3212, 1577, 4748, 1578, 2700, 1580, 1676, 1585, 4492, 1586, 2444, 1603, 6220, 1605, 5196, 1606, 3148, 1609, 4684, 1610, 2636, 1617, 4428, 1618, 2380, 1633, 4300, 1634, 2252, 1667, 6188, 1669, 5164, 1670, 3116, 1673, 4652, 1674, 2604, 1681, 4396, 1682, 2348, 1697, 4268, 1698, 2220, 1729, 4204, 1730, 2156, 1795, 6172, 1797, 5148, 1798, 3100, 1801, 4636, 1802, 2588, 1809, 4380, 1810, 2332, 1825, 4252, 1826, 2204, 1857, 4188, 1858, 2140, 1921, 4156, 1922, 2108, 2063, 7682, 2071, 7426, 2075, 6914, 2077, 5890, 2078, 3842, 2087, 7298, 2091, 6786, 2093, 5762, 2094, 3714, 2099, 6530, 2101, 5506, 2102, 3458, 2105, 4994, 2106, 2946, 2119, 7234, 2123, 6722, 2125, 5698, 2126, 3650, 2131, 6466, 2133, 5442, 2134, 3394, 2137, 4930, 2138, 2882, 2147, 6338, 2149, 5314, 2150, 3266, 2153, 4802, 2154, 2754, 2161, 4546, 2162, 2498, 2183, 7202, 2187, 6690, 2189, 5666, 2190, 3618, 2195, 6434, 2197, 5410, 2198, 3362, 2201, 4898, 2202, 2850, 2211, 6306, 2213, 5282, 2214, 3234, 2217, 4770, 2218, 2722, 2225, 4514, 2226, 2466, 2243, 6242, 2245, 5218, 2246, 3170, 2249, 4706, 2250, 2658, 2257, 4450, 2258, 2402, 2273, 4322, 2311, 7186, 2315, 6674, 2317, 5650, 2318, 3602, 2323, 6418, 2325, 5394, 2326, 3346, 2329, 4882, 2330, 2834, 2339, 6290, 2341, 5266, 2342, 3218, 2345, 4754, 2346, 2706, 2353, 4498, 2354, 2450, 2371, 6226, 2373, 5202, 2374, 3154, 2377, 4690, 2378, 2642, 2385, 4434, 2401, 4306, 2435, 6194, 2437, 5170, 2438, 3122, 2441, 4658, 2442, 2610, 2449, 4402, 2465, 4274, 2497, 4210, 2567, 7178, 2571, 6666, 2573, 5642, 2574, 3594, 2579, 6410, 2581, 5386, 2582, 3338, 2585, 4874, 2586, 2826, 2595, 6282, 2597, 5258, 2598, 3210, 2601, 4746, 2602, 2698, 2609, 4490, 2627, 6218, 2629, 5194, 2630, 3146, 2633, 4682, 2641, 4426, 2657, 4298, 2691, 6186, 2693, 5162, 2694, 3114, 2697, 4650, 2705, 4394, 2721, 4266, 2753, 4202, 2819, 6170, 2821, 5146, 2822, 3098, 2825, 4634, 2833, 4378, 2849, 4250, 2881, 4186, 2945, 4154, 3079, 7174, 3083, 6662, 3085, 5638, 3086, 3590, 3091, 6406, 3093, 5382, 3094, 3334, 3097, 4870, 3107, 6278, 3109, 5254, 3110, 3206, 3113, 4742, 3121, 4486, 3139, 6214, 3141, 5190, 3145, 4678, 3153, 4422, 3169, 4294, 3203, 6182, 3205, 5158, 3209, 4646, 3217, 4390, 3233, 4262, 3265, 4198, 3331, 6166, 3333, 5142, 3337, 4630, 3345, 4374, 3361, 4246, 3393, 4182, 3457, 4150, 3587, 6158, 3589, 5134, 3593, 4622, 3601, 4366, 3617, 4238, 3649, 4174, 3713, 4142, 3841, 4126, 4111, 7681, 4119, 7425, 4123, 6913, 4125, 5889, 4135, 7297, 4139, 6785, 4141, 5761, 4147, 6529, 4149, 5505, 4153, 4993, 4167, 7233, 4171, 6721, 4173, 5697, 4179, 6465, 4181, 5441, 4185, 4929, 4195, 6337, 4197, 5313, 4201, 4801, 4209, 4545, 4231, 7201, 4235, 6689, 4237, 5665, 4243, 6433, 4245, 5409, 4249, 4897, 4259, 6305, 4261, 5281, 4265, 4769, 4273, 4513, 4291, 6241, 4293, 5217, 4297, 4705, 4305, 4449, 4359, 7185, 4363, 6673, 4365, 5649, 4371, 6417, 4373, 5393, 4377, 4881, 4387, 6289, 4389, 5265, 4393, 4753, 4401, 4497, 4419, 6225, 4421, 5201, 4425, 4689, 4483, 6193, 4485, 5169, 4489, 4657, 4615, 7177, 4619, 6665, 4621, 5641, 4627, 6409, 4629, 5385, 4633, 4873, 4643, 6281, 4645, 5257, 4649, 4745, 4675, 6217, 4677, 5193, 4739, 6185, 4741, 5161, 4867, 6169, 4869, 5145, 5127, 7173, 5131, 6661, 5133, 5637, 5139, 6405, 5141, 5381, 5155, 6277, 5157, 5253, 5187, 6213, 5251, 6181, 5379, 6165, 5635, 6157, 6151, 7171, 6155, 6659, 6163, 6403, 6179, 6275, 6211, 5189, 4681, 4433, 4321, 3142, 2634, 2386, 2274, 1612, 1364, 1252, 856, 744, 496]); //#12083
        $_.tab213 = $a([3, 6144, 5, 5120, 6, 3072, 9, 4608, 10, 2560, 12, 1536, 17, 4352, 18, 2304, 20, 1280, 24, 768, 33, 4224, 34, 2176, 36, 1152, 40, 640, 48, 384, 65, 4160, 66, 2112, 68, 1088, 72, 576, 80, 320, 96, 192, 129, 4128, 130, 2080, 132, 1056, 136, 544, 144, 288, 257, 4112, 258, 2064, 260, 1040, 264, 528, 513, 4104, 514, 2056, 516, 1032, 1025, 4100, 1026, 2052, 2049, 4098, 4097, 2050, 1028, 520, 272, 160]); //#12092
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_onecode.$ctx[id] = $_[id]); //#12092
        bwipp_onecode.__12093__ = 1; //#12092
        $_ = Object.getPrototypeOf($_); //#12092
    } //#12092
    $_.chars = $a(10); //#12095
    for (var _3V = 0; _3V <= 9; _3V += 1) { //#12104
        $_.i = _3V; //#12097
        var _3Y = $get($_.codewords, $_.i); //#12098
        $k[$j++] = _3Y; //#12102
        if (_3Y <= 1286) { //#12101
            var _3b = $get($_.tab513, $k[--$j]); //#12099
            $k[$j++] = _3b; //#12099
        } else { //#12101
            var _3e = $get($_.tab213, $f($k[--$j] - 1287)); //#12101
            $k[$j++] = _3e; //#12101
        } //#12101
        $k[$j++] = $_.chars; //#12103
        $k[$j++] = $_.i; //#12103
        $r(3, -1); //#12103
        var _3h = $k[--$j]; //#12103
        var _3i = $k[--$j]; //#12103
        $put($k[--$j], _3i, _3h); //#12103
    } //#12103
    for (var _3k = 9; _3k >= 0; _3k -= 1) { //#12111
        $_.i = _3k; //#12107
        if (((~~Math.pow(2, $_.i)) & $_.fcs) != 0) { //#12110
            $put($_.chars, $_.i, $get($_.chars, $_.i) ^ 8191); //#12109
        } //#12109
    } //#12109
    if (!bwipp_onecode.__12130__) { //#12130
        $_ = Object.create($_); //#12130
        $_.barmap = $a([7, 2, 4, 3, 1, 10, 0, 0, 9, 12, 2, 8, 5, 5, 6, 11, 8, 9, 3, 1, 0, 1, 5, 12, 2, 5, 1, 8, 4, 4, 9, 11, 6, 3, 8, 10, 3, 9, 7, 6, 5, 11, 1, 4, 8, 5, 2, 12, 9, 10, 0, 2, 7, 1, 6, 7, 3, 6, 4, 9, 0, 3, 8, 6, 6, 4, 2, 7, 1, 1, 9, 9, 7, 10, 5, 2, 4, 0, 3, 8, 6, 2, 0, 4, 8, 11, 1, 0, 9, 8, 3, 12, 2, 6, 7, 7, 5, 1, 4, 10, 1, 12, 6, 9, 7, 3, 8, 0, 5, 8, 9, 7, 4, 6, 2, 10, 3, 4, 0, 5, 8, 4, 5, 7, 7, 11, 1, 9, 6, 0, 9, 6, 0, 6, 4, 8, 2, 1, 3, 2, 5, 9, 8, 12, 4, 11, 6, 1, 9, 5, 7, 4, 3, 3, 1, 2, 0, 7, 2, 0, 1, 3, 4, 1, 6, 10, 3, 5, 8, 7, 9, 4, 2, 11, 5, 6, 0, 8, 7, 12, 4, 2, 8, 1, 5, 10, 3, 0, 9, 3, 0, 9, 6, 5, 2, 4, 7, 8, 1, 7, 5, 0, 4, 5, 2, 3, 0, 10, 6, 12, 9, 2, 3, 11, 1, 6, 8, 8, 7, 9, 5, 4, 0, 11, 1, 5, 2, 2, 9, 1, 4, 12, 8, 3, 6, 6, 7, 0, 3, 7, 4, 7, 7, 5, 0, 12, 1, 11, 2, 9, 9, 0, 6, 8, 5, 3, 3, 10, 8, 2]); //#12129
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_onecode.$ctx[id] = $_[id]); //#12129
        bwipp_onecode.__12130__ = 1; //#12129
        $_ = Object.getPrototypeOf($_); //#12129
    } //#12129
    $_.bbs = $a(65); //#12132
    $_.bhs = $a(65); //#12133
    for (var _3w = 0; _3w <= 64; _3w += 1) { //#12154
        $_.i = _3w; //#12135
        $_.dec = ($get($_.chars, $get($_.barmap, $_.i * 4)) & (~~Math.pow(2, $get($_.barmap, ($_.i * 4) + 1)))) != 0; //#12136
        $_.asc = ($get($_.chars, $get($_.barmap, ($_.i * 4) + 2)) & (~~Math.pow(2, $get($_.barmap, ($_.i * 4) + 3)))) != 0; //#12137
        if ((!$_.dec) && (!$_.asc)) { //#12141
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12139
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12140
        } //#12140
        if ((!$_.dec) && $_.asc) { //#12145
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12143
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12144
        } //#12144
        if ($_.dec && (!$_.asc)) { //#12149
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12147
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12148
        } //#12148
        if ($_.dec && $_.asc) { //#12153
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12151
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12152
        } //#12152
    } //#12152
    $k[$j++] = Infinity; //#12157
    var _4j = $_.bbs; //#12159
    var _4k = $_.bhs; //#12160
    $k[$j++] = Infinity; //#12161
    for (var _4m = 0, _4n = $_.bhs.length - 1; _4m < _4n; _4m++) { //#12161
        $k[$j++] = 1.44; //#12161
        $k[$j++] = 1.872; //#12161
    } //#12161
    $k[$j++] = 1.44; //#12161
    var _4o = $a(); //#12161
    $k[$j++] = 'ren'; //#12167
    $k[$j++] = 'renlinear'; //#12167
    $k[$j++] = 'bbs'; //#12167
    $k[$j++] = _4j; //#12167
    $k[$j++] = 'bhs'; //#12167
    $k[$j++] = _4k; //#12167
    $k[$j++] = 'sbs'; //#12167
    $k[$j++] = _4o; //#12167
    $k[$j++] = 'txt'; //#12167
    $k[$j++] = $_.txt; //#12167
    $k[$j++] = 'textxalign'; //#12167
    $k[$j++] = "left"; //#12167
    $k[$j++] = 'textfont'; //#12167
    $k[$j++] = "OCR-B"; //#12167
    $k[$j++] = 'textyoffset'; //#12167
    $k[$j++] = 1; //#12167
    $k[$j++] = 'textxoffset'; //#12167
    $k[$j++] = -0.3; //#12167
    $k[$j++] = 'opt'; //#12167
    $k[$j++] = $_.options; //#12167
    var _4r = $d(); //#12167
    $k[$j++] = _4r; //#12170
    if (!$_.dontdraw) { //#12170
        bwipp_renlinear(); //#12170
    } //#12170
    $_ = Object.getPrototypeOf($_); //#12172
    $_ = Object.getPrototypeOf($_); //#12174
} //bwipp_onecode
function bwipp_postnet() {
    $_ = Object.create($_); //#12204
    $_.dontdraw = false; //#12207
    $_.includetext = false; //#12208
    $_.validatecheck = false; //#12209
    $_.includecheckintext = false; //#12210
    $_.textfont = "OCR-B"; //#12211
    $_.textsize = 10; //#12212
    $_.textyoffset = -8; //#12213
    $_.height = 0.125; //#12214
    $k[$j++] = $_; //#12216
    bwipp_processoptions(); //#12216
    $_.options = $k[--$j]; //#12216
    $_.barcode = $k[--$j]; //#12217
    bwipp_loadctx(bwipp_postnet); //#12219
    $k[$j++] = 'barlen'; //#12221
    $k[$j++] = $_.barcode.length; //#12221
    if ($_.validatecheck) { //#12221
        var _4 = $k[--$j]; //#12221
        $k[$j++] = $f(_4 - 1); //#12221
    } //#12221
    var _5 = $k[--$j]; //#12221
    $_[$k[--$j]] = _5; //#12221
    if ((($_.barlen != 5) && ($_.barlen != 9)) && ($_.barlen != 11)) { //#12226
        $k[$j++] = 'bwipp.postnetBadLength#12225'; //#12225
        $k[$j++] = "USPS POSTNET must be 5, 9 or 11 digits excluding check digit"; //#12225
        bwipp_raiseerror(); //#12225
    } //#12225
    $forall($_.barcode, function() { //#12231
        var _B = $k[--$j]; //#12228
        if ((_B < 48) || (_B > 57)) { //#12230
            $k[$j++] = 'bwipp.postnetBadCharacter#12229'; //#12229
            $k[$j++] = "USPS POSTNET must contain only digits"; //#12229
            bwipp_raiseerror(); //#12229
        } //#12229
    }); //#12229
    if (!bwipp_postnet.__12243__) { //#12243
        $_ = Object.create($_); //#12243
        $_.barchars = "0123456789"; //#12235
        $_.encs = $a(["55222", "22255", "22525", "22552", "25225", "25252", "25522", "52225", "52252", "52522", "5", "5"]); //#12242
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_postnet.$ctx[id] = $_[id]); //#12242
        bwipp_postnet.__12243__ = 1; //#12242
        $_ = Object.getPrototypeOf($_); //#12242
    } //#12242
    $_.checksum = 0; //#12245
    for (var _G = 0, _F = $f($_.barlen - 1); _G <= _F; _G += 1) { //#12249
        $_.i = _G; //#12247
        $_.checksum = $f($_.checksum + $f($get($_.barcode, $_.i) - 48)); //#12248
    } //#12248
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#12250
    if ($_.validatecheck) { //#12256
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#12254
            $k[$j++] = 'bwipp.postnetBadCheckDigit#12253'; //#12253
            $k[$j++] = "Incorrect USPS POSTNET check digit provided"; //#12253
            bwipp_raiseerror(); //#12253
        } //#12253
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#12255
    } //#12255
    $_.bhs = $a($f(($_.barlen * 5) + 7)); //#12258
    $_.txt = $a($f($_.barlen + 1)); //#12259
    $_.enc = $get($_.encs, 10); //#12262
    $_.heights = $a($_.enc.length); //#12263
    for (var _g = 0, _f = $_.enc.length - 1; _g <= _f; _g += 1) { //#12267
        $_.j = _g; //#12265
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12266
    } //#12266
    $puti($_.bhs, 0, $_.heights); //#12268
    for (var _r = 0, _q = $f($_.barlen - 1); _r <= _q; _r += 1) { //#12280
        $_.i = _r; //#12271
        $_.enc = $get($_.encs, $f($get($_.barcode, $_.i) - 48)); //#12272
        $_.heights = $a($_.enc.length); //#12273
        for (var _11 = 0, _10 = $_.enc.length - 1; _11 <= _10; _11 += 1) { //#12277
            $_.j = _11; //#12275
            $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12276
        } //#12276
        $puti($_.bhs, ($_.i * 5) + 1, $_.heights); //#12278
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 5) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12279
    } //#12279
    $_.enc = $get($_.encs, $_.checksum); //#12283
    $_.heights = $a($_.enc.length); //#12284
    for (var _1S = 0, _1R = $_.enc.length - 1; _1S <= _1R; _1S += 1) { //#12288
        $_.j = _1S; //#12286
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12287
    } //#12287
    $puti($_.bhs, $f(($_.barlen * 5) + 1), $_.heights); //#12289
    if ($_.includecheckintext) { //#12294
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($f(($_.barlen * 5) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12292
    } else { //#12294
        $put($_.txt, $_.barlen, $a([" ", (($f(($_.barlen * 5) + 1)) * 72) / 25, $_.textyoffset, $_.textfont, $_.textsize])); //#12294
    } //#12294
    $_.enc = $get($_.encs, 11); //#12298
    $_.heights = $a($_.enc.length); //#12299
    for (var _20 = 0, _1z = $_.enc.length - 1; _20 <= _1z; _20 += 1) { //#12303
        $_.j = _20; //#12301
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12302
    } //#12302
    $puti($_.bhs, $f(($_.barlen * 5) + 6), $_.heights); //#12304
    $k[$j++] = Infinity; //#12307
    var _2A = $_.bhs; //#12309
    $k[$j++] = Infinity; //#12310
    for (var _2C = 0, _2D = $_.bhs.length; _2C < _2D; _2C++) { //#12310
        $k[$j++] = 0; //#12310
    } //#12310
    var _2E = $a(); //#12310
    $k[$j++] = Infinity; //#12311
    for (var _2G = 0, _2H = $_.bhs.length - 1; _2G < _2H; _2G++) { //#12311
        $k[$j++] = 1.44; //#12311
        $k[$j++] = 1.872; //#12311
    } //#12311
    $k[$j++] = 1.44; //#12311
    var _2I = $a(); //#12311
    $k[$j++] = 'ren'; //#12314
    $k[$j++] = 'renlinear'; //#12314
    $k[$j++] = 'bhs'; //#12314
    $k[$j++] = _2A; //#12314
    $k[$j++] = 'bbs'; //#12314
    $k[$j++] = _2E; //#12314
    $k[$j++] = 'sbs'; //#12314
    $k[$j++] = _2I; //#12314
    if ($_.includetext) { //#12314
        $k[$j++] = 'txt'; //#12313
        $k[$j++] = $_.txt; //#12313
    } //#12313
    $k[$j++] = 'opt'; //#12315
    $k[$j++] = $_.options; //#12315
    var _2M = $d(); //#12315
    $k[$j++] = _2M; //#12318
    if (!$_.dontdraw) { //#12318
        bwipp_renlinear(); //#12318
    } //#12318
    $_ = Object.getPrototypeOf($_); //#12320
    $_ = Object.getPrototypeOf($_); //#12322
} //bwipp_postnet
function bwipp_planet() {
    $_ = Object.create($_); //#12352
    $_.dontdraw = false; //#12355
    $_.includetext = false; //#12356
    $_.validatecheck = false; //#12357
    $_.includecheckintext = false; //#12358
    $_.textfont = "OCR-B"; //#12359
    $_.textsize = 10; //#12360
    $_.textyoffset = -8; //#12361
    $_.height = 0.125; //#12362
    $k[$j++] = $_; //#12364
    bwipp_processoptions(); //#12364
    $_.options = $k[--$j]; //#12364
    $_.barcode = $k[--$j]; //#12365
    bwipp_loadctx(bwipp_planet); //#12367
    $k[$j++] = 'barlen'; //#12369
    $k[$j++] = $_.barcode.length; //#12369
    if ($_.validatecheck) { //#12369
        var _4 = $k[--$j]; //#12369
        $k[$j++] = $f(_4 - 1); //#12369
    } //#12369
    var _5 = $k[--$j]; //#12369
    $_[$k[--$j]] = _5; //#12369
    if (($_.barlen != 11) && ($_.barlen != 13)) { //#12374
        $k[$j++] = 'bwipp.planetBadLength#12373'; //#12373
        $k[$j++] = "USPS PLANET must be 11 or 13 digits excluding check digit"; //#12373
        bwipp_raiseerror(); //#12373
    } //#12373
    $forall($_.barcode, function() { //#12379
        var _A = $k[--$j]; //#12376
        if ((_A < 48) || (_A > 57)) { //#12378
            $k[$j++] = 'bwipp.planetBadCharacter#12377'; //#12377
            $k[$j++] = "USPS PLANET must contain only digits"; //#12377
            bwipp_raiseerror(); //#12377
        } //#12377
    }); //#12377
    if (!bwipp_planet.__12391__) { //#12391
        $_ = Object.create($_); //#12391
        $_.barchars = "0123456789"; //#12383
        $_.encs = $a(["22555", "55522", "55252", "55225", "52552", "52525", "52255", "25552", "25525", "25255", "5", "5"]); //#12390
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_planet.$ctx[id] = $_[id]); //#12390
        bwipp_planet.__12391__ = 1; //#12390
        $_ = Object.getPrototypeOf($_); //#12390
    } //#12390
    $_.checksum = 0; //#12394
    for (var _F = 0, _E = $f($_.barlen - 1); _F <= _E; _F += 1) { //#12398
        $_.i = _F; //#12396
        $_.checksum = $f($_.checksum + $f($get($_.barcode, $_.i) - 48)); //#12397
    } //#12397
    $_.checksum = ($f(10 - ($_.checksum % 10))) % 10; //#12399
    if ($_.validatecheck) { //#12405
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#12403
            $k[$j++] = 'bwipp.planetBadCheckDigit#12402'; //#12402
            $k[$j++] = "Incorrect USPS PLANET check digit provided"; //#12402
            bwipp_raiseerror(); //#12402
        } //#12402
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#12404
    } //#12404
    $_.bhs = $a($f(($_.barlen * 5) + 7)); //#12407
    $_.txt = $a($f($_.barlen + 1)); //#12408
    $_.enc = $get($_.encs, 10); //#12411
    $_.heights = $a($_.enc.length); //#12412
    for (var _f = 0, _e = $_.enc.length - 1; _f <= _e; _f += 1) { //#12416
        $_.j = _f; //#12414
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12415
    } //#12415
    $puti($_.bhs, 0, $_.heights); //#12417
    for (var _q = 0, _p = $f($_.barlen - 1); _q <= _p; _q += 1) { //#12429
        $_.i = _q; //#12420
        $_.enc = $get($_.encs, $f($get($_.barcode, $_.i) - 48)); //#12421
        $_.heights = $a($_.enc.length); //#12422
        for (var _10 = 0, _z = $_.enc.length - 1; _10 <= _z; _10 += 1) { //#12426
            $_.j = _10; //#12424
            $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12425
        } //#12425
        $puti($_.bhs, ($_.i * 5) + 1, $_.heights); //#12427
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 5) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12428
    } //#12428
    $_.enc = $get($_.encs, $_.checksum); //#12432
    $_.heights = $a($_.enc.length); //#12433
    for (var _1R = 0, _1Q = $_.enc.length - 1; _1R <= _1Q; _1R += 1) { //#12437
        $_.j = _1R; //#12435
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12436
    } //#12436
    $puti($_.bhs, $f(($_.barlen * 5) + 1), $_.heights); //#12438
    if ($_.includecheckintext) { //#12443
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($f(($_.barlen * 5) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12441
    } else { //#12443
        $put($_.txt, $_.barlen, $a([" ", (($f(($_.barlen * 5) + 1)) * 72) / 25, $_.textyoffset, $_.textfont, $_.textsize])); //#12443
    } //#12443
    $_.enc = $get($_.encs, 11); //#12447
    $_.heights = $a($_.enc.length); //#12448
    for (var _1z = 0, _1y = $_.enc.length - 1; _1z <= _1y; _1z += 1) { //#12452
        $_.j = _1z; //#12450
        $put($_.heights, $_.j, ($cvi($geti($_.enc, $_.j, 1)) * $_.height) / 5); //#12451
    } //#12451
    $puti($_.bhs, $f(($_.barlen * 5) + 6), $_.heights); //#12453
    $k[$j++] = Infinity; //#12456
    var _29 = $_.bhs; //#12458
    $k[$j++] = Infinity; //#12459
    for (var _2B = 0, _2C = $_.bhs.length; _2B < _2C; _2B++) { //#12459
        $k[$j++] = 0; //#12459
    } //#12459
    var _2D = $a(); //#12459
    $k[$j++] = Infinity; //#12460
    for (var _2F = 0, _2G = $_.bhs.length - 1; _2F < _2G; _2F++) { //#12460
        $k[$j++] = 1.44; //#12460
        $k[$j++] = 1.872; //#12460
    } //#12460
    $k[$j++] = 1.44; //#12460
    var _2H = $a(); //#12460
    $k[$j++] = 'ren'; //#12463
    $k[$j++] = 'renlinear'; //#12463
    $k[$j++] = 'bhs'; //#12463
    $k[$j++] = _29; //#12463
    $k[$j++] = 'bbs'; //#12463
    $k[$j++] = _2D; //#12463
    $k[$j++] = 'sbs'; //#12463
    $k[$j++] = _2H; //#12463
    if ($_.includetext) { //#12463
        $k[$j++] = 'txt'; //#12462
        $k[$j++] = $_.txt; //#12462
    } //#12462
    $k[$j++] = 'opt'; //#12464
    $k[$j++] = $_.options; //#12464
    var _2L = $d(); //#12464
    $k[$j++] = _2L; //#12467
    if (!$_.dontdraw) { //#12467
        bwipp_renlinear(); //#12467
    } //#12467
    $_ = Object.getPrototypeOf($_); //#12469
    $_ = Object.getPrototypeOf($_); //#12471
} //bwipp_planet
function bwipp_royalmail() {
    $_ = Object.create($_); //#12501
    $_.dontdraw = false; //#12504
    $_.includetext = false; //#12505
    $_.validatecheck = false; //#12506
    $_.includecheckintext = false; //#12507
    $_.textfont = "OCR-B"; //#12508
    $_.textsize = 10; //#12509
    $_.textyoffset = -8; //#12510
    $_.height = 0.175; //#12511
    $k[$j++] = $_; //#12513
    bwipp_processoptions(); //#12513
    $_.options = $k[--$j]; //#12513
    $_.barcode = $k[--$j]; //#12514
    if ($eq($_.barcode, "")) { //#12518
        $k[$j++] = 'bwipp.royalmailEmptyData#12517'; //#12517
        $k[$j++] = "The data must not be empty"; //#12517
        bwipp_raiseerror(); //#12517
    } //#12517
    bwipp_loadctx(bwipp_royalmail); //#12520
    if (!bwipp_royalmail.__12538__) { //#12538
        $_ = Object.create($_); //#12538
        $_.barchars = "ZUVWXY501234B6789AHCDEFGNIJKLMTOPQRS"; //#12524
        $_.charvals = new Map; //#12525
        for (var _3 = 0; _3 <= 35; _3 += 1) { //#12526
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#12526
        } //#12526
        $_.encs = $a(["3300", "2211", "2301", "2310", "3201", "3210", "1122", "0033", "0123", "0132", "1023", "1032", "1302", "0213", "0303", "0312", "1203", "1212", "1320", "0231", "0321", "0330", "1221", "1230", "3102", "2013", "2103", "2112", "3003", "3012", "3120", "2031", "2121", "2130", "3021", "3030", "2", "3"]); //#12537
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_royalmail.$ctx[id] = $_[id]); //#12537
        bwipp_royalmail.__12538__ = 1; //#12537
        $_ = Object.getPrototypeOf($_); //#12537
    } //#12537
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#12545
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#12542
        if (!_F) { //#12544
            $k[$j++] = 'bwipp.royalmailBadCharacter#12543'; //#12543
            $k[$j++] = "RM4SCC must contain only capital letters and digits"; //#12543
            bwipp_raiseerror(); //#12543
        } //#12543
    } //#12543
    $k[$j++] = 'barlen'; //#12547
    $k[$j++] = $_.barcode.length; //#12547
    if ($_.validatecheck) { //#12547
        var _I = $k[--$j]; //#12547
        $k[$j++] = $f(_I - 1); //#12547
    } //#12547
    var _J = $k[--$j]; //#12547
    $_[$k[--$j]] = _J; //#12547
    $_.checksumrow = 0; //#12549
    $_.checksumcol = 0; //#12550
    for (var _N = 0, _M = $f($_.barlen - 1); _N <= _M; _N += 1) { //#12556
        $_.i = _N; //#12552
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12553
        $_.checksumrow = $_.checksumrow + (~~($_.indx / 6)); //#12554
        $_.checksumcol = $f($_.checksumcol + ($_.indx % 6)); //#12555
    } //#12555
    $_.checksum = $f((($_.checksumrow % 6) * 6) + ($_.checksumcol % 6)); //#12557
    if ($_.validatecheck) { //#12563
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#12561
            $k[$j++] = 'bwipp.royalmailBadCheckDigit#12560'; //#12560
            $k[$j++] = "Incorrect RM4SCC check digit provided"; //#12560
            bwipp_raiseerror(); //#12560
        } //#12560
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#12562
    } //#12562
    $_.encstr = $s($f(($_.barlen * 4) + 6)); //#12565
    $_.txt = $a($f($_.barlen + 1)); //#12566
    $puti($_.encstr, 0, $get($_.encs, 36)); //#12569
    for (var _s = 0, _r = $f($_.barlen - 1); _s <= _r; _s += 1) { //#12576
        $_.i = _s; //#12572
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12573
        $puti($_.encstr, ($_.i * 4) + 1, $get($_.encs, $_.indx)); //#12574
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.i * 4) + 1) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12575
    } //#12575
    $puti($_.encstr, $f(($_.barlen * 4) + 1), $get($_.encs, $_.checksum)); //#12579
    if ($_.includecheckintext) { //#12583
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum, 1), ($f(($_.barlen * 4) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12581
    } else { //#12583
        $put($_.txt, $_.barlen, $a([" ", ($f(($_.barlen * 4) + 1)) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12583
    } //#12583
    $puti($_.encstr, $f(($_.barlen * 4) + 5), $get($_.encs, 37)); //#12587
    $_.bbs = $a($_.encstr.length); //#12589
    $_.bhs = $a($_.encstr.length); //#12590
    for (var _1k = 0, _1j = $_.encstr.length - 1; _1k <= _1j; _1k += 1) { //#12610
        $_.i = _1k; //#12592
        $_.enc = $geti($_.encstr, $_.i, 1); //#12593
        if ($eq($_.enc, "0")) { //#12597
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12595
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12596
        } //#12596
        if ($eq($_.enc, "1")) { //#12601
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12599
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12600
        } //#12600
        if ($eq($_.enc, "2")) { //#12605
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12603
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12604
        } //#12604
        if ($eq($_.enc, "3")) { //#12609
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12607
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12608
        } //#12608
    } //#12608
    $k[$j++] = Infinity; //#12613
    var _2G = $_.bbs; //#12615
    var _2H = $_.bhs; //#12616
    $k[$j++] = Infinity; //#12617
    for (var _2J = 0, _2K = $_.bhs.length - 1; _2J < _2K; _2J++) { //#12617
        $k[$j++] = 1.44; //#12617
        $k[$j++] = 1.872; //#12617
    } //#12617
    $k[$j++] = 1.44; //#12617
    var _2L = $a(); //#12617
    $k[$j++] = 'ren'; //#12620
    $k[$j++] = 'renlinear'; //#12620
    $k[$j++] = 'bbs'; //#12620
    $k[$j++] = _2G; //#12620
    $k[$j++] = 'bhs'; //#12620
    $k[$j++] = _2H; //#12620
    $k[$j++] = 'sbs'; //#12620
    $k[$j++] = _2L; //#12620
    if ($_.includetext) { //#12620
        $k[$j++] = 'txt'; //#12619
        $k[$j++] = $_.txt; //#12619
    } //#12619
    $k[$j++] = 'opt'; //#12621
    $k[$j++] = $_.options; //#12621
    var _2P = $d(); //#12621
    $k[$j++] = _2P; //#12624
    if (!$_.dontdraw) { //#12624
        bwipp_renlinear(); //#12624
    } //#12624
    $_ = Object.getPrototypeOf($_); //#12626
    $_ = Object.getPrototypeOf($_); //#12628
} //bwipp_royalmail
function bwipp_auspost() {
    $_ = Object.create($_); //#12658
    $_.dontdraw = false; //#12661
    $_.includetext = false; //#12662
    $_.textfont = "OCR-B"; //#12663
    $_.textsize = 10; //#12664
    $_.textyoffset = -8; //#12665
    $_.height = 0.175; //#12666
    $_.custinfoenc = "character"; //#12667
    $k[$j++] = $_; //#12669
    bwipp_processoptions(); //#12669
    $_.options = $k[--$j]; //#12669
    $_.barcode = $k[--$j]; //#12670
    if ($ne($_.custinfoenc, "character") && $ne($_.custinfoenc, "numeric")) { //#12674
        $k[$j++] = 'bwipp.auspostBadCustinfoEncoding#12673'; //#12673
        $k[$j++] = "Customer information encoding must be either character or numeric"; //#12673
        bwipp_raiseerror(); //#12673
    } //#12673
    bwipp_loadctx(bwipp_auspost); //#12676
    if (!bwipp_auspost.__12699__) { //#12699
        $_ = Object.create($_); //#12699
        $_.encs = $a(["000", "001", "002", "010", "011", "012", "020", "021", "022", "100", "101", "102", "110", "111", "112", "120", "121", "122", "200", "201", "202", "210", "211", "212", "220", "221", "222", "300", "301", "302", "310", "311", "312", "320", "321", "322", "023", "030", "031", "032", "033", "103", "113", "123", "130", "131", "132", "133", "203", "213", "223", "230", "231", "232", "233", "303", "313", "323", "330", "331", "332", "333", "003", "013", "00", "01", "02", "10", "11", "12", "20", "21", "22", "30", "13", "3"]); //#12691
        $_.barchars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz #"; //#12694
        var _5 = new Map([
            ["11", 37],
            ["45", 37],
            ["59", 52],
            ["62", 67]
        ]); //#12697
        $_.fcclen = _5; //#12697
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_auspost.$ctx[id] = $_[id]); //#12697
        bwipp_auspost.__12699__ = 1; //#12697
        $_ = Object.getPrototypeOf($_); //#12697
    } //#12697
    $_.barlen = $_.barcode.length; //#12701
    if ($_.barlen < 10) { //#12704
        $k[$j++] = 'bwipp.auspostTooShort#12703'; //#12703
        $k[$j++] = "The data length must be at least 10"; //#12703
        bwipp_raiseerror(); //#12703
    } //#12703
    $_.txt = $a($_.barlen - 2); //#12706
    $k[$j++] = $_.fcclen; //#12708
    if ($_.barlen >= 2) { //#12708
        $k[$j++] = $geti($_.barcode, 0, 2); //#12708
    } else { //#12708
        $k[$j++] = ""; //#12708
    } //#12708
    var _F = $k[--$j]; //#12709
    var _G = $k[--$j]; //#12709
    var _H = $get(_G, _F) !== undefined; //#12709
    $k[$j++] = _G; //#12711
    $k[$j++] = _F; //#12711
    if (!_H) { //#12711
        $j -= 2; //#12710
        $k[$j++] = 'bwipp.auspostBadFCC#12710'; //#12710
        $k[$j++] = "Must begin with an FCC, either 11, 45, 59 or 62"; //#12710
        bwipp_raiseerror(); //#12710
    } //#12710
    var _I = $k[--$j]; //#12712
    $_.encstr = $s($get($k[--$j], _I)); //#12712
    $k[$j++] = true; //#12719
    for (var _M = 0, _N = 1; _M < _N; _M++) { //#12719
        if ($_.barlen < 10) { //#12717
            $j--; //#12717
            $k[$j++] = false; //#12717
            break; //#12717
        } //#12717
        var _Q = $geti($_.barcode, 2, 8); //#12718
        for (var _R = 0, _S = _Q.length; _R < _S; _R++) { //#12718
            var _T = $get(_Q, _R); //#12718
            if ((_T < 48) || (_T > 57)) { //#12718
                $j--; //#12718
                $k[$j++] = false; //#12718
                break; //#12718
            } //#12718
        } //#12718
    } //#12718
    if ($nt($k[--$j])) { //#12722
        $k[$j++] = 'bwipp.auspostIncompleteDPID#12721'; //#12721
        $k[$j++] = "The DPID must be 8 digits"; //#12721
        bwipp_raiseerror(); //#12721
    } //#12721
    var _X = $eq($_.custinfoenc, "numeric") ? 2 : 3; //#12725
    if ((($_.barlen - 10) * _X) > (($_.encstr.length - 22) - 14)) { //#12728
        $k[$j++] = 'bwipp.auspostTooLong#12727'; //#12727
        $k[$j++] = "The message is too long"; //#12727
        bwipp_raiseerror(); //#12727
    } //#12727
    $puti($_.encstr, 0, $get($_.encs, 74)); //#12731
    for (var _c = 0; _c <= 1; _c += 1) { //#12738
        $_.i = _c; //#12735
        $puti($_.encstr, ($_.i * 2) + 2, $get($_.encs, $cvi($geti($_.barcode, $_.i, 1)) + 64)); //#12737
    } //#12737
    for (var _k = 2; _k <= 9; _k += 1) { //#12746
        $_.i = _k; //#12742
        $puti($_.encstr, ($_.i * 2) + 2, $get($_.encs, $cvi($geti($_.barcode, $_.i, 1)) + 64)); //#12744
        $put($_.txt, $_.i - 2, $a([$geti($_.barcode, $_.i, 1), ((($_.i - 2) * 2) + 6) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12745
    } //#12745
    if ($eq($_.custinfoenc, "numeric")) { //#12774
        for (var _15 = 0, _14 = $_.barlen - 11; _15 <= _14; _15 += 1) { //#12759
            $_.i = _15; //#12751
            var _19 = $get($_.barcode, $_.i + 10); //#12752
            $k[$j++] = $_.encs; //#12755
            $k[$j++] = _19; //#12755
            if ((_19 < 48) || (_19 > 57)) { //#12755
                $k[$j++] = 'bwipp.auspostInvalidCustinfoDigit#12754'; //#12754
                $k[$j++] = "The customer information data contains a non-digit character"; //#12754
                bwipp_raiseerror(); //#12754
            } //#12754
            var _1A = $k[--$j]; //#12756
            $puti($_.encstr, ($_.i * 2) + 22, $get($k[--$j], $f($f(_1A - 48) + 64))); //#12757
            $put($_.txt, $_.i + 8, $a([$geti($_.barcode, $_.i + 10, 1), (($_.i * 2) + 22) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12758
        } //#12758
        $_.ciflen = ($_.barlen - 10) * 2; //#12760
    } else { //#12774
        for (var _1S = 0, _1R = $_.barlen - 11; _1S <= _1R; _1S += 1) { //#12773
            $_.i = _1S; //#12763
            $search($_.barchars, $geti($_.barcode, $_.i + 10, 1)); //#12764
            if ($nt($k[--$j])) { //#12767
                $j--; //#12766
                $k[$j++] = 'bwipp.auspostInvalidCustinfoCharacter#12766'; //#12766
                $k[$j++] = "The customer information contains an invalid character"; //#12766
                bwipp_raiseerror(); //#12766
            } //#12766
            $_.indx = $k[--$j].length; //#12768
            $j -= 2; //#12769
            $_.enc = $get($_.encs, $_.indx); //#12770
            $puti($_.encstr, ($_.i * 3) + 22, $_.enc); //#12771
            $put($_.txt, $_.i + 8, $a([$geti($_.barcode, $_.i + 10, 1), (($_.i * 3) + 22) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12772
        } //#12772
        $_.ciflen = ($_.barlen - 10) * 3; //#12774
    } //#12774
    for (var _1t = 22 + $_.ciflen, _1s = $_.encstr.length - 14; _1t <= _1s; _1t += 1) { //#12780
        $puti($_.encstr, _1t, $get($_.encs, 75)); //#12779
    } //#12779
    if (!bwipp_auspost.__12803__) { //#12803
        $_ = Object.create($_); //#12803
        $_.rstable = $a(64 * 64); //#12784
        $k[$j++] = $_.rstable; //#12785
        $k[$j++] = 0; //#12785
        $k[$j++] = Infinity; //#12785
        for (var _1z = 0, _20 = 64; _1z < _20; _1z++) { //#12785
            $k[$j++] = 0; //#12785
        } //#12785
        var _21 = $a(); //#12785
        var _22 = $k[--$j]; //#12785
        $puti($k[--$j], _22, _21); //#12785
        $k[$j++] = $_.rstable; //#12786
        $k[$j++] = 64; //#12786
        $k[$j++] = Infinity; //#12786
        for (var _25 = 0; _25 <= 63; _25 += 1) { //#12786
            $k[$j++] = _25; //#12786
        } //#12786
        var _26 = $a(); //#12786
        var _27 = $k[--$j]; //#12786
        $puti($k[--$j], _27, _26); //#12786
        $_.prev = 1; //#12787
        for (var _29 = 0, _2A = 64; _29 < _2A; _29++) { //#12802
            $_.next = $_.prev << 1; //#12789
            if (($_.next & 64) != 0) { //#12792
                $_.next = $_.next ^ 67; //#12791
            } //#12791
            for (var _2E = 0; _2E <= 63; _2E += 1) { //#12800
                $_.j = _2E; //#12794
                $_.nextcell = function() {
                    $k[$j++] = $_.rstable; //#12795
                    $k[$j++] = (64 * $_.next) + $_.j; //#12795
                }; //#12795
                $_.nextcell(); //#12796
                var _2M = $k[--$j]; //#12796
                $put($k[--$j], _2M, $get($_.rstable, (64 * $_.prev) + $_.j) << 1); //#12796
                $_.nextcell(); //#12797
                var _2O = $k[--$j]; //#12797
                if (($get($k[--$j], _2O) & 64) != 0) { //#12799
                    $_.nextcell(); //#12798
                    $_.nextcell(); //#12798
                    var _2R = $k[--$j]; //#12798
                    var _2T = $get($k[--$j], _2R); //#12798
                    var _2U = $k[--$j]; //#12798
                    $put($k[--$j], _2U, _2T ^ 67); //#12798
                } //#12798
            } //#12798
            $_.prev = $_.next; //#12801
        } //#12801
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_auspost.$ctx[id] = $_[id]); //#12801
        bwipp_auspost.__12803__ = 1; //#12801
        $_ = Object.getPrototypeOf($_); //#12801
    } //#12801
    $_.rscodes = $a((~~(($_.encstr.length - 16) / 3)) + 4); //#12806
    $k[$j++] = $_.rscodes; //#12807
    $k[$j++] = 0; //#12807
    $k[$j++] = Infinity; //#12807
    for (var _2b = 0, _2c = 4; _2b < _2c; _2b++) { //#12807
        $k[$j++] = 0; //#12807
    } //#12807
    var _2d = $a(); //#12807
    var _2e = $k[--$j]; //#12807
    $puti($k[--$j], _2e, _2d); //#12807
    for (var _2i = 2, _2h = $_.encstr.length - 16; _2i <= _2h; _2i += 3) { //#12815
        $_.i = _2i; //#12809
        $put($_.rscodes, ($_.rscodes.length - (~~(($_.i - 2) / 3))) - 1, (($cvi($geti($_.encstr, $_.i, 1)) * 16) + ($cvi($geti($_.encstr, $_.i + 1, 1)) * 4)) + $cvi($geti($_.encstr, $_.i + 2, 1))); //#12814
    } //#12814
    for (var _2w = $_.rscodes.length - 5; _2w >= 0; _2w -= 1) { //#12824
        $_.i = _2w; //#12817
        for (var _2x = 0; _2x <= 4; _2x += 1) { //#12823
            $_.j = _2x; //#12819
            $put($_.rscodes, $_.i + $_.j, $xo($get($_.rscodes, $_.i + $_.j), $get($_.rstable, $f((64 * $get($a([48, 17, 29, 30, 1]), $_.j)) + $get($_.rscodes, $_.i + 4))))); //#12822
        } //#12822
    } //#12822
    $_.checkcode = $strcpy($s(12), "000000000000"); //#12825
    for (var _3F = 0; _3F <= 3; _3F += 1) { //#12830
        $_.i = _3F; //#12827
        $_.enc = $cvrs($s(3), $get($_.rscodes, 3 - $_.i), 4); //#12828
        $puti($_.checkcode, ($_.i * 3) + (3 - $_.enc.length), $_.enc); //#12829
    } //#12829
    $puti($_.encstr, $_.encstr.length - 14, $_.checkcode); //#12833
    $puti($_.encstr, $_.encstr.length - 2, $get($_.encs, 74)); //#12834
    $_.bbs = $a($_.encstr.length); //#12836
    $_.bhs = $a($_.encstr.length); //#12837
    for (var _3c = 0, _3b = $_.encstr.length - 1; _3c <= _3b; _3c += 1) { //#12857
        $_.i = _3c; //#12839
        $_.enc = $geti($_.encstr, $_.i, 1); //#12840
        if ($eq($_.enc, "0")) { //#12844
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12842
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12843
        } //#12843
        if ($eq($_.enc, "1")) { //#12848
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12846
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12847
        } //#12847
        if ($eq($_.enc, "2")) { //#12852
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12850
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12851
        } //#12851
        if ($eq($_.enc, "3")) { //#12856
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12854
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12855
        } //#12855
    } //#12855
    $k[$j++] = Infinity; //#12860
    var _48 = $_.bbs; //#12862
    var _49 = $_.bhs; //#12863
    $k[$j++] = Infinity; //#12864
    for (var _4B = 0, _4C = $_.bhs.length - 1; _4B < _4C; _4B++) { //#12864
        $k[$j++] = 1.44; //#12864
        $k[$j++] = 1.872; //#12864
    } //#12864
    $k[$j++] = 1.44; //#12864
    var _4D = $a(); //#12864
    $k[$j++] = 'ren'; //#12867
    $k[$j++] = 'renlinear'; //#12867
    $k[$j++] = 'bbs'; //#12867
    $k[$j++] = _48; //#12867
    $k[$j++] = 'bhs'; //#12867
    $k[$j++] = _49; //#12867
    $k[$j++] = 'sbs'; //#12867
    $k[$j++] = _4D; //#12867
    if ($_.includetext) { //#12867
        $k[$j++] = 'txt'; //#12866
        $k[$j++] = $_.txt; //#12866
    } //#12866
    $k[$j++] = 'opt'; //#12868
    $k[$j++] = $_.options; //#12868
    var _4H = $d(); //#12868
    $k[$j++] = _4H; //#12871
    if (!$_.dontdraw) { //#12871
        bwipp_renlinear(); //#12871
    } //#12871
    $_ = Object.getPrototypeOf($_); //#12873
    $_ = Object.getPrototypeOf($_); //#12875
} //bwipp_auspost
function bwipp_kix() {
    $_ = Object.create($_); //#12905
    $_.dontdraw = false; //#12908
    $_.includetext = false; //#12909
    $_.textfont = "OCR-B"; //#12910
    $_.textsize = 10; //#12911
    $_.textyoffset = -8; //#12912
    $_.height = 0.175; //#12913
    $k[$j++] = $_; //#12915
    bwipp_processoptions(); //#12915
    $_.options = $k[--$j]; //#12915
    $_.barcode = $k[--$j]; //#12916
    if ($eq($_.barcode, "")) { //#12920
        $k[$j++] = 'bwipp.kixEmptyData#12919'; //#12919
        $k[$j++] = "The data must not be empty"; //#12919
        bwipp_raiseerror(); //#12919
    } //#12919
    bwipp_loadctx(bwipp_kix); //#12922
    if (!bwipp_kix.__12939__) { //#12939
        $_ = Object.create($_); //#12939
        $_.encs = $a(["0033", "0123", "0132", "1023", "1032", "1122", "0213", "0303", "0312", "1203", "1212", "1302", "0231", "0321", "0330", "1221", "1230", "1320", "2013", "2103", "2112", "3003", "3012", "3102", "2031", "2121", "2130", "3021", "3030", "3120", "2211", "2301", "2310", "3201", "3210", "3300"]); //#12933
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#12936
        $_.charvals = new Map; //#12937
        for (var _4 = 0; _4 <= 35; _4 += 1) { //#12938
            $put($_.charvals, $geti($_.barchars, _4, 1), _4); //#12938
        } //#12938
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_kix.$ctx[id] = $_[id]); //#12938
        bwipp_kix.__12939__ = 1; //#12938
        $_ = Object.getPrototypeOf($_); //#12938
    } //#12938
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#12946
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#12943
        if (!_F) { //#12945
            $k[$j++] = 'bwipp.kixBadCharacter#12944'; //#12944
            $k[$j++] = "KIX must contain only capital letters and digits"; //#12944
            bwipp_raiseerror(); //#12944
        } //#12944
    } //#12944
    $_.barlen = $_.barcode.length; //#12948
    $_.encstr = $s($_.barlen * 4); //#12949
    $_.txt = $a($_.barlen); //#12950
    for (var _N = 0, _M = $_.barlen - 1; _N <= _M; _N += 1) { //#12957
        $_.i = _N; //#12953
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#12954
        $puti($_.encstr, $_.i * 4, $get($_.encs, $_.indx)); //#12955
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 4) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#12956
    } //#12956
    $_.bbs = $a($_.encstr.length); //#12959
    $_.bhs = $a($_.encstr.length); //#12960
    for (var _o = 0, _n = $_.encstr.length - 1; _o <= _n; _o += 1) { //#12980
        $_.i = _o; //#12962
        $_.enc = $geti($_.encstr, $_.i, 1); //#12963
        if ($eq($_.enc, "0")) { //#12967
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12965
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#12966
        } //#12966
        if ($eq($_.enc, "1")) { //#12971
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12969
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12970
        } //#12970
        if ($eq($_.enc, "2")) { //#12975
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#12973
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#12974
        } //#12974
        if ($eq($_.enc, "3")) { //#12979
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#12977
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#12978
        } //#12978
    } //#12978
    $k[$j++] = Infinity; //#12983
    var _1K = $_.bbs; //#12985
    var _1L = $_.bhs; //#12986
    $k[$j++] = Infinity; //#12987
    for (var _1N = 0, _1O = $_.bhs.length - 1; _1N < _1O; _1N++) { //#12987
        $k[$j++] = 1.44; //#12987
        $k[$j++] = 1.872; //#12987
    } //#12987
    $k[$j++] = 1.44; //#12987
    var _1P = $a(); //#12987
    $k[$j++] = 'ren'; //#12990
    $k[$j++] = 'renlinear'; //#12990
    $k[$j++] = 'bbs'; //#12990
    $k[$j++] = _1K; //#12990
    $k[$j++] = 'bhs'; //#12990
    $k[$j++] = _1L; //#12990
    $k[$j++] = 'sbs'; //#12990
    $k[$j++] = _1P; //#12990
    if ($_.includetext) { //#12990
        $k[$j++] = 'txt'; //#12989
        $k[$j++] = $_.txt; //#12989
    } //#12989
    $k[$j++] = 'opt'; //#12991
    $k[$j++] = $_.options; //#12991
    var _1T = $d(); //#12991
    $k[$j++] = _1T; //#12994
    if (!$_.dontdraw) { //#12994
        bwipp_renlinear(); //#12994
    } //#12994
    $_ = Object.getPrototypeOf($_); //#12996
    $_ = Object.getPrototypeOf($_); //#12998
} //bwipp_kix
function bwipp_japanpost() {
    $_ = Object.create($_); //#13028
    $_.dontdraw = false; //#13031
    $_.includetext = false; //#13032
    $_.includecheckintext = false; //#13033
    $_.textfont = "OCR-B"; //#13034
    $_.textsize = 10; //#13035
    $_.textyoffset = -8; //#13036
    $_.height = 0.175; //#13037
    $k[$j++] = $_; //#13039
    bwipp_processoptions(); //#13039
    $_.options = $k[--$j]; //#13039
    $_.barcode = $k[--$j]; //#13040
    if ($eq($_.barcode, "")) { //#13044
        $k[$j++] = 'bwipp.japanpostEmptyData#13043'; //#13043
        $k[$j++] = "The data must not be empty"; //#13043
        bwipp_raiseerror(); //#13043
    } //#13043
    bwipp_loadctx(bwipp_japanpost); //#13046
    $forall($_.barcode, function() { //#13055
        var _4 = $k[--$j]; //#13050
        if (!(((_4 >= 48) && (_4 <= 57)) || (((_4 >= 65) && (_4 <= 90)) || (_4 == 45)))) { //#13054
            $k[$j++] = 'bwipp.japanpostBadCharacter#13053'; //#13053
            $k[$j++] = "Japan Post must contain only digits, capital letters and the dash symbol"; //#13053
            bwipp_raiseerror(); //#13053
        } //#13053
    }); //#13053
    if (!bwipp_japanpost.__13067__) { //#13067
        $_ = Object.create($_); //#13067
        $_.encs = $a(["300", "330", "312", "132", "321", "303", "123", "231", "213", "033", "030", "120", "102", "210", "012", "201", "021", "003", "333", "31", "13"]); //#13063
        $_.barchars = "0123456789-ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#13066
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_japanpost.$ctx[id] = $_[id]); //#13066
        bwipp_japanpost.__13067__ = 1; //#13066
        $_ = Object.getPrototypeOf($_); //#13066
    } //#13066
    $_.barlen = $_.barcode.length; //#13069
    $_.encstr = $s(((20 + 1) * 3) + 4); //#13071
    $_.digits = $a(20); //#13072
    $_.txt = $a($_.barlen + 1); //#13073
    $puti($_.encstr, 0, $get($_.encs, 19)); //#13076
    $_.checksum = 0; //#13078
    $_.j = 0; //#13079
    $_.i = 0; //#13079
    $k[$j++] = true; //#13114
    for (var _H = 0, _G = $_.barlen - 1; _H <= _G; _H += 1) { //#13114
        $_.i = _H; //#13082
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#13083
        $j--; //#13084
        $_.indx = $k[--$j].length; //#13085
        $j -= 2; //#13086
        if (($_.indx >= 11) && ($_.indx < 37)) { //#13097
            if ($_.j > 18) { //#13088
                $j--; //#13088
                $k[$j++] = false; //#13088
                break; //#13088
            } //#13088
            $_.digit = (~~(($_.indx - 1) / 10)) + 10; //#13092
            $puti($_.encstr, ($_.j * 3) + 2, $get($_.encs, $_.digit)); //#13093
            $_.checksum = $_.checksum + $_.digit; //#13094
            $put($_.digits, $_.j, $_.digit); //#13095
            $_.j = $_.j + 1; //#13096
        } //#13096
        if ($_.j > 19) { //#13098
            $j--; //#13098
            $k[$j++] = false; //#13098
            break; //#13098
        } //#13098
        $_.digit = 0; //#13099
        if ($_.indx == 37) { //#13102
            $_.digit = 14; //#13101
        } //#13101
        if (($_.indx >= 11) && ($_.indx < 37)) { //#13105
            $_.digit = ($_.indx - 1) % 10; //#13104
        } //#13104
        if ($_.indx < 11) { //#13108
            $_.digit = $_.indx; //#13107
        } //#13107
        $puti($_.encstr, ($_.j * 3) + 2, $get($_.encs, $_.digit)); //#13109
        $_.checksum = $_.checksum + $_.digit; //#13110
        $put($_.digits, $_.j, $_.digit); //#13111
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), (($_.j * 3) + 2) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#13112
        $_.j = $_.j + 1; //#13113
    } //#13113
    if ($nt($k[--$j])) { //#13118
        $k[$j++] = 'bwipp.japanpostTooLong#13117'; //#13117
        $k[$j++] = "The input is too long"; //#13117
        bwipp_raiseerror(); //#13117
    } //#13117
    for (var _17 = $_.j, _16 = 20 - 1; _17 <= _16; _17 += 1) { //#13126
        $_.k = _17; //#13122
        $puti($_.encstr, ($_.k * 3) + 2, $get($_.encs, 14)); //#13123
        $_.checksum = $_.checksum + 14; //#13124
        $put($_.digits, $_.k, 14); //#13125
    } //#13125
    $_.checksum = 19 - ($_.checksum % 19); //#13129
    $puti($_.encstr, 2 + (20 * 3), $get($_.encs, $_.checksum)); //#13130
    $puti($_.encstr, 2 + (21 * 3), $get($_.encs, 20)); //#13133
    $_.checkdigit = " "; //#13134
    if ($_.includecheckintext) { //#13137
        $_.checkdigit = $geti($_.barchars, $_.checksum, 1); //#13136
    } //#13136
    $put($_.txt, $_.i + 1, $a([$_.checkdigit, ((20 * 3) + 2) * 3.312, $_.textyoffset, $_.textfont, $_.textsize])); //#13138
    $puti($_.encstr, ((20 + 1) * 3) + 2, $get($_.encs, 20)); //#13141
    $_.bbs = $a((21 * 3) + 4); //#13143
    $_.bhs = $a($_.bbs.length); //#13144
    for (var _1g = 0, _1f = $_.bbs.length - 1; _1g <= _1f; _1g += 1) { //#13168
        $_.i = _1g; //#13146
        $_.enc = $geti($_.encstr, $_.i, 1); //#13147
        $_.bunit = 0; //#13148
        $_.hunit = 0; //#13149
        if ($eq($_.enc, "0")) { //#13153
            $_.bunit = 3; //#13151
            $_.hunit = 2; //#13152
        } //#13152
        if ($eq($_.enc, "1")) { //#13157
            $_.bunit = 0; //#13155
            $_.hunit = 5; //#13156
        } //#13156
        if ($eq($_.enc, "2")) { //#13161
            $_.bunit = 3; //#13159
            $_.hunit = 5; //#13160
        } //#13160
        if ($eq($_.enc, "3")) { //#13165
            $_.bunit = 0; //#13163
            $_.hunit = 8; //#13164
        } //#13164
        $put($_.bbs, $_.i, ($_.bunit * $_.height) / 8); //#13166
        $put($_.bhs, $_.i, ($_.hunit * $_.height) / 8); //#13167
    } //#13167
    $k[$j++] = Infinity; //#13171
    var _1w = $_.bbs; //#13173
    var _1x = $_.bhs; //#13174
    $k[$j++] = Infinity; //#13175
    for (var _1z = 0, _20 = $_.bhs.length - 1; _1z < _20; _1z++) { //#13175
        $k[$j++] = 1.44; //#13175
        $k[$j++] = 1.872; //#13175
    } //#13175
    $k[$j++] = 1.44; //#13175
    var _21 = $a(); //#13175
    $k[$j++] = 'ren'; //#13178
    $k[$j++] = 'renlinear'; //#13178
    $k[$j++] = 'bbs'; //#13178
    $k[$j++] = _1w; //#13178
    $k[$j++] = 'bhs'; //#13178
    $k[$j++] = _1x; //#13178
    $k[$j++] = 'sbs'; //#13178
    $k[$j++] = _21; //#13178
    if ($_.includetext) { //#13178
        $k[$j++] = 'txt'; //#13177
        $k[$j++] = $_.txt; //#13177
    } //#13177
    $k[$j++] = 'opt'; //#13179
    $k[$j++] = $_.options; //#13179
    var _25 = $d(); //#13179
    $k[$j++] = _25; //#13182
    if (!$_.dontdraw) { //#13182
        bwipp_renlinear(); //#13182
    } //#13182
    $_ = Object.getPrototypeOf($_); //#13184
    $_ = Object.getPrototypeOf($_); //#13186
} //bwipp_japanpost
function bwipp_msi() {
    $_ = Object.create($_); //#13216
    $_.dontdraw = false; //#13219
    $_.includecheck = false; //#13220
    $_.includetext = false; //#13221
    $_.includecheckintext = false; //#13222
    $_.checktype = "unset"; //#13223
    $_.badmod11 = false; //#13224
    $_.textfont = "OCR-B"; //#13225
    $_.textsize = 10; //#13226
    $_.textyoffset = -8; //#13227
    $_.height = 1; //#13228
    $k[$j++] = $_; //#13230
    bwipp_processoptions(); //#13230
    $_.options = $k[--$j]; //#13230
    $_.barcode = $k[--$j]; //#13231
    if ($ne($_.checktype, "unset") && (!$_.includecheck)) { //#13235
        $k[$j++] = 'bwipp.msiCheckTypeWithoutCheck#13234'; //#13234
        $k[$j++] = "checktype requires includecheck"; //#13234
        bwipp_raiseerror(); //#13234
    } //#13234
    if ($_.badmod11 && ((($ne($_.checktype, "mod11") && $ne($_.checktype, "ncrmod11")) && $ne($_.checktype, "mod1110")) && $ne($_.checktype, "ncrmod1110"))) { //#13239
        $k[$j++] = 'bwipp.msiBadMod11Mismatch#13238'; //#13238
        $k[$j++] = "badmod11 requires checktype with mod11"; //#13238
        bwipp_raiseerror(); //#13238
    } //#13238
    if ($eq($_.checktype, "unset")) { //#13241
        $_.checktype = "mod10"; //#13241
    } //#13241
    bwipp_loadctx(bwipp_msi); //#13243
    $forall($_.barcode, function() { //#13250
        var _B = $k[--$j]; //#13247
        if ((_B < 48) || (_B > 57)) { //#13249
            $k[$j++] = 'bwipp.msiBadCharacter#13248'; //#13248
            $k[$j++] = "MSI must contain only digits"; //#13248
            bwipp_raiseerror(); //#13248
        } //#13248
    }); //#13248
    if (!bwipp_msi.__13262__) { //#13262
        $_ = Object.create($_); //#13262
        $_.encs = $a(["12121212", "12121221", "12122112", "12122121", "12211212", "12211221", "12212112", "12212121", "21121212", "21121221", "21", "121"]); //#13258
        $_.barchars = "0123456789"; //#13261
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_msi.$ctx[id] = $_[id]); //#13261
        bwipp_msi.__13262__ = 1; //#13261
        $_ = Object.getPrototypeOf($_); //#13261
    } //#13261
    $_.barlen = $_.barcode.length; //#13264
    $_.txtlen = $_.barlen; //#13265
    $_.mod10 = function() {
        $_.code = $k[--$j]; //#13268
        $k[$j++] = 0; //#13269
        $k[$j++] = 0; //#13269
        $forall($_.code, function() { //#13269
            var _I = $k[--$j]; //#13269
            var _J = $k[--$j]; //#13269
            var _K = $k[--$j]; //#13269
            $k[$j++] = $f($f(_I - 48) + (_J * 10)); //#13269
            $k[$j++] = _K; //#13269
        }); //#13269
        $j--; //#13269
        var _L = $k[--$j]; //#13269
        $k[$j++] = _L * 2; //#13270
        $k[$j++] = 0; //#13270
        for (;;) { //#13270
            var _M = $k[--$j]; //#13270
            var _N = $k[--$j]; //#13270
            var _O = ~~(_N / 10); //#13270
            $k[$j++] = $f(_M + (_N % 10)); //#13270
            $k[$j++] = _O; //#13270
            if (_O == 0) { //#13270
                $j--; //#13270
                break; //#13270
            } //#13270
            var _P = $k[--$j]; //#13270
            var _Q = $k[--$j]; //#13270
            $k[$j++] = _P; //#13270
            $k[$j++] = _Q; //#13270
        } //#13270
        $k[$j++] = 0; //#13271
        $k[$j++] = 0; //#13271
        $forall($_.code, function() { //#13271
            var _S = $k[--$j]; //#13271
            var _T = $k[--$j]; //#13271
            var _U = $k[--$j]; //#13271
            $k[$j++] = $f(_T + $f(_S - 48)); //#13271
            $k[$j++] = _U; //#13271
        }); //#13271
        var _V = $k[--$j]; //#13271
        var _W = $k[--$j]; //#13271
        $k[$j++] = _V; //#13271
        $k[$j++] = _W; //#13271
        $j--; //#13271
        var _X = $k[--$j]; //#13271
        var _a = $s($_.code.length + 1); //#13273
        $puti(_a, 0, $_.code); //#13273
        $put(_a, $_.code.length, $f((($f(10 - ($f($k[--$j] + _X) % 10))) % 10) + 48)); //#13273
        $k[$j++] = _a; //#13273
    }; //#13273
    $_.mod11 = function() {
        $_.code = $k[--$j]; //#13277
        $k[$j++] = $_.code.length - 1; //#13278
        $forall($_.code, function() { //#13278
            var _g = $k[--$j]; //#13278
            var _h = $k[--$j]; //#13278
            $k[$j++] = $f(_g - 48); //#13278
            $k[$j++] = $f((_h % 6) + 2); //#13278
            $k[$j++] = $f(_h - 1); //#13278
        }); //#13278
        $j--; //#13278
        $k[$j++] = 0; //#13279
        for (var _j = 0, _k = $_.code.length; _j < _k; _j++) { //#13279
            $r(3, 1); //#13279
            var _l = $k[--$j]; //#13279
            var _m = $k[--$j]; //#13279
            var _n = $k[--$j]; //#13279
            $k[$j++] = $f(_n + (_m * _l)); //#13279
        } //#13279
        var _p = ($f(11 - ($k[--$j] % 11))) % 11; //#13281
        $k[$j++] = _p; //#13289
        if (_p == 10) { //#13288
            if ($_.badmod11) { //#13285
                $j--; //#13283
                var _s = $s($_.code.length + 2); //#13283
                $puti(_s, 0, $_.code); //#13283
                $puti(_s, $_.code.length, "10"); //#13283
                $k[$j++] = _s; //#13283
            } else { //#13285
                $j--; //#13285
                $k[$j++] = 'bwipp.msiBadMod11NotSpecified#13285'; //#13285
                $k[$j++] = "mod11 check digit is 10 but badmod11 not specified"; //#13285
                bwipp_raiseerror(); //#13285
            } //#13285
        } else { //#13288
            var _w = $s($_.code.length + 1); //#13288
            $puti(_w, 0, $_.code); //#13288
            $k[$j++] = _w; //#13288
            $k[$j++] = _w; //#13288
            $k[$j++] = $_.code.length; //#13288
            $r(4, -1); //#13288
            var _z = $k[--$j]; //#13288
            var _10 = $k[--$j]; //#13288
            $put($k[--$j], _10, $f(_z + 48)); //#13288
        } //#13288
    }; //#13288
    $_.ncrmod11 = function() {
        $_.code = $k[--$j]; //#13293
        $k[$j++] = $_.code.length - 1; //#13294
        $forall($_.code, function() { //#13294
            var _15 = $k[--$j]; //#13294
            var _16 = $k[--$j]; //#13294
            $k[$j++] = $f(_15 - 48); //#13294
            $k[$j++] = $f((_16 % 8) + 2); //#13294
            $k[$j++] = $f(_16 - 1); //#13294
        }); //#13294
        $j--; //#13294
        $k[$j++] = 0; //#13295
        for (var _18 = 0, _19 = $_.code.length; _18 < _19; _18++) { //#13295
            $r(3, 1); //#13295
            var _1A = $k[--$j]; //#13295
            var _1B = $k[--$j]; //#13295
            var _1C = $k[--$j]; //#13295
            $k[$j++] = $f(_1C + (_1B * _1A)); //#13295
        } //#13295
        var _1E = ($f(11 - ($k[--$j] % 11))) % 11; //#13297
        $k[$j++] = _1E; //#13305
        if (_1E == 10) { //#13304
            if ($_.badmod11) { //#13301
                $j--; //#13299
                var _1H = $s($_.code.length + 2); //#13299
                $puti(_1H, 0, $_.code); //#13299
                $puti(_1H, $_.code.length, "10"); //#13299
                $k[$j++] = _1H; //#13299
            } else { //#13301
                $j--; //#13301
                $k[$j++] = 'bwipp.msiBadMod11NotSpecified#13301'; //#13301
                $k[$j++] = "mod11 check digit is 10 but badmod11 not specified"; //#13301
                bwipp_raiseerror(); //#13301
            } //#13301
        } else { //#13304
            var _1L = $s($_.code.length + 1); //#13304
            $puti(_1L, 0, $_.code); //#13304
            $k[$j++] = _1L; //#13304
            $k[$j++] = _1L; //#13304
            $k[$j++] = $_.code.length; //#13304
            $r(4, -1); //#13304
            var _1O = $k[--$j]; //#13304
            var _1P = $k[--$j]; //#13304
            $put($k[--$j], _1P, $f(_1O + 48)); //#13304
        } //#13304
    }; //#13304
    if (!bwipp_msi.__13317__) { //#13317
        $_ = Object.create($_); //#13317
        var _1R = new Map([
            ["mod10", function() {
                $_.mod10(); //#13310
            }],
            ["mod1010", function() {
                $_.mod10(); //#13311
                $_.mod10(); //#13311
            }],
            ["mod11", function() {
                $_.mod11(); //#13312
            }],
            ["ncrmod11", function() {
                $_.ncrmod11(); //#13313
            }],
            ["mod1110", function() {
                $_.mod11(); //#13314
                $_.mod10(); //#13314
            }],
            ["ncrmod1110", function() {
                $_.ncrmod11(); //#13315
                $_.mod10(); //#13315
            }]
        ]); //#13315
        $_.checkfunc = _1R; //#13316
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_msi.$ctx[id] = $_[id]); //#13316
        bwipp_msi.__13317__ = 1; //#13316
        $_ = Object.getPrototypeOf($_); //#13316
    } //#13316
    if ($_.includecheck) { //#13327
        var _1U = $_.checkfunc; //#13321
        var _1V = $_.checktype; //#13321
        var _1W = $get(_1U, _1V) !== undefined; //#13321
        $k[$j++] = _1U; //#13323
        $k[$j++] = _1V; //#13323
        if (!_1W) { //#13323
            $j -= 2; //#13322
            $k[$j++] = 'bwipp.msiBadCharacter#13322'; //#13322
            $k[$j++] = "MSI checktype must be mod10, mod1010, mod11, ncrmod11, mod1110 or ncrmod1110"; //#13322
            bwipp_raiseerror(); //#13322
        } //#13322
        var _1X = $k[--$j]; //#13324
        var _1Z = $get($k[--$j], _1X); //#13324
        $k[$j++] = $_.barcode; //#13324
        if (_1Z() === true) {
            return true;
        } //#13324
        $_.barcode = $k[--$j]; //#13324
        $_.barlen = $_.barcode.length; //#13325
        if ($_.includecheckintext) { //#13326
            $_.txtlen = $_.barlen; //#13326
        } //#13326
    } //#13326
    $_.sbs = $s(($_.barlen * 8) + 5); //#13329
    $_.txt = $a($_.barlen); //#13330
    $puti($_.sbs, 0, $get($_.encs, 10)); //#13333
    for (var _1o = 0, _1n = $_.barlen - 1; _1o <= _1n; _1o += 1) { //#13345
        $_.i = _1o; //#13336
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#13338
        $j--; //#13339
        $_.indx = $k[--$j].length; //#13340
        $j -= 2; //#13341
        $_.enc = $get($_.encs, $_.indx); //#13342
        $puti($_.sbs, ($_.i * 8) + 2, $_.enc); //#13343
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 12) + 3, $_.textyoffset, $_.textfont, $_.textsize])); //#13344
    } //#13344
    $puti($_.sbs, ($_.barlen * 8) + 2, $get($_.encs, 11)); //#13348
    $k[$j++] = Infinity; //#13351
    $k[$j++] = Infinity; //#13353
    var _2E = $_.sbs; //#13353
    for (var _2F = 0, _2G = _2E.length; _2F < _2G; _2F++) { //#13353
        $k[$j++] = $get(_2E, _2F) - 48; //#13353
    } //#13353
    var _2I = $a(); //#13353
    $k[$j++] = Infinity; //#13354
    for (var _2K = 0, _2L = ~~(($_.sbs.length + 1) / 2); _2K < _2L; _2K++) { //#13354
        $k[$j++] = $_.height; //#13354
    } //#13354
    var _2N = $a(); //#13354
    $k[$j++] = Infinity; //#13355
    for (var _2P = 0, _2Q = ~~(($_.sbs.length + 1) / 2); _2P < _2Q; _2P++) { //#13355
        $k[$j++] = 0; //#13355
    } //#13355
    var _2R = $a(); //#13355
    $k[$j++] = 'ren'; //#13358
    $k[$j++] = 'renlinear'; //#13358
    $k[$j++] = 'sbs'; //#13358
    $k[$j++] = _2I; //#13358
    $k[$j++] = 'bhs'; //#13358
    $k[$j++] = _2N; //#13358
    $k[$j++] = 'bbs'; //#13358
    $k[$j++] = _2R; //#13358
    if ($_.includetext) { //#13358
        $k[$j++] = 'txt'; //#13357
        $k[$j++] = $geti($_.txt, 0, $_.txtlen); //#13357
    } //#13357
    $k[$j++] = 'opt'; //#13359
    $k[$j++] = $_.options; //#13359
    var _2X = $d(); //#13359
    $k[$j++] = _2X; //#13362
    if (!$_.dontdraw) { //#13362
        bwipp_renlinear(); //#13362
    } //#13362
    $_ = Object.getPrototypeOf($_); //#13364
    $_ = Object.getPrototypeOf($_); //#13366
} //bwipp_msi
function bwipp_plessey() {
    $_ = Object.create($_); //#13396
    $_.dontdraw = false; //#13399
    $_.includetext = false; //#13400
    $_.validatecheck = false; //#13401
    $_.includecheckintext = false; //#13402
    $_.unidirectional = false; //#13403
    $_.textfont = "OCR-B"; //#13404
    $_.textsize = 10; //#13405
    $_.textyoffset = -8; //#13406
    $_.height = 1; //#13407
    $k[$j++] = $_; //#13409
    bwipp_processoptions(); //#13409
    $_.options = $k[--$j]; //#13409
    $_.barcode = $k[--$j]; //#13410
    if ($eq($_.barcode, "")) { //#13414
        $k[$j++] = 'bwipp.plesseyEmptyData#13413'; //#13413
        $k[$j++] = "The data must not be empty"; //#13413
        bwipp_raiseerror(); //#13413
    } //#13413
    bwipp_loadctx(bwipp_plessey); //#13416
    if (!bwipp_plessey.__13432__) { //#13432
        $_ = Object.create($_); //#13432
        $_.barchars = "0123456789ABCDEF"; //#13420
        $_.charvals = new Map; //#13421
        for (var _3 = 0; _3 <= 15; _3 += 1) { //#13422
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#13422
        } //#13422
        $_.encs = $a(["14141414", "32141414", "14321414", "32321414", "14143214", "32143214", "14323214", "32323214", "14141432", "32141432", "14321432", "32321432", "14143232", "32143232", "14323232", "32323232", "32321432", "541412323", "323"]); //#13431
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_plessey.$ctx[id] = $_[id]); //#13431
        bwipp_plessey.__13432__ = 1; //#13431
        $_ = Object.getPrototypeOf($_); //#13431
    } //#13431
    for (var _B = 0, _A = $_.barcode.length - 1; _B <= _A; _B += 1) { //#13439
        var _F = $get($_.charvals, $geti($_.barcode, _B, 1)) !== undefined; //#13436
        if (!_F) { //#13438
            $k[$j++] = 'bwipp.plesseyBadCharacter#13437'; //#13437
            $k[$j++] = "Plessey must contain only digits and letters A B C D E F"; //#13437
            bwipp_raiseerror(); //#13437
        } //#13437
    } //#13437
    $k[$j++] = 'barlen'; //#13441
    $k[$j++] = $_.barcode.length; //#13441
    if ($_.validatecheck) { //#13441
        var _I = $k[--$j]; //#13441
        $k[$j++] = $f(_I - 2); //#13441
    } //#13441
    var _J = $k[--$j]; //#13441
    $_[$k[--$j]] = _J; //#13441
    $_.checkbits = $a($f(($_.barlen * 4) + 8)); //#13444
    $puti($_.checkbits, $_.barlen * 4, $a([0, 0, 0, 0, 0, 0, 0, 0])); //#13445
    for (var _S = 0, _R = $f($_.barlen - 1); _S <= _R; _S += 1) { //#13455
        $_.i = _S; //#13447
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#13448
        $puti($_.checkbits, $_.i * 4, $a([$_.indx & 1, ($_.indx >>> 1) & 1, ($_.indx >>> 2) & 1, $_.indx >>> 3])); //#13454
    } //#13454
    $_.checksalt = $a([1, 1, 1, 1, 0, 1, 0, 0, 1]); //#13456
    for (var _i = 0, _h = $f(($_.barlen * 4) - 1); _i <= _h; _i += 1) { //#13465
        $_.i = _i; //#13458
        if ($get($_.checkbits, $_.i) == 1) { //#13464
            for (var _m = 0; _m <= 8; _m += 1) { //#13463
                $_.j = _m; //#13461
                $put($_.checkbits, $_.i + $_.j, $xo($get($_.checkbits, $_.i + $_.j), $get($_.checksalt, $_.j))); //#13462
            } //#13462
        } //#13462
    } //#13462
    $_.checkval = 0; //#13466
    for (var _x = 0; _x <= 7; _x += 1) { //#13470
        $_.i = _x; //#13468
        $_.checkval = $f($_.checkval + ((~~Math.pow(2, $_.i)) * $get($_.checkbits, $f(($_.barlen * 4) + $_.i)))); //#13469
    } //#13469
    $_.checksum1 = $_.checkval & 15; //#13471
    $_.checksum2 = $_.checkval >>> 4; //#13472
    if ($_.validatecheck) { //#13479
        if (($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum1)) || ($get($_.barcode, $f($_.barlen + 1)) != $get($_.barchars, $_.checksum2))) { //#13477
            $k[$j++] = 'bwipp.plesseyBadCheckDigits#13476'; //#13476
            $k[$j++] = "Incorrect Plessey check digits provided"; //#13476
            bwipp_raiseerror(); //#13476
        } //#13476
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#13478
    } //#13478
    var _1O = $_.unidirectional ? 27 : 33; //#13481
    $_.sbs = $s($f(($_.barlen * 8) + _1O)); //#13481
    $_.txt = $a($f($_.barlen + 2)); //#13482
    $puti($_.sbs, 0, $get($_.encs, 16)); //#13485
    for (var _1X = 0, _1W = $f($_.barlen - 1); _1X <= _1W; _1X += 1) { //#13492
        $_.i = _1X; //#13488
        $_.indx = $get($_.charvals, $geti($_.barcode, $_.i, 1)); //#13489
        $puti($_.sbs, ($_.i * 8) + 8, $get($_.encs, $_.indx)); //#13490
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), ($_.i * 20) + 20, $_.textyoffset, $_.textfont, $_.textsize])); //#13491
    } //#13491
    $puti($_.sbs, $f(($_.barlen * 8) + 8), $get($_.encs, $_.checksum1)); //#13495
    $puti($_.sbs, $f(($_.barlen * 8) + 16), $get($_.encs, $_.checksum2)); //#13496
    if ($_.includecheckintext) { //#13502
        $put($_.txt, $_.barlen, $a([$geti($_.barchars, $_.checksum1, 1), $f(($_.barlen * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#13498
        $put($_.txt, $f($_.barlen + 1), $a([$geti($_.barchars, $_.checksum2, 1), $f(($f($_.barlen + 1) * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#13499
    } else { //#13502
        $put($_.txt, $_.barlen, $a([" ", $f(($_.barlen * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#13501
        $put($_.txt, $f($_.barlen + 1), $a([" ", $f(($f($_.barlen + 1) * 20) + 20), $_.textyoffset, $_.textfont, $_.textsize])); //#13502
    } //#13502
    var _2f = $_.unidirectional ? 18 : 17; //#13506
    $puti($_.sbs, $f(($_.barlen * 8) + 24), $get($_.encs, _2f)); //#13506
    $k[$j++] = Infinity; //#13509
    $k[$j++] = Infinity; //#13511
    var _2h = $_.sbs; //#13511
    for (var _2i = 0, _2j = _2h.length; _2i < _2j; _2i++) { //#13511
        $k[$j++] = $get(_2h, _2i) - 48; //#13511
    } //#13511
    var _2l = $a(); //#13511
    $k[$j++] = Infinity; //#13512
    for (var _2n = 0, _2o = ~~(($_.sbs.length + 1) / 2); _2n < _2o; _2n++) { //#13512
        $k[$j++] = $_.height; //#13512
    } //#13512
    var _2q = $a(); //#13512
    $k[$j++] = Infinity; //#13513
    for (var _2s = 0, _2t = ~~(($_.sbs.length + 1) / 2); _2s < _2t; _2s++) { //#13513
        $k[$j++] = 0; //#13513
    } //#13513
    var _2u = $a(); //#13513
    $k[$j++] = 'ren'; //#13516
    $k[$j++] = 'renlinear'; //#13516
    $k[$j++] = 'sbs'; //#13516
    $k[$j++] = _2l; //#13516
    $k[$j++] = 'bhs'; //#13516
    $k[$j++] = _2q; //#13516
    $k[$j++] = 'bbs'; //#13516
    $k[$j++] = _2u; //#13516
    if ($_.includetext) { //#13516
        $k[$j++] = 'txt'; //#13515
        $k[$j++] = $_.txt; //#13515
    } //#13515
    $k[$j++] = 'opt'; //#13517
    $k[$j++] = $_.options; //#13517
    var _2y = $d(); //#13517
    $k[$j++] = _2y; //#13520
    if (!$_.dontdraw) { //#13520
        bwipp_renlinear(); //#13520
    } //#13520
    $_ = Object.getPrototypeOf($_); //#13522
    $_ = Object.getPrototypeOf($_); //#13524
} //bwipp_plessey
function bwipp_telepen() {
    $_ = Object.create($_); //#13555
    $_.numeric = false; //#13558
    $_.dontdraw = false; //#13559
    $_.includetext = false; //#13560
    $_.textfont = "OCR-B"; //#13561
    $_.textsize = 10; //#13562
    $_.textyoffset = -8; //#13563
    $_.height = 1; //#13564
    $_.parse = false; //#13565
    $k[$j++] = $_; //#13567
    bwipp_processoptions(); //#13567
    $_.options = $k[--$j]; //#13567
    $_.barcode = $k[--$j]; //#13568
    bwipp_loadctx(bwipp_telepen); //#13570
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#13576
    $_.fncvals = _3; //#13577
    $k[$j++] = 'barcode'; //#13578
    $k[$j++] = $_.barcode; //#13578
    $k[$j++] = $_.fncvals; //#13578
    bwipp_parseinput(); //#13578
    var _6 = $k[--$j]; //#13578
    $_[$k[--$j]] = _6; //#13578
    $_.barlen = $_.barcode.length; //#13579
    delete $_.options["parse"]; //#13580
    if ($_.numeric && (($_.barlen % 2) != 0)) { //#13584
        $k[$j++] = 'bwipp.telepenNumericOddLength#13583'; //#13583
        $k[$j++] = "Telepen Numeric must have an even length"; //#13583
        bwipp_raiseerror(); //#13583
    } //#13583
    if (!bwipp_telepen.__13622__) { //#13622
        $_ = Object.create($_); //#13622
        $_.encs = $a(["31313131", "1131313111", "33313111", "1111313131", "3111313111", "11333131", "13133131", "111111313111", "31333111", "1131113131", "33113131", "1111333111", "3111113131", "1113133111", "1311133111", "111111113131", "3131113111", "11313331", "333331", "111131113111", "31113331", "1133113111", "1313113111", "1111113331", "31131331", "113111113111", "3311113111", "1111131331", "311111113111", "1113111331", "1311111331", "11111111113111", "31313311", "1131311131", "33311131", "1111313311", "3111311131", "11333311", "13133311", "111111311131", "31331131", "1131113311", "33113311", "1111331131", "3111113311", "1113131131", "1311131131", "111111113311", "3131111131", "1131131311", "33131311", "111131111131", "3111131311", "1133111131", "1313111131", "111111131311", "3113111311", "113111111131", "3311111131", "111113111311", "311111111131", "111311111311", "131111111311", "11111111111131", "3131311111", "11313133", "333133", "111131311111", "31113133", "1133311111", "1313311111", "1111113133", "313333", "113111311111", "3311311111", "11113333", "311111311111", "11131333", "13111333", "11111111311111", "31311133", "1131331111", "33331111", "1111311133", "3111331111", "11331133", "13131133", "111111331111", "3113131111", "1131111133", "33111133", "111113131111", "3111111133", "111311131111", "131111131111", "111111111133", "31311313", "113131111111", "3331111111", "1111311313", "311131111111", "11331313", "13131313", "11111131111111", "3133111111", "1131111313", "33111313", "111133111111", "3111111313", "111313111111", "131113111111", "111111111313", "313111111111", "1131131113", "33131113", "11113111111111", "3111131113", "113311111111", "131311111111", "111111131113", "3113111113", "11311111111111", "331111111111", "111113111113", "31111111111111", "111311111113", "131111111113", "1111111111111111"]); //#13621
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_telepen.$ctx[id] = $_[id]); //#13621
        bwipp_telepen.__13622__ = 1; //#13621
        $_ = Object.getPrototypeOf($_); //#13621
    } //#13621
    $_.sbs = $s(($_.barlen * 16) + 48); //#13624
    $_.txt = $a($_.barlen); //#13625
    $_.enc = $get($_.encs, 95); //#13628
    $puti($_.sbs, 0, $_.enc); //#13629
    $_.l = $_.enc.length; //#13630
    $_.checksum = 0; //#13632
    $_.i = 0; //#13633
    $_.j = 0; //#13633
    for (;;) { //#13676
        if ($_.i == $_.barlen) { //#13635
            break; //#13635
        } //#13635
        if ($_.numeric) { //#13669
            if ($get($_.barcode, $_.i) > 16) { //#13657
                $_.np = $geti($_.barcode, $_.i, 2); //#13638
                var _X = $get($_.np, 0); //#13639
                var _Z = $get($_.np, 1); //#13640
                if (((_X < 48) || (_X > 57)) || (((_Z < 48) || (_Z > 57)) && (!(_Z == 88)))) { //#13646
                    $k[$j++] = -1; //#13642
                } else { //#13646
                    var _e = $f($get($_.np, 1) - 48); //#13645
                    $k[$j++] = $f($get($_.np, 0) - 48); //#13645
                    $k[$j++] = _e; //#13645
                    if (_e != 40) { //#13645
                        var _f = $k[--$j]; //#13645
                        var _g = $k[--$j]; //#13645
                        $k[$j++] = $f(($f(_f + (_g * 10))) + 10); //#13645
                    } else { //#13645
                        $j--; //#13645
                    } //#13645
                    var _h = $k[--$j]; //#13646
                    $k[$j++] = $f(_h + 17); //#13646
                } //#13646
                var _i = $k[--$j]; //#13648
                $k[$j++] = _i; //#13650
                if (_i == -1) { //#13650
                    $k[$j++] = 'bwipp.telepenInvalidNumericCharacter#13649'; //#13649
                    $k[$j++] = "Telepen Numeric may contain only digits, or X in even positions"; //#13649
                    bwipp_raiseerror(); //#13649
                } //#13649
                $_.indx = $k[--$j]; //#13651
                $put($_.txt, $_.j, $a([$_.np, ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#13652
                $_.i = $_.i + 2; //#13653
            } else { //#13657
                $_.indx = $get($_.barcode, $_.i); //#13655
                $put($_.txt, $_.j, $a([" ", ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#13656
                $_.i = $_.i + 1; //#13657
            } //#13657
        } else { //#13669
            $_.indx = $get($_.barcode, $_.i); //#13660
            if ($_.indx > 127) { //#13663
                $k[$j++] = 'bwipp.telepenInvalidAlphaCharacter#13662'; //#13662
                $k[$j++] = "Telepen Alpha characters must have ordinal values 0 to 127"; //#13662
                bwipp_raiseerror(); //#13662
            } //#13662
            if (($_.indx >= 32) && ($_.indx <= 126)) { //#13667
                $put($_.txt, $_.j, $a([$geti($_.barcode, $_.i, 1), ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#13665
            } else { //#13667
                $put($_.txt, $_.j, $a([" ", ($_.j * 16) + 16, $_.textyoffset, $_.textfont, $_.textsize])); //#13667
            } //#13667
            $_.i = $_.i + 1; //#13669
        } //#13669
        $_.checksum = $f($_.checksum + $_.indx); //#13671
        $_.enc = $get($_.encs, $_.indx); //#13672
        $puti($_.sbs, $_.l, $_.enc); //#13673
        $_.l = $_.l + $_.enc.length; //#13674
        $_.j = $_.j + 1; //#13675
    } //#13675
    $_.checksum = ($f(127 - ($_.checksum % 127))) % 127; //#13679
    $_.enc = $get($_.encs, $_.checksum); //#13680
    $puti($_.sbs, $_.l, $_.enc); //#13681
    $_.l = $_.l + $_.enc.length; //#13682
    $_.enc = $get($_.encs, 122); //#13685
    $puti($_.sbs, $_.l, $_.enc); //#13686
    $_.l = $_.l + $_.enc.length; //#13687
    $_.sbs = $geti($_.sbs, 0, $_.l); //#13690
    $_.txt = $geti($_.txt, 0, $_.j); //#13691
    $k[$j++] = Infinity; //#13694
    $k[$j++] = Infinity; //#13696
    var _1z = $_.sbs; //#13696
    for (var _20 = 0, _21 = _1z.length; _20 < _21; _20++) { //#13696
        $k[$j++] = $f($get(_1z, _20) - 48); //#13696
    } //#13696
    var _23 = $a(); //#13696
    $k[$j++] = Infinity; //#13697
    for (var _25 = 0, _26 = ~~(($_.sbs.length + 1) / 2); _25 < _26; _25++) { //#13697
        $k[$j++] = $_.height; //#13697
    } //#13697
    var _28 = $a(); //#13697
    $k[$j++] = Infinity; //#13698
    for (var _2A = 0, _2B = ~~(($_.sbs.length + 1) / 2); _2A < _2B; _2A++) { //#13698
        $k[$j++] = 0; //#13698
    } //#13698
    var _2C = $a(); //#13698
    $k[$j++] = 'ren'; //#13701
    $k[$j++] = 'renlinear'; //#13701
    $k[$j++] = 'sbs'; //#13701
    $k[$j++] = _23; //#13701
    $k[$j++] = 'bhs'; //#13701
    $k[$j++] = _28; //#13701
    $k[$j++] = 'bbs'; //#13701
    $k[$j++] = _2C; //#13701
    if ($_.includetext) { //#13701
        $k[$j++] = 'txt'; //#13700
        $k[$j++] = $_.txt; //#13700
    } //#13700
    $k[$j++] = 'opt'; //#13702
    $k[$j++] = $_.options; //#13702
    var _2G = $d(); //#13702
    $k[$j++] = _2G; //#13705
    if (!$_.dontdraw) { //#13705
        bwipp_renlinear(); //#13705
    } //#13705
    $_ = Object.getPrototypeOf($_); //#13707
    $_ = Object.getPrototypeOf($_); //#13709
} //bwipp_telepen
function bwipp_telepennumeric() {
    $_ = Object.create($_); //#13738
    $_.dontdraw = false; //#13741
    $k[$j++] = $_; //#13743
    bwipp_processoptions(); //#13743
    $_.options = $k[--$j]; //#13743
    $_.barcode = $k[--$j]; //#13744
    $put($_.options, "dontdraw", true); //#13747
    $put($_.options, "numeric", true); //#13748
    $k[$j++] = 'args'; //#13750
    $k[$j++] = $_.barcode; //#13750
    $k[$j++] = $_.options; //#13750
    bwipp_telepen(); //#13750
    var _6 = $k[--$j]; //#13750
    $_[$k[--$j]] = _6; //#13750
    $put($_.args, "opt", $_.options); //#13752
    $k[$j++] = $_.args; //#13755
    if (!$_.dontdraw) { //#13755
        bwipp_renlinear(); //#13755
    } //#13755
    $_ = Object.getPrototypeOf($_); //#13757
} //bwipp_telepennumeric
function bwipp_posicode() {
    $_ = Object.create($_); //#13788
    $_.dontdraw = false; //#13791
    $_.includetext = false; //#13792
    $_.textfont = "OCR-B"; //#13793
    $_.textsize = 10; //#13794
    $_.textxoffset = 0; //#13795
    $_.textyoffset = -8; //#13796
    $_.height = 1; //#13797
    $_.encoding = "auto"; //#13798
    $_.version = "a"; //#13799
    $_.checkoffset = 0; //#13800
    $_.raw = false; //#13801
    $_.parse = false; //#13802
    $_.parsefnc = false; //#13803
    $k[$j++] = $_; //#13805
    bwipp_processoptions(); //#13805
    $_.options = $k[--$j]; //#13805
    var _1 = $k[--$j]; //#13806
    $_.barcode = _1; //#13806
    bwipp_loadctx(bwipp_posicode); //#13808
    if (!bwipp_posicode.__13851__) { //#13851
        $_ = Object.create($_); //#13851
        $_.la0 = -1; //#13812
        $_.la1 = -2; //#13812
        $_.la2 = -3; //#13812
        $_.sf0 = -4; //#13813
        $_.sf1 = -5; //#13813
        $_.sf2 = -6; //#13813
        $_.fn1 = -7; //#13814
        $_.fn2 = -8; //#13814
        $_.fn3 = -9; //#13814
        $_.fn4 = -10; //#13814
        $_.charmapsnormal = $a([$a(["0", "^", "'"]), $a(["1", ";", 27]), $a(["2", "<", 28]), $a(["3", "=", 29]), $a(["4", ">", 30]), $a(["5", "?", 31]), $a(["6", "@", "!"]), $a(["7", "[", "\""]), $a(["8", 92, "#"]), $a(["9", "]", "&"]), $a(["A", "a", 1]), $a(["B", "b", 2]), $a(["C", "c", 3]), $a(["D", "d", 4]), $a(["E", "e", 5]), $a(["F", "f", 6]), $a(["G", "g", 7]), $a(["H", "h", 8]), $a(["I", "i", 9]), $a(["J", "j", 10]), $a(["K", "k", 11]), $a(["L", "l", 12]), $a(["M", "m", 13]), $a(["N", "n", 14]), $a(["O", "o", 15]), $a(["P", "p", 16]), $a(["Q", "q", 17]), $a(["R", "r", 18]), $a(["S", "s", 19]), $a(["T", "t", 20]), $a(["U", "u", 21]), $a(["V", "v", 22]), $a(["W", "w", 23]), $a(["X", "x", 24]), $a(["Y", "y", 25]), $a(["Z", "z", 26]), $a(["-", "_", 40]), $a([".", "`", 41]), $a([" ", 127, 0]), $a(["$", "{", "*"]), $a(["/", "|", ","]), $a(["+", "}", ":"]), $a(["%", "~", $_.fn1]), $a([$_.la1, $_.la0, $_.fn2]), $a([$_.sf1, $_.sf0, $_.fn3]), $a([$_.sf2, $_.sf2, $_.fn4])]); //#13835
        var _13 = $a(["6", -98, -98]); //#13839
        $_.chapmapslimited = $a([$a(["0", -98, -98]), $a(["1", -98, -98]), $a(["2", -98, -98]), $a(["3", -98, -98]), $a(["4", -98, -98]), $a(["5", -98, -98]), _13, $a(["7", -98, -98]), $a(["8", -98, -98]), $a(["9", -98, -98]), $a(["A", -98, -98]), $a(["B", -98, -98]), $a(["C", -98, -98]), $a(["D", -98, -98]), $a(["E", -98, -98]), $a(["F", -98, -98]), $a(["G", -98, -98]), $a(["H", -98, -98]), $a(["I", -98, -98]), $a(["J", -98, -98]), $a(["K", -98, -98]), $a(["L", -98, -98]), $a(["M", -98, -98]), $a(["N", -98, -98]), $a(["O", -98, -98]), $a(["P", -98, -98]), $a(["Q", -98, -98]), $a(["R", -98, -98]), $a(["S", -98, -98]), $a(["T", -98, -98]), $a(["U", -98, -98]), $a(["V", -98, -98]), $a(["W", -98, -98]), $a(["X", -98, -98]), $a(["Y", -98, -98]), $a(["Z", -98, -98]), $a(["-", -98, -98]), $a([".", -98, -98])]); //#13850
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_posicode.$ctx[id] = $_[id]); //#13850
        bwipp_posicode.__13851__ = 1; //#13850
        $_ = Object.getPrototypeOf($_); //#13850
    } //#13850
    if ((($ne($_.version, "a") && $ne($_.version, "b")) && $ne($_.version, "limiteda")) && $ne($_.version, "limitedb")) { //#13855
        $k[$j++] = 'bwipp.posicodeInvalidVersion#13854'; //#13854
        $k[$j++] = "The version must be either a, b, limiteda or limitedb"; //#13854
        bwipp_raiseerror(); //#13854
    } //#13854
    $k[$j++] = 'charmaps'; //#13857
    if ($eq($_.version, "a") || $eq($_.version, "b")) { //#13857
        $k[$j++] = $_.charmapsnormal; //#13857
    } else { //#13857
        $k[$j++] = $_.chapmapslimited; //#13857
    } //#13857
    var _1j = $k[--$j]; //#13857
    $_[$k[--$j]] = _1j; //#13857
    var _1l = $_.charmaps; //#13861
    var _1m = $_.charmaps; //#13861
    var _1n = $_.charmaps; //#13861
    $_.charvals = $a([new Map, new Map, new Map]); //#13862
    for (var _1r = 0, _1q = $_.charmaps.length - 1; _1r <= _1q; _1r += 1) { //#13871
        $_.i = _1r; //#13864
        $_.encs = $get($_.charmaps, $_.i); //#13865
        for (var _1v = 0; _1v <= 2; _1v += 1) { //#13870
            $_.j = _1v; //#13867
            var _1y = $get($_.encs, $_.j); //#13868
            $k[$j++] = _1y; //#13868
            if ($eq($type(_1y), 'stringtype')) { //#13868
                var _21 = $get($k[--$j], 0); //#13868
                $k[$j++] = _21; //#13868
            } //#13868
            $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#13869
        } //#13869
    } //#13869
    $_.set0 = $get($_.charvals, 0); //#13872
    $_.set1 = $get($_.charvals, 1); //#13873
    $_.set2 = $get($_.charvals, 2); //#13874
    if ($eq($_.version, "limiteda") || $eq($_.version, "limitedb")) { //#13883
        for (var _2H = 0, _2G = $_.barcode.length - 1; _2H <= _2G; _2H += 1) { //#13882
            var _2M = $get($_.set0, $get($geti($_.barcode, _2H, 1), 0)) !== undefined; //#13879
            if (!_2M) { //#13881
                $k[$j++] = 'bwipp.posicodeBadCharacter#13880'; //#13880
                $k[$j++] = "Posicode limited must contain only digits, capital letters, and the symbols - and ."; //#13880
                bwipp_raiseerror(); //#13880
            } //#13880
        } //#13880
    } //#13880
    if ($_.raw) { //#13885
        $_.encoding = "raw"; //#13885
    } //#13885
    if ($eq($_.encoding, "raw")) { //#13899
        $_.cws = $a($_.barcode.length); //#13888
        $_.i = 0; //#13889
        $_.j = 0; //#13889
        for (;;) { //#13896
            if ($_.i == $_.barcode.length) { //#13891
                break; //#13891
            } //#13891
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#13892
            $put($_.cws, $_.j, $_.cw); //#13893
            $_.i = $_.i + 4; //#13894
            $_.j = $_.j + 1; //#13895
        } //#13895
        $_.cws = $geti($_.cws, 0, $_.j); //#13897
        $_.text = ""; //#13898
    } //#13898
    if ($eq($_.encoding, "auto")) { //#14014
        var _2k = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["FNC1", $_.fn1],
            ["FNC2", $_.fn2],
            ["FNC3", $_.fn3]
        ]); //#13909
        $_.fncvals = _2k; //#13911
        $k[$j++] = 'msg'; //#13912
        $k[$j++] = $_.barcode; //#13912
        $k[$j++] = $_.fncvals; //#13912
        bwipp_parseinput(); //#13912
        var _2n = $k[--$j]; //#13912
        $_[$k[--$j]] = _2n; //#13912
        $_.msglen = $_.msg.length; //#13913
        $_.text = $s($_.msglen); //#13915
        for (var _2u = 0, _2t = $_.msglen - 1; _2u <= _2t; _2u += 1) { //#13919
            $_.i = _2u; //#13917
            var _2z = $get($_.msg, $_.i); //#13918
            $k[$j++] = $_.text; //#13918
            $k[$j++] = $_.i; //#13918
            $k[$j++] = _2z; //#13918
            if (_2z < 0) { //#13918
                $j--; //#13918
                $k[$j++] = 32; //#13918
            } //#13918
            var _30 = $k[--$j]; //#13918
            var _31 = $k[--$j]; //#13918
            $put($k[--$j], _31, _30); //#13918
        } //#13918
        $k[$j++] = Infinity; //#13922
        for (var _34 = 0, _35 = $_.msglen; _34 < _35; _34++) { //#13922
            $k[$j++] = 0; //#13922
        } //#13922
        $k[$j++] = 0; //#13922
        $_.numSA = $a(); //#13922
        $k[$j++] = Infinity; //#13923
        for (var _38 = 0, _39 = $_.msglen; _38 < _39; _38++) { //#13923
            $k[$j++] = 0; //#13923
        } //#13923
        $k[$j++] = 0; //#13923
        $_.numEA = $a(); //#13923
        for (var _3C = $_.msglen - 1; _3C >= 0; _3C -= 1) { //#13933
            $_.i = _3C; //#13925
            if ($get($_.msg, $_.i) >= 0) { //#13932
                if ($get($_.msg, $_.i) >= 128) { //#13930
                    $put($_.numEA, $_.i, $f($get($_.numEA, $_.i + 1) + 1)); //#13928
                } else { //#13930
                    $put($_.numSA, $_.i, $f($get($_.numSA, $_.i + 1) + 1)); //#13930
                } //#13930
            } //#13930
        } //#13930
        $_.ea = false; //#13936
        $_.msgtmp = $a([]); //#13936
        for (var _3W = 0, _3V = $_.msglen - 1; _3W <= _3V; _3W += 1) { //#13951
            $_.i = _3W; //#13938
            $_.c = $get($_.msg, $_.i); //#13939
            if ((!$xo($_.ea, $_.c < 128)) && ($_.c >= 0)) { //#13949
                if ($_.ea) { //#13941
                    $k[$j++] = $_.numSA; //#13941
                } else { //#13941
                    $k[$j++] = $_.numEA; //#13941
                } //#13941
                var _3i = $get($k[--$j], $_.i); //#13941
                var _3l = ($f(_3i + $_.i) == $_.msglen) ? 3 : 5; //#13942
                if (_3i < _3l) { //#13947
                    $k[$j++] = Infinity; //#13944
                    $aload($_.msgtmp); //#13944
                    $k[$j++] = $_.fn4; //#13944
                    $_.msgtmp = $a(); //#13944
                } else { //#13947
                    $k[$j++] = Infinity; //#13946
                    $aload($_.msgtmp); //#13946
                    $k[$j++] = $_.fn4; //#13946
                    $k[$j++] = $_.fn4; //#13946
                    $_.msgtmp = $a(); //#13946
                    $_.ea = !$_.ea; //#13947
                } //#13947
            } //#13947
            $k[$j++] = Infinity; //#13950
            $aload($_.msgtmp); //#13950
            if ($_.c >= 0) { //#13950
                $k[$j++] = $_.c & 127; //#13950
            } else { //#13950
                $k[$j++] = $_.c; //#13950
            } //#13950
            $_.msgtmp = $a(); //#13950
        } //#13950
        $_.msg = $_.msgtmp; //#13952
        $_.msglen = $_.msg.length; //#13953
        $_.enc = function() {
            var _41 = $k[--$j]; //#13957
            $put($_.cws, $_.j, $get(_41, $k[--$j])); //#13957
            $_.j = $_.j + 1; //#13958
        }; //#13958
        $_.cws = $a($_.msglen * 2); //#13961
        $_.i = 0; //#13962
        $_.j = 0; //#13962
        $_.cset = "set0"; //#13962
        for (;;) { //#14012
            if ($_.i == $_.msglen) { //#13964
                break; //#13964
            } //#13964
            for (;;) { //#14010
                $_.char1 = $get($_.msg, $_.i); //#13969
                $k[$j++] = 'char2'; //#13970
                if (($_.i + 1) < $_.msglen) { //#13970
                    $k[$j++] = $get($_.msg, $_.i + 1); //#13970
                } else { //#13970
                    $k[$j++] = -99; //#13970
                } //#13970
                var _4J = $k[--$j]; //#13970
                $_[$k[--$j]] = _4J; //#13970
                var _4O = $get($_[$_.cset], $_.char1) !== undefined; //#13973
                if (_4O) { //#13977
                    $k[$j++] = $_.char1; //#13974
                    $k[$j++] = $_[$_.cset]; //#13974
                    $_.enc(); //#13974
                    $_.i = $_.i + 1; //#13975
                    break; //#13976
                } //#13976
                var _4V = $get($_.set2, $_.char1) !== undefined; //#13980
                if (_4V) { //#13985
                    $k[$j++] = $_.sf2; //#13981
                    $k[$j++] = $_[$_.cset]; //#13981
                    $_.enc(); //#13981
                    $k[$j++] = $_.char1; //#13982
                    $k[$j++] = $_.set2; //#13982
                    $_.enc(); //#13982
                    $_.i = $_.i + 1; //#13983
                    break; //#13984
                } //#13984
                var _4f = $get($_[$_.cset], $_.char2) !== undefined; //#13988
                if (!_4f) { //#14006
                    if ($eq($_.cset, "set0")) { //#13994
                        $k[$j++] = $_.la1; //#13990
                        $k[$j++] = $_[$_.cset]; //#13990
                        $_.enc(); //#13990
                        $_.cset = "set1"; //#13991
                    } else { //#13994
                        $k[$j++] = $_.la0; //#13993
                        $k[$j++] = $_[$_.cset]; //#13993
                        $_.enc(); //#13993
                        $_.cset = "set0"; //#13994
                    } //#13994
                    break; //#13996
                } else { //#14006
                    if ($eq($_.cset, "set0")) { //#14003
                        $k[$j++] = $_.sf1; //#13999
                        $k[$j++] = $_[$_.cset]; //#13999
                        $_.enc(); //#13999
                        $k[$j++] = $_.char1; //#14000
                        $k[$j++] = $_.set1; //#14000
                        $_.enc(); //#14000
                    } else { //#14003
                        $k[$j++] = $_.sf0; //#14002
                        $k[$j++] = $_[$_.cset]; //#14002
                        $_.enc(); //#14002
                        $k[$j++] = $_.char1; //#14003
                        $k[$j++] = $_.set0; //#14003
                        $_.enc(); //#14003
                    } //#14003
                    $_.i = $_.i + 1; //#14005
                    break; //#14006
                } //#14006
                break; //#14009
            } //#14009
        } //#14009
        $_.cws = $geti($_.cws, 0, $_.j); //#14013
    } //#14013
    if (!bwipp_posicode.__14064__) { //#14064
        $_ = Object.create($_); //#14064
        var _56 = new Map([
            ["a", $a(["141112", "131212", "121312", "111412", "131113", "121213", "111313", "121114", "111214", "111115", "181111", "171211", "161311", "151411", "141511", "131611", "121711", "111811", "171112", "161212", "151312", "141412", "131512", "121612", "111712", "161113", "151213", "141313", "131413", "121513", "111613", "151114", "141214", "131314", "121414", "111514", "141115", "131215", "121315", "111415", "131116", "121216", "111316", "121117", "111217", "111118", "1<111112", "111111111;1"])],
            ["b", $a(["151213", "141313", "131413", "121513", "141214", "131314", "121414", "131215", "121315", "121216", "191212", "181312", "171412", "161512", "151612", "141712", "131812", "121912", "181213", "171313", "161413", "151513", "141613", "131713", "121813", "171214", "161314", "151414", "141514", "131614", "121714", "161215", "151315", "141415", "131515", "121615", "151216", "141316", "131416", "121516", "141217", "131317", "121417", "131218", "121318", "121219", "1<121312", "121212121<1"])],
            ["limiteda", $a(["111411", "111312", "111213", "111114", "121311", "121212", "121113", "141111", "131211", "131112", "171111", "161211", "151311", "141411", "131511", "121611", "111711", "161112", "151212", "141312", "131412", "121512", "111612", "151113", "141213", "131313", "121413", "111513", "141114", "131214", "121314", "111414", "131115", "121215", "111315", "121116", "111216", "111117", "151111", "1"])],
            ["limitedb", $a(["121512", "121413", "121314", "121215", "131412", "131313", "131214", "151212", "141312", "141213", "181212", "171312", "161412", "151512", "141612", "131712", "121812", "171213", "161313", "151413", "141513", "131613", "121713", "161214", "151314", "141414", "131514", "121614", "151215", "141315", "131415", "121515", "141216", "131316", "121416", "131217", "121317", "121218", "141212", "1"])]
        ]); //#14061
        $_.encmaps = _56; //#14063
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_posicode.$ctx[id] = $_[id]); //#14063
        bwipp_posicode.__14064__ = 1; //#14063
        $_ = Object.getPrototypeOf($_); //#14063
    } //#14063
    $_.encs = $get($_.encmaps, $_.version); //#14065
    if (!bwipp_posicode.__14075__) { //#14075
        $_ = Object.create($_); //#14075
        $_.c2w = $a([$a([495, 330, 210, 126, 70, 35, 15, 5]), $a([165, 120, 84, 56, 35, 20, 10, 4]), $a([45, 36, 28, 21, 15, 10, 6, 3]), $a([9, 8, 7, 6, 5, 4, 3, 2]), $a([1, 1, 1, 1, 1, 1, 1, 1])]); //#14074
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_posicode.$ctx[id] = $_[id]); //#14074
        bwipp_posicode.__14075__ = 1; //#14074
        $_ = Object.getPrototypeOf($_); //#14074
    } //#14074
    $_.v = 0; //#14076
    var _5I = $_.cws; //#14077
    for (var _5J = 0, _5K = _5I.length; _5J < _5K; _5J++) { //#14086
        $_.cw = $get(_5I, _5J); //#14078
        for (var _5M = 0, _5N = 6; _5M < _5N; _5M++) { //#14085
            if ((($_.cw ^ $_.v) & 1) != 0) { //#14082
                $_.v = $_.v ^ 7682; //#14081
            } //#14081
            $_.v = $_.v >>> 1; //#14083
            $_.cw = $_.cw >>> 1; //#14084
        } //#14084
    } //#14084
    $_.v = $_.v + $_.checkoffset; //#14087
    if ($eq($_.version, "limiteda") || $eq($_.version, "limitedb")) { //#14095
        $_.v = $_.v & 1023; //#14090
        if (($_.v > 824) && ($_.v < 853)) { //#14093
            $_.v = $_.v + 292; //#14092
        } //#14092
    } else { //#14095
        $_.v = ($_.v & 1023) + 45; //#14095
    } //#14095
    $_.d = $a([2, 2, 2, 2, 2, 2]); //#14098
    $_.r = 0; //#14099
    $_.c = 0; //#14099
    $_.w = 0; //#14099
    $_.sum = 0; //#14099
    for (;;) { //#14118
        if ($_.sum == $_.v) { //#14101
            break; //#14101
        } //#14101
        $_.t = $f($_.sum + $get($get($_.c2w, $_.r), $_.c)); //#14102
        if ($_.t == $_.v) { //#14107
            $_.w = $_.w + 1; //#14104
            $put($_.d, $_.r, $_.w + 2); //#14105
            $_.sum = $_.t; //#14106
        } //#14106
        if ($_.t > $_.v) { //#14112
            $put($_.d, $_.r, $_.w + 2); //#14109
            $_.r = $_.r + 1; //#14110
            $_.w = 0; //#14111
        } //#14111
        if ($_.t < $_.v) { //#14117
            $_.c = $_.c + 1; //#14114
            $_.w = $_.w + 1; //#14115
            $_.sum = $_.t; //#14116
        } //#14116
    } //#14116
    $k[$j++] = 20; //#14119
    for (var _63 = 0; _63 <= 4; _63 += 1) { //#14119
        var _66 = $k[--$j]; //#14119
        $k[$j++] = $f(_66 - $get($_.d, _63)); //#14119
    } //#14119
    $put($_.d, 5, $k[--$j]); //#14120
    if ($eq($_.version, "b") || $eq($_.version, "limitedb")) { //#14123
        $k[$j++] = Infinity; //#14122
        var _6B = $_.d; //#14122
        for (var _6C = 0, _6D = _6B.length; _6C < _6D; _6C++) { //#14122
            $k[$j++] = $f($get(_6B, _6C) + 1); //#14122
        } //#14122
        $_.d = $a(); //#14122
    } //#14122
    $_.cbs = $strcpy($s(12), "111111111111"); //#14124
    for (var _6I = 5; _6I >= 0; _6I -= 1) { //#14128
        $_.i = _6I; //#14126
        $put($_.cbs, ((5 - $_.i) * 2) + 1, $f($get($_.d, $_.i) + 47)); //#14127
    } //#14127
    $_.sbs = $s(($_.cws.length * 6) + 31); //#14131
    var _6S = $get($_.encs, $_.encs.length - 2); //#14132
    $puti($_.sbs, 0, _6S); //#14133
    $_.j = _6S.length; //#14134
    for (var _6W = 0, _6V = $_.cws.length - 1; _6W <= _6V; _6W += 1) { //#14139
        $_.i = _6W; //#14136
        $puti($_.sbs, $_.j, $get($_.encs, $get($_.cws, $_.i))); //#14137
        $_.j = $_.j + 6; //#14138
    } //#14138
    $puti($_.sbs, $_.j, $_.cbs); //#14140
    $_.j = $_.j + 12; //#14141
    var _6l = $get($_.encs, $_.encs.length - 1); //#14142
    $puti($_.sbs, $_.j, _6l); //#14143
    $_.j = _6l.length + $_.j; //#14144
    $_.sbs = $geti($_.sbs, 0, $_.j); //#14145
    $k[$j++] = Infinity; //#14148
    $k[$j++] = Infinity; //#14150
    var _6s = $_.sbs; //#14150
    for (var _6t = 0, _6u = _6s.length; _6t < _6u; _6t++) { //#14150
        $k[$j++] = $f($get(_6s, _6t) - 48); //#14150
    } //#14150
    var _6w = $a(); //#14150
    $k[$j++] = Infinity; //#14151
    for (var _6y = 0, _6z = ~~(($_.sbs.length + 1) / 2); _6y < _6z; _6y++) { //#14151
        $k[$j++] = $_.height; //#14151
    } //#14151
    var _71 = $a(); //#14151
    $k[$j++] = Infinity; //#14152
    for (var _73 = 0, _74 = ~~(($_.sbs.length + 1) / 2); _73 < _74; _73++) { //#14152
        $k[$j++] = 0; //#14152
    } //#14152
    var _75 = $a(); //#14152
    var _7D = new Map([
        ["a", 0],
        ["b", 0],
        ["limiteda", 12],
        ["limitedb", 13]
    ]); //#14155
    var _7G = new Map([
        ["a", 0],
        ["b", 0],
        ["limiteda", 12],
        ["limitedb", 13]
    ]); //#14156
    $k[$j++] = 'ren'; //#14157
    $k[$j++] = 'renlinear'; //#14157
    $k[$j++] = 'sbs'; //#14157
    $k[$j++] = _6w; //#14157
    $k[$j++] = 'bhs'; //#14157
    $k[$j++] = _71; //#14157
    $k[$j++] = 'bbs'; //#14157
    $k[$j++] = _75; //#14157
    $k[$j++] = 'txt'; //#14157
    $k[$j++] = $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])]); //#14157
    $k[$j++] = 'textxalign'; //#14157
    $k[$j++] = "center"; //#14157
    $k[$j++] = 'borderleft'; //#14157
    $k[$j++] = $get(_7D, $_.version); //#14157
    $k[$j++] = 'borderright'; //#14157
    $k[$j++] = $get(_7G, $_.version); //#14157
    $k[$j++] = 'opt'; //#14157
    $k[$j++] = $_.options; //#14157
    var _7K = $d(); //#14157
    $k[$j++] = _7K; //#14160
    if (!$_.dontdraw) { //#14160
        bwipp_renlinear(); //#14160
    } //#14160
    $_ = Object.getPrototypeOf($_); //#14162
    $_ = Object.getPrototypeOf($_); //#14164
} //bwipp_posicode
function bwipp_codablockf() {
    $_ = Object.create($_); //#14195
    $_.dontdraw = false; //#14198
    $_.rows = -1; //#14199
    $_.columns = 8; //#14200
    $_.rowheight = 10; //#14201
    $_.sepheight = 1; //#14202
    $_.parse = false; //#14203
    $_.parsefnc = false; //#14204
    $k[$j++] = $_; //#14206
    bwipp_processoptions(); //#14206
    $_.options = $k[--$j]; //#14206
    $_.barcode = $k[--$j]; //#14207
    if (($_.columns < 4) || ($_.columns > 62)) { //#14211
        $k[$j++] = 'bwipp.codablockfBadColumns#14210'; //#14210
        $k[$j++] = "Codablock F must have 4 to 62 columns"; //#14210
        bwipp_raiseerror(); //#14210
    } //#14210
    if (($_.rows != -1) && (($_.rows < 2) || ($_.rows > 44))) { //#14215
        $k[$j++] = 'bwipp.codablockfBadRows#14214'; //#14214
        $k[$j++] = "Codablock F must have 2 to 44 rows"; //#14214
        bwipp_raiseerror(); //#14214
    } //#14214
    if ($_.rowheight < 8) { //#14219
        $k[$j++] = 'bwipp.codablockfBadRowHeight#14218'; //#14218
        $k[$j++] = "Codablock F must have rowheight of at least 8"; //#14218
        bwipp_raiseerror(); //#14218
    } //#14218
    if ($_.sepheight < 1) { //#14223
        $k[$j++] = 'bwipp.codablockfBadSepHeight#14222'; //#14222
        $k[$j++] = "Codablock F must have sepheight of at least 1"; //#14222
        bwipp_raiseerror(); //#14222
    } //#14222
    bwipp_loadctx(bwipp_codablockf); //#14225
    $k[$j++] = 'c'; //#14227
    if (($_.columns >= 4) && ($_.columns <= 62)) { //#14227
        $k[$j++] = $_.columns; //#14227
    } else { //#14227
        $k[$j++] = 8; //#14227
    } //#14227
    var _C = $k[--$j]; //#14227
    $_[$k[--$j]] = _C; //#14227
    $k[$j++] = 'rows'; //#14228
    if (($_.rows >= 2) && ($_.rows <= 44)) { //#14228
        $k[$j++] = $_.rows; //#14228
    } else { //#14228
        $k[$j++] = -1; //#14228
    } //#14228
    var _H = $k[--$j]; //#14228
    $_[$k[--$j]] = _H; //#14228
    $_.swa = -1; //#14231
    $_.swb = -2; //#14231
    $_.swc = -3; //#14231
    $_.sft = -4; //#14231
    $_.fn1 = -5; //#14232
    $_.fn2 = -6; //#14232
    $_.fn3 = -7; //#14232
    $_.fn4 = -8; //#14232
    $_.sta = -9; //#14233
    $_.stp = -10; //#14233
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC3", $_.fn3]
    ]); //#14241
    $_.fncvals = _N; //#14243
    $k[$j++] = 'msg'; //#14244
    $k[$j++] = $_.barcode; //#14244
    $k[$j++] = $_.fncvals; //#14244
    bwipp_parseinput(); //#14244
    var _Q = $k[--$j]; //#14244
    $_[$k[--$j]] = _Q; //#14244
    $_.msglen = $_.msg.length; //#14245
    $_.msgtmp = $a([]); //#14248
    var _U = $_.msg; //#14249
    for (var _V = 0, _W = _U.length; _V < _W; _V++) { //#14252
        $_.char = $get(_U, _V); //#14250
        $k[$j++] = Infinity; //#14251
        $aload($_.msgtmp); //#14251
        if ($_.char < 128) { //#14251
            $k[$j++] = $_.char; //#14251
        } else { //#14251
            $k[$j++] = $_.fn4; //#14251
            $k[$j++] = $_.char & 127; //#14251
        } //#14251
        $_.msgtmp = $a(); //#14251
    } //#14251
    $_.kmsg = $_.msg; //#14253
    $_.msg = $_.msgtmp; //#14254
    $_.msglen = $_.msg.length; //#14255
    if (!bwipp_codablockf.__14312__) { //#14312
        $_ = Object.create($_); //#14312
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sft, $_.sft, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.sta, $_.sta, $_.sta]), $a([$_.stp, $_.stp, $_.stp])]); //#14296
        $_.charvals = $a([new Map, new Map, new Map]); //#14299
        for (var _2p = 0, _2o = $_.charmaps.length - 1; _2p <= _2o; _2p += 1) { //#14308
            $_.i = _2p; //#14301
            $_.encs = $get($_.charmaps, $_.i); //#14302
            for (var _2t = 0; _2t <= 2; _2t += 1) { //#14307
                $_.j = _2t; //#14304
                var _2w = $get($_.encs, $_.j); //#14305
                $k[$j++] = _2w; //#14305
                if ($eq($type(_2w), 'stringtype')) { //#14305
                    var _2z = $get($k[--$j], 0); //#14305
                    $k[$j++] = _2z; //#14305
                } //#14305
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#14306
            } //#14306
        } //#14306
        $_.seta = $get($_.charvals, 0); //#14309
        $_.setb = $get($_.charvals, 1); //#14310
        $_.setc = $get($_.charvals, 2); //#14311
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codablockf.$ctx[id] = $_[id]); //#14311
        bwipp_codablockf.__14312__ = 1; //#14311
        $_ = Object.getPrototypeOf($_); //#14311
    } //#14311
    $_.numsscr = function() {
        $_.n = 0; //#14316
        $_.s = 0; //#14316
        $_.p = $k[--$j]; //#14317
        for (;;) { //#14331
            if ($_.p >= $_.msglen) { //#14318
                break; //#14318
            } //#14318
            if ($_.p != 0) { //#14321
                if ($get($_.msg, $f($_.p - 1)) == $_.fn4) { //#14320
                    break; //#14320
                } //#14320
            } //#14320
            var _3M = $get($_.msg, $_.p); //#14322
            var _3O = $get($_.setc, _3M) !== undefined; //#14323
            $k[$j++] = _3M; //#14323
            if (!_3O) { //#14323
                $j--; //#14323
                break; //#14323
            } //#14323
            if ($k[--$j] == $_.fn1) { //#14327
                if (($_.s % 2) == 0) { //#14326
                    $_.s = $_.s + 1; //#14326
                } else { //#14326
                    break; //#14326
                } //#14326
            } //#14326
            $_.n = $_.n + 1; //#14328
            $_.s = $_.s + 1; //#14329
            $_.p = $f($_.p + 1); //#14330
        } //#14330
        $k[$j++] = $_.n; //#14332
        $k[$j++] = $_.s; //#14332
    }; //#14332
    $_.enca = function() {
        $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#14337
        $_.j = $_.j + 1; //#14338
    }; //#14338
    $_.encb = function() {
        $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#14341
        $_.j = $_.j + 1; //#14342
    }; //#14342
    $_.encc = function() {
        var _3k = $k[--$j]; //#14345
        $k[$j++] = _3k; //#14349
        if ($ne($type(_3k), 'arraytype')) { //#14348
            var _3o = $get($_.setc, $k[--$j]); //#14346
            $k[$j++] = _3o; //#14346
        } else { //#14348
            $aload($k[--$j]); //#14348
            var _3q = $k[--$j]; //#14348
            var _3r = $k[--$j]; //#14348
            $k[$j++] = $f($f(_3q - 48) + ($f(_3r - 48) * 10)); //#14348
        } //#14348
        $put($_.cws, $_.j, $k[--$j]); //#14350
        $_.j = $_.j + 1; //#14351
    }; //#14351
    $_.anotb = function() {
        var _3w = $k[--$j]; //#14355
        var _3y = $get($_.seta, _3w) !== undefined; //#14355
        var _40 = $get($_.setb, _3w) !== undefined; //#14355
        $k[$j++] = _3y && (!_40); //#14355
    }; //#14355
    $_.bnota = function() {
        var _41 = $k[--$j]; //#14356
        var _43 = $get($_.setb, _41) !== undefined; //#14356
        var _45 = $get($_.seta, _41) !== undefined; //#14356
        $k[$j++] = _43 && (!_45); //#14356
    }; //#14356
    $k[$j++] = Infinity; //#14359
    for (var _47 = 0, _48 = $_.msg.length; _47 < _48; _47++) { //#14359
        $k[$j++] = 0; //#14359
    } //#14359
    $k[$j++] = 9999; //#14359
    $_.nextanotb = $a(); //#14359
    $k[$j++] = Infinity; //#14360
    for (var _4B = 0, _4C = $_.msg.length; _4B < _4C; _4B++) { //#14360
        $k[$j++] = 0; //#14360
    } //#14360
    $k[$j++] = 9999; //#14360
    $_.nextbnota = $a(); //#14360
    for (var _4F = $_.msg.length - 1; _4F >= 0; _4F -= 1) { //#14373
        $_.i = _4F; //#14362
        $k[$j++] = $get($_.msg, $_.i); //#14363
        $_.anotb(); //#14363
        if ($k[--$j]) { //#14366
            $put($_.nextanotb, $_.i, 0); //#14364
        } else { //#14366
            $put($_.nextanotb, $_.i, $f($get($_.nextanotb, $_.i + 1) + 1)); //#14366
        } //#14366
        $k[$j++] = $get($_.msg, $_.i); //#14368
        $_.bnota(); //#14368
        if ($k[--$j]) { //#14371
            $put($_.nextbnota, $_.i, 0); //#14369
        } else { //#14371
            $put($_.nextbnota, $_.i, $f($get($_.nextbnota, $_.i + 1) + 1)); //#14371
        } //#14371
    } //#14371
    $_.abeforeb = function() {
        var _4c = $k[--$j]; //#14376
        $k[$j++] = $lt($get($_.nextanotb, _4c), $get($_.nextbnota, _4c)); //#14376
    }; //#14376
    $_.bbeforea = function() {
        var _4h = $k[--$j]; //#14377
        $k[$j++] = $lt($get($_.nextbnota, _4h), $get($_.nextanotb, _4h)); //#14377
    }; //#14377
    $_.padrow = function() {
        for (var _4n = 0, _4o = $k[--$j]; _4n < _4o; _4n++) { //#14387
            for (;;) { //#14386
                if ($eq($_.cset, "seta")) { //#14383
                    $k[$j++] = $_.swc; //#14383
                    $_.enca(); //#14383
                    $_.cset = "setc"; //#14383
                    break; //#14383
                } //#14383
                if ($eq($_.cset, "setb")) { //#14384
                    $k[$j++] = $_.swc; //#14384
                    $_.encb(); //#14384
                    $_.cset = "setc"; //#14384
                    break; //#14384
                } //#14384
                if ($eq($_.cset, "setc")) { //#14385
                    $k[$j++] = $_.swb; //#14385
                    $_.encc(); //#14385
                    $_.cset = "setb"; //#14385
                    break; //#14385
                } //#14385
            } //#14385
        } //#14385
    }; //#14385
    $_.encafitsrow = function() {
        if (($_.rem <= 2) && ($get($_.msg, $_.i) == $_.fn4)) { //#14402
            var _54 = ($_.rem == 2) && ($get($_.msg, $_.i + 1) <= 95); //#14394
            $k[$j++] = _54; //#14398
            if (_54) { //#14398
                $k[$j++] = $_.fn4; //#14395
                $_.enca(); //#14395
                $k[$j++] = $get($_.msg, $_.i + 1); //#14396
                $_.enca(); //#14396
                $_.i = $_.i + 2; //#14397
            } //#14397
        } else { //#14402
            $k[$j++] = $get($_.msg, $_.i); //#14400
            $_.enca(); //#14400
            $_.i = $_.i + 1; //#14401
            $k[$j++] = true; //#14402
        } //#14402
    }; //#14402
    $_.encbfitsrow = function() {
        if (($_.rem <= 2) && ($get($_.msg, $_.i) == $_.fn4)) { //#14418
            var _5N = ($_.rem == 2) && ($get($_.msg, $_.i + 1) >= 32); //#14410
            $k[$j++] = _5N; //#14414
            if (_5N) { //#14414
                $k[$j++] = $_.fn4; //#14411
                $_.encb(); //#14411
                $k[$j++] = $get($_.msg, $_.i + 1); //#14412
                $_.encb(); //#14412
                $_.i = $_.i + 2; //#14413
            } //#14413
        } else { //#14418
            $k[$j++] = $get($_.msg, $_.i); //#14416
            $_.encb(); //#14416
            $_.i = $_.i + 1; //#14417
            $k[$j++] = true; //#14418
        } //#14418
    }; //#14418
    $_.cws = $a($f($_.c + 5) * 44); //#14423
    $_.i = 0; //#14425
    $_.j = 0; //#14425
    $_.r = 1; //#14425
    $_.lastrow = false; //#14426
    for (;;) { //#14593
        if ($_.lastrow) { //#14428
            break; //#14428
        } //#14428
        if ($_.r > 44) { //#14432
            $k[$j++] = 'bwipp.codablockfTooBig#14431'; //#14431
            $k[$j++] = "Maximum length exceeded"; //#14431
            bwipp_raiseerror(); //#14431
        } //#14431
        $k[$j++] = $_.sta; //#14435
        $_.enca(); //#14435
        if ($_.i < $_.msglen) { //#14436
            $k[$j++] = $_.i; //#14436
            $_.numsscr(); //#14436
        } else { //#14436
            $k[$j++] = -1; //#14436
            $k[$j++] = -1; //#14436
        } //#14436
        $_.nums = $k[--$j]; //#14436
        $_.nchars = $k[--$j]; //#14436
        for (;;) { //#14456
            if ($_.msglen == 0) { //#14442
                $k[$j++] = $_.swb; //#14439
                $_.enca(); //#14439
                $_.cset = "setb"; //#14440
                break; //#14441
            } //#14441
            if ($_.nums >= 2) { //#14447
                $k[$j++] = $_.swc; //#14444
                $_.enca(); //#14444
                $_.cset = "setc"; //#14445
                break; //#14446
            } //#14446
            $k[$j++] = $_.i; //#14448
            $_.abeforeb(); //#14448
            if ($k[--$j]) { //#14452
                $k[$j++] = $_.sft; //#14449
                $_.enca(); //#14449
                $_.cset = "seta"; //#14450
                break; //#14451
            } //#14451
            $k[$j++] = $_.swb; //#14453
            $_.enca(); //#14453
            $_.cset = "setb"; //#14454
            break; //#14455
        } //#14455
        $_.j = $_.j + 1; //#14457
        $_.endofrow = false; //#14460
        for (;;) { //#14578
            $_.rem = $f($f($_.c + 3) - ($_.j % $f($_.c + 5))); //#14461
            if (($_.i == $_.msglen) || $_.endofrow) { //#14463
                break; //#14463
            } //#14463
            $k[$j++] = $_.i; //#14465
            $_.numsscr(); //#14465
            $_.nums = $k[--$j]; //#14465
            $_.nchars = $k[--$j]; //#14465
            $k[$j++] = 'remnums'; //#14466
            if ($_.nums > ($_.rem * 2)) { //#14466
                $k[$j++] = $_.rem * 2; //#14466
            } else { //#14466
                $k[$j++] = $_.nums; //#14466
            } //#14466
            var _63 = $k[--$j]; //#14466
            $_[$k[--$j]] = _63; //#14466
            for (;;) { //#14576
                if ((($eq($_.cset, "seta") || $eq($_.cset, "setb")) && ($_.remnums >= 4)) && ($get($_.msg, $_.i) != $_.fn1)) { //#14504
                    if ((($_.remnums % 2) == 0) && ($_.rem >= 3)) { //#14486
                        $k[$j++] = $_.swc; //#14474
                        if ($eq($_.cset, "seta")) { //#14474
                            $_.enca(); //#14474
                        } else { //#14474
                            $_.encb(); //#14474
                        } //#14474
                        $_.cset = "setc"; //#14475
                        for (var _6G = 0, _6H = 2; _6G < _6H; _6G++) { //#14484
                            if ($get($_.msg, $_.i) == $_.fn1) { //#14482
                                $k[$j++] = $_.fn1; //#14478
                                $_.encc(); //#14478
                                $_.i = $_.i + 1; //#14479
                            } else { //#14482
                                $k[$j++] = $geti($_.msg, $_.i, 2); //#14481
                                $_.encc(); //#14481
                                $_.i = $_.i + 2; //#14482
                            } //#14482
                        } //#14482
                        break; //#14485
                    } //#14485
                    if ((($_.remnums % 2) != 0) && ($_.rem >= 4)) { //#14503
                        $k[$j++] = $get($_.msg, $_.i); //#14489
                        if ($eq($_.cset, "seta")) { //#14489
                            $_.enca(); //#14489
                        } else { //#14489
                            $_.encb(); //#14489
                        } //#14489
                        $_.i = $_.i + 1; //#14490
                        $k[$j++] = $_.swc; //#14491
                        if ($eq($_.cset, "seta")) { //#14491
                            $_.enca(); //#14491
                        } else { //#14491
                            $_.encb(); //#14491
                        } //#14491
                        $_.cset = "setc"; //#14492
                        for (var _6b = 0, _6c = 2; _6b < _6c; _6b++) { //#14501
                            if ($get($_.msg, $_.i) == $_.fn1) { //#14499
                                $k[$j++] = $_.fn1; //#14495
                                $_.encc(); //#14495
                                $_.i = $_.i + 1; //#14496
                            } else { //#14499
                                $k[$j++] = $geti($_.msg, $_.i, 2); //#14498
                                $_.encc(); //#14498
                                $_.i = $_.i + 2; //#14499
                            } //#14499
                        } //#14499
                        break; //#14502
                    } //#14502
                } //#14502
                $k[$j++] = $eq($_.cset, "setb"); //#14505
                $k[$j++] = $get($_.msg, $_.i); //#14505
                $_.anotb(); //#14505
                var _6r = $k[--$j]; //#14505
                var _6s = $k[--$j]; //#14505
                if ($an(_6s, _6r) && ($_.rem >= 2)) { //#14520
                    if ($_.i < ($_.msglen - 1)) { //#14514
                        $k[$j++] = $_.i + 1; //#14508
                        $_.bbeforea(); //#14508
                        if ($k[--$j]) { //#14513
                            $k[$j++] = $_.sft; //#14509
                            $_.encb(); //#14509
                            $k[$j++] = $get($_.msg, $_.i); //#14510
                            $_.enca(); //#14510
                            $_.i = $_.i + 1; //#14511
                            break; //#14512
                        } //#14512
                    } //#14512
                    $k[$j++] = $_.swa; //#14515
                    $_.encb(); //#14515
                    $_.cset = "seta"; //#14516
                    $k[$j++] = $get($_.msg, $_.i); //#14517
                    $_.enca(); //#14517
                    $_.i = $_.i + 1; //#14518
                    break; //#14519
                } //#14519
                $k[$j++] = $eq($_.cset, "seta"); //#14521
                $k[$j++] = $get($_.msg, $_.i); //#14521
                $_.bnota(); //#14521
                var _7C = $k[--$j]; //#14521
                var _7D = $k[--$j]; //#14521
                if ($an(_7D, _7C) && ($_.rem >= 2)) { //#14536
                    if ($_.i < ($_.msglen - 1)) { //#14530
                        $k[$j++] = $_.i + 1; //#14524
                        $_.abeforeb(); //#14524
                        if ($k[--$j]) { //#14529
                            $k[$j++] = $_.sft; //#14525
                            $_.enca(); //#14525
                            $k[$j++] = $get($_.msg, $_.i); //#14526
                            $_.encb(); //#14526
                            $_.i = $_.i + 1; //#14527
                            break; //#14528
                        } //#14528
                    } //#14528
                    $k[$j++] = $_.swb; //#14531
                    $_.enca(); //#14531
                    $_.cset = "setb"; //#14532
                    $k[$j++] = $get($_.msg, $_.i); //#14533
                    $_.encb(); //#14533
                    $_.i = $_.i + 1; //#14534
                    break; //#14535
                } //#14535
                if (($eq($_.cset, "setc") && ($_.remnums < 2)) && ($_.rem >= 2)) { //#14549
                    $_.rem = $f($_.rem - 1); //#14539
                    $k[$j++] = $_.i; //#14540
                    $_.abeforeb(); //#14540
                    if ($k[--$j]) { //#14547
                        $k[$j++] = $_.swa; //#14541
                        $_.encc(); //#14541
                        $_.cset = "seta"; //#14542
                        $_.encafitsrow(); //#14543
                        if ($k[--$j]) { //#14543
                            break; //#14543
                        } //#14543
                    } else { //#14547
                        $k[$j++] = $_.swb; //#14545
                        $_.encc(); //#14545
                        $_.cset = "setb"; //#14546
                        $_.encbfitsrow(); //#14547
                        if ($k[--$j]) { //#14547
                            break; //#14547
                        } //#14547
                    } //#14547
                } //#14547
                var _7i = $get($_.seta, $get($_.msg, $_.i)) !== undefined; //#14552
                if (($eq($_.cset, "seta") && _7i) && ($_.rem >= 1)) { //#14555
                    $_.encafitsrow(); //#14554
                    if ($k[--$j]) { //#14554
                        break; //#14554
                    } //#14554
                } //#14554
                var _7q = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#14556
                if (($eq($_.cset, "setb") && _7q) && ($_.rem >= 1)) { //#14559
                    $_.encbfitsrow(); //#14558
                    if ($k[--$j]) { //#14558
                        break; //#14558
                    } //#14558
                } //#14558
                if (($eq($_.cset, "setc") && ($_.remnums >= 2)) && ($_.rem >= 1)) { //#14570
                    if ($get($_.msg, $_.i) == $_.fn1) { //#14567
                        $k[$j++] = $_.fn1; //#14563
                        $_.encc(); //#14563
                        $_.i = $_.i + 1; //#14564
                    } else { //#14567
                        $k[$j++] = $geti($_.msg, $_.i, 2); //#14566
                        $_.encc(); //#14566
                        $_.i = $_.i + 2; //#14567
                    } //#14567
                    break; //#14569
                } //#14569
                $_.endofrow = true; //#14573
                break; //#14574
            } //#14574
        } //#14574
        if ((((($_.r >= $_.rows) || ($_.rows == -1)) && ($_.r > 1)) && ($_.i == $_.msglen)) && ($_.rem >= 2)) { //#14590
            $k[$j++] = $f($_.rem - 2); //#14582
            $_.padrow(); //#14582
            $_.j = $_.j + 3; //#14583
            $k[$j++] = $_.stp; //#14584
            $_.enca(); //#14584
            $_.lastrow = true; //#14585
        } else { //#14590
            $k[$j++] = $_.rem; //#14587
            $_.padrow(); //#14587
            $_.j = $_.j + 1; //#14588
            $k[$j++] = $_.stp; //#14589
            $_.enca(); //#14589
            $_.r = $_.r + 1; //#14590
        } //#14590
    } //#14590
    $_.cws = $geti($_.cws, 0, $_.j); //#14594
    if (!bwipp_codablockf.__14604__) { //#14604
        $_ = Object.create($_); //#14604
        $k[$j++] = Infinity; //#14598
        for (var _8N = 64; _8N <= 95; _8N += 1) { //#14599
            $k[$j++] = _8N; //#14599
        } //#14599
        for (var _8O = 0; _8O <= 15; _8O += 1) { //#14600
            $k[$j++] = _8O; //#14600
        } //#14600
        for (var _8P = 26; _8P <= 63; _8P += 1) { //#14601
            $k[$j++] = _8P; //#14601
        } //#14601
        $_.abmap = $a(); //#14601
        $k[$j++] = Infinity; //#14603
        for (var _8R = 0; _8R <= 85; _8R += 1) { //#14603
            $k[$j++] = _8R; //#14603
        } //#14603
        $_.cmap = $a(); //#14603
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codablockf.$ctx[id] = $_[id]); //#14603
        bwipp_codablockf.__14604__ = 1; //#14603
        $_ = Object.getPrototypeOf($_); //#14603
    } //#14603
    $_.chkmsg = $a($_.kmsg.length); //#14607
    $_.j = 0; //#14608
    for (var _8Y = 0, _8X = $_.kmsg.length - 1; _8Y <= _8X; _8Y += 1) { //#14614
        $_.i = _8Y; //#14610
        $_.char = $get($_.kmsg, $_.i); //#14611
        if ($_.char >= 0) { //#14612
            $put($_.chkmsg, $_.j, $_.char); //#14612
            $_.j = $_.j + 1; //#14612
        } //#14612
        if (($_.char == $_.fn1) && ($_.i != 0)) { //#14613
            $put($_.chkmsg, $_.j, 29); //#14613
            $_.j = $_.j + 1; //#14613
        } //#14613
    } //#14613
    $_.t1 = 0; //#14615
    $_.t2 = 0; //#14615
    $_.k1 = 0; //#14615
    $_.k2 = 0; //#14615
    for (var _8p = 0, _8o = $_.j - 1; _8p <= _8o; _8p += 1) { //#14622
        $_.i = _8p; //#14617
        $_.t1 = ($get($_.chkmsg, $_.i) * $_.i) % 86; //#14618
        $_.t2 = $f($_.t1 + $get($_.chkmsg, $_.i)) % 86; //#14619
        $_.k1 = $f($_.k1 + $_.t2) % 86; //#14620
        $_.k2 = $f($_.k2 + $_.t1) % 86; //#14621
    } //#14621
    $k[$j++] = $_.cws; //#14623
    $k[$j++] = $_.cws.length - 4; //#14623
    if ($ne($_.cset, "setc")) { //#14623
        $k[$j++] = $_.abmap; //#14623
    } else { //#14623
        $k[$j++] = $_.cmap; //#14623
    } //#14623
    var _99 = $get($k[--$j], $_.k1); //#14623
    var _9A = $k[--$j]; //#14623
    $put($k[--$j], _9A, _99); //#14623
    $k[$j++] = $_.cws; //#14624
    $k[$j++] = $_.cws.length - 3; //#14624
    if ($ne($_.cset, "setc")) { //#14624
        $k[$j++] = $_.abmap; //#14624
    } else { //#14624
        $k[$j++] = $_.cmap; //#14624
    } //#14624
    var _9J = $get($k[--$j], $_.k2); //#14624
    var _9K = $k[--$j]; //#14624
    $put($k[--$j], _9K, _9J); //#14624
    var _9M = $_.cws; //#14627
    $k[$j++] = _9M; //#14627
    $k[$j++] = 2; //#14627
    if ($get(_9M, 2 - 1) != 99) { //#14627
        $k[$j++] = $_.abmap; //#14627
    } else { //#14627
        $k[$j++] = $_.cmap; //#14627
    } //#14627
    var _9S = $get($k[--$j], $_.r - 2); //#14627
    var _9T = $k[--$j]; //#14627
    $put($k[--$j], _9T, _9S); //#14627
    for (var _9X = 1, _9W = $_.r - 1; _9X <= _9W; _9X += 1) { //#14631
        $_.i = _9X; //#14629
        var _9Y = $_.cws; //#14630
        var _9Z = $_.i; //#14630
        var _9a = $_.c; //#14630
        $k[$j++] = _9Y; //#14630
        $k[$j++] = $f((_9Z * $f(_9a + 5)) + 2); //#14630
        if ($get(_9Y, $f(($f((_9Z * $f(_9a + 5)) + 2)) - 1)) != 99) { //#14630
            $k[$j++] = $_.abmap; //#14630
        } else { //#14630
            $k[$j++] = $_.cmap; //#14630
        } //#14630
        var _9g = $get($k[--$j], $_.i + 42); //#14630
        var _9h = $k[--$j]; //#14630
        $put($k[--$j], _9h, _9g); //#14630
    } //#14630
    for (var _9l = 0, _9k = $_.r - 1; _9l <= _9k; _9l += 1) { //#14642
        $_.rcws = $geti($_.cws, _9l * $f($_.c + 5), $f($_.c + 4)); //#14635
        $_.csum = $get($_.rcws, 0); //#14636
        for (var _9u = 1, _9t = $_.rcws.length - 2; _9u <= _9t; _9u += 1) { //#14640
            $_.i = _9u; //#14638
            $_.csum = $f($_.csum + ($get($_.rcws, $_.i) * $_.i)); //#14639
        } //#14639
        $put($_.rcws, $_.rcws.length - 1, $_.csum % 103); //#14641
    } //#14641
    var _A4 = $get($_.options, 'debugcws') !== undefined; //#14644
    if (_A4) { //#14644
        $k[$j++] = 'bwipp.debugcws#14644'; //#14644
        $k[$j++] = $_.cws; //#14644
        bwipp_raiseerror(); //#14644
    } //#14644
    if (!bwipp_codablockf.__14665__) { //#14665
        $_ = Object.create($_); //#14665
        $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "2331112"]); //#14664
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codablockf.$ctx[id] = $_[id]); //#14664
        bwipp_codablockf.__14665__ = 1; //#14664
        $_ = Object.getPrototypeOf($_); //#14664
    } //#14664
    $_.rowbits = $a($_.r); //#14668
    for (var _AC = 0, _AB = $_.r - 1; _AC <= _AB; _AC += 1) { //#14680
        $_.i = _AC; //#14670
        $k[$j++] = Infinity; //#14671
        var _AH = $geti($_.cws, $_.i * $f($_.c + 5), $f($_.c + 5)); //#14672
        for (var _AI = 0, _AJ = _AH.length; _AI < _AJ; _AI++) { //#14674
            $forall($get($_.encs, $get(_AH, _AI)), function() { //#14673
                var _AN = $k[--$j]; //#14673
                $k[$j++] = $f(_AN - 48); //#14673
            }); //#14673
        } //#14673
        $_.sbs = $a(); //#14673
        $k[$j++] = Infinity; //#14676
        var _AP = $_.sbs; //#14677
        $k[$j++] = 0; //#14677
        for (var _AQ = 0, _AR = _AP.length; _AQ < _AR; _AQ++) { //#14677
            var _AT = $k[--$j]; //#14677
            var _AU = (_AT == 1) ? 0 : 1; //#14677
            $k[$j++] = _AT; //#14677
            for (var _AV = 0, _AW = $get(_AP, _AQ); _AV < _AW; _AV++) { //#14677
                $k[$j++] = _AU //#14677
            } //#14677
        } //#14677
        $astore($a($counttomark() - 1)); //#14678
        var _AZ = $k[--$j]; //#14678
        var _Aa = $k[--$j]; //#14678
        $k[$j++] = _AZ; //#14678
        $k[$j++] = _Aa; //#14678
        $j--; //#14678
        var _Ab = $k[--$j]; //#14678
        var _Ac = $k[--$j]; //#14678
        $k[$j++] = _Ab; //#14678
        $k[$j++] = _Ac; //#14678
        $j--; //#14678
        $k[$j++] = $_.rowbits; //#14679
        $k[$j++] = $_.i; //#14679
        $r(3, -1); //#14679
        var _Af = $k[--$j]; //#14679
        var _Ag = $k[--$j]; //#14679
        $put($k[--$j], _Ag, _Af); //#14679
    } //#14679
    $_.symwid = $f(($_.c * 11) + 57); //#14683
    $k[$j++] = Infinity; //#14684
    for (var _Al = 0, _Am = $_.symwid * $_.sepheight; _Al < _Am; _Al++) { //#14685
        $k[$j++] = 1; //#14685
    } //#14685
    for (var _Ap = 0, _Ao = $_.r - 2; _Ap <= _Ao; _Ap += 1) { //#14694
        $_.i = _Ap; //#14687
        for (var _Ar = 0, _As = $_.rowheight; _Ar < _As; _Ar++) { //#14688
            $aload($get($_.rowbits, $_.i)); //#14688
        } //#14688
        for (var _Ax = 0, _Ay = $_.sepheight; _Ax < _Ay; _Ax++) { //#14693
            $k[$j++] = 1; //#14691
            $k[$j++] = 1; //#14691
            $k[$j++] = 0; //#14691
            $k[$j++] = 1; //#14691
            $k[$j++] = 0; //#14691
            $k[$j++] = 0; //#14691
            $k[$j++] = 0; //#14691
            $k[$j++] = 0; //#14691
            $k[$j++] = 1; //#14691
            $k[$j++] = 0; //#14691
            $k[$j++] = 0; //#14691
            for (var _B0 = 0, _B1 = $f($_.symwid - 24); _B0 < _B1; _B0++) { //#14691
                $k[$j++] = 1; //#14691
            } //#14691
            $k[$j++] = 1; //#14692
            $k[$j++] = 1; //#14692
            $k[$j++] = 0; //#14692
            $k[$j++] = 0; //#14692
            $k[$j++] = 0; //#14692
            $k[$j++] = 1; //#14692
            $k[$j++] = 1; //#14692
            $k[$j++] = 1; //#14692
            $k[$j++] = 0; //#14692
            $k[$j++] = 1; //#14692
            $k[$j++] = 0; //#14692
            $k[$j++] = 1; //#14692
            $k[$j++] = 1; //#14692
        } //#14692
    } //#14692
    for (var _B3 = 0, _B4 = $_.rowheight; _B3 < _B4; _B3++) { //#14695
        $aload($get($_.rowbits, $_.r - 1)); //#14695
    } //#14695
    for (var _BA = 0, _BB = $_.symwid * $_.sepheight; _BA < _BB; _BA++) { //#14696
        $k[$j++] = 1; //#14696
    } //#14696
    $_.pixs = $a(); //#14696
    var _BL = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.symwid],
        ["pixy", ~~($_.pixs.length / $_.symwid)],
        ["height", (~~($_.pixs.length / $_.symwid)) / 72],
        ["width", $_.symwid / 72],
        ["opt", $_.options]
    ]); //#14707
    $k[$j++] = _BL; //#14710
    if (!$_.dontdraw) { //#14710
        bwipp_renmatrix(); //#14710
    } //#14710
    $_ = Object.getPrototypeOf($_); //#14712
    $_ = Object.getPrototypeOf($_); //#14714
} //bwipp_codablockf
function bwipp_code16k() {
    $_ = Object.create($_); //#14745
    $_.dontdraw = false; //#14748
    $_.sam = -1; //#14749
    $_.rows = 0; //#14750
    $_.rowheight = 8; //#14751
    $_.sepheight = 1; //#14752
    $_.raw = false; //#14753
    $_.parse = false; //#14754
    $_.parsefnc = false; //#14755
    $k[$j++] = $_; //#14757
    bwipp_processoptions(); //#14757
    $_.options = $k[--$j]; //#14757
    $_.barcode = $k[--$j]; //#14758
    if (($_.rows != 0) && (($_.rows < 2) || ($_.rows > 16))) { //#14762
        $k[$j++] = 'bwipp.code16kBadRows#14761'; //#14761
        $k[$j++] = "Code 16K must have 2 to 16 rows"; //#14761
        bwipp_raiseerror(); //#14761
    } //#14761
    if ($_.rowheight < 8) { //#14766
        $k[$j++] = 'bwipp.code16kBadRowHeight#14765'; //#14765
        $k[$j++] = "Code 16K must have rowheight of at least 8"; //#14765
        bwipp_raiseerror(); //#14765
    } //#14765
    if ($_.sepheight < 1) { //#14770
        $k[$j++] = 'bwipp.code16kBadSepHeight#14769'; //#14769
        $k[$j++] = "Code 16K must have sepheight of at least 1"; //#14769
        bwipp_raiseerror(); //#14769
    } //#14769
    if ($_.sam != -1) { //#14782
        $k[$j++] = true; //#14778
        for (var _8 = 0, _9 = 1; _8 < _9; _8++) { //#14778
            var _A = $_.sam; //#14775
            if ((_A < 12) || (_A > 99)) { //#14775
                $j--; //#14775
                $k[$j++] = false; //#14775
                break; //#14775
            } //#14775
            if (($_.sam % 10) < 2) { //#14776
                $j--; //#14776
                $k[$j++] = false; //#14776
                break; //#14776
            } //#14776
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#14777
                $j--; //#14777
                $k[$j++] = false; //#14777
                break; //#14777
            } //#14777
        } //#14777
        if ($nt($k[--$j])) { //#14781
            $k[$j++] = 'bwipp.code16kBadSAM#14780'; //#14780
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 9 symbols"; //#14780
            bwipp_raiseerror(); //#14780
        } //#14780
    } //#14780
    bwipp_loadctx(bwipp_code16k); //#14784
    if ($_.sam != -1) { //#14786
        $_.rows = 16; //#14786
    } //#14786
    if (!bwipp_code16k.__14851__) { //#14851
        $_ = Object.create($_); //#14851
        $_.swa = -1; //#14790
        $_.swb = -2; //#14790
        $_.swc = -3; //#14790
        $_.sa1 = -4; //#14791
        $_.sb1 = -5; //#14791
        $_.sc1 = -6; //#14791
        $_.sa2 = -7; //#14792
        $_.sb2 = -8; //#14792
        $_.sc2 = -9; //#14792
        $_.pad = -10; //#14793
        $_.sb3 = -11; //#14793
        $_.sc3 = -12; //#14793
        $_.fn1 = -13; //#14794
        $_.fn2 = -14; //#14794
        $_.fn3 = -15; //#14794
        $_.fn4 = -16; //#14794
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.fn3, $_.fn3, "96"]), $a([$_.fn2, $_.fn2, "97"]), $a([$_.sb1, $_.sa1, "98"]), $a([$_.swc, $_.swc, "99"]), $a([$_.swb, $_.fn4, $_.swb]), $a([$_.fn4, $_.swa, $_.swa]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.pad, $_.pad, $_.pad]), $a([$_.sb2, $_.sa2, $_.sb1]), $a([$_.sc2, $_.sc2, $_.sb2]), $a([$_.sc3, $_.sc3, $_.sb3])]); //#14835
        $_.charvals = $a([new Map, new Map, new Map]); //#14838
        for (var _2W = 0, _2V = $_.charmaps.length - 1; _2W <= _2V; _2W += 1) { //#14847
            $_.i = _2W; //#14840
            $_.encs = $get($_.charmaps, $_.i); //#14841
            for (var _2a = 0; _2a <= 2; _2a += 1) { //#14846
                $_.j = _2a; //#14843
                var _2d = $get($_.encs, $_.j); //#14844
                $k[$j++] = _2d; //#14844
                if ($eq($type(_2d), 'stringtype')) { //#14844
                    var _2g = $get($k[--$j], 0); //#14844
                    $k[$j++] = _2g; //#14844
                } //#14844
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#14845
            } //#14845
        } //#14845
        $_.seta = $get($_.charvals, 0); //#14848
        $_.setb = $get($_.charvals, 1); //#14849
        $_.setc = $get($_.charvals, 2); //#14850
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code16k.$ctx[id] = $_[id]); //#14850
        bwipp_code16k.__14851__ = 1; //#14850
        $_ = Object.getPrototypeOf($_); //#14850
    } //#14850
    if ($_.raw) { //#15321
        $_.cws = $a($_.barcode.length); //#14855
        $_.i = 0; //#14856
        $_.j = 0; //#14856
        for (;;) { //#14867
            if ($_.i >= ($_.barcode.length - 3)) { //#14858
                break; //#14858
            } //#14858
            if ($get($_.barcode, $_.i) != 94) { //#14859
                break; //#14859
            } //#14859
            var _33 = $geti($_.barcode, $_.i + 1, 3); //#14860
            $k[$j++] = _33; //#14862
            $k[$j++] = false; //#14862
            for (var _34 = 0, _35 = _33.length; _34 < _35; _34++) { //#14862
                var _36 = $get(_33, _34); //#14862
                if ((_36 < 48) || (_36 > 57)) { //#14861
                    $j--; //#14861
                    $k[$j++] = true; //#14861
                } //#14861
            } //#14861
            if ($k[--$j]) { //#14862
                $j--; //#14862
                break; //#14862
            } //#14862
            $_.cw = $cvi($k[--$j]); //#14863
            $put($_.cws, $_.j, $_.cw); //#14864
            $_.i = $_.i + 4; //#14865
            $_.j = $_.j + 1; //#14866
        } //#14866
        if ($_.i != $_.barcode.length) { //#14870
            $k[$j++] = 'bwipp.code16kBadRawFormat#14869'; //#14869
            $k[$j++] = "raw data must be formatted as ^NNN"; //#14869
            bwipp_raiseerror(); //#14869
        } //#14869
        $_.cws = $geti($_.cws, 0, $_.j); //#14871
    } else { //#15321
        var _3O = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fn1],
            ["FNC2", $_.fn2],
            ["FNC3", $_.fn3]
        ]); //#14882
        $_.fncvals = _3O; //#14884
        $k[$j++] = 'msg'; //#14885
        $k[$j++] = $_.barcode; //#14885
        $k[$j++] = $_.fncvals; //#14885
        bwipp_parseinput(); //#14885
        var _3R = $k[--$j]; //#14885
        $_[$k[--$j]] = _3R; //#14885
        $_.msglen = $_.msg.length; //#14886
        $k[$j++] = Infinity; //#14889
        for (var _3V = 0, _3W = $_.msglen; _3V < _3W; _3V++) { //#14889
            $k[$j++] = 0; //#14889
        } //#14889
        $k[$j++] = 0; //#14889
        $_.numSA = $a(); //#14889
        $k[$j++] = Infinity; //#14890
        for (var _3Z = 0, _3a = $_.msglen; _3Z < _3a; _3Z++) { //#14890
            $k[$j++] = 0; //#14890
        } //#14890
        $k[$j++] = 0; //#14890
        $_.numEA = $a(); //#14890
        for (var _3d = $_.msglen - 1; _3d >= 0; _3d -= 1) { //#14900
            $_.i = _3d; //#14892
            if ($get($_.msg, $_.i) >= 0) { //#14899
                if ($get($_.msg, $_.i) >= 128) { //#14897
                    $put($_.numEA, $_.i, $f($get($_.numEA, $_.i + 1) + 1)); //#14895
                } else { //#14897
                    $put($_.numSA, $_.i, $f($get($_.numSA, $_.i + 1) + 1)); //#14897
                } //#14897
            } //#14897
        } //#14897
        $_.ea = false; //#14903
        $_.msgtmp = $a([]); //#14903
        for (var _3x = 0, _3w = $_.msglen - 1; _3x <= _3w; _3x += 1) { //#14918
            $_.i = _3x; //#14905
            $_.c = $get($_.msg, $_.i); //#14906
            if ((!$xo($_.ea, $_.c < 128)) && ($_.c >= 0)) { //#14916
                if ($_.ea) { //#14908
                    $k[$j++] = $_.numSA; //#14908
                } else { //#14908
                    $k[$j++] = $_.numEA; //#14908
                } //#14908
                var _49 = $get($k[--$j], $_.i); //#14908
                var _4C = ($f(_49 + $_.i) == $_.msglen) ? 3 : 5; //#14909
                if (_49 < _4C) { //#14914
                    $k[$j++] = Infinity; //#14911
                    $aload($_.msgtmp); //#14911
                    $k[$j++] = $_.fn4; //#14911
                    $_.msgtmp = $a(); //#14911
                } else { //#14914
                    $k[$j++] = Infinity; //#14913
                    $aload($_.msgtmp); //#14913
                    $k[$j++] = $_.fn4; //#14913
                    $k[$j++] = $_.fn4; //#14913
                    $_.msgtmp = $a(); //#14913
                    $_.ea = !$_.ea; //#14914
                } //#14914
            } //#14914
            $k[$j++] = Infinity; //#14917
            $aload($_.msgtmp); //#14917
            if ($_.c >= 0) { //#14917
                $k[$j++] = $_.c & 127; //#14917
            } else { //#14917
                $k[$j++] = $_.c; //#14917
            } //#14917
            $_.msgtmp = $a(); //#14917
        } //#14917
        $_.msg = $_.msgtmp; //#14919
        $_.msglen = $_.msg.length; //#14920
        $_.numsscr = function() {
            $_.n = 0; //#14924
            $_.s = 0; //#14924
            $_.p = $k[--$j]; //#14925
            for (;;) { //#14936
                if ($_.p >= $_.msglen) { //#14926
                    break; //#14926
                } //#14926
                var _4X = $get($_.msg, $_.p); //#14927
                var _4Z = $get($_.setc, _4X) !== undefined; //#14928
                $k[$j++] = _4X; //#14928
                if (!_4Z) { //#14928
                    $j--; //#14928
                    break; //#14928
                } //#14928
                if ($k[--$j] == $_.fn1) { //#14932
                    if (($_.s % 2) == 0) { //#14931
                        $_.s = $_.s + 1; //#14931
                    } else { //#14931
                        break; //#14931
                    } //#14931
                } //#14931
                $_.n = $_.n + 1; //#14933
                $_.s = $_.s + 1; //#14934
                $_.p = $f($_.p + 1); //#14935
            } //#14935
            $k[$j++] = $_.n; //#14937
            $k[$j++] = $_.s; //#14937
        }; //#14937
        $_.enca = function() {
            $put($_.cws, $_.j, $get($_.seta, $k[--$j])); //#14942
            $_.j = $_.j + 1; //#14943
        }; //#14943
        $_.encb = function() {
            $put($_.cws, $_.j, $get($_.setb, $k[--$j])); //#14946
            $_.j = $_.j + 1; //#14947
        }; //#14947
        $_.encc = function() {
            var _4v = $k[--$j]; //#14950
            $k[$j++] = _4v; //#14954
            if ($ne($type(_4v), 'arraytype')) { //#14953
                var _4z = $get($_.setc, $k[--$j]); //#14951
                $k[$j++] = _4z; //#14951
            } else { //#14953
                $aload($k[--$j]); //#14953
                var _51 = $k[--$j]; //#14953
                var _52 = $k[--$j]; //#14953
                $k[$j++] = $f($f(_51 - 48) + ($f(_52 - 48) * 10)); //#14953
            } //#14953
            $put($_.cws, $_.j, $k[--$j]); //#14955
            $_.j = $_.j + 1; //#14956
        }; //#14956
        $_.anotb = function() {
            var _57 = $k[--$j]; //#14960
            var _59 = $get($_.seta, _57) !== undefined; //#14960
            var _5B = $get($_.setb, _57) !== undefined; //#14960
            $k[$j++] = _59 && (!_5B); //#14960
        }; //#14960
        $_.bnota = function() {
            var _5C = $k[--$j]; //#14961
            var _5E = $get($_.setb, _5C) !== undefined; //#14961
            var _5G = $get($_.seta, _5C) !== undefined; //#14961
            $k[$j++] = _5E && (!_5G); //#14961
        }; //#14961
        $k[$j++] = Infinity; //#14964
        for (var _5I = 0, _5J = $_.msg.length; _5I < _5J; _5I++) { //#14964
            $k[$j++] = 0; //#14964
        } //#14964
        $k[$j++] = 9999; //#14964
        $_.nextanotb = $a(); //#14964
        $k[$j++] = Infinity; //#14965
        for (var _5M = 0, _5N = $_.msg.length; _5M < _5N; _5M++) { //#14965
            $k[$j++] = 0; //#14965
        } //#14965
        $k[$j++] = 9999; //#14965
        $_.nextbnota = $a(); //#14965
        for (var _5Q = $_.msg.length - 1; _5Q >= 0; _5Q -= 1) { //#14978
            $_.i = _5Q; //#14967
            $k[$j++] = $get($_.msg, $_.i); //#14968
            $_.anotb(); //#14968
            if ($k[--$j]) { //#14971
                $put($_.nextanotb, $_.i, 0); //#14969
            } else { //#14971
                $put($_.nextanotb, $_.i, $f($get($_.nextanotb, $_.i + 1) + 1)); //#14971
            } //#14971
            $k[$j++] = $get($_.msg, $_.i); //#14973
            $_.bnota(); //#14973
            if ($k[--$j]) { //#14976
                $put($_.nextbnota, $_.i, 0); //#14974
            } else { //#14976
                $put($_.nextbnota, $_.i, $f($get($_.nextbnota, $_.i + 1) + 1)); //#14976
            } //#14976
        } //#14976
        $_.abeforeb = function() {
            var _5n = $k[--$j]; //#14981
            $k[$j++] = $lt($get($_.nextanotb, _5n), $get($_.nextbnota, _5n)); //#14981
        }; //#14981
        $_.bbeforea = function() {
            var _5s = $k[--$j]; //#14982
            $k[$j++] = $lt($get($_.nextbnota, _5s), $get($_.nextanotb, _5s)); //#14982
        }; //#14982
        $_.cws = $a(($_.barcode.length * 2) + 3); //#14984
        $_.i = 0; //#14987
        $_.j = 0; //#14987
        for (;;) { //#15077
            if ($_.sam != -1) { //#14998
                $put($_.cws, 0, (~~($_.sam / 10)) - 1); //#14992
                $put($_.cws, 1, ($_.sam % 10) - 1); //#14993
                $_.j = 2; //#14994
                $_.cset = "setb"; //#14995
                $_.mode = 7; //#14996
                break; //#14997
            } //#14997
            if ($_.msglen == 0) { //#15004
                $_.cset = "setb"; //#15001
                $_.mode = 1; //#15002
                break; //#15003
            } //#15003
            if ($_.msglen >= 2) { //#15013
                $k[$j++] = $get($_.msg, 0) == $_.fn1; //#15007
                $k[$j++] = 1; //#15007
                $_.numsscr(); //#15007
                var _69 = $k[--$j]; //#15007
                var _6A = $k[--$j]; //#15007
                $k[$j++] = _69; //#15007
                $k[$j++] = _6A; //#15007
                $j--; //#15007
                var _6B = $k[--$j]; //#15007
                var _6C = $k[--$j]; //#15007
                if (_6C && (_6B >= 2)) { //#15012
                    $_.cset = "setc"; //#15008
                    $_.mode = 4; //#15009
                    $_.i = 1; //#15010
                    break; //#15011
                } //#15011
            } //#15011
            if ($get($_.msg, 0) == $_.fn1) { //#15020
                $_.cset = "setb"; //#15016
                $_.mode = 3; //#15017
                $_.i = 1; //#15018
                break; //#15019
            } //#15019
            if ($_.msglen >= 2) { //#15066
                $k[$j++] = 0; //#15023
                $_.numsscr(); //#15023
                var _6H = $k[--$j]; //#15023
                var _6I = $k[--$j]; //#15023
                $k[$j++] = _6H; //#15023
                $k[$j++] = _6I; //#15023
                $j--; //#15023
                var _6J = $k[--$j]; //#15023
                if ((_6J >= 2) && ((_6J % 2) == 0)) { //#15027
                    $_.cset = "setc"; //#15024
                    $_.mode = 2; //#15025
                    break; //#15026
                } //#15026
                $k[$j++] = 0; //#15029
                $_.numsscr(); //#15029
                var _6K = $k[--$j]; //#15029
                var _6L = $k[--$j]; //#15029
                $k[$j++] = _6K; //#15029
                $k[$j++] = _6L; //#15029
                $j--; //#15029
                var _6M = $k[--$j]; //#15029
                if ((_6M >= 3) && ((_6M % 2) == 1)) { //#15035
                    $k[$j++] = $get($_.msg, 0); //#15030
                    $_.encb(); //#15030
                    $_.cset = "setc"; //#15031
                    $_.mode = 5; //#15032
                    $_.i = 1; //#15033
                    break; //#15034
                } //#15034
                var _6S = $get($_.setb, $get($_.msg, 0)) !== undefined; //#15037
                $k[$j++] = _6S; //#15038
                $k[$j++] = 1; //#15038
                $_.numsscr(); //#15038
                var _6T = $k[--$j]; //#15038
                var _6U = $k[--$j]; //#15038
                $k[$j++] = _6T; //#15038
                $k[$j++] = _6U; //#15038
                $j--; //#15038
                var _6V = $k[--$j]; //#15038
                var _6W = $k[--$j]; //#15038
                if (_6W && ((_6V >= 2) && ((_6V % 2) == 0))) { //#15044
                    $k[$j++] = $get($_.msg, 0); //#15039
                    $_.encb(); //#15039
                    $_.cset = "setc"; //#15040
                    $_.mode = 5; //#15041
                    $_.i = 1; //#15042
                    break; //#15043
                } //#15043
                var _6c = $get($_.setb, $get($_.msg, 0)) !== undefined; //#15046
                $k[$j++] = _6c; //#15047
                $k[$j++] = 1; //#15047
                $_.numsscr(); //#15047
                var _6d = $k[--$j]; //#15047
                var _6e = $k[--$j]; //#15047
                $k[$j++] = _6d; //#15047
                $k[$j++] = _6e; //#15047
                $j--; //#15047
                var _6f = $k[--$j]; //#15047
                var _6g = $k[--$j]; //#15047
                if (_6g && ((_6f >= 3) && ((_6f % 2) == 1))) { //#15054
                    $k[$j++] = $get($_.msg, 0); //#15048
                    $_.encb(); //#15048
                    $k[$j++] = $get($_.msg, 1); //#15049
                    $_.encb(); //#15049
                    $_.cset = "setc"; //#15050
                    $_.mode = 6; //#15051
                    $_.i = 2; //#15052
                    break; //#15053
                } //#15053
                var _6o = $get($_.setb, $get($_.msg, 0)) !== undefined; //#15056
                var _6s = $get($_.setb, $get($_.msg, 1)) !== undefined; //#15057
                $k[$j++] = _6o && _6s; //#15058
                $k[$j++] = 2; //#15058
                $_.numsscr(); //#15058
                var _6t = $k[--$j]; //#15058
                var _6u = $k[--$j]; //#15058
                $k[$j++] = _6t; //#15058
                $k[$j++] = _6u; //#15058
                $j--; //#15058
                var _6v = $k[--$j]; //#15058
                var _6w = $k[--$j]; //#15058
                if (_6w && ((_6v >= 2) && ((_6v % 2) == 0))) { //#15065
                    $k[$j++] = $get($_.msg, 0); //#15059
                    $_.encb(); //#15059
                    $k[$j++] = $get($_.msg, 1); //#15060
                    $_.encb(); //#15060
                    $_.cset = "setc"; //#15061
                    $_.mode = 6; //#15062
                    $_.i = 2; //#15063
                    break; //#15064
                } //#15064
            } //#15064
            $k[$j++] = 0; //#15068
            $_.abeforeb(); //#15068
            if ($k[--$j]) { //#15072
                $_.cset = "seta"; //#15069
                $_.mode = 0; //#15070
                break; //#15071
            } //#15071
            $_.cset = "setb"; //#15074
            $_.mode = 1; //#15075
            break; //#15076
        } //#15076
        for (;;) { //#15320
            if ($_.i == $_.msglen) { //#15080
                break; //#15080
            } //#15080
            $k[$j++] = $_.i; //#15082
            $_.numsscr(); //#15082
            $_.nums = $k[--$j]; //#15082
            $_.nchars = $k[--$j]; //#15082
            for (;;) { //#15318
                if ($eq($_.cset, "seta")) { //#15159
                    if ($_.i < ($_.msglen - 1)) { //#15096
                        $k[$j++] = $get($_.msg, $_.i); //#15089
                        $_.bnota(); //#15089
                        $k[$j++] = $_.i + 1; //#15090
                        $_.abeforeb(); //#15090
                        var _7E = $k[--$j]; //#15090
                        var _7F = $k[--$j]; //#15090
                        if ((_7F && _7E)) { //#15095
                            $k[$j++] = $_.sb1; //#15091
                            $_.enca(); //#15091
                            $k[$j++] = $get($_.msg, $_.i); //#15092
                            $_.encb(); //#15092
                            $_.i = $_.i + 1; //#15093
                            break; //#15094
                        } //#15094
                    } //#15094
                    if ($_.i < ($_.msglen - 2)) { //#15108
                        $k[$j++] = $get($_.msg, $_.i); //#15099
                        $_.bnota(); //#15099
                        $k[$j++] = $get($_.msg, $_.i + 1); //#15100
                        $_.bnota(); //#15100
                        var _7T = $k[--$j]; //#15100
                        var _7U = $k[--$j]; //#15100
                        $k[$j++] = $an(_7U, _7T); //#15101
                        $k[$j++] = $_.i + 2; //#15101
                        $_.abeforeb(); //#15101
                        var _7W = $k[--$j]; //#15101
                        var _7X = $k[--$j]; //#15101
                        if ((_7X && _7W)) { //#15107
                            $k[$j++] = $_.sb2; //#15102
                            $_.enca(); //#15102
                            $k[$j++] = $get($_.msg, $_.i); //#15103
                            $_.encb(); //#15103
                            $k[$j++] = $get($_.msg, $_.i + 1); //#15104
                            $_.encb(); //#15104
                            $_.i = $_.i + 2; //#15105
                            break; //#15106
                        } //#15106
                    } //#15106
                    $k[$j++] = $get($_.msg, $_.i); //#15110
                    $_.bnota(); //#15110
                    if ($k[--$j]) { //#15114
                        $k[$j++] = $_.swb; //#15111
                        $_.enca(); //#15111
                        $_.cset = "setb"; //#15112
                        break; //#15113
                    } //#15113
                    if ($_.i < ($_.msglen - 4)) { //#15131
                        var _7s = $get($_.seta, $get($_.msg, $_.i + 4)) !== undefined; //#15118
                        if (($_.nums == 4) && _7s) { //#15130
                            $k[$j++] = $_.sc2; //#15119
                            $_.enca(); //#15119
                            for (var _7u = 0, _7v = 2; _7u < _7v; _7u++) { //#15128
                                if ($get($_.msg, $_.i) == $_.fn1) { //#15126
                                    $k[$j++] = $_.fn1; //#15122
                                    $_.encc(); //#15122
                                    $_.i = $_.i + 1; //#15123
                                } else { //#15126
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#15125
                                    $_.encc(); //#15125
                                    $_.i = $_.i + 2; //#15126
                                } //#15126
                            } //#15126
                            break; //#15129
                        } //#15129
                    } //#15129
                    if ($_.i < ($_.msglen - 6)) { //#15148
                        var _8D = $get($_.seta, $get($_.msg, $_.i + 6)) !== undefined; //#15135
                        if (($_.nums == 6) && _8D) { //#15147
                            $k[$j++] = $_.sc3; //#15136
                            $_.enca(); //#15136
                            for (var _8F = 0, _8G = 3; _8F < _8G; _8F++) { //#15145
                                if ($get($_.msg, $_.i) == $_.fn1) { //#15143
                                    $k[$j++] = $_.fn1; //#15139
                                    $_.encc(); //#15139
                                    $_.i = $_.i + 1; //#15140
                                } else { //#15143
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#15142
                                    $_.encc(); //#15142
                                    $_.i = $_.i + 2; //#15143
                                } //#15143
                            } //#15143
                            break; //#15146
                        } //#15146
                    } //#15146
                    if (($_.nums >= 4) && (($_.nums % 2) == 0)) { //#15154
                        $k[$j++] = $_.swc; //#15151
                        $_.enca(); //#15151
                        $_.cset = "setc"; //#15152
                        break; //#15153
                    } //#15153
                    $k[$j++] = $get($_.msg, $_.i); //#15156
                    $_.enca(); //#15156
                    $_.i = $_.i + 1; //#15157
                    break; //#15158
                } //#15158
                if ($eq($_.cset, "setb")) { //#15233
                    if ($_.i < ($_.msglen - 1)) { //#15170
                        $k[$j++] = $get($_.msg, $_.i); //#15163
                        $_.anotb(); //#15163
                        $k[$j++] = $_.i + 1; //#15164
                        $_.bbeforea(); //#15164
                        var _8f = $k[--$j]; //#15164
                        var _8g = $k[--$j]; //#15164
                        if ((_8g && _8f)) { //#15169
                            $k[$j++] = $_.sa1; //#15165
                            $_.encb(); //#15165
                            $k[$j++] = $get($_.msg, $_.i); //#15166
                            $_.enca(); //#15166
                            $_.i = $_.i + 1; //#15167
                            break; //#15168
                        } //#15168
                    } //#15168
                    if ($_.i < ($_.msglen - 2)) { //#15182
                        $k[$j++] = $get($_.msg, $_.i); //#15173
                        $_.anotb(); //#15173
                        $k[$j++] = $get($_.msg, $_.i + 1); //#15174
                        $_.anotb(); //#15174
                        var _8u = $k[--$j]; //#15174
                        var _8v = $k[--$j]; //#15174
                        $k[$j++] = $an(_8v, _8u); //#15175
                        $k[$j++] = $_.i + 2; //#15175
                        $_.bbeforea(); //#15175
                        var _8x = $k[--$j]; //#15175
                        var _8y = $k[--$j]; //#15175
                        if ((_8y && _8x)) { //#15181
                            $k[$j++] = $_.sa2; //#15176
                            $_.encb(); //#15176
                            $k[$j++] = $get($_.msg, $_.i); //#15177
                            $_.enca(); //#15177
                            $k[$j++] = $get($_.msg, $_.i + 1); //#15178
                            $_.enca(); //#15178
                            $_.i = $_.i + 2; //#15179
                            break; //#15180
                        } //#15180
                    } //#15180
                    $k[$j++] = $get($_.msg, $_.i); //#15184
                    $_.anotb(); //#15184
                    if ($k[--$j]) { //#15188
                        $k[$j++] = $_.swa; //#15185
                        $_.encb(); //#15185
                        $_.cset = "seta"; //#15186
                        break; //#15187
                    } //#15187
                    if ($_.i < ($_.msglen - 4)) { //#15205
                        var _9J = $get($_.setb, $get($_.msg, $_.i + 4)) !== undefined; //#15192
                        if (($_.nums == 4) && _9J) { //#15204
                            $k[$j++] = $_.sc2; //#15193
                            $_.encb(); //#15193
                            for (var _9L = 0, _9M = 2; _9L < _9M; _9L++) { //#15202
                                if ($get($_.msg, $_.i) == $_.fn1) { //#15200
                                    $k[$j++] = $_.fn1; //#15196
                                    $_.encc(); //#15196
                                    $_.i = $_.i + 1; //#15197
                                } else { //#15200
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#15199
                                    $_.encc(); //#15199
                                    $_.i = $_.i + 2; //#15200
                                } //#15200
                            } //#15200
                            break; //#15203
                        } //#15203
                    } //#15203
                    if ($_.i < ($_.msglen - 6)) { //#15222
                        var _9e = $get($_.setb, $get($_.msg, $_.i + 6)) !== undefined; //#15209
                        if (($_.nums == 6) && _9e) { //#15221
                            $k[$j++] = $_.sc3; //#15210
                            $_.encb(); //#15210
                            for (var _9g = 0, _9h = 3; _9g < _9h; _9g++) { //#15219
                                if ($get($_.msg, $_.i) == $_.fn1) { //#15217
                                    $k[$j++] = $_.fn1; //#15213
                                    $_.encc(); //#15213
                                    $_.i = $_.i + 1; //#15214
                                } else { //#15217
                                    $k[$j++] = $geti($_.msg, $_.i, 2); //#15216
                                    $_.encc(); //#15216
                                    $_.i = $_.i + 2; //#15217
                                } //#15217
                            } //#15217
                            break; //#15220
                        } //#15220
                    } //#15220
                    if (($_.nums >= 4) && (($_.nums % 2) == 0)) { //#15228
                        $k[$j++] = $_.swc; //#15225
                        $_.encb(); //#15225
                        $_.cset = "setc"; //#15226
                        break; //#15227
                    } //#15227
                    $k[$j++] = $get($_.msg, $_.i); //#15230
                    $_.encb(); //#15230
                    $_.i = $_.i + 1; //#15231
                    break; //#15232
                } //#15232
                if ($eq($_.cset, "setc")) { //#15316
                    if ($_.nums >= 2) { //#15245
                        if ($get($_.msg, $_.i) == $_.fn1) { //#15242
                            $k[$j++] = $_.fn1; //#15238
                            $_.encc(); //#15238
                            $_.i = $_.i + 1; //#15239
                        } else { //#15242
                            $k[$j++] = $geti($_.msg, $_.i, 2); //#15241
                            $_.encc(); //#15241
                            $_.i = $_.i + 2; //#15242
                        } //#15242
                        break; //#15244
                    } //#15244
                    if ($_.i < ($_.msglen - 1)) { //#15255
                        var _AH = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#15248
                        $k[$j++] = _AH; //#15249
                        $k[$j++] = $_.i + 1; //#15249
                        $_.numsscr(); //#15249
                        var _AJ = $k[--$j]; //#15249
                        var _AK = $k[--$j]; //#15249
                        $k[$j++] = _AJ; //#15249
                        $k[$j++] = _AK; //#15249
                        $j--; //#15249
                        var _AL = $k[--$j]; //#15249
                        var _AM = $k[--$j]; //#15249
                        if (_AM && ((_AL >= 2) && ((_AL % 2) == 0))) { //#15254
                            $k[$j++] = $_.sb1; //#15250
                            $_.encc(); //#15250
                            $k[$j++] = $get($_.msg, $_.i); //#15251
                            $_.encb(); //#15251
                            $_.i = $_.i + 1; //#15252
                            break; //#15253
                        } //#15253
                    } //#15253
                    if ($_.i < ($_.msglen - 1)) { //#15266
                        var _AY = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#15258
                        $k[$j++] = _AY; //#15259
                        $k[$j++] = $_.i + 1; //#15259
                        $_.numsscr(); //#15259
                        var _Aa = $k[--$j]; //#15259
                        var _Ab = $k[--$j]; //#15259
                        $k[$j++] = _Aa; //#15259
                        $k[$j++] = _Ab; //#15259
                        $j--; //#15259
                        var _Ac = $k[--$j]; //#15259
                        var _Ad = $k[--$j]; //#15259
                        if (_Ad && ((_Ac >= 3) && ((_Ac % 2) == 1))) { //#15265
                            $k[$j++] = $_.sb2; //#15260
                            $_.encc(); //#15260
                            $k[$j++] = $get($_.msg, $_.i); //#15261
                            $_.encb(); //#15261
                            $k[$j++] = $get($_.msg, $_.i + 1); //#15262
                            $_.encb(); //#15262
                            $_.i = $_.i + 2; //#15263
                            break; //#15264
                        } //#15264
                    } //#15264
                    if ($_.i < ($_.msglen - 2)) { //#15278
                        var _As = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#15269
                        var _Ax = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#15270
                        $k[$j++] = _As && _Ax; //#15271
                        $k[$j++] = $_.i + 2; //#15271
                        $_.numsscr(); //#15271
                        var _Az = $k[--$j]; //#15271
                        var _B0 = $k[--$j]; //#15271
                        $k[$j++] = _Az; //#15271
                        $k[$j++] = _B0; //#15271
                        $j--; //#15271
                        var _B1 = $k[--$j]; //#15271
                        var _B2 = $k[--$j]; //#15271
                        if (_B2 && ((_B1 >= 2) && ((_B1 % 2) == 0))) { //#15277
                            $k[$j++] = $_.sb2; //#15272
                            $_.encc(); //#15272
                            $k[$j++] = $get($_.msg, $_.i); //#15273
                            $_.encb(); //#15273
                            $k[$j++] = $get($_.msg, $_.i + 1); //#15274
                            $_.encb(); //#15274
                            $_.i = $_.i + 2; //#15275
                            break; //#15276
                        } //#15276
                    } //#15276
                    if ($_.i < ($_.msglen - 3)) { //#15291
                        var _BH = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#15281
                        var _BM = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#15282
                        $k[$j++] = _BH && _BM; //#15283
                        $k[$j++] = $_.i + 2; //#15283
                        $_.numsscr(); //#15283
                        var _BO = $k[--$j]; //#15283
                        var _BP = $k[--$j]; //#15283
                        $k[$j++] = _BO; //#15283
                        $k[$j++] = _BP; //#15283
                        $j--; //#15283
                        var _BQ = $k[--$j]; //#15283
                        var _BR = $k[--$j]; //#15283
                        if (_BR && ((_BQ >= 3) && ((_BQ % 2) == 1))) { //#15290
                            $k[$j++] = $_.sb3; //#15284
                            $_.encc(); //#15284
                            $k[$j++] = $get($_.msg, $_.i); //#15285
                            $_.encb(); //#15285
                            $k[$j++] = $get($_.msg, $_.i + 1); //#15286
                            $_.encb(); //#15286
                            $k[$j++] = $get($_.msg, $_.i + 2); //#15287
                            $_.encb(); //#15287
                            $_.i = $_.i + 3; //#15288
                            break; //#15289
                        } //#15289
                    } //#15289
                    if ($_.i < ($_.msglen - 3)) { //#15305
                        var _Bj = $get($_.setb, $get($_.msg, $_.i)) !== undefined; //#15294
                        var _Bo = $get($_.setb, $get($_.msg, $_.i + 1)) !== undefined; //#15295
                        var _Bt = $get($_.setb, $get($_.msg, $_.i + 2)) !== undefined; //#15296
                        $k[$j++] = (_Bj && _Bo) && _Bt; //#15297
                        $k[$j++] = $_.i + 3; //#15297
                        $_.numsscr(); //#15297
                        var _Bv = $k[--$j]; //#15297
                        var _Bw = $k[--$j]; //#15297
                        $k[$j++] = _Bv; //#15297
                        $k[$j++] = _Bw; //#15297
                        $j--; //#15297
                        var _Bx = $k[--$j]; //#15297
                        var _By = $k[--$j]; //#15297
                        if (_By && ((_Bx >= 2) && ((_Bx % 2) == 0))) { //#15304
                            $k[$j++] = $_.sb3; //#15298
                            $_.encc(); //#15298
                            $k[$j++] = $get($_.msg, $_.i); //#15299
                            $_.encb(); //#15299
                            $k[$j++] = $get($_.msg, $_.i + 1); //#15300
                            $_.encb(); //#15300
                            $k[$j++] = $get($_.msg, $_.i + 2); //#15301
                            $_.encb(); //#15301
                            $_.i = $_.i + 3; //#15302
                            break; //#15303
                        } //#15303
                    } //#15303
                    $k[$j++] = $_.i; //#15307
                    $_.abeforeb(); //#15307
                    if ($k[--$j]) { //#15311
                        $k[$j++] = $_.swa; //#15308
                        $_.encc(); //#15308
                        $_.cset = "seta"; //#15309
                        break; //#15310
                    } //#15310
                    $k[$j++] = $_.swb; //#15313
                    $_.encc(); //#15313
                    $_.cset = "setb"; //#15314
                    break; //#15315
                } //#15315
                break; //#15317
            } //#15317
        } //#15317
        $_.cws = $geti($_.cws, 0, $_.j); //#15321
    } //#15321
    if (!bwipp_code16k.__15344__) { //#15344
        $_ = Object.create($_); //#15344
        $_.metrics = $a([$a([2, 7]), $a([3, 12]), $a([4, 17]), $a([5, 22]), $a([6, 27]), $a([7, 32]), $a([8, 37]), $a([9, 42]), $a([10, 47]), $a([11, 52]), $a([12, 57]), $a([13, 62]), $a([14, 67]), $a([15, 72]), $a([16, 77])]); //#15343
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code16k.$ctx[id] = $_[id]); //#15343
        bwipp_code16k.__15344__ = 1; //#15343
        $_ = Object.getPrototypeOf($_); //#15343
    } //#15343
    $_.urows = $_.rows; //#15347
    var _CZ = $_.metrics; //#15348
    for (var _Ca = 0, _Cb = _CZ.length; _Ca < _Cb; _Ca++) { //#15356
        $_.m = $get(_CZ, _Ca); //#15349
        $_.r = $get($_.m, 0); //#15350
        $_.dcws = $get($_.m, 1); //#15351
        $_.okay = true; //#15352
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#15353
            $_.okay = false; //#15353
        } //#15353
        if ($_.cws.length > $_.dcws) { //#15354
            $_.okay = false; //#15354
        } //#15354
        if ($_.okay) { //#15355
            break; //#15355
        } //#15355
    } //#15355
    if (!$_.okay) { //#15360
        $k[$j++] = 'bwipp.code16kNoValidSymbol#15359'; //#15359
        $k[$j++] = "Maximum length exceeded or data too large for given options"; //#15359
        bwipp_raiseerror(); //#15359
    } //#15359
    $k[$j++] = Infinity; //#15363
    $aload($_.cws); //#15363
    for (var _Cr = 0, _Cs = $f($_.dcws - $_.cws.length); _Cr < _Cs; _Cr++) { //#15363
        $k[$j++] = 103; //#15363
    } //#15363
    $_.cws = $a(); //#15363
    $k[$j++] = Infinity; //#15366
    $k[$j++] = $f(($f($_.r - 2) * 7) + $_.mode); //#15366
    $aload($_.cws); //#15366
    $_.cws = $a(); //#15366
    $k[$j++] = 0; //#15369
    for (var _D0 = 0, _Cz = $_.dcws; _D0 <= _Cz; _D0 += 1) { //#15369
        var _D3 = $k[--$j]; //#15369
        $k[$j++] = $f(_D3 + ((_D0 + 2) * $get($_.cws, _D0))); //#15369
    } //#15369
    $_.c1 = $k[--$j] % 107; //#15370
    $k[$j++] = 0; //#15371
    for (var _D7 = 0, _D6 = $_.dcws; _D7 <= _D6; _D7 += 1) { //#15371
        var _DA = $k[--$j]; //#15371
        $k[$j++] = $f(_DA + ((_D7 + 1) * $get($_.cws, _D7))); //#15371
    } //#15371
    $_.c2 = ($f($k[--$j] + ($_.c1 * $f($_.dcws + 2)))) % 107; //#15372
    $k[$j++] = Infinity; //#15373
    $aload($_.cws); //#15373
    $k[$j++] = $_.c1; //#15373
    $k[$j++] = $_.c2; //#15373
    $_.cws = $a(); //#15373
    var _DJ = $get($_.options, 'debugcws') !== undefined; //#15375
    if (_DJ) { //#15375
        $k[$j++] = 'bwipp.debugcws#15375'; //#15375
        $k[$j++] = $_.cws; //#15375
        bwipp_raiseerror(); //#15375
    } //#15375
    if (!bwipp_code16k.__15411__) { //#15411
        $_ = Object.create($_); //#15411
        $_.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "211133"]); //#15396
        $_.startencs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112"]); //#15402
        $_.stopencsodd = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411"]); //#15406
        $_.stopencseven = $a(["2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "3211", "2221"]); //#15410
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code16k.$ctx[id] = $_[id]); //#15410
        bwipp_code16k.__15411__ = 1; //#15410
        $_ = Object.getPrototypeOf($_); //#15410
    } //#15410
    if (($_.sam == -1) || (((~~($_.sam / 10)) % 2) == 1)) { //#15416
        $_.stopencs = $_.stopencsodd; //#15414
    } else { //#15416
        $_.stopencs = $_.stopencseven; //#15416
    } //#15416
    $_.rowbits = $a($_.r); //#15420
    for (var _DY = 0, _DX = $f($_.r - 1); _DY <= _DX; _DY += 1) { //#15437
        $_.i = _DY; //#15422
        $k[$j++] = Infinity; //#15423
        $k[$j++] = 10; //#15425
        $forall($get($_.startencs, $_.i), function() { //#15425
            var _Dc = $k[--$j]; //#15425
            $k[$j++] = $f(_Dc - 48); //#15425
        }); //#15425
        var _Df = $geti($_.cws, $_.i * 5, 5); //#15427
        $k[$j++] = 1; //#15429
        for (var _Dg = 0, _Dh = _Df.length; _Dg < _Dh; _Dg++) { //#15429
            $forall($get($_.encs, $get(_Df, _Dg)), function() { //#15428
                var _Dl = $k[--$j]; //#15428
                $k[$j++] = $f(_Dl - 48); //#15428
            }); //#15428
        } //#15428
        $forall($get($_.stopencs, $_.i), function() { //#15430
            var _Dp = $k[--$j]; //#15430
            $k[$j++] = $f(_Dp - 48); //#15430
        }); //#15430
        $k[$j++] = 1; //#15431
        $_.sbs = $a(); //#15431
        $k[$j++] = Infinity; //#15433
        var _Dr = $_.sbs; //#15434
        $k[$j++] = 1; //#15434
        for (var _Ds = 0, _Dt = _Dr.length; _Ds < _Dt; _Ds++) { //#15434
            var _Dv = $k[--$j]; //#15434
            var _Dw = (_Dv == 0) ? 1 : 0; //#15434
            $k[$j++] = _Dv; //#15434
            for (var _Dx = 0, _Dy = $get(_Dr, _Ds); _Dx < _Dy; _Dx++) { //#15434
                $k[$j++] = _Dw //#15434
            } //#15434
        } //#15434
        $astore($a($counttomark() - 1)); //#15435
        var _E1 = $k[--$j]; //#15435
        var _E2 = $k[--$j]; //#15435
        $k[$j++] = _E1; //#15435
        $k[$j++] = _E2; //#15435
        $j--; //#15435
        var _E3 = $k[--$j]; //#15435
        var _E4 = $k[--$j]; //#15435
        $k[$j++] = _E3; //#15435
        $k[$j++] = _E4; //#15435
        $j--; //#15435
        $k[$j++] = $_.rowbits; //#15436
        $k[$j++] = $_.i; //#15436
        $r(3, -1); //#15436
        var _E7 = $k[--$j]; //#15436
        var _E8 = $k[--$j]; //#15436
        $put($k[--$j], _E8, _E7); //#15436
    } //#15436
    $k[$j++] = Infinity; //#15440
    for (var _EB = 0, _EC = 81 * $_.sepheight; _EB < _EC; _EB++) { //#15441
        $k[$j++] = 1; //#15441
    } //#15441
    for (var _EF = 0, _EE = $f($_.r - 2); _EF <= _EE; _EF += 1) { //#15446
        $_.i = _EF; //#15443
        for (var _EH = 0, _EI = $_.rowheight; _EH < _EI; _EH++) { //#15444
            $aload($get($_.rowbits, $_.i)); //#15444
        } //#15444
        for (var _EN = 0, _EO = $_.sepheight; _EN < _EO; _EN++) { //#15445
            for (var _EP = 0, _EQ = 10; _EP < _EQ; _EP++) { //#15445
                $k[$j++] = 0; //#15445
            } //#15445
            for (var _ER = 0, _ES = 70; _ER < _ES; _ER++) { //#15445
                $k[$j++] = 1; //#15445
            } //#15445
            $k[$j++] = 0; //#15445
        } //#15445
    } //#15445
    for (var _EU = 0, _EV = $_.rowheight; _EU < _EV; _EU++) { //#15447
        $aload($get($_.rowbits, $f($_.r - 1))); //#15447
    } //#15447
    for (var _Ea = 0, _Eb = 81 * $_.sepheight; _Ea < _Eb; _Ea++) { //#15448
        $k[$j++] = 1; //#15448
    } //#15448
    $_.pixs = $a(); //#15448
    var _Eh = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", 81],
        ["pixy", ~~($_.pixs.length / 81)],
        ["height", (~~($_.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $_.options]
    ]); //#15459
    $k[$j++] = _Eh; //#15462
    if (!$_.dontdraw) { //#15462
        bwipp_renmatrix(); //#15462
    } //#15462
    $_ = Object.getPrototypeOf($_); //#15464
    $_ = Object.getPrototypeOf($_); //#15466
} //bwipp_code16k
function bwipp_code49() {
    $_ = Object.create($_); //#15497
    $_.dontdraw = false; //#15500
    $_.sam = -1; //#15501
    $_.append = false; //#15502
    $_.rows = 0; //#15503
    $_.rowheight = 8; //#15504
    $_.sepheight = 1; //#15505
    $_.parse = false; //#15506
    $_.parsefnc = false; //#15507
    $k[$j++] = $_; //#15509
    bwipp_processoptions(); //#15509
    $_.options = $k[--$j]; //#15509
    $_.barcode = $k[--$j]; //#15510
    if (($_.rows != 0) && (($_.rows < 2) || ($_.rows > 8))) { //#15514
        $k[$j++] = 'bwipp.code49badRows#15513'; //#15513
        $k[$j++] = "Code 49 must have 2 to 8 rows"; //#15513
        bwipp_raiseerror(); //#15513
    } //#15513
    if ($_.rowheight < 8) { //#15518
        $k[$j++] = 'bwipp.code49badRowHeight#15517'; //#15517
        $k[$j++] = "Code 49 must have rowheight of at least 8"; //#15517
        bwipp_raiseerror(); //#15517
    } //#15517
    if ($_.sepheight < 1) { //#15522
        $k[$j++] = 'bwipp.code49badSepHeight#15521'; //#15521
        $k[$j++] = "Code 49 must have sepheight of at least 1"; //#15521
        bwipp_raiseerror(); //#15521
    } //#15521
    if ($_.append && ($_.sam != -1)) { //#15526
        $k[$j++] = 'bwipp.code49samAndAppend#15525'; //#15525
        $k[$j++] = "sam and append cannot be specified together"; //#15525
        bwipp_raiseerror(); //#15525
    } //#15525
    if ($_.sam != -1) { //#15538
        $k[$j++] = true; //#15534
        for (var _A = 0, _B = 1; _A < _B; _A++) { //#15534
            var _C = $_.sam; //#15531
            if ((_C < 12) || (_C > 99)) { //#15531
                $j--; //#15531
                $k[$j++] = false; //#15531
                break; //#15531
            } //#15531
            if (($_.sam % 10) < 2) { //#15532
                $j--; //#15532
                $k[$j++] = false; //#15532
                break; //#15532
            } //#15532
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#15533
                $j--; //#15533
                $k[$j++] = false; //#15533
                break; //#15533
            } //#15533
        } //#15533
        if ($nt($k[--$j])) { //#15537
            $k[$j++] = 'bwipp.code49badSAM#15536'; //#15536
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 9 symbols"; //#15536
            bwipp_raiseerror(); //#15536
        } //#15536
    } //#15536
    bwipp_loadctx(bwipp_code49); //#15540
    if (!bwipp_code49.__15544__) { //#15544
        $_ = Object.create($_); //#15544
        $_.s1 = -1; //#15543
        $_.s2 = -2; //#15543
        $_.fn1 = -3; //#15543
        $_.fn2 = -4; //#15543
        $_.fn3 = -5; //#15543
        $_.ns = -6; //#15543
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15543
        bwipp_code49.__15544__ = 1; //#15543
        $_ = Object.getPrototypeOf($_); //#15543
    } //#15543
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1],
        ["FNC2", $_.fn2],
        ["FNC3", $_.fn3]
    ]); //#15552
    $_.fncvals = _N; //#15553
    $k[$j++] = 'msg'; //#15554
    $k[$j++] = $_.barcode; //#15554
    $k[$j++] = $_.fncvals; //#15554
    bwipp_parseinput(); //#15554
    var _Q = $k[--$j]; //#15554
    $_[$k[--$j]] = _Q; //#15554
    $_.msglen = $_.msg.length; //#15555
    $forall($_.msg, function() { //#15561
        if ($k[--$j] > 127) { //#15560
            $k[$j++] = 'bwipp.code49badCharacter#15559'; //#15559
            $k[$j++] = "Code 49 can only support ASCII characters with values 0 to 127"; //#15559
            bwipp_raiseerror(); //#15559
        } //#15559
    }); //#15559
    if (!bwipp_code49.__15603__) { //#15603
        $_ = Object.create($_); //#15603
        $_.charmap = $a(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "-", ".", " ", "$", "/", "+", "%", $_.s1, $_.s2, $_.fn1, $_.fn2, $_.fn3, $_.ns]); //#15571
        $_.charvals = new Map; //#15574
        for (var _c = 0; _c <= 48; _c += 1) { //#15580
            $_.i = _c; //#15576
            var _f = $get($_.charmap, $_.i); //#15577
            $k[$j++] = _f; //#15578
            if ($eq($type(_f), 'stringtype')) { //#15578
                var _i = $get($k[--$j], 0); //#15578
                $k[$j++] = _i; //#15578
            } //#15578
            $put($_.charvals, $k[--$j], $_.i); //#15579
        } //#15579
        $_.combos = $a(["1 ", "1A", "1B", "1C", "1D", "1E", "1F", "1G", "1H", "1I", "1J", "1K", "1L", "1M", "1N", "1O", "1P", "1Q", "1R", "1S", "1T", "1U", "1V", "1W", "1X", "1Y", "1Z", "11", "12", "13", "14", "15", "  ", "16", "17", "18", " $", " %", "19", "10", "1-", "1.", "1$", " +", "1/", " -", " .", " /", " 0", " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", "1+", "21", "22", "23", "24", "25", "26", " A", " B", " C", " D", " E", " F", " G", " H", " I", " J", " K", " L", " M", " N", " O", " P", " Q", " R", " S", " T", " U", " V", " W", " X", " Y", " Z", "27", "28", "29", "20", "2-", "2.", "2A", "2B", "2C", "2D", "2E", "2F", "2G", "2H", "2I", "2J", "2K", "2L", "2M", "2N", "2O", "2P", "2Q", "2R", "2S", "2T", "2U", "2V", "2W", "2X", "2Y", "2Z", "2$", "2/", "2+", "2%", "2 "]); //#15592
        for (var _n = 0; _n <= 127; _n += 1) { //#15602
            $_.i = _n; //#15594
            var _q = $get($_.combos, $_.i); //#15595
            $_.c1 = $get(_q, 0); //#15595
            $_.c2 = $get(_q, 1); //#15595
            if ($_.c1 == 49) { //#15598
                $put($_.charvals, $_.i, $a([$get($_.charvals, $_.s1), $get($_.charvals, $_.c2)])); //#15597
            } //#15597
            if ($_.c1 == 50) { //#15601
                $put($_.charvals, $_.i, $a([$get($_.charvals, $_.s2), $get($_.charvals, $_.c2)])); //#15600
            } //#15600
        } //#15600
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15600
        bwipp_code49.__15603__ = 1; //#15600
        $_ = Object.getPrototypeOf($_); //#15600
    } //#15600
    $_.encodealpha = function() {
        var _1G = $get($_.charvals, $k[--$j]); //#15606
        $k[$j++] = _1G; //#15607
        if ($ne($type(_1G), 'arraytype')) { //#15607
            $astore($a(1)); //#15607
        } //#15607
        var _1J = $k[--$j]; //#15608
        $puti($_.cws, $_.j, _1J); //#15608
        $_.j = _1J.length + $_.j; //#15609
    }; //#15609
    $_.base48 = function() {
        var _1N = $k[--$j]; //#15613
        $k[$j++] = 0; //#15613
        $forall(_1N, function() { //#15613
            var _1O = $k[--$j]; //#15613
            var _1P = $k[--$j]; //#15613
            $k[$j++] = $f($f(_1O - 48) + (_1P * 10)); //#15613
        }); //#15613
        $k[$j++] = Infinity; //#15614
        $r(3, 1); //#15614
        var _1Q = $k[--$j]; //#15614
        var _1R = $k[--$j]; //#15614
        $k[$j++] = _1Q; //#15614
        for (var _1S = 0, _1T = $f(_1R - 1); _1S < _1T; _1S++) { //#15614
            var _1U = $k[--$j]; //#15614
            $k[$j++] = _1U % 48; //#15614
            $k[$j++] = ~~(_1U / 48); //#15614
        } //#15614
        var _1V = $a(); //#15614
        $k[$j++] = _1V; //#15615
        $k[$j++] = Infinity; //#15615
        var _1W = $k[--$j]; //#15615
        var _1X = $k[--$j]; //#15615
        $k[$j++] = _1W; //#15615
        $k[$j++] = _1X; //#15615
        for (var _1Y = _1X.length - 1; _1Y >= 0; _1Y -= 1) { //#15615
            var _1Z = $k[--$j]; //#15615
            $k[$j++] = $get(_1Z, _1Y); //#15615
            $k[$j++] = _1Z; //#15615
        } //#15615
        $j--; //#15615
        var _1b = $a(); //#15615
        $puti($_.cws, $_.j, _1b); //#15616
        $_.j = _1b.length + $_.j; //#15617
    }; //#15617
    $_.encodenumeric = function() {
        $_.nums = $k[--$j]; //#15621
        var _1h = $_.nums.length; //#15622
        var _1i = _1h % 5; //#15622
        $k[$j++] = 'pre'; //#15622
        $k[$j++] = _1h; //#15622
        $k[$j++] = _1i; //#15622
        if (_1i != 2) { //#15622
            var _1j = $k[--$j]; //#15622
            var _1k = $k[--$j]; //#15622
            $k[$j++] = $f(_1k - _1j); //#15622
        } else { //#15622
            var _1l = $k[--$j]; //#15622
            var _1m = $k[--$j]; //#15622
            $k[$j++] = $f($f(_1m - _1l) - 5); //#15622
        } //#15622
        var _1n = $k[--$j]; //#15622
        $_[$k[--$j]] = _1n; //#15622
        for (var _1r = 0, _1q = $f($_.pre - 1); _1r <= _1q; _1r += 5) { //#15623
            $k[$j++] = 3; //#15623
            $k[$j++] = $geti($_.nums, _1r, 5); //#15623
            $_.base48(); //#15623
        } //#15623
        $_.nums = $geti($_.nums, $_.pre, $f($_.nums.length - $_.pre)); //#15624
        var _20 = $_.nums.length; //#15626
        $k[$j++] = _20; //#15626
        if (_20 == 1) { //#15626
            $k[$j++] = $get($_.nums, $_.i); //#15626
            $_.encodealpha(); //#15626
        } //#15626
        var _24 = $k[--$j]; //#15627
        $k[$j++] = _24; //#15627
        if (_24 == 3) { //#15627
            $k[$j++] = 2; //#15627
            $k[$j++] = $_.nums; //#15627
            $_.base48(); //#15627
        } //#15627
        var _26 = $k[--$j]; //#15628
        $k[$j++] = _26; //#15628
        if (_26 == 4) { //#15628
            $k[$j++] = 3; //#15628
            $k[$j++] = Infinity; //#15628
            $k[$j++] = 49; //#15628
            $k[$j++] = 48; //#15628
            $aload($_.nums); //#15628
            var _28 = $a(); //#15628
            $k[$j++] = _28; //#15628
            $_.base48(); //#15628
        } //#15628
        if ($k[--$j] == 7) { //#15632
            $k[$j++] = 3; //#15630
            $k[$j++] = Infinity; //#15630
            $k[$j++] = 49; //#15630
            $k[$j++] = 48; //#15630
            $aload($geti($_.nums, 0, 4)); //#15630
            var _2C = $a(); //#15630
            $k[$j++] = _2C; //#15630
            $_.base48(); //#15630
            $k[$j++] = 2; //#15631
            $k[$j++] = $geti($_.nums, 4, 3); //#15631
            $_.base48(); //#15631
        } //#15631
    }; //#15631
    $k[$j++] = Infinity; //#15636
    for (var _2G = 0, _2H = $_.msglen; _2G < _2H; _2G++) { //#15636
        $k[$j++] = 0; //#15636
    } //#15636
    $k[$j++] = 0; //#15636
    $_.numericruns = $a(); //#15636
    for (var _2K = $_.msglen - 1; _2K >= 0; _2K -= 1) { //#15645
        $_.i = _2K; //#15638
        var _2N = $get($_.msg, $_.i); //#15639
        if ((_2N >= 48) && (_2N <= 57)) { //#15643
            $put($_.numericruns, $_.i, $f($get($_.numericruns, $_.i + 1) + 1)); //#15641
        } else { //#15643
            $put($_.numericruns, $_.i, 0); //#15643
        } //#15643
    } //#15643
    $_.cws = $a(($_.msglen * 2) + 1); //#15647
    if (!bwipp_code49.__15660__) { //#15660
        $_ = Object.create($_); //#15660
        $_.samval = $a([12, 22, 13, 23, 33, 14, 24, 34, 44, 15, 25, 35, 45, 55, 16, 26, 36, 46, 56, 66, 17, 27, 37, 47, 57, 67, 77, 18, 28, 38, 48, 58, 68, 78, 88, 19, 29, 39, 49, 59, 69, 79, 89, 99]); //#15659
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15659
        bwipp_code49.__15660__ = 1; //#15659
        $_ = Object.getPrototypeOf($_); //#15659
    } //#15659
    for (;;) { //#15696
        if ($_.append) { //#15669
            $_.mode = 1; //#15665
            $_.method = "alpha"; //#15666
            $_.i = 0; //#15667
            $_.j = 0; //#15667
            break; //#15668
        } //#15668
        if ($_.sam != -1) { //#15676
            $_.mode = 3; //#15671
            $k[$j++] = $_.cws; //#15672
            $k[$j++] = 0; //#15672
            for (var _2c = 0; _2c <= 43; _2c += 1) { //#15672
                $k[$j++] = _2c; //#15672
                if ($get($_.samval, _2c) != $_.sam) { //#15672
                    $j--; //#15672
                } //#15672
            } //#15672
            var _2g = $k[--$j]; //#15672
            var _2h = $k[--$j]; //#15672
            $put($k[--$j], _2h, $f(_2g + 1)); //#15672
            $_.method = "alpha"; //#15673
            $_.i = 0; //#15674
            $_.j = 1; //#15674
            break; //#15675
        } //#15675
        if ($get($_.numericruns, 0) >= 5) { //#15681
            $_.mode = 2; //#15678
            $_.method = "numeric"; //#15679
            $_.i = 0; //#15679
            $_.j = 0; //#15679
            break; //#15680
        } //#15680
        var _2o = $get($_.charvals, $get($_.msg, 0)); //#15682
        $k[$j++] = _2o; //#15689
        if ($ne($type(_2o), 'arraytype')) { //#15689
            $j--; //#15684
            $_.mode = 0; //#15685
            $_.method = "alpha"; //#15686
            $_.i = 0; //#15687
            $_.j = 0; //#15687
            break; //#15688
        } //#15688
        var _2s = ($get($k[--$j], 0) == 43) ? 4 : 5; //#15691
        $_.mode = _2s; //#15691
        $put($_.cws, 0, $get($get($_.charvals, $get($_.msg, 0)), 1)); //#15692
        $_.method = "alpha"; //#15693
        $_.i = 1; //#15694
        $_.j = 1; //#15694
        break; //#15695
    } //#15695
    for (;;) { //#15723
        if ($_.i == $_.msglen) { //#15700
            break; //#15700
        } //#15700
        for (;;) { //#15722
            if ($eq($_.method, "alpha")) { //#15711
                if ($get($_.numericruns, $_.i) >= 5) { //#15707
                    $k[$j++] = $_.ns; //#15704
                    $_.encodealpha(); //#15704
                    $_.method = "numeric"; //#15705
                    break; //#15706
                } //#15706
                $k[$j++] = $get($_.msg, $_.i); //#15708
                $_.encodealpha(); //#15708
                $_.i = $_.i + 1; //#15709
                break; //#15710
            } //#15710
            if ($eq($_.method, "numeric")) { //#15721
                if ($get($_.numericruns, $_.i) < 5) { //#15717
                    $k[$j++] = $_.ns; //#15714
                    $_.encodealpha(); //#15714
                    $_.method = "alpha"; //#15715
                    break; //#15716
                } //#15716
                $k[$j++] = $geti($_.msg, $_.i, $get($_.numericruns, $_.i)); //#15718
                $_.encodenumeric(); //#15718
                $_.i = $f($_.i + $get($_.numericruns, $_.i)); //#15719
                break; //#15720
            } //#15720
        } //#15720
    } //#15720
    $_.cws = $geti($_.cws, 0, $_.j); //#15724
    if (!bwipp_code49.__15738__) { //#15738
        $_ = Object.create($_); //#15738
        $_.metrics = $a([$a([2, 9]), $a([3, 16]), $a([4, 23]), $a([5, 30]), $a([6, 37]), $a([7, 42]), $a([8, 49])]); //#15737
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15737
        bwipp_code49.__15738__ = 1; //#15737
        $_ = Object.getPrototypeOf($_); //#15737
    } //#15737
    $_.urows = $_.rows; //#15741
    var _3c = $_.metrics; //#15742
    for (var _3d = 0, _3e = _3c.length; _3d < _3e; _3d++) { //#15750
        $_.m = $get(_3c, _3d); //#15743
        $_.r = $get($_.m, 0); //#15744
        $_.dcws = $get($_.m, 1); //#15745
        $_.okay = true; //#15746
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#15747
            $_.okay = false; //#15747
        } //#15747
        if ($_.cws.length > $_.dcws) { //#15748
            $_.okay = false; //#15748
        } //#15748
        if ($_.okay) { //#15749
            break; //#15749
        } //#15749
    } //#15749
    if (!$_.okay) { //#15754
        $k[$j++] = 'bwipp.code49noValidSymbol#15753'; //#15753
        $k[$j++] = "Maximum length exceeded"; //#15753
        bwipp_raiseerror(); //#15753
    } //#15753
    $k[$j++] = Infinity; //#15757
    $aload($_.cws); //#15757
    for (var _3u = 0, _3v = $f($_.dcws - $_.cws.length); _3u < _3v; _3u++) { //#15757
        $k[$j++] = 48; //#15757
    } //#15757
    $_.cws = $a(); //#15757
    $_.ccs = $a($_.r * 8); //#15760
    $_.j = 0; //#15761
    for (var _41 = 0, _40 = $f($_.r - 2); _41 <= _40; _41 += 1) { //#15768
        $_.i = _41; //#15763
        $_.cc = $geti($_.cws, $_.j, 7); //#15764
        $puti($_.ccs, $_.i * 8, $_.cc); //#15765
        var _4A = $_.cc; //#15766
        $k[$j++] = $_.ccs; //#15766
        $k[$j++] = ($_.i * 8) + 7; //#15766
        $k[$j++] = 0; //#15766
        for (var _4B = 0, _4C = _4A.length; _4B < _4C; _4B++) { //#15766
            var _4E = $k[--$j]; //#15766
            $k[$j++] = $f(_4E + $get(_4A, _4B)); //#15766
        } //#15766
        var _4F = $k[--$j]; //#15766
        var _4G = $k[--$j]; //#15766
        $put($k[--$j], _4G, _4F % 49); //#15766
        $_.j = $_.j + 7; //#15767
    } //#15767
    if ($_.j < $_.dcws) { //#15771
        $puti($_.ccs, $_.ccs.length - 8, $geti($_.cws, $_.j, $f($_.dcws - $_.j))); //#15770
    } //#15770
    $_.cr7 = $f(($f($_.r - 2) * 7) + $_.mode); //#15774
    $put($_.ccs, $_.ccs.length - 2, $_.cr7); //#15775
    if (!bwipp_code49.__15784__) { //#15784
        $_ = Object.create($_); //#15784
        var _4X = $a([1, 9, 31, 26, 2, 12, 17, 23, 37, 18, 22, 6, 27, 44, 15, 43, 39, 11, 13, 5, 41, 33, 36, 8, 4, 32, 3, 19, 40, 25, 29, 10, 24, 30]); //#15780
        $k[$j++] = _4X; //#15781
        $k[$j++] = _4X; //#15781
        $k[$j++] = Infinity; //#15781
        var _4Y = $k[--$j]; //#15781
        var _4a = $geti($k[--$j], 0, 32); //#15781
        $k[$j++] = _4Y; //#15781
        $k[$j++] = 20; //#15781
        $aload(_4a); //#15781
        $_.weightx = $a(); //#15781
        var _4c = $k[--$j]; //#15782
        $k[$j++] = _4c; //#15782
        $k[$j++] = _4c; //#15782
        $k[$j++] = Infinity; //#15782
        var _4d = $k[--$j]; //#15782
        var _4f = $geti($k[--$j], 1, 32); //#15782
        $k[$j++] = _4d; //#15782
        $k[$j++] = 16; //#15782
        $aload(_4f); //#15782
        $_.weighty = $a(); //#15782
        $k[$j++] = Infinity; //#15783
        var _4h = $k[--$j]; //#15783
        var _4j = $geti($k[--$j], 2, 32); //#15783
        $k[$j++] = _4h; //#15783
        $k[$j++] = 38; //#15783
        $aload(_4j); //#15783
        $_.weightz = $a(); //#15783
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#15783
        bwipp_code49.__15784__ = 1; //#15783
        $_ = Object.getPrototypeOf($_); //#15783
    } //#15783
    $_.calccheck = function() {
        $_.weights = $k[--$j]; //#15786
        $_.score = 0; //#15787
        for (var _4p = 0, _4o = (~~(($f($_.r - 1) * 8) / 2)) - 1; _4p <= _4o; _4p += 1) { //#15792
            $_.i = _4p; //#15789
            $_.score = $f((($f(($get($_.ccs, $_.i * 2) * 49) + $get($_.ccs, ($_.i * 2) + 1))) * $get($_.weights, $_.i + 1)) + $_.score); //#15791
        } //#15791
        $k[$j++] = $_.score; //#15793
    }; //#15793
    $_.lastrow = $geti($_.ccs, $_.ccs.length - 8, 8); //#15795
    if ($_.r >= 7) { //#15802
        $k[$j++] = $_.cr7 * $get($_.weightz, 0); //#15799
        $k[$j++] = $_.weightz; //#15799
        $_.calccheck(); //#15799
        var _59 = $k[--$j]; //#15799
        var _5B = $f($k[--$j] + _59) % 2401; //#15800
        $k[$j++] = ~~(_5B / 49); //#15800
        $k[$j++] = _5B % 49; //#15800
        $astore($a(2)); //#15800
        $k[$j++] = $_.lastrow; //#15801
        $k[$j++] = 0; //#15801
        $r(3, -1); //#15801
        var _5E = $k[--$j]; //#15801
        var _5F = $k[--$j]; //#15801
        $puti($k[--$j], _5F, _5E); //#15801
    } //#15801
    $_.wr1 = $f(($get($_.lastrow, 0) * 49) + $get($_.lastrow, 1)); //#15803
    $k[$j++] = $_.cr7 * $get($_.weighty, 0); //#15806
    $k[$j++] = $_.weighty; //#15806
    $_.calccheck(); //#15806
    var _5P = $k[--$j]; //#15806
    var _5V = ($f($f($k[--$j] + _5P) + ($_.wr1 * $get($_.weighty, $f(($_.r * 4) - 3))))) % 2401; //#15808
    $_.wr2 = _5V; //#15808
    $k[$j++] = ~~(_5V / 49); //#15809
    $k[$j++] = _5V % 49; //#15809
    $astore($a(2)); //#15809
    $k[$j++] = $_.lastrow; //#15810
    $k[$j++] = 2; //#15810
    $r(3, -1); //#15810
    var _5Y = $k[--$j]; //#15810
    var _5Z = $k[--$j]; //#15810
    $puti($k[--$j], _5Z, _5Y); //#15810
    $k[$j++] = $_.cr7 * $get($_.weightx, 0); //#15813
    $k[$j++] = $_.weightx; //#15813
    $_.calccheck(); //#15813
    var _5f = $k[--$j]; //#15813
    var _5p = ($f(($f($f($k[--$j] + _5f) + ($_.wr1 * $get($_.weightx, $f(($_.r * 4) - 3))))) + ($_.wr2 * $get($_.weightx, $f(($_.r * 4) - 2))))) % 2401; //#15817
    $k[$j++] = ~~(_5p / 49); //#15817
    $k[$j++] = _5p % 49; //#15817
    $astore($a(2)); //#15817
    $k[$j++] = $_.lastrow; //#15818
    $k[$j++] = 4; //#15818
    $r(3, -1); //#15818
    var _5s = $k[--$j]; //#15818
    var _5t = $k[--$j]; //#15818
    $puti($k[--$j], _5t, _5s); //#15818
    var _5x = $geti($_.ccs, $_.ccs.length - 8, 7); //#15821
    $k[$j++] = 0; //#15821
    for (var _5y = 0, _5z = _5x.length; _5y < _5z; _5y++) { //#15821
        var _61 = $k[--$j]; //#15821
        $k[$j++] = $f(_61 + $get(_5x, _5y)); //#15821
    } //#15821
    $put($_.ccs, $_.ccs.length - 1, $k[--$j] % 49); //#15822
    var _66 = $get($_.options, 'debugcws') !== undefined; //#15824
    if (_66) { //#15824
        $k[$j++] = 'bwipp.debugcws#15824'; //#15824
        $k[$j++] = $_.ccs; //#15824
        bwipp_raiseerror(); //#15824
    } //#15824
    if (!bwipp_code49.__16522__) { //#16522
        $_ = Object.create($_); //#16522
        $_.patterns = $a([$a(["11521132", "25112131", "14212132", "25121221", "14221222", "12412132", "23321221", "12421222", "21521221", "15112222", "15121312", "13312222", "24221311", "13321312", "11512222", "22421311", "11521312", "25112311", "14212312", "23312311", "12412312", "21512311", "16121131", "14321131", "12521131", "15212131", "15221221", "13412131", "13421221", "11612131", "16112221", "16121311", "14312221", "14321311", "12512221", "12521311", "15212311", "13412311", "11612311", "11131135", "31131133", "51131131", "21122134", "41122132", "21131224", "41131222", "11113135", "31113133", "51113131", "11122225", "31122223", "51122221", "11131315", "31131313", "51131311", "21113224", "41113222", "21122314", "41122312", "11113315", "31113313", "51113311", "12131134", "32131132", "21231133", "41231131", "22122133", "42122131", "11222134", "22131223", "42131221", "11231224", "31231222", "12113134", "32113132", "12122224", "32122222", "12131314", "32131312", "21231313", "41231311", "22113223", "42113221", "11213224", "22122313", "42122311", "11222314", "31222312", "12113314", "32113312", "21213313", "41213311", "13131133", "33131131", "22231132", "11331133", "31331131", "23122132", "12222133", "23131222", "12231223", "32231221", "21331222", "13113133", "33113131", "13122223", "33122221", "11313133", "13131313", "33131311", "11322223", "22231312", "11331313", "31331311", "23113222", "12213223", "23122312", "12222313", "32222311", "21322312", "13113313", "33113311", "22213312", "11313313", "31313311", "14131132", "23231131", "12331132", "21431131", "24122131", "13222132", "24131221", "13231222", "11422132", "22331221", "11431222", "14113132", "14122222", "12313132", "14131312", "12322222", "23231311", "12331312", "21431311", "24113221", "13213222", "24122311", "13222312", "11413222", "22322311", "11422312", "14113312", "23213311", "12313312", "21413311", "15131131", "13331131", "14222131", "14231221", "12422131", "12431221", "15113131", "15122221", "13313131", "15131311", "13322221", "11513131", "13331311", "11522221", "14213221", "14222311", "12413221", "12422311", "15113311", "13313311", "11513311", "11141134", "31141132", "21132133", "41132131", "21141223", "41141221", "11123134", "31123132", "11132224", "31132222", "11141314", "31141312", "21114133", "41114131", "21123223", "41123221", "21132313", "41132311", "11114224", "31114222", "11123314", "31123312", "21114313", "41114311", "12141133", "32141131", "21241132", "22132132", "11232133", "22141222", "11241223", "31241221", "12123133", "32123131", "12132223", "32132221", "12141313", "32141311", "21241312", "22114132", "11214133", "22123222", "11223223", "22132312", "11232313", "31232311", "12114223", "32114221", "12123313", "32123311", "21223312", "22114312", "11214313", "31214311", "13141132", "22241131", "11341132", "23132131", "12232132", "23141221", "12241222", "21341221", "13123132", "13132222", "11323132", "13141312", "11332222", "22241311", "11341312", "23114131", "12214132", "23123221", "12223222", "23132311", "12232312", "21332311", "13114222", "13123312", "11314222", "22223311", "11323312", "23114311", "12214312", "21314311", "14141131", "12341131", "13232131", "13241221", "11432131", "14123131", "14132221", "12323131", "14141311", "12332221", "12341311", "13214131", "13223221", "11414131", "13232311", "11423221", "11432311", "14114221", "14123311", "12314221", "12323311", "13214311", "11414311", "11151133", "31151131", "21142132", "21151222", "11133133", "31133131", "11142223", "31142221", "11151313", "31151311", "21124132", "21133222", "21142312", "11115133", "31115131", "11124223", "31124221", "11133313", "31133311", "21115222", "21124312", "12151132", "21251131", "22142131", "11242132", "22151221", "11251222", "12133132", "12142222", "12151312", "21251311", "22124131", "11224132", "22133221", "11233222", "22142311", "11242312", "12115132", "12124222", "12133312", "21233311", "22115221", "11215222", "22124311", "11224312", "13151131", "12242131", "12251221", "13133131", "13142221", "11333131", "13151311", "11342221", "12224131", "12233221", "12242311", "13115131", "13124221", "11315131", "13133311", "11324221", "11333311", "12215221", "12224311", "11161132", "21152131", "21161221", "11143132", "11152222", "11161312", "21134131", "21143221", "21152311", "11125132", "11134222", "11143312", "21116131", "21125221", "21134311", "12161131", "11252131", "12143131", "12152221", "12161311", "11234131", "11243221", "11252311", "12125131", "12134221", "12143311", "11216131", "11225221", "11234311", "11111236", "31111234", "51111232", "21111325", "41111323", "61111321", "11111416", "31111414", "51111412", "31211143", "51211141", "12111235", "32111233", "52111231", "21211234", "41211232", "22111324", "42111322", "11211325", "31211323", "51211321", "12111415", "32111413", "52111411", "21211414", "41211412", "12211144", "32211142", "21311143", "41311141", "13111234", "33111232", "22211233", "42211231", "11311234", "31311232", "23111323", "43111321", "12211324", "32211322", "21311323", "41311321", "13111414", "33111412", "22211413", "42211411", "11311414", "31311412", "13211143", "33211141", "22311142", "11411143", "31411141", "14111233", "34111231", "23211232", "12311233", "32311231", "21411232", "24111322", "13211323", "33211321", "22311322", "11411323", "31411321", "14111413", "34111411", "23211412", "12311413", "32311411", "21411412", "14211142", "23311141", "12411142", "21511141", "15111232", "24211231", "13311232", "22411231", "11511232", "25111321", "14211322", "23311321", "12411322", "21511321", "15111412", "24211411", "13311412", "22411411", "11511412", "15211141", "13411141", "11611141", "16111231", "14311231", "12511231", "15211321", "13411321", "11611321", "16111411", "14311411", "12511411", "21121144", "41121142", "11112145", "31112143", "51112141", "11121235", "31121233", "51121231", "21112234", "41112232", "21121324", "41121322", "11112325", "31112323", "51112321", "11121415", "31121413", "51121411", "21112414", "41112412", "22121143", "42121141", "11221144", "31221142", "12112144", "32112142", "12121234", "32121232", "21221233", "41221231", "22112233", "42112231", "11212234", "22121323", "42121321", "11221324", "31221322", "12112324", "32112322", "12121414", "32121412", "21221413", "41221411", "22112413", "42112411", "11212414", "31212412", "23121142", "12221143", "32221141", "21321142", "13112143", "33112141", "13121233", "33121231", "11312143", "22221232", "11321233", "31321231", "23112232", "12212233", "23121322", "12221323", "32221321", "21321322", "13112323", "33112321", "13121413", "33121411", "11312323", "22221412", "11321413", "31321411", "23112412", "12212413", "32212411", "21312412", "24121141", "13221142", "22321141", "11421142", "14112142", "14121232", "12312142", "23221231", "12321232", "21421231", "24112231", "13212232", "24121321", "13221322", "11412232", "22321321", "11421322", "14112322", "14121412", "12312322", "23221411", "12321412", "21421411", "24112411", "13212412", "22312411", "11412412", "14221141", "12421141", "15112141", "15121231", "13312141", "13321231", "11512141", "11521231", "14212231", "14221321", "12412231", "12421321", "15112321", "15121411", "13312321", "13321411", "11512321", "11521411", "14212411", "12412411", "21131143", "41131141", "11122144", "31122142", "11131234", "31131232", "21113143", "41113141", "21122233", "41122231", "21131323", "41131321", "11113234", "31113232", "11122324", "31122322", "11131414", "31131412", "21113323", "41113321", "21122413", "41122411", "11113414", "31113412", "22131142", "11231143", "31231141", "12122143", "32122141", "12131233", "32131231", "21231232", "22113142", "11213143", "22122232", "11222233", "22131322", "11231323", "31231321", "12113233", "32113231", "12122323", "32122321", "12131413", "32131411", "21231412", "22113322", "11213323", "22122412", "11222413", "31222411", "12113413", "32113411", "21213412", "23131141", "12231142", "21331141", "13122142", "13131232", "11322142", "22231231", "11331232", "23113141", "12213142", "23122231", "12222232", "23131321", "12231322", "21331321", "13113232", "13122322", "11313232", "13131412", "11322322", "22231411", "11331412", "23113321", "12213322", "23122411", "12222412", "21322411", "13113412", "22213411", "11313412", "13231141", "11431141", "14122141", "14131231", "12322141", "12331231", "13213141", "13222231", "11413141", "13231321", "11422231", "11431321", "14113231", "14122321", "12313231", "14131411", "12322321", "12331411", "13213321", "13222411", "11413321", "11422411", "14113411", "12313411", "21141142", "11132143", "31132141", "11141233", "31141231", "21123142", "21132232", "21141322", "11114143", "31114141", "11123233", "31123231", "11132323", "31132321", "11141413", "31141411", "21114232", "21123322", "21132412", "11114323", "31114321", "11123413", "31123411", "22141141", "11241142", "12132142", "12141232", "21241231", "22123141", "11223142", "22132231", "11232232", "22141321", "11241322", "12114142", "12123232", "12132322", "12141412", "21241411", "22114231", "11214232", "22123321", "11223322", "22132411", "11232412", "12114322", "12123412", "21223411", "12241141", "13132141", "13141231", "11332141", "11341231", "12223141", "12232231", "12241321", "13114141", "13123231", "11314141", "13132321", "11323231", "13141411", "11332321", "11341411", "12214231", "12223321", "12232411", "13114321", "13123411", "11314321", "11323411", "21151141", "11142142", "11151232", "21133141", "21142231", "21151321", "11124142", "11133232", "11142322", "11151412", "21115141", "21124231", "21133321", "21142411", "11115232", "11124322", "11133412", "11251141", "12142141", "12151231", "11233141", "11242231", "11251321", "12124141", "12133231", "12142321", "12151411", "11215141", "11224231", "11233321", "11242411", "12115231", "12124321", "12133411", "11152141", "11161231", "11134141", "11143231", "11152321", "11161411", "11116141", "11125231", "11134321", "11143411", "21111244", "41111242", "11111335", "31111333", "51111331", "21111424", "41111422", "11111515", "31111513", "51111511", "21211153", "41211151", "22111243", "42111241", "11211244", "31211242", "12111334", "32111332", "21211333", "41211331", "22111423", "42111421", "11211424", "31211422", "12111514", "32111512", "21211513", "41211511", "22211152", "11311153", "31311151", "23111242", "12211243", "32211241", "21311242", "13111333", "33111331", "22211332", "11311333", "31311331", "23111422", "12211423", "32211421", "21311422", "13111513", "33111511", "22211512", "11311513", "31311511", "23211151", "12311152", "21411151", "24111241", "13211242", "22311241", "11411242", "14111332", "23211331", "12311332", "21411331", "24111421", "13211422", "22311421", "11411422", "14111512", "23211511", "12311512", "21411511", "13311151", "11511151", "14211241", "12411241", "15111331", "13311331", "11511331", "14211421", "12411421", "15111511", "13311511", "11511511", "31121152", "21112153", "41112151", "21121243", "41121241", "11112244", "31112242", "11121334", "31121332", "21112333", "41112331", "21121423", "41121421", "11112424", "31112422", "11121514", "31121512", "21112513", "41112511", "12121153", "32121151", "21221152", "22112152", "11212153", "22121242", "11221243", "31221241", "12112243", "32112241", "12121333", "32121331", "21221332", "22112332", "11212333", "22121422", "11221423", "31221421", "12112423", "32112421", "12121513", "32121511", "21221512", "22112512", "11212513", "31212511", "13121152", "22221151", "11321152", "23112151", "12212152", "23121241", "12221242", "21321241", "13112242", "13121332", "11312242", "22221331", "11321332", "23112331", "12212332", "23121421", "12221422", "21321421", "13112422", "13121512", "11312422", "22221511", "11321512", "23112511", "12212512", "21312511", "14121151", "12321151", "13212151", "13221241", "11412151", "11421241", "14112241", "14121331", "12312241", "12321331", "13212331", "13221421", "11412331", "11421421", "14112421", "14121511", "12312421", "12321511", "13212511", "11412511", "11131153", "31131151", "21122152", "21131242", "11113153", "31113151", "11122243", "31122241", "11131333", "31131331", "21113242", "21122332", "21131422", "11113333", "31113331", "11122423", "31122421", "11131513", "31131511", "21113422", "21122512", "12131152", "21231151", "22122151", "11222152", "22131241", "11231242", "12113152", "12122242", "12131332", "21231331", "22113241", "11213242", "22122331", "11222332", "22131421", "11231422", "12113332", "12122422", "12131512", "21231511", "22113421", "11213422", "22122511", "11222512", "13131151", "11331151", "12222151", "12231241", "13113151", "13122241", "11313151", "13131331", "11322241", "11331331", "12213241", "12222331", "12231421", "13113331", "13122421", "11313331", "13131511", "11322421", "11331511", "12213421", "12222511", "11141152", "21132151", "21141241", "11123152", "11132242", "11141332", "21114151", "21123241", "21132331", "21141421", "11114242", "11123332", "11132422", "11141512", "21114331", "21123421", "21132511", "12141151", "11232151", "11241241", "12123151", "12132241", "12141331", "11214151", "11223241", "11232331", "11241421", "12114241", "12123331", "12132421", "12141511", "11214331", "11223421", "11232511", "11151151", "11133151", "11142241", "11151331", "11115151", "11124241", "11133331", "11142421", "11151511", "11111254", "31111252", "21111343", "41111341", "11111434", "31111432", "21111523", "41111521", "11111614", "31111612", "31211161", "12111253", "32111251", "21211252", "22111342", "11211343", "31211341", "12111433", "32111431", "21211432", "22111522", "11211523", "31211521", "12111613", "32111611", "21211612", "12211162", "21311161", "13111252", "22211251", "11311252", "23111341", "12211342", "21311341", "13111432", "22211431", "11311432", "23111521", "12211522", "21311521", "13111612", "22211611", "11311612", "13211161", "11411161", "14111251", "12311251", "13211341", "11411341", "14111431", "12311431", "13211521", "11411521", "14111611", "12311611", "21121162", "11112163", "31112161", "11121253", "31121251", "21112252", "21121342", "11112343", "31112341", "11121433", "31121431", "21112432", "21121522", "11112523", "31112521", "11121613", "31121611", "22121161", "11221162", "12112162", "12121252", "21221251", "22112251", "11212252", "22121341", "11221342", "12112342", "12121432", "21221431", "22112431", "11212432", "22121521", "11221522", "12112522", "12121612", "21221611", "12221161", "13112161", "13121251", "11312161", "11321251", "32121115", "52121113", "21221116", "41221114", "61221112", "22112116", "42112114", "31212115", "51212113", "13121116", "33121114", "22221115", "42221113", "11321116", "31321114", "51321112", "23112115", "43112113", "12212116", "32212114", "52212112", "21312115", "41312113", "61312111", "14121115", "34121113", "23221114", "43221112", "12321115", "32321113", "52321111", "21421114", "41421112", "24112114", "13212115", "33212113", "22312114", "42312112", "11412115", "31412113", "51412111", "15121114", "24221113", "13321114", "33321112", "22421113", "42421111", "11521114", "31521112", "25112113", "14212114", "34212112", "23312113", "43312111", "12412114", "32412112", "21512113", "41512111", "16121113", "25221112", "14321113", "34321111", "23421112", "12521113", "32521111", "15212113", "24312112", "13412113", "33412111", "22512112", "11612113", "31612111", "31131115", "51131113", "21122116", "41122114", "61122112", "31113115", "51113113", "12131116", "32131114", "52131112", "21231115", "41231113", "61231111", "22122115", "42122113", "11222116", "31222114", "51222112", "12113116", "32113114", "52113112", "21213115", "41213113", "61213111", "13131115", "33131113", "22231114", "42231112", "11331115", "31331113", "51331111", "23122114", "43122112", "12222115", "32222113", "52222111", "21322114", "41322112", "13113115", "33113113", "22213114", "42213112", "11313115", "31313113", "51313111", "14131114", "34131112", "23231113", "43231111", "12331114", "32331112", "21431113", "41431111", "24122113", "13222114", "33222112", "22322113", "42322111", "11422114", "31422112", "14113114", "34113112", "23213113", "43213111", "12313114", "32313112", "21413113", "41413111", "15131113", "24231112", "13331113", "33331111", "22431112", "25122112", "14222113", "34222111", "23322112", "12422113", "32422111", "21522112", "15113113", "24213112", "13313113", "33313111", "22413112", "11513113", "31513111", "16131112", "25231111", "14331112", "23431111", "15222112", "24322111", "13422112", "22522111", "16113112", "25213111", "14313112", "23413111", "12513112", "21613111", "11141116", "31141114", "51141112", "21132115", "41132113", "61132111", "11123116", "31123114", "51123112", "21114115", "41114113", "61114111", "12141115", "32141113", "52141111", "21241114", "41241112", "22132114", "42132112", "11232115", "31232113", "51232111", "12123115", "32123113", "52123111", "21223114", "41223112", "22114114", "42114112", "11214115", "31214113", "51214111", "13141114", "33141112", "22241113", "42241111", "11341114", "31341112", "23132113", "43132111", "12232114", "32232112", "21332113", "41332111", "13123114", "33123112", "22223113", "42223111", "11323114", "31323112", "23114113", "43114111", "12214114", "32214112", "21314113", "41314111", "14141113", "34141111", "23241112", "12341113", "32341111", "24132112", "13232113", "33232111", "22332112", "11432113", "31432111", "14123113", "34123111", "23223112", "12323113", "32323111", "21423112", "24114112", "13214113", "33214111", "22314112", "11414113", "31414111", "15141112", "24241111", "13341112", "25132111", "14232112", "23332111", "12432112", "15123112", "24223111", "13323112", "22423111", "11523112", "25114111", "14214112", "23314111", "12414112", "21514111", "16141111", "14341111", "15232111", "13432111", "16123111", "14323111", "12523111", "15214111", "13414111", "11614111", "11151115", "31151113", "51151111", "21142114", "41142112", "11133115", "31133113", "51133111", "21124114", "41124112", "11115115", "31115113", "51115111", "12151114", "32151112", "21251113", "41251111", "22142113", "42142111", "11242114", "31242112", "12133114", "32133112", "21233113", "41233111", "22124113", "42124111", "11224114", "31224112", "12115114", "32115112", "21215113", "41215111", "13151113", "33151111", "22251112", "23142112", "12242113", "32242111", "21342112", "13133113", "33133111", "22233112", "11333113", "31333111", "23124112", "12224113", "32224111", "21324112", "13115113", "33115111", "22215112", "11315113", "31315111", "14151112", "23251111", "24142111", "13242112", "22342111", "14133112", "23233111", "12333112", "21433111", "24124111", "13224112", "22324111", "11424112", "14115112", "23215111", "12315112", "21415111", "15151111", "14242111", "15133111", "13333111", "14224111", "12424111", "15115111", "13315111", "11515111", "11161114", "31161112", "21152113", "41152111", "11143114", "31143112", "21134113", "41134111", "11125114", "31125112", "21116113", "41116111", "12161113", "32161111", "22152112", "11252113", "31252111", "12143113", "32143111", "21243112", "22134112", "11234113", "31234111", "12125113", "32125111", "21225112", "22116112", "11216113", "31216111", "13161112", "23152111", "12252112", "13143112", "22243111", "11343112", "23134111", "12234112", "21334111", "13125112", "22225111", "11325112", "23116111", "12216112", "21316111", "14161111", "13252111", "14143111", "12343111", "13234111", "11434111", "14125111", "12325111", "13216111", "11416111", "31111216", "51111214", "31211125", "51211123", "32111215", "52111213", "21211216", "41211214", "61211212", "12211126", "32211124", "52211122", "21311125", "41311123", "61311121", "13111216", "33111214", "22211215", "42211213", "11311216", "31311214", "51311212", "13211125", "33211123", "22311124", "42311122", "11411125", "31411123", "51411121", "14111215", "34111213", "23211214", "43211212", "12311215", "32311213", "52311211", "21411214", "41411212", "14211124", "34211122", "23311123", "43311121", "12411124", "32411122", "21511123", "41511121", "15111214", "24211213", "13311214", "33311212", "22411213", "42411211", "11511214", "31511212", "15211123", "24311122", "13411123", "33411121", "22511122", "11611123", "31611121", "16111213", "25211212", "14311213", "34311211", "23411212", "12511213", "32511211", "21611212", "21121126", "41121124", "61121122", "31112125", "51112123", "31121215", "51121213", "21112216", "41112214", "61112212", "22121125", "42121123", "11221126", "31221124", "51221122", "12112126", "32112124", "52112122", "12121216", "32121214", "52121212", "21221215", "41221213", "61221211", "22112215", "42112213", "11212216", "31212214", "51212212", "23121124", "43121122", "12221125", "32221123", "52221121", "21321124", "41321122", "13112125", "33112123", "13121215", "33121213", "11312125", "22221214", "42221212", "11321215", "31321213", "51321211", "23112214", "43112212", "12212215", "32212213", "52212211", "21312214", "41312212", "24121123", "13221124", "33221122", "22321123", "42321121", "11421124", "31421122", "14112124", "34112122", "14121214", "34121212", "12312124", "23221213", "43221211", "12321214", "32321212", "21421213", "41421211", "24112213", "13212214", "33212212", "22312213", "42312211", "11412214", "31412212", "25121122", "14221123", "34221121", "23321122", "12421123", "32421121", "21521122", "15112123", "15121213", "13312123", "24221212", "13321213", "33321211", "11512123", "22421212", "11521213", "31521211", "25112212", "14212213", "34212211", "23312212", "12412213", "32412211", "21512212", "15221122", "24321121", "13421122", "22521121", "16112122", "16121212", "14312122", "25221211", "14321212", "12512122", "23421211", "12521212", "15212212", "24312211", "13412212", "22512211", "11612212", "21131125", "41131123", "61131121", "11122126", "31122124", "51122122", "11131216", "31131214", "51131212", "21113125", "41113123", "61113121", "21122215", "41122213", "61122211", "11113216", "31113214", "51113212", "22131124", "42131122", "11231125", "31231123", "51231121", "12122125", "32122123", "52122121", "12131215", "32131213", "52131211", "21231214", "41231212", "22113124", "42113122", "11213125", "22122214", "42122212", "11222215", "31222213", "51222211", "12113215", "32113213", "52113211", "21213214", "41213212", "23131123", "43131121", "12231124", "32231122", "21331123", "41331121", "13122124", "33122122", "13131214", "33131212", "11322124", "22231213", "42231211", "11331214", "31331212", "23113123", "43113121", "12213124", "23122213", "43122211", "12222214", "32222212", "21322213", "41322211", "13113214", "33113212", "22213213", "42213211", "11313214", "31313212", "24131122", "13231123", "33231121", "22331122", "11431123", "31431121", "14122123", "34122121", "14131213", "34131211", "12322123", "23231212", "12331213", "32331211", "21431212", "24113122", "13213123", "24122212", "13222213", "33222211", "11413123", "22322212", "11422213", "31422211", "14113213", "34113211", "23213212", "12313213", "32313211", "21413212", "25131121", "14231122", "23331121", "12431122", "15122122", "15131212", "13322122", "24231211", "13331212", "11522122", "22431211", "25113121", "14213122", "25122211", "14222212", "12413122", "23322211", "12422212", "21522211", "15113212", "24213211", "13313212", "22413211", "11513212", "15231121", "13431121", "16122121", "16131211", "14322121", "14331211", "12522121", "15213121", "15222211", "13413121", "13422211", "11613121", "16113211", "14313211", "12513211", "21141124", "41141122", "11132125", "31132123", "51132121", "11141215", "31141213", "51141211", "21123124", "41123122", "21132214", "41132212", "11114125", "31114123", "51114121", "11123215", "31123213", "51123211", "21114214", "41114212", "22141123", "42141121", "11241124", "31241122", "12132124", "32132122", "12141214", "32141212", "21241213", "41241211", "22123123", "42123121", "11223124", "22132213", "42132211", "11232214", "31232212", "12114124", "32114122", "12123214", "32123212", "21223213", "41223211", "22114213", "42114211", "11214214", "31214212", "23141122", "12241123", "32241121", "21341122", "13132123", "33132121", "13141213", "33141211", "11332123", "22241212", "11341213", "31341211", "23123122", "12223123", "23132212", "12232213", "32232211", "21332212", "13114123", "33114121", "13123213", "33123211", "11314123", "22223212", "11323213", "31323211", "23114212", "12214213", "32214211", "21314212", "24141121", "13241122", "22341121", "14132122", "14141212", "12332122", "23241211", "12341212", "24123121", "13223122", "24132211", "13232212", "11423122", "22332211", "11432212", "14114122", "14123212", "12314122", "23223211", "12323212", "21423211", "24114211", "13214212", "22314211", "11414212", "14241121", "15132121", "15141211", "13332121", "13341211", "14223121", "14232211", "12423121", "12432211", "15114121", "15123211", "13314121", "13323211", "11514121", "11523211", "14214211", "12414211", "21151123", "41151121", "11142124", "31142122", "11151214", "31151212", "21133123", "41133121", "21142213", "41142211", "11124124", "31124122", "11133214", "31133212", "21115123", "41115121", "21124213", "41124211", "11115214", "31115212", "22151122", "11251123", "31251121", "12142123", "32142121", "12151213", "32151211", "21251212", "22133122", "11233123", "22142212", "11242213", "31242211", "12124123", "32124121", "12133213", "32133211", "21233212", "22115122", "11215123", "22124212", "11224213", "31224211", "12115213", "32115211", "21215212", "23151121", "12251122", "13142122", "13151212", "11342122", "22251211", "23133121", "12233122", "23142211", "12242212", "21342211", "13124122", "13133212", "11324122", "22233211", "11333212", "23115121", "12215122", "23124211", "12224212", "21324211", "13115212", "22215211", "11315212", "13251121", "14142121", "14151211", "12342121", "13233121", "13242211", "11433121", "14124121", "14133211", "12324121", "12333211", "13215121", "13224211", "11415121", "11424211", "14115211", "12315211", "21161122", "11152123", "31152121", "11161213", "31161211", "21143122", "21152212", "11134123", "31134121", "11143213", "31143211", "21125122", "21134212", "11116123", "31116121", "11125213", "31125211", "22161121", "12152122", "12161212", "22143121", "11243122", "22152211", "11252212", "12134122", "12143212", "21243211", "22125121", "11225122", "22134211", "11234212", "12116122", "12125212", "21225211", "13152121", "13161211", "12243121", "12252211", "13134121", "13143211", "11334121", "11343211", "12225121", "12234211", "13116121", "13125211", "11316121", "11325211", "21111226", "41111224", "61111222", "31111315", "51111313", "21211135", "41211133", "61211131", "22111225", "42111223", "11211226", "31211224", "51211222", "12111316", "32111314", "52111312", "21211315", "41211313", "61211311", "22211134", "42211132", "11311135", "31311133", "51311131", "23111224", "43111222", "12211225", "32211223", "52211221", "21311224", "41311222", "13111315", "33111313", "22211314", "42211312", "11311315", "31311313", "51311311", "23211133", "43211131", "12311134", "32311132", "21411133", "41411131", "24111223", "13211224", "33211222", "22311223", "42311221", "11411224", "31411222", "14111314", "34111312", "23211313", "43211311", "12311314", "32311312", "21411313", "41411311", "24211132", "13311133", "33311131", "22411132", "11511133", "31511131", "25111222", "14211223", "34211221", "23311222", "12411223", "32411221", "21511222", "15111313", "24211312", "13311313", "33311311", "22411312", "11511313", "31511311", "25211131", "14311132", "23411131", "12511132", "21611131", "15211222", "24311221", "13411222", "22511221", "11611222", "16111312", "25211311", "14311312", "23411311", "12511312", "21611311", "31121134", "51121132", "21112135", "41112133", "61112131", "21121225", "41121223", "61121221", "11112226", "31112224", "51112222", "11121316", "31121314", "51121312", "21112315", "41112313", "61112311", "12121135", "32121133", "52121131", "21221134", "41221132", "22112134", "42112132", "11212135", "22121224", "42121222", "11221225", "31221223", "51221221", "12112225", "32112223", "52112221", "12121315", "32121313", "52121311", "21221314", "41221312", "22112314", "42112312", "11212315", "31212313", "51212311", "13121134", "33121132", "22221133", "42221131", "11321134", "31321132", "23112133", "43112131", "12212134", "23121223", "43121221", "12221224", "32221222", "21321223", "41321221", "13112224", "33112222", "13121314", "33121312", "11312224", "22221313", "42221311", "11321314", "31321312", "23112313", "43112311", "12212314", "32212312", "21312313", "41312311", "14121133", "34121131", "23221132", "12321133", "32321131", "21421132", "24112132", "13212133", "24121222", "13221223", "33221221", "11412133", "22321222", "11421223", "31421221", "14112223", "34112221", "14121313", "34121311", "12312223", "23221312", "12321313", "32321311", "21421312", "24112312", "13212313", "33212311", "22312312", "11412313", "31412311", "15121132", "24221131", "13321132", "22421131"]), $a(["22121116", "42121114", "31221115", "51221113", "32112115", "52112113", "21212116", "41212114", "61212112", "23121115", "43121113", "12221116", "32221114", "52221112", "21321115", "41321113", "61321111", "13112116", "33112114", "22212115", "42212113", "11312116", "31312114", "51312112", "24121114", "13221115", "33221113", "22321114", "42321112", "11421115", "31421113", "51421111", "14112115", "34112113", "23212114", "43212112", "12312115", "32312113", "52312111", "21412114", "41412112", "25121113", "14221114", "34221112", "23321113", "43321111", "12421114", "32421112", "21521113", "41521111", "15112114", "24212113", "13312114", "33312112", "22412113", "42412111", "11512114", "31512112", "15221113", "24321112", "13421113", "33421111", "22521112", "16112113", "25212112", "14312113", "34312111", "23412112", "12512113", "32512111", "21612112", "21131116", "41131114", "61131112", "31122115", "51122113", "21113116", "41113114", "61113112", "22131115", "42131113", "11231116", "31231114", "51231112", "12122116", "32122114", "52122112", "21222115", "41222113", "61222111", "22113115", "42113113", "11213116", "31213114", "51213112", "23131114", "43131112", "12231115", "32231113", "52231111", "21331114", "41331112", "13122115", "33122113", "22222114", "42222112", "11322115", "31322113", "51322111", "23113114", "43113112", "12213115", "32213113", "52213111", "21313114", "41313112", "24131113", "13231114", "33231112", "22331113", "42331111", "11431114", "31431112", "14122114", "34122112", "23222113", "43222111", "12322114", "32322112", "21422113", "41422111", "24113113", "13213114", "33213112", "22313113", "42313111", "11413114", "31413112", "25131112", "14231113", "34231111", "23331112", "12431113", "32431111", "15122113", "24222112", "13322113", "33322111", "22422112", "11522113", "31522111", "25113112", "14213113", "34213111", "23313112", "12413113", "32413111", "21513112", "15231112", "24331111", "13431112", "16122112", "25222111", "14322112", "23422111", "12522112", "15213112", "24313111", "13413112", "22513111", "11613112", "21141115", "41141113", "61141111", "11132116", "31132114", "51132112", "21123115", "41123113", "61123111", "11114116", "31114114", "51114112", "22141114", "42141112", "11241115", "31241113", "51241111", "12132115", "32132113", "52132111", "21232114", "41232112", "22123114", "42123112", "11223115", "31223113", "51223111", "12114115", "32114113", "52114111", "21214114", "41214112", "23141113", "43141111", "12241114", "32241112", "21341113", "41341111", "13132114", "33132112", "22232113", "42232111", "11332114", "31332112", "23123113", "43123111", "12223114", "32223112", "21323113", "41323111", "13114114", "33114112", "22214113", "42214111", "11314114", "31314112", "24141112", "13241113", "33241111", "22341112", "14132113", "34132111", "23232112", "12332113", "32332111", "21432112", "24123112", "13223113", "33223111", "22323112", "11423113", "31423111", "14114113", "34114111", "23214112", "12314113", "32314111", "21414112", "25141111", "14241112", "23341111", "15132112", "24232111", "13332112", "22432111", "25123111", "14223112", "23323111", "12423112", "21523111", "15114112", "24214111", "13314112", "22414111", "11514112", "15241111", "16132111", "14332111", "15223111", "13423111", "16114111", "14314111", "12514111", "21151114", "41151112", "11142115", "31142113", "51142111", "21133114", "41133112", "11124115", "31124113", "51124111", "21115114", "41115112", "22151113", "42151111", "11251114", "31251112", "12142114", "32142112", "21242113", "41242111", "22133113", "42133111", "11233114", "31233112", "12124114", "32124112", "21224113", "41224111", "22115113", "42115111", "11215114", "31215112", "23151112", "12251113", "32251111", "13142113", "33142111", "22242112", "11342113", "31342111", "23133112", "12233113", "32233111", "21333112", "13124113", "33124111", "22224112", "11324113", "31324111", "23115112", "12215113", "32215111", "21315112", "24151111", "13251112", "14142112", "23242111", "12342112", "24133111", "13233112", "22333111", "11433112", "14124112", "23224111", "12324112", "21424111", "24115111", "13215112", "22315111", "11415112", "14251111", "15142111", "13342111", "14233111", "12433111", "15124111", "13324111", "11524111", "14215111", "12415111", "21161113", "41161111", "11152114", "31152112", "21143113", "41143111", "11134114", "31134112", "21125113", "41125111", "11116114", "31116112", "22161112", "12152113", "32152111", "21252112", "22143112", "11243113", "31243111", "12134113", "32134111", "21234112", "22125112", "11225113", "31225111", "12116113", "32116111", "21216112", "23161111", "13152112", "22252111", "23143111", "12243112", "21343111", "13134112", "22234111", "11334112", "23125111", "12225112", "21325111", "13116112", "22216111", "11316112", "14152111", "13243111", "14134111", "12334111", "13225111", "11425111", "14116111", "12316111", "41111215", "61111213", "21211126", "41211124", "61211122", "22111216", "42111214", "31211215", "51211213", "22211125", "42211123", "11311126", "31311124", "51311122", "23111215", "43111213", "12211216", "32211214", "52211212", "21311215", "41311213", "61311211", "23211124", "43211122", "12311125", "32311123", "52311121", "21411124", "41411122", "24111214", "13211215", "33211213", "22311214", "42311212", "11411215", "31411213", "51411211", "24211123", "13311124", "33311122", "22411123", "42411121", "11511124", "31511122", "25111213", "14211214", "34211212", "23311213", "43311211", "12411214", "32411212", "21511213", "41511211", "25211122", "14311123", "34311121", "23411122", "12511123", "32511121", "21611122", "15211213", "24311212", "13411213", "33411211", "22511212", "11611213", "31611211", "31121125", "51121123", "21112126", "41112124", "61112122", "21121216", "41121214", "61121212", "31112215", "51112213", "12121126", "32121124", "52121122", "21221125", "41221123", "61221121", "22112125", "42112123", "11212126", "22121215", "42121213", "11221216", "31221214", "51221212", "12112216", "32112214", "52112212", "21212215", "41212213", "61212211", "13121125", "33121123", "22221124", "42221122", "11321125", "31321123", "51321121", "23112124", "43112122", "12212125", "23121214", "43121212", "12221215", "32221213", "52221211", "21321214", "41321212", "13112215", "33112213", "22212214", "42212212", "11312215", "31312213", "51312211", "14121124", "34121122", "23221123", "43221121", "12321124", "32321122", "21421123", "41421121", "24112123", "13212124", "24121213", "13221214", "33221212", "11412124", "22321213", "42321211", "11421214", "31421212", "14112214", "34112212", "23212213", "43212211", "12312214", "32312212", "21412213", "41412211", "15121123", "24221122", "13321123", "33321121", "22421122", "11521123", "31521121", "25112122", "14212123", "25121212", "14221213", "34221211", "12412123", "23321212", "12421213", "32421211", "21521212", "15112213", "24212212", "13312213", "33312211", "22412212", "11512213", "31512211", "16121122", "25221121", "14321122", "23421121", "12521122", "15212122", "15221212", "13412122", "24321211", "13421212", "11612122", "22521211", "16112212", "25212211", "14312212", "23412211", "12512212", "21612211", "11131126", "31131124", "51131122", "21122125", "41122123", "61122121", "21131215", "41131213", "61131211", "11113126", "31113124", "51113122", "11122216", "31122214", "51122212", "21113215", "41113213", "61113211", "12131125", "32131123", "52131121", "21231124", "41231122", "22122124", "42122122", "11222125", "22131214", "42131212", "11231215", "31231213", "51231211", "12113125", "32113123", "52113121", "12122215", "32122213", "52122211", "21222214", "41222212", "22113214", "42113212", "11213215", "31213213", "51213211", "13131124", "33131122", "22231123", "42231121", "11331124", "31331122", "23122123", "43122121", "12222124", "23131213", "43131211", "12231214", "32231212", "21331213", "41331211", "13113124", "33113122", "13122214", "33122212", "11313124", "22222213", "42222211", "11322214", "31322212", "23113213", "43113211", "12213214", "32213212", "21313213", "41313211", "14131123", "34131121", "23231122", "12331123", "32331121", "21431122", "24122122", "13222123", "24131212", "13231213", "33231211", "11422123", "22331212", "11431213", "31431211", "14113123", "34113121", "14122213", "34122211", "12313123", "23222212", "12322213", "32322211", "21422212", "24113212", "13213213", "33213211", "22313212", "11413213", "31413211", "15131122", "24231121", "13331122", "22431121", "25122121", "14222122", "25131211", "14231212", "12422122", "23331211", "12431212", "15113122", "15122212", "13313122", "24222211", "13322212", "11513122", "22422211", "11522212", "25113211", "14213212", "23313211", "12413212", "21513211", "16131121", "14331121", "15222121", "15231211", "13422121", "13431211", "16113121", "16122211", "14313121", "14322211", "12513121", "12522211", "15213211", "13413211", "11613211", "11141125", "31141123", "51141121", "21132124", "41132122", "21141214", "41141212", "11123125", "31123123", "51123121", "11132215", "31132213", "51132211", "21114124", "41114122", "21123214", "41123212", "11114215", "31114213", "51114211", "12141124", "32141122", "21241123", "41241121", "22132123", "42132121", "11232124", "22141213", "42141211", "11241214", "31241212", "12123124", "32123122", "12132214", "32132212", "21232213", "41232211", "22114123", "42114121", "11214124", "22123213", "42123211", "11223214", "31223212", "12114214", "32114212", "21214213", "41214211", "13141123", "33141121", "22241122", "11341123", "31341121", "23132122", "12232123", "23141212", "12241213", "32241211", "21341212", "13123123", "33123121", "13132213", "33132211", "11323123", "22232212", "11332213", "31332211", "23114122", "12214123", "23123212", "12223213", "32223211", "21323212", "13114213", "33114211", "22214212", "11314213", "31314211", "14141122", "23241121", "12341122", "24132121", "13232122", "24141211", "13241212", "11432122", "22341211", "14123122", "14132212", "12323122", "23232211", "12332212", "21432211", "24114121", "13214122", "24123211", "13223212", "11414122", "22323211", "11423212", "14114212", "23214211", "12314212", "21414211", "15141121", "13341121", "14232121", "14241211", "12432121", "15123121", "15132211", "13323121", "13332211", "11523121", "14214121", "14223211", "12414121", "12423211", "15114211", "13314211", "11514211", "11151124", "31151122", "21142123", "41142121", "21151213", "41151211", "11133124", "31133122", "11142214", "31142212", "21124123", "41124121", "21133213", "41133211", "11115124", "31115122", "11124214", "31124212", "21115213", "41115211", "12151123", "32151121", "21251122", "22142122", "11242123", "22151212", "11251213", "31251211", "12133123", "32133121", "12142213", "32142211", "21242212", "22124122", "11224123", "22133212", "11233213", "31233211", "12115123", "32115121", "12124213", "32124211", "21224212", "22115212", "11215213", "31215211", "13151122", "22251121", "23142121", "12242122", "23151211", "12251212", "13133122", "13142212", "11333122", "22242211", "11342212", "23124121", "12224122", "23133211", "12233212", "21333211", "13115122", "13124212", "11315122", "22224211", "11324212", "23115211", "12215212", "21315211", "14151121", "13242121", "13251211", "14133121", "14142211", "12333121", "12342211", "13224121", "13233211", "11424121", "11433211", "14115121", "14124211", "12315121", "12324211", "13215211", "11415211", "11161123", "31161121", "21152122", "21161212", "11143123", "31143121", "11152213", "31152211", "21134122", "21143212", "11125123", "31125121", "11134213", "31134211", "21116122", "21125212", "12161122", "22152121", "11252122", "22161211", "12143122", "12152212", "21252211", "22134121", "11234122", "22143211", "11243212", "12125122", "12134212", "21234211", "22116121", "11216122", "22125211", "11225212", "13161121", "12252121", "13143121", "13152211", "11343121", "12234121", "12243211", "13125121", "13134211", "11325121", "11334211", "12216121", "12225211", "31111225", "51111223", "21111316", "41111314", "61111312", "31211134", "51211132", "12111226", "32111224", "52111222", "21211225", "41211223", "61211221", "22111315", "42111313", "11211316", "31211314", "51211312", "12211135", "32211133", "52211131", "21311134", "41311132", "13111225", "33111223", "22211224", "42211222", "11311225", "31311223", "51311221", "23111314", "43111312", "12211315", "32211313", "52211311", "21311314", "41311312", "13211134", "33211132", "22311133", "42311131", "11411134", "31411132", "14111224", "34111222", "23211223", "43211221", "12311224", "32311222", "21411223", "41411221", "24111313", "13211314", "33211312", "22311313", "42311311", "11411314", "31411312", "14211133", "34211131", "23311132", "12411133", "32411131", "21511132", "15111223", "24211222", "13311223", "33311221", "22411222", "11511223", "31511221", "25111312", "14211313", "34211311", "23311312", "12411313", "32411311", "21511312", "15211132", "24311131", "13411132", "22511131", "11611132", "16111222", "25211221", "14311222", "23411221", "12511222", "21611221", "15211312", "24311311", "13411312", "22511311", "11611312", "21121135", "41121133", "61121131", "11112136", "31112134", "51112132", "11121226", "31121224", "51121222", "21112225", "41112223", "61112221", "21121315", "41121313", "61121311", "11112316", "31112314", "51112312", "22121134", "42121132", "11221135", "31221133", "51221131", "12112135", "32112133", "52112131", "12121225", "32121223", "52121221", "21221224", "41221222", "22112224", "42112222", "11212225", "22121314", "42121312", "11221315", "31221313", "51221311", "12112315", "32112313", "52112311", "21212314", "41212312", "23121133", "43121131", "12221134", "32221132", "21321133", "41321131", "13112134", "33112132", "13121224", "33121222", "11312134", "22221223", "42221221", "11321224", "31321222", "23112223", "43112221", "12212224", "23121313", "43121311", "12221314", "32221312", "21321313", "41321311", "13112314", "33112312", "22212313", "42212311", "11312314", "31312312", "24121132", "13221133", "33221131", "22321132", "11421133", "31421131", "14112133", "34112131", "14121223", "34121221", "12312133", "23221222", "12321223", "32321221", "21421222", "24112222", "13212223", "24121312", "13221313", "33221311", "11412223", "22321312", "11421313", "31421311", "14112313", "34112311", "23212312", "12312313", "32312311", "21412312", "25121131", "14221132", "23321131", "12421132", "21521131", "15112132", "15121222", "13312132", "24221221", "13321222", "11512132", "22421221", "11521222", "25112221", "14212222", "25121311", "14221312", "12412222", "23321311", "12421312", "21521311", "15112312", "24212311", "13312312", "22412311", "11512312", "15221131", "13421131", "16112131", "16121221", "14312131", "14321221", "12512131", "12521221", "15212221", "15221311", "13412221", "13421311", "11612221", "16112311", "14312311", "12512311", "21131134", "41131132", "11122135", "31122133", "51122131", "11131225", "31131223", "51131221", "21113134", "41113132", "21122224", "41122222", "21131314", "41131312", "11113225", "31113223", "51113221", "11122315", "31122313", "51122311", "21113314", "41113312", "22131133", "42131131", "11231134", "31231132", "12122134", "32122132", "12131224", "32131222", "21231223", "41231221", "22113133", "42113131", "11213134", "22122223", "42122221", "11222224", "22131313", "42131311", "11231314", "31231312", "12113224", "32113222", "12122314", "32122312", "21222313", "41222311", "22113313", "42113311", "11213314", "31213312", "23131132", "12231133", "32231131", "21331132", "13122133", "33122131", "13131223", "33131221", "11322133", "22231222", "11331223", "31331221", "23113132", "12213133", "23122222", "12222223", "23131312", "12231313", "32231311", "21331312", "13113223", "33113221", "13122313", "33122311", "11313223", "22222312", "11322313", "31322311", "23113312", "12213313", "32213311", "21313312", "24131131", "13231132", "22331131", "11431132", "14122132", "14131222", "12322132", "23231221", "12331222", "21431221", "24113131", "13213132", "24122221", "13222222", "24131311", "11413132", "13231312", "11422222", "22331311", "11431312", "14113222", "14122312", "12313222", "23222311", "12322312", "21422311", "24113311", "13213312", "22313311", "11413312", "14231131", "12431131", "15122131", "15131221", "13322131", "13331221", "11522131", "14213131", "14222221", "12413131", "14231311", "12422221", "12431311", "15113221", "15122311", "13313221", "13322311", "11513221", "11522311", "14213311", "12413311", "21141133", "41141131", "11132134", "31132132", "11141224", "31141222", "21123133", "41123131", "21132223", "41132221", "21141313", "41141311", "11114134", "31114132", "11123224", "31123222", "11132314", "31132312", "21114223", "41114221", "21123313", "41123311", "11114314", "31114312", "22141132", "11241133", "31241131", "12132133", "32132131", "12141223", "32141221", "21241222", "22123132", "11223133", "22132222", "11232223", "22141312", "11241313", "31241311", "12114133", "32114131", "12123223", "32123221", "12132313", "32132311", "21232312", "22114222", "11214223", "22123312", "11223313", "31223311", "12114313", "32114311", "21214312", "23141131", "12241132", "21341131", "13132132", "13141222", "11332132", "22241221", "11341222", "23123131", "12223132", "23132221", "12232222", "23141311", "12241312", "21341311", "13114132", "13123222", "11314132", "13132312", "11323222", "22232311", "11332312", "23114221", "12214222", "23123311", "12223312", "21323311", "13114312", "22214311", "11314312", "13241131", "14132131", "14141221", "12332131", "12341221", "13223131", "13232221", "11423131", "13241311", "11432221", "14114131", "14123221", "12314131", "14132311", "12323221", "12332311", "13214221", "13223311", "11414221", "11423311", "14114311", "12314311", "21151132", "11142133", "31142131", "11151223", "31151221", "21133132", "21142222", "21151312", "11124133", "31124131", "11133223", "31133221", "11142313", "31142311", "21115132", "21124222", "21133312", "11115223", "31115221", "11124313", "31124311", "22151131", "11251132", "12142132", "12151222", "21251221", "22133131", "11233132", "22142221", "11242222", "22151311", "11251312", "12124132", "12133222", "12142312", "21242311", "22115131", "11215132", "22124221", "11224222", "22133311", "11233312", "12115222", "12124312", "21224311", "12251131", "13142131", "13151221", "11342131", "12233131", "12242221", "12251311", "13124131", "13133221", "11324131", "13142311", "11333221", "11342311", "12215131", "12224221", "12233311", "13115221", "13124311", "11315221", "11324311", "21161131", "11152132", "11161222", "21143131", "21152221", "21161311", "11134132", "11143222", "11152312", "21125131", "21134221", "21143311", "11116132", "11125222", "11134312", "12152131", "12161221", "11243131", "11252221", "12134131", "12143221", "12152311", "11225131", "11234221", "11243311", "12116131", "12125221", "12134311", "21111235", "41111233", "61111231", "11111326", "31111324", "51111322", "21111415", "41111413", "61111411", "21211144", "41211142", "22111234", "42111232", "11211235", "31211233", "51211231", "12111325", "32111323", "52111321", "21211324", "41211322", "22111414", "42111412", "11211415", "31211413", "51211411", "22211143", "42211141", "11311144", "31311142", "23111233", "43111231", "12211234", "32211232", "21311233", "41311231", "13111324", "33111322", "22211323", "42211321", "11311324", "31311322", "23111413", "43111411", "12211414", "32211412", "21311413", "41311411", "23211142", "12311143", "32311141", "21411142", "24111232", "13211233", "33211231", "22311232", "11411233", "31411231", "14111323", "34111321", "23211322", "12311323", "32311321", "21411322", "24111412", "13211413", "33211411", "22311412", "11411413", "31411411", "24211141", "13311142", "22411141", "11511142", "25111231", "14211232", "23311231", "12411232", "21511231", "15111322", "24211321", "13311322", "22411321", "11511322", "25111411", "14211412", "23311411", "12411412", "21511411", "14311141", "12511141", "15211231", "13411231", "11611231", "16111321", "14311321", "12511321", "15211411", "13411411", "11611411", "31121143", "51121141", "21112144", "41112142", "21121234", "41121232", "11112235", "31112233", "51112231", "11121325", "31121323", "51121321", "21112324", "41112322", "21121414", "41121412", "11112415", "31112413", "51112411", "12121144", "32121142", "21221143", "41221141", "22112143", "42112141", "11212144", "22121233", "42121231", "11221234", "31221232", "12112234", "32112232", "12121324", "32121322", "21221323", "41221321", "22112323", "42112321", "11212324", "22121413", "42121411", "11221414", "31221412", "12112414", "32112412", "21212413", "41212411", "13121143", "33121141", "22221142", "11321143", "31321141", "23112142", "12212143", "23121232", "12221233", "32221231", "21321232", "13112233", "33112231", "13121323", "33121321", "11312233", "22221322", "11321323", "31321321", "23112322", "12212323", "23121412", "12221413", "32221411", "21321412", "13112413", "33112411", "22212412", "11312413", "31312411", "14121142", "23221141", "12321142", "21421141", "24112141", "13212142", "24121231", "13221232", "11412142", "22321231", "11421232", "14112232", "14121322", "12312232", "23221321", "12321322", "21421321", "24112321", "13212322", "24121411", "13221412", "11412322", "22321411", "11421412", "14112412", "23212411", "12312412", "21412411", "15121141", "13321141", "11521141", "14212141", "14221231", "12412141", "12421231", "15112231", "15121321", "13312231", "13321321", "11512231", "11521321", "14212321", "14221411", "12412321", "12421411", "15112411", "13312411", "11512411", "11131144", "31131142", "21122143", "41122141", "21131233", "41131231", "11113144", "31113142", "11122234", "31122232", "11131324", "31131322", "21113233", "41113231", "21122323", "41122321", "21131413", "41131411", "11113324", "31113322", "11122414", "31122412", "21113413", "41113411", "12131143", "32131141", "21231142", "22122142", "11222143", "22131232", "11231233", "31231231", "12113143", "32113141", "12122233", "32122231", "12131323", "32131321", "21231322", "22113232", "11213233", "22122322", "11222323", "22131412", "11231413", "31231411", "12113323", "32113321", "12122413", "32122411", "21222412", "22113412", "11213413", "31213411", "13131142", "22231141", "11331142", "23122141", "12222142", "23131231", "12231232", "21331231", "13113142", "13122232", "11313142", "13131322", "11322232", "22231321", "11331322", "23113231", "12213232", "23122321", "12222322", "23131411", "12231412", "21331411", "13113322", "13122412", "11313322", "22222411", "11322412", "23113411", "12213412", "21313411", "14131141", "12331141", "13222141", "13231231", "11422141", "11431231", "14113141", "14122231", "12313141", "14131321", "12322231", "12331321", "13213231", "13222321", "11413231", "13231411", "11422321", "11431411", "14113321", "14122411", "12313321", "12322411", "13213411", "11413411", "11141143", "31141141", "21132142", "21141232", "11123143", "31123141", "11132233", "31132231", "11141323", "31141321", "21114142", "21123232", "21132322", "21141412", "11114233", "31114231", "11123323", "31123321", "11132413", "31132411", "21114322", "21123412", "12141142", "21241141", "22132141", "11232142", "22141231", "11241232", "12123142", "12132232", "12141322", "21241321", "22114141", "11214142", "22123231", "11223232", "22132321", "11232322", "22141411", "11241412", "12114232", "12123322", "12132412", "21232411", "22114321", "11214322", "22123411", "11223412", "13141141", "11341141", "12232141", "12241231", "13123141", "13132231", "11323141", "13141321", "11332231", "11341321", "12214141", "12223231", "12232321", "12241411", "13114231", "13123321", "11314231", "13132411", "11323321", "11332411", "12214321", "12223411", "11151142", "21142141", "21151231", "11133142", "11142232", "11151322", "21124141", "21133231", "21142321", "21151411", "11115142", "11124232", "11133322", "11142412", "21115231", "21124321", "21133411", "12151141", "11242141", "11251231", "12133141", "12142231", "12151321", "11224141", "11233231", "11242321", "11251411", "12115141", "12124231", "12133321", "12142411", "11215231", "11224321", "11233411", "11161141", "11143141", "11152231", "11161321", "11125141", "11134231", "11143321", "11152411", "11111245", "31111243", "51111241", "21111334", "41111332", "11111425", "31111423", "51111421", "21111514", "41111512", "31211152", "12111244", "32111242", "21211243", "41211241", "22111333", "42111331", "11211334", "31211332", "12111424", "32111422", "21211423", "41211421", "22111513", "42111511", "11211514", "31211512", "12211153", "32211151", "21311152", "13111243", "33111241", "22211242", "11311243", "31311241", "23111332", "12211333", "32211331", "21311332", "13111423", "33111421", "22211422", "11311423", "31311421", "23111512", "12211513", "32211511", "21311512", "13211152", "22311151", "11411152", "14111242", "23211241", "12311242", "21411241", "24111331", "13211332", "22311331", "11411332", "14111422", "23211421", "12311422", "21411421", "24111511", "13211512", "22311511", "11411512", "14211151", "12411151", "15111241", "13311241", "11511241", "14211331", "12411331", "15111421", "13311421", "11511421", "14211511", "12411511", "21121153", "41121151", "11112154", "31112152", "11121244", "31121242", "21112243", "41112241", "21121333", "41121331", "11112334", "31112332", "11121424", "31121422", "21112423", "41112421", "21121513", "41121511", "11112514", "31112512", "22121152", "11221153", "31221151", "12112153", "32112151", "12121243", "32121241", "21221242", "22112242", "11212243", "22121332", "11221333", "31221331", "12112333", "32112331", "12121423", "32121421", "21221422", "22112422", "11212423", "22121512", "11221513", "31221511", "12112513", "32112511", "21212512", "23121151", "12221152", "21321151", "13112152", "13121242", "11312152", "22221241", "11321242", "23112241", "12212242", "23121331", "12221332", "21321331", "13112332", "13121422", "11312332", "22221421", "11321422", "23112421", "12212422", "23121511", "12221512", "21321511", "13112512", "22212511", "11312512", "13221151", "11421151", "14112151", "14121241", "12312151", "12321241", "13212241", "13221331", "11412241", "11421331", "14112331", "14121421", "12312331", "12321421", "13212421", "13221511", "11412421", "11421511", "14112511", "12312511", "21131152", "11122153", "31122151", "11131243", "31131241", "21113152", "21122242", "21131332", "11113243", "31113241", "11122333", "31122331", "11131423", "31131421", "21113332", "21122422", "21131512", "11113423", "31113421", "11122513", "31122511", "22131151", "11231152", "12122152", "12131242", "21231241", "22113151", "11213152", "22122241", "11222242", "22131331", "11231332", "12113242", "12122332", "12131422", "21231421", "22113331", "11213332", "22122421", "11222422", "22131511", "11231512", "12113422", "12122512", "21222511", "12231151", "13122151", "13131241", "11322151", "11331241", "12213151", "12222241", "12231331", "13113241", "13122331", "11313241", "13131421", "11322331", "11331421", "12213331", "12222421", "12231511", "13113421", "13122511", "11313421", "11322511", "21141151", "11132152", "11141242", "21123151", "21132241", "21141331", "11114152", "11123242", "11132332", "11141422", "21114241", "21123331", "21132421", "21141511", "11114332", "11123422", "11132512", "11241151", "12132151", "12141241", "11223151", "11232241", "11241331", "12114151", "12123241", "12132331", "12141421", "11214241", "11223331", "11232421", "11241511", "12114331", "12123421", "12132511", "11142151", "11151241", "11124151", "11133241", "11142331", "11151421", "11115241", "11124331", "11133421", "11142511", "21111253", "41111251", "11111344", "31111342", "21111433", "41111431", "11111524", "31111522", "21111613", "41111611", "21211162", "22111252", "11211253", "31211251", "12111343", "32111341", "21211342", "22111432", "11211433", "31211431", "12111523", "32111521", "21211522", "22111612", "11211613", "31211611", "22211161", "11311162", "23111251", "12211252", "21311251", "13111342", "22211341", "11311342", "23111431", "12211432", "21311431", "13111522", "22211521", "11311522", "23111611", "12211612", "21311611", "12311161", "13211251", "11411251", "14111341", "12311341", "13211431", "11411431", "14111521", "12311521", "13211611", "11411611", "31121161", "21112162", "21121252", "11112253", "31112251", "11121343", "31121341", "21112342", "21121432", "11112433", "31112431", "11121523", "31121521", "21112522", "21121612", "12121162", "21221161", "22112161", "11212162", "22121251", "11221252", "12112252", "12121342", "21221341", "22112341", "11212342", "22121431", "11221432", "12112432", "12121522", "21221521", "22112521", "11212522", "22121611", "11221612", "13121161", "11321161", "12212161", "12221251", "13112251", "13121341", "11312251", "11321341", "12212341", "12221431", "13112431", "13121521", "11312431", "11321521", "12212521", "12221611", "11131162", "21122161", "21131251", "11113162"])]); //#16517
        $_.parity = $a(["1001", "0101", "1100", "0011", "1010", "0110", "1111", "0000"]); //#16521
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_code49.$ctx[id] = $_[id]); //#16521
        bwipp_code49.__16522__ = 1; //#16521
        $_ = Object.getPrototypeOf($_); //#16521
    } //#16521
    $_.rowbits = $a($_.r); //#16525
    for (var _6H = 0, _6G = $f($_.r - 1); _6H <= _6G; _6H += 1) { //#16545
        $_.i = _6H; //#16527
        $k[$j++] = 'p'; //#16528
        if ($_.i != $f($_.r - 1)) { //#16528
            $k[$j++] = $get($_.parity, $_.i); //#16528
        } else { //#16528
            $k[$j++] = "0000"; //#16528
        } //#16528
        var _6N = $k[--$j]; //#16528
        $_[$k[--$j]] = _6N; //#16528
        $_.ccrow = $geti($_.ccs, $_.i * 8, 8); //#16529
        $k[$j++] = Infinity; //#16530
        for (var _6S = 0; _6S <= 7; _6S += 2) { //#16531
            $aload($geti($_.ccrow, _6S, 2)); //#16531
            var _6V = $k[--$j]; //#16531
            var _6W = $k[--$j]; //#16531
            $k[$j++] = $f(_6V + (_6W * 49)); //#16531
        } //#16531
        $_.scrow = $a(); //#16531
        $k[$j++] = Infinity; //#16533
        $k[$j++] = 10; //#16538
        $k[$j++] = 1; //#16538
        $k[$j++] = 1; //#16538
        for (var _6Y = 0; _6Y <= 3; _6Y += 1) { //#16538
            $_.j = _6Y; //#16536
            $forall($get($get($_.patterns, $f($get($_.p, $_.j) - 48)), $get($_.scrow, $_.j)), function() { //#16537
                var _6i = $k[--$j]; //#16537
                $k[$j++] = $f(_6i - 48); //#16537
            }); //#16537
        } //#16537
        $k[$j++] = 4; //#16539
        $k[$j++] = 1; //#16539
        $_.sbs = $a(); //#16539
        $k[$j++] = Infinity; //#16541
        var _6k = $_.sbs; //#16542
        $k[$j++] = 1; //#16542
        for (var _6l = 0, _6m = _6k.length; _6l < _6m; _6l++) { //#16542
            var _6o = $k[--$j]; //#16542
            var _6p = (_6o == 0) ? 1 : 0; //#16542
            $k[$j++] = _6o; //#16542
            for (var _6q = 0, _6r = $get(_6k, _6l); _6q < _6r; _6q++) { //#16542
                $k[$j++] = _6p //#16542
            } //#16542
        } //#16542
        $astore($a($counttomark() - 1)); //#16543
        var _6u = $k[--$j]; //#16543
        var _6v = $k[--$j]; //#16543
        $k[$j++] = _6u; //#16543
        $k[$j++] = _6v; //#16543
        $j--; //#16543
        var _6w = $k[--$j]; //#16543
        var _6x = $k[--$j]; //#16543
        $k[$j++] = _6w; //#16543
        $k[$j++] = _6x; //#16543
        $j--; //#16543
        $k[$j++] = $_.rowbits; //#16544
        $k[$j++] = $_.i; //#16544
        $r(3, -1); //#16544
        var _70 = $k[--$j]; //#16544
        var _71 = $k[--$j]; //#16544
        $put($k[--$j], _71, _70); //#16544
    } //#16544
    $k[$j++] = Infinity; //#16548
    for (var _74 = 0, _75 = 81 * $_.sepheight; _74 < _75; _74++) { //#16549
        $k[$j++] = 1; //#16549
    } //#16549
    for (var _78 = 0, _77 = $f($_.r - 2); _78 <= _77; _78 += 1) { //#16554
        $_.i = _78; //#16551
        for (var _7A = 0, _7B = $_.rowheight; _7A < _7B; _7A++) { //#16552
            $aload($get($_.rowbits, $_.i)); //#16552
        } //#16552
        for (var _7G = 0, _7H = $_.sepheight; _7G < _7H; _7G++) { //#16553
            for (var _7I = 0, _7J = 10; _7I < _7J; _7I++) { //#16553
                $k[$j++] = 0; //#16553
            } //#16553
            for (var _7K = 0, _7L = 70; _7K < _7L; _7K++) { //#16553
                $k[$j++] = 1; //#16553
            } //#16553
            $k[$j++] = 0; //#16553
        } //#16553
    } //#16553
    for (var _7N = 0, _7O = $_.rowheight; _7N < _7O; _7N++) { //#16555
        $aload($get($_.rowbits, $f($_.r - 1))); //#16555
    } //#16555
    for (var _7T = 0, _7U = 81 * $_.sepheight; _7T < _7U; _7T++) { //#16556
        $k[$j++] = 1; //#16556
    } //#16556
    $_.pixs = $a(); //#16556
    var _7a = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", 81],
        ["pixy", ~~($_.pixs.length / 81)],
        ["height", (~~($_.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $_.options]
    ]); //#16567
    $k[$j++] = _7a; //#16570
    if (!$_.dontdraw) { //#16570
        bwipp_renmatrix(); //#16570
    } //#16570
    $_ = Object.getPrototypeOf($_); //#16572
    $_ = Object.getPrototypeOf($_); //#16574
} //bwipp_code49
function bwipp_flattermarken() {
    $_ = Object.create($_); //#16868
    $_.dontdraw = false; //#16871
    $_.includetext = false; //#16872
    $_.textfont = "OCR-B"; //#16873
    $_.textsize = 10; //#16874
    $_.textyoffset = -8; //#16875
    $_.height = 0.3; //#16876
    $k[$j++] = $_; //#16878
    bwipp_processoptions(); //#16878
    $_.options = $k[--$j]; //#16878
    $_.barcode = $k[--$j]; //#16879
    bwipp_loadctx(bwipp_flattermarken); //#16881
    $forall($_.barcode, function() { //#16888
        var _3 = $k[--$j]; //#16885
        if ((_3 < 48) || (_3 > 57)) { //#16887
            $k[$j++] = 'bwipp.flattermarkenBadCharacter#16886'; //#16886
            $k[$j++] = "Flattermarken must contain only digits"; //#16886
            bwipp_raiseerror(); //#16886
        } //#16886
    }); //#16886
    if (!bwipp_flattermarken.__16899__) { //#16899
        $_ = Object.create($_); //#16899
        $_.encs = $a(["0018", "0117", "0216", "0315", "0414", "0513", "0612", "0711", "0810", "0900"]); //#16895
        $_.barchars = "1234567890"; //#16898
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_flattermarken.$ctx[id] = $_[id]); //#16898
        bwipp_flattermarken.__16899__ = 1; //#16898
        $_ = Object.getPrototypeOf($_); //#16898
    } //#16898
    $_.barlen = $_.barcode.length; //#16901
    $_.sbs = $s($_.barlen * 4); //#16903
    $_.txt = $a($_.barlen); //#16904
    for (var _D = 0, _C = $_.barlen - 1; _D <= _C; _D += 1) { //#16916
        $_.i = _D; //#16907
        $search($_.barchars, $geti($_.barcode, $_.i, 1)); //#16909
        $j--; //#16910
        $_.indx = $k[--$j].length; //#16911
        $j -= 2; //#16912
        $_.enc = $get($_.encs, $_.indx); //#16913
        $puti($_.sbs, $_.i * 4, $_.enc); //#16914
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), $_.i * 9, $_.textyoffset, $_.textfont, $_.textsize])); //#16915
    } //#16915
    $k[$j++] = Infinity; //#16919
    $k[$j++] = Infinity; //#16921
    var _Z = $_.sbs; //#16921
    for (var _a = 0, _b = _Z.length; _a < _b; _a++) { //#16921
        $k[$j++] = $get(_Z, _a) - 48; //#16921
    } //#16921
    var _d = $a(); //#16921
    $k[$j++] = Infinity; //#16922
    for (var _f = 0, _g = ~~(($_.sbs.length + 1) / 2); _f < _g; _f++) { //#16922
        $k[$j++] = $_.height; //#16922
    } //#16922
    var _i = $a(); //#16922
    $k[$j++] = Infinity; //#16923
    for (var _k = 0, _l = ~~(($_.sbs.length + 1) / 2); _k < _l; _k++) { //#16923
        $k[$j++] = 0; //#16923
    } //#16923
    var _m = $a(); //#16923
    $k[$j++] = 'ren'; //#16925
    $k[$j++] = 'renlinear'; //#16925
    $k[$j++] = 'sbs'; //#16925
    $k[$j++] = _d; //#16925
    $k[$j++] = 'bhs'; //#16925
    $k[$j++] = _i; //#16925
    $k[$j++] = 'bbs'; //#16925
    $k[$j++] = _m; //#16925
    $k[$j++] = 'txt'; //#16925
    $k[$j++] = $_.txt; //#16925
    $k[$j++] = 'opt'; //#16925
    $k[$j++] = $_.options; //#16925
    var _p = $d(); //#16925
    $k[$j++] = _p; //#16928
    if (!$_.dontdraw) { //#16928
        bwipp_renlinear(); //#16928
    } //#16928
    $_ = Object.getPrototypeOf($_); //#16930
    $_ = Object.getPrototypeOf($_); //#16932
} //bwipp_flattermarken
function bwipp_raw() {
    $_ = Object.create($_); //#16960
    $_.dontdraw = false; //#16963
    $_.height = 1; //#16964
    $k[$j++] = $_; //#16966
    bwipp_processoptions(); //#16966
    $_.options = $k[--$j]; //#16966
    $_.barcode = $k[--$j]; //#16967
    $forall($_.barcode, function() { //#16974
        var _3 = $k[--$j]; //#16971
        if ((_3 < 49) || (_3 > 57)) { //#16973
            $k[$j++] = 'bwipp.rawBadCharacter#16972'; //#16972
            $k[$j++] = "Raw must contain only digits 1 to 9"; //#16972
            bwipp_raiseerror(); //#16972
        } //#16972
    }); //#16972
    $k[$j++] = Infinity; //#16977
    $k[$j++] = Infinity; //#16979
    $forall($_.barcode, function() { //#16979
        var _5 = $k[--$j]; //#16979
        $k[$j++] = $f(_5 - 48); //#16979
    }); //#16979
    var _6 = $a(); //#16979
    $k[$j++] = Infinity; //#16980
    for (var _8 = 0, _9 = ~~(($_.barcode.length + 1) / 2); _8 < _9; _8++) { //#16980
        $k[$j++] = $_.height; //#16980
    } //#16980
    var _B = $a(); //#16980
    $k[$j++] = Infinity; //#16981
    for (var _D = 0, _E = ~~(($_.barcode.length + 1) / 2); _D < _E; _D++) { //#16981
        $k[$j++] = 0; //#16981
    } //#16981
    var _F = $a(); //#16981
    $k[$j++] = 'ren'; //#16982
    $k[$j++] = 'renlinear'; //#16982
    $k[$j++] = 'sbs'; //#16982
    $k[$j++] = _6; //#16982
    $k[$j++] = 'bhs'; //#16982
    $k[$j++] = _B; //#16982
    $k[$j++] = 'bbs'; //#16982
    $k[$j++] = _F; //#16982
    $k[$j++] = 'opt'; //#16982
    $k[$j++] = $_.options; //#16982
    var _H = $d(); //#16982
    $k[$j++] = _H; //#16985
    if (!$_.dontdraw) { //#16985
        bwipp_renlinear(); //#16985
    } //#16985
    $_ = Object.getPrototypeOf($_); //#16987
} //bwipp_raw
function bwipp_daft() {
    $_ = Object.create($_); //#17015
    $_.dontdraw = false; //#17018
    $_.height = 0.175; //#17019
    $k[$j++] = $_; //#17021
    bwipp_processoptions(); //#17021
    $_.options = $k[--$j]; //#17021
    $_.barcode = $k[--$j]; //#17022
    if ($eq($_.barcode, "")) { //#17026
        $k[$j++] = 'bwipp.daftEmptyData#17025'; //#17025
        $k[$j++] = "The data must not be empty"; //#17025
        bwipp_raiseerror(); //#17025
    } //#17025
    $forall($_.barcode, function() { //#17032
        var _4 = $k[--$j]; //#17029
        if ((_4 != 68) && ((_4 != 65) && ((_4 != 70) && (_4 != 84)))) { //#17031
            $k[$j++] = 'bwipp.daftBadCharacter#17030'; //#17030
            $k[$j++] = "DAFT must contain only characters D, A, F and T"; //#17030
            bwipp_raiseerror(); //#17030
        } //#17030
    }); //#17030
    $_.barlen = $_.barcode.length; //#17034
    $_.bbs = $a($_.barlen); //#17036
    $_.bhs = $a($_.barlen); //#17037
    for (var _C = 0, _B = $_.barlen - 1; _C <= _B; _C += 1) { //#17057
        $_.i = _C; //#17039
        $_.enc = $geti($_.barcode, $_.i, 1); //#17040
        if ($eq($_.enc, "D")) { //#17044
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#17042
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#17043
        } //#17043
        if ($eq($_.enc, "A")) { //#17048
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#17046
            $put($_.bhs, $_.i, (5 * $_.height) / 8); //#17047
        } //#17047
        if ($eq($_.enc, "F")) { //#17052
            $put($_.bbs, $_.i, (0 * $_.height) / 8); //#17050
            $put($_.bhs, $_.i, (8 * $_.height) / 8); //#17051
        } //#17051
        if ($eq($_.enc, "T")) { //#17056
            $put($_.bbs, $_.i, (3 * $_.height) / 8); //#17054
            $put($_.bhs, $_.i, (2 * $_.height) / 8); //#17055
        } //#17055
    } //#17055
    $k[$j++] = Infinity; //#17060
    var _i = $_.bbs; //#17062
    var _j = $_.bhs; //#17063
    $k[$j++] = Infinity; //#17064
    for (var _l = 0, _m = $_.bhs.length - 1; _l < _m; _l++) { //#17064
        $k[$j++] = 1.44; //#17064
        $k[$j++] = 1.872; //#17064
    } //#17064
    $k[$j++] = 1.44; //#17064
    var _n = $a(); //#17064
    $k[$j++] = 'ren'; //#17065
    $k[$j++] = 'renlinear'; //#17065
    $k[$j++] = 'bbs'; //#17065
    $k[$j++] = _i; //#17065
    $k[$j++] = 'bhs'; //#17065
    $k[$j++] = _j; //#17065
    $k[$j++] = 'sbs'; //#17065
    $k[$j++] = _n; //#17065
    $k[$j++] = 'opt'; //#17065
    $k[$j++] = $_.options; //#17065
    var _p = $d(); //#17065
    $k[$j++] = _p; //#17068
    if (!$_.dontdraw) { //#17068
        bwipp_renlinear(); //#17068
    } //#17068
    $_ = Object.getPrototypeOf($_); //#17070
} //bwipp_daft
function bwipp_symbol() {
    $_ = Object.create($_); //#17101
    $_.dontdraw = false; //#17104
    $k[$j++] = $_; //#17106
    bwipp_processoptions(); //#17106
    $_.options = $k[--$j]; //#17106
    var _1 = $k[--$j]; //#17107
    $_.barcode = _1; //#17107
    bwipp_loadctx(bwipp_symbol); //#17109
    if (!bwipp_symbol.__17145__) { //#17145
        $_ = Object.create($_); //#17145
        $_.fimasbs = $a([2.25, 2.25, 2.25, 11.25, 2.25, 11.25, 2.25, 2.25, 2.25]); //#17113
        $k[$j++] = Infinity; //#17114
        for (var _4 = 0, _5 = (~~($_.fimasbs.length / 2)) + 1; _4 < _5; _4++) { //#17114
            $k[$j++] = 0.625; //#17114
        } //#17114
        $_.fimabhs = $a(); //#17114
        $k[$j++] = Infinity; //#17115
        for (var _8 = 0, _9 = (~~($_.fimasbs.length / 2)) + 1; _8 < _9; _8++) { //#17115
            $k[$j++] = 0; //#17115
        } //#17115
        $_.fimabbs = $a(); //#17115
        $_.fimbsbs = $a([2.25, 6.75, 2.25, 2.25, 2.25, 6.25, 2.25, 2.25, 2.25, 6.75, 2.25]); //#17117
        $k[$j++] = Infinity; //#17118
        for (var _D = 0, _E = (~~($_.fimbsbs.length / 2)) + 1; _D < _E; _D++) { //#17118
            $k[$j++] = 0.625; //#17118
        } //#17118
        $_.fimbbhs = $a(); //#17118
        $k[$j++] = Infinity; //#17119
        for (var _H = 0, _I = (~~($_.fimbsbs.length / 2)) + 1; _H < _I; _H++) { //#17119
            $k[$j++] = 0; //#17119
        } //#17119
        $_.fimbbbs = $a(); //#17119
        $_.fimcsbs = $a([2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25]); //#17121
        $k[$j++] = Infinity; //#17122
        for (var _M = 0, _N = (~~($_.fimcsbs.length / 2)) + 1; _M < _N; _M++) { //#17122
            $k[$j++] = 0.625; //#17122
        } //#17122
        $_.fimcbhs = $a(); //#17122
        $k[$j++] = Infinity; //#17123
        for (var _Q = 0, _R = (~~($_.fimcsbs.length / 2)) + 1; _Q < _R; _Q++) { //#17123
            $k[$j++] = 0; //#17123
        } //#17123
        $_.fimcbbs = $a(); //#17123
        $_.fimdsbs = $a([2.25, 2.25, 2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25, 2.25, 2.25]); //#17125
        $k[$j++] = Infinity; //#17126
        for (var _V = 0, _W = (~~($_.fimdsbs.length / 2)) + 1; _V < _W; _V++) { //#17126
            $k[$j++] = 0.625; //#17126
        } //#17126
        $_.fimdbhs = $a(); //#17126
        $k[$j++] = Infinity; //#17127
        for (var _Z = 0, _a = (~~($_.fimdsbs.length / 2)) + 1; _Z < _a; _Z++) { //#17127
            $k[$j++] = 0; //#17127
        } //#17127
        $_.fimdbbs = $a(); //#17127
        $_.fimesbs = $a([2.25, 6.75, 2.25, 15.75, 2.25, 6.75, 2.25]); //#17129
        $k[$j++] = Infinity; //#17130
        for (var _e = 0, _f = (~~($_.fimesbs.length / 2)) + 1; _e < _f; _e++) { //#17130
            $k[$j++] = 0.625; //#17130
        } //#17130
        $_.fimebhs = $a(); //#17130
        $k[$j++] = Infinity; //#17131
        for (var _i = 0, _j = (~~($_.fimesbs.length / 2)) + 1; _i < _j; _i++) { //#17131
            $k[$j++] = 0; //#17131
        } //#17131
        $_.fimebbs = $a(); //#17131
        $k[$j++] = Infinity; //#17133
        for (var _l = 0, _m = 100; _l < _m; _l++) { //#17133
            $k[$j++] = 1; //#17133
            $k[$j++] = 1; //#17133
        } //#17133
        $k[$j++] = 1; //#17133
        $_.zebrasbs = $a(); //#17133
        $k[$j++] = Infinity; //#17134
        for (var _p = 0, _q = (~~($_.zebrasbs.length / 2)) + 1; _p < _q; _p++) { //#17134
            $k[$j++] = 1; //#17134
        } //#17134
        $_.zebrabhs = $a(); //#17134
        $k[$j++] = Infinity; //#17135
        for (var _t = 0, _u = (~~($_.zebrasbs.length / 2)) + 1; _t < _u; _t++) { //#17135
            $k[$j++] = 0; //#17135
        } //#17135
        $_.zebrabbs = $a(); //#17135
        $_.checksize = 199; //#17137
        $k[$j++] = Infinity; //#17138
        var _w = $_.checksize; //#17138
        for (var _x = 0, _y = ~~((_w * _w) / 2); _x < _y; _x++) { //#17138
            $k[$j++] = 1; //#17138
            $k[$j++] = 0; //#17138
        } //#17138
        $k[$j++] = 1; //#17138
        $_.checkpixs = $a(); //#17138
        var _10 = new Map([
            ["renlinear", bwipp_renlinear],
            ["renmatrix", bwipp_renmatrix]
        ]); //#17142
        $_.renmap = _10; //#17143
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_symbol.$ctx[id] = $_[id]); //#17143
        bwipp_symbol.__17145__ = 1; //#17143
        $_ = Object.getPrototypeOf($_); //#17143
    } //#17143
    var _1W = new Map([
        ["fima", function() {
            var _15 = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimasbs],
                ["bhs", $_.fimabhs],
                ["bbs", $_.fimabbs]
            ]); //#17148
            $k[$j++] = _15; //#17148
        }],
        ["fimb", function() {
            var _19 = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimbsbs],
                ["bhs", $_.fimbbhs],
                ["bbs", $_.fimbbbs]
            ]); //#17149
            $k[$j++] = _19; //#17149
        }],
        ["fimc", function() {
            var _1D = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimcsbs],
                ["bhs", $_.fimcbhs],
                ["bbs", $_.fimcbbs]
            ]); //#17150
            $k[$j++] = _1D; //#17150
        }],
        ["fimd", function() {
            var _1H = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimdsbs],
                ["bhs", $_.fimdbhs],
                ["bbs", $_.fimdbbs]
            ]); //#17151
            $k[$j++] = _1H; //#17151
        }],
        ["fime", function() {
            var _1L = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.fimesbs],
                ["bhs", $_.fimebhs],
                ["bbs", $_.fimebbs]
            ]); //#17152
            $k[$j++] = _1L; //#17152
        }],
        ["zebra", function() {
            var _1P = new Map([
                ["ren", 'renlinear'],
                ["sbs", $_.zebrasbs],
                ["bhs", $_.zebrabhs],
                ["bbs", $_.zebrabbs]
            ]); //#17153
            $k[$j++] = _1P; //#17153
        }],
        ["check", function() {
            var _1V = new Map([
                ["ren", 'renmatrix'],
                ["pixs", $_.checkpixs],
                ["pixx", $_.checksize],
                ["pixy", $_.checksize],
                ["height", $_.checksize / 72],
                ["width", $_.checksize / 72]
            ]); //#17154
            $k[$j++] = _1V; //#17154
        }]
    ]); //#17154
    $_.symbols = _1W; //#17155
    var _1Z = $get($_.symbols, $_.barcode) !== undefined; //#17158
    if (!_1Z) { //#17160
        $k[$j++] = 'bwipp.symbolUnknownSymbol#17159'; //#17159
        $k[$j++] = "Unknown symbol name provided"; //#17159
        bwipp_raiseerror(); //#17159
    } //#17159
    if ($get($_.symbols, $_.barcode)() === true) {
        return true;
    } //#17162
    var _1d = $k[--$j]; //#17163
    $put(_1d, 'opt', $_.options); //#17163
    $k[$j++] = _1d; //#17165
    if (!$_.dontdraw) { //#17165
        var _1g = $k[--$j]; //#17165
        $k[$j++] = _1g; //#17165
        if ($get($_.renmap, $get(_1g, 'ren'))() === true) {
            return true;
        } //#17165
    } //#17165
    $_ = Object.getPrototypeOf($_); //#17167
    $_ = Object.getPrototypeOf($_); //#17169
} //bwipp_symbol
function bwipp_pdf417() {
    $_ = Object.create($_); //#17200
    $_.dontdraw = false; //#17203
    $_.compact = false; //#17204
    $_.eclevel = -1; //#17205
    $_.fixedeclevel = false; //#17206
    $_.columns = 0; //#17207
    $_.rows = 0; //#17208
    $_.rowmult = 3; //#17209
    $_.ccc = false; //#17210
    $_.raw = false; //#17211
    $_.parse = false; //#17212
    $_.parsefnc = false; //#17213
    $k[$j++] = $_; //#17215
    bwipp_processoptions(); //#17215
    $_.options = $k[--$j]; //#17215
    $_.barcode = $k[--$j]; //#17216
    if ($eq($_.barcode, "")) { //#17220
        $k[$j++] = 'bwipp.pdf417emptyData#17219'; //#17219
        $k[$j++] = "The data must not be empty"; //#17219
        bwipp_raiseerror(); //#17219
    } //#17219
    if (($_.eclevel != -1) && (($_.eclevel < 0) || ($_.eclevel > 8))) { //#17224
        $k[$j++] = 'bwipp.pdf417InvalidErrorCorrectionLevel#17223'; //#17223
        $k[$j++] = "Valid error correction levels are 0 to 8"; //#17223
        bwipp_raiseerror(); //#17223
    } //#17223
    if ($_.ccc && $_.raw) { //#17228
        $k[$j++] = 'bwipp.pdf417cccAndRaw#17227'; //#17227
        $k[$j++] = "Cannot combine ccc and raw"; //#17227
        bwipp_raiseerror(); //#17227
    } //#17227
    if ($_.ccc && $_.compact) { //#17232
        $k[$j++] = 'bwipp.pdf417cccAndCompact#17231'; //#17231
        $k[$j++] = "Cannot combine ccc and compact"; //#17231
        bwipp_raiseerror(); //#17231
    } //#17231
    if (($_.rows != 0) && (($_.rows < 3) || ($_.rows > 90))) { //#17236
        $k[$j++] = 'bwipp.pdf417invalidRows#17235'; //#17235
        $k[$j++] = "There must be between 3 and 90 rows"; //#17235
        bwipp_raiseerror(); //#17235
    } //#17235
    if (($_.columns != 0) && (($_.columns < 1) || ($_.columns > 30))) { //#17240
        $k[$j++] = 'bwipp.pdf417invalidColumns#17239'; //#17239
        $k[$j++] = "There must be between 1 and 30 columns"; //#17239
        bwipp_raiseerror(); //#17239
    } //#17239
    if ($_.rowmult <= 0) { //#17244
        $k[$j++] = 'bwipp.pdf417badRowMult#17243'; //#17243
        $k[$j++] = "The row multiplier must be greater than zero"; //#17243
        bwipp_raiseerror(); //#17243
    } //#17243
    bwipp_loadctx(bwipp_pdf417); //#17246
    if (!bwipp_pdf417.__17337__) { //#17337
        $_ = Object.create($_); //#17337
        $_.T = 0; //#17250
        $_.N = 1; //#17250
        $_.B = 2; //#17250
        $_.A = 0; //#17251
        $_.L = 1; //#17251
        $_.M = 2; //#17251
        $_.P = 3; //#17251
        $_.tl = -1; //#17254
        $_.nl = -2; //#17254
        $_.bl = -3; //#17254
        $_.bl6 = -4; //#17254
        $_.bs = -5; //#17254
        $_.al = -6; //#17257
        $_.ll = -7; //#17257
        $_.ml = -8; //#17257
        $_.pl = -9; //#17257
        $_.as = -10; //#17257
        $_.ps = -11; //#17257
        $_.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $_.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$_.ll, $_.as, $_.ll, "}"]), $a([$_.ml, $_.ml, $_.al, "'"]), $a([$_.ps, $_.ps, $_.ps, $_.al])]); //#17292
        $_.charvals = $a([new Map, new Map, new Map, new Map]); //#17295
        $_.alltext = new Map; //#17296
        for (var _10 = 0, _z = $_.charmaps.length - 1; _10 <= _z; _10 += 1) { //#17306
            $_.i = _10; //#17298
            $_.encs = $get($_.charmaps, $_.i); //#17299
            for (var _14 = 0; _14 <= 3; _14 += 1) { //#17305
                $_.j = _14; //#17301
                var _17 = $get($_.encs, $_.j); //#17302
                $k[$j++] = _17; //#17302
                if ($eq($type(_17), 'stringtype')) { //#17302
                    var _1A = $get($k[--$j], 0); //#17302
                    $k[$j++] = _1A; //#17302
                } //#17302
                var _1B = $k[--$j]; //#17303
                $put($get($_.charvals, $_.j), _1B, $_.i); //#17303
                $put($_.alltext, _1B, -1); //#17304
            } //#17304
        } //#17304
        $_.e = 10000; //#17308
        $_.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#17316
        $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.ml, $_.al]), $a([]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.al]), $a([$_.ll]), $a([]), $a([$_.pl])]), $a([$a([$_.al]), $a([$_.al, $_.ll]), $a([$_.al, $_.ml]), $a([])])]); //#17324
        $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 1]), $a([1, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, $_.e])]); //#17332
        $k[$j++] = Infinity; //#17334
        $k[$j++] = $_.tl; //#17335
        $k[$j++] = 900; //#17335
        $k[$j++] = $_.bl; //#17335
        $k[$j++] = 901; //#17335
        $k[$j++] = $_.bl6; //#17335
        $k[$j++] = 924; //#17335
        $k[$j++] = $_.nl; //#17335
        $k[$j++] = 902; //#17335
        $k[$j++] = $_.bs; //#17335
        $k[$j++] = 913; //#17335
        $_.latchcws = $d(); //#17336
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_pdf417.$ctx[id] = $_[id]); //#17336
        bwipp_pdf417.__17337__ = 1; //#17336
        $_ = Object.getPrototypeOf($_); //#17336
    } //#17336
    if ($_.raw) { //#17358
        $_.datcws = $a($_.barcode.length); //#17341
        $_.i = 0; //#17342
        $_.j = 0; //#17342
        for (;;) { //#17353
            if ($_.i >= ($_.barcode.length - 3)) { //#17344
                break; //#17344
            } //#17344
            if ($get($_.barcode, $_.i) != 94) { //#17345
                break; //#17345
            } //#17345
            var _2W = $geti($_.barcode, $_.i + 1, 3); //#17346
            $k[$j++] = _2W; //#17348
            $k[$j++] = false; //#17348
            for (var _2X = 0, _2Y = _2W.length; _2X < _2Y; _2X++) { //#17348
                var _2Z = $get(_2W, _2X); //#17348
                if ((_2Z < 48) || (_2Z > 57)) { //#17347
                    $j--; //#17347
                    $k[$j++] = true; //#17347
                } //#17347
            } //#17347
            if ($k[--$j]) { //#17348
                $j--; //#17348
                break; //#17348
            } //#17348
            $_.cw = $cvi($k[--$j]); //#17349
            $put($_.datcws, $_.j, $_.cw); //#17350
            $_.i = $_.i + 4; //#17351
            $_.j = $_.j + 1; //#17352
        } //#17352
        if ($_.i != $_.barcode.length) { //#17356
            $k[$j++] = 'bwipp.pdf417badRawFormat#17355'; //#17355
            $k[$j++] = "raw data must be formatted as ^NNN"; //#17355
            bwipp_raiseerror(); //#17355
        } //#17355
        $_.datcws = $geti($_.datcws, 0, $_.j); //#17357
    } //#17357
    $_.encb = function() {
        $_.in = $k[--$j]; //#17361
        $_.inlen = $_.in.length; //#17362
        $_.out = $a(((~~($_.inlen / 6)) * 5) + ($_.inlen % 6)); //#17363
        for (var _2t = 0, _2s = (~~($_.inlen / 6)) - 1; _2t <= _2s; _2t += 1) { //#17386
            $_.k = _2t; //#17365
            $k[$j++] = Infinity; //#17366
            $aload($geti($_.in, $_.k * 6, 3)); //#17366
            $_.msbs = $a(); //#17366
            $k[$j++] = Infinity; //#17367
            $aload($_.msbs); //#17368
            var _2z = $k[--$j]; //#17368
            var _30 = $k[--$j]; //#17368
            var _31 = $k[--$j]; //#17368
            $k[$j++] = $f(($f(_2z + (_30 * 256))) + (_31 * 65536)); //#17369
            for (var _32 = 0, _33 = 3; _32 < _33; _32++) { //#17369
                var _34 = $k[--$j]; //#17369
                $k[$j++] = _34 % 900; //#17369
                $k[$j++] = ~~(_34 / 900); //#17369
            } //#17369
            $_.mscs = $a(); //#17369
            $k[$j++] = Infinity; //#17371
            $aload($geti($_.in, ($_.k * 6) + 3, 3)); //#17371
            $_.lsbs = $a(); //#17371
            $k[$j++] = Infinity; //#17372
            $aload($_.lsbs); //#17373
            var _3B = $k[--$j]; //#17373
            var _3C = $k[--$j]; //#17373
            var _3D = $k[--$j]; //#17373
            $k[$j++] = $f(($f(_3B + (_3C * 256))) + (_3D * 65536)); //#17374
            for (var _3E = 0, _3F = 3; _3E < _3F; _3E++) { //#17374
                var _3G = $k[--$j]; //#17374
                $k[$j++] = _3G % 900; //#17374
                $k[$j++] = ~~(_3G / 900); //#17374
            } //#17374
            $_.lscs = $a(); //#17374
            var _3J = $get($_.lscs, 0); //#17376
            var _3L = $get($_.mscs, 0); //#17376
            $put($_.out, ($_.k * 5) + 4, ($f(_3J + (_3L * 316))) % 900); //#17377
            var _3P = $get($_.lscs, 1); //#17378
            var _3R = $get($_.mscs, 0); //#17378
            var _3T = $get($_.mscs, 1); //#17378
            $put($_.out, ($_.k * 5) + 3, ($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) % 900); //#17379
            var _3X = $get($_.lscs, 2); //#17380
            var _3Z = $get($_.mscs, 0); //#17380
            var _3b = $get($_.mscs, 1); //#17380
            var _3d = $get($_.mscs, 2); //#17380
            $put($_.out, ($_.k * 5) + 2, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) / 900)) + _3X)) + (_3Z * 20))) + (_3b * 641))) + (_3d * 316))) % 900); //#17381
            var _3h = $get($_.lscs, 3); //#17382
            var _3j = $get($_.mscs, 1); //#17382
            var _3l = $get($_.mscs, 2); //#17382
            $put($_.out, ($_.k * 5) + 1, ($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) / 900)) + _3X)) + (_3Z * 20))) + (_3b * 641))) + (_3d * 316))) / 900)) + _3h)) + (_3j * 20))) + (_3l * 641))) % 900); //#17383
            $put($_.out, $_.k * 5, ($f((~~(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3J + (_3L * 316))) / 900)) + _3P)) + (_3R * 641))) + (_3T * 316))) / 900)) + _3X)) + (_3Z * 20))) + (_3b * 641))) + (_3d * 316))) / 900)) + _3h)) + (_3j * 20))) + (_3l * 641))) / 900)) + ($get($_.mscs, 2) * 20))) % 900); //#17385
        } //#17385
        $_.rem = $_.inlen % 6; //#17387
        if ($_.rem != 0) { //#17392
            $k[$j++] = $_.out; //#17390
            $k[$j++] = $_.out.length - $_.rem; //#17390
            $k[$j++] = Infinity; //#17390
            $aload($geti($_.in, $_.inlen - $_.rem, $_.rem)); //#17390
            var _42 = $a(); //#17390
            var _43 = $k[--$j]; //#17391
            $puti($k[--$j], _43, _42); //#17391
        } //#17391
        $k[$j++] = $_.out; //#17393
    }; //#17393
    if ($_.ccc) { //#17402
        $_.barlen = $_.barcode.length; //#17397
        $_.datcws = $a((((~~($_.barlen / 6)) * 5) + ($_.barlen % 6)) + 2); //#17398
        $put($_.datcws, 0, 920); //#17399
        var _4E = (($_.barlen % 6) == 0) ? 924 : 901; //#17400
        $put($_.datcws, 1, _4E); //#17400
        $k[$j++] = $_.datcws; //#17401
        $k[$j++] = 2; //#17401
        $k[$j++] = Infinity; //#17401
        $forall($_.barcode); //#17401
        var _4H = $a(); //#17401
        $k[$j++] = _4H; //#17401
        $_.encb(); //#17401
        var _4I = $k[--$j]; //#17401
        var _4J = $k[--$j]; //#17401
        $puti($k[--$j], _4J, _4I); //#17401
    } //#17401
    if ((!$_.raw) && (!$_.ccc)) { //#17753
        var _4P = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true]
        ]); //#17410
        $_.fncvals = _4P; //#17412
        $k[$j++] = 'msg'; //#17413
        $k[$j++] = $_.barcode; //#17413
        $k[$j++] = $_.fncvals; //#17413
        bwipp_parseinput(); //#17413
        var _4S = $k[--$j]; //#17413
        $_[$k[--$j]] = _4S; //#17413
        $_.msglen = $_.msg.length; //#17414
        $k[$j++] = Infinity; //#17417
        for (var _4W = 0, _4X = $_.msglen; _4W < _4X; _4W++) { //#17417
            $k[$j++] = 0; //#17417
        } //#17417
        $k[$j++] = 0; //#17417
        $_.numdigits = $a(); //#17417
        $k[$j++] = Infinity; //#17418
        for (var _4a = 0, _4b = $_.msglen; _4a < _4b; _4a++) { //#17418
            $k[$j++] = 0; //#17418
        } //#17418
        $k[$j++] = 0; //#17418
        $_.numtext = $a(); //#17418
        $k[$j++] = Infinity; //#17419
        for (var _4e = 0, _4f = $_.msglen; _4e < _4f; _4e++) { //#17419
            $k[$j++] = 0; //#17419
        } //#17419
        $k[$j++] = 0; //#17419
        $_.numbytes = $a(); //#17419
        $k[$j++] = Infinity; //#17420
        for (var _4i = 0, _4j = $_.msglen; _4i < _4j; _4i++) { //#17420
            $k[$j++] = 0; //#17420
        } //#17420
        $k[$j++] = 0; //#17420
        $_.iseci = $a(); //#17420
        for (var _4m = $_.msglen - 1; _4m >= 0; _4m -= 1) { //#17433
            $_.i = _4m; //#17422
            var _4p = $get($_.msg, $_.i); //#17423
            if ((_4p >= 48) && (_4p <= 57)) { //#17425
                $put($_.numdigits, $_.i, $f($get($_.numdigits, $_.i + 1) + 1)); //#17424
            } //#17424
            var _4z = $get($_.alltext, $get($_.msg, $_.i)) !== undefined; //#17426
            if (_4z && ($get($_.numdigits, $_.i) < 13)) { //#17428
                $put($_.numtext, $_.i, $f($get($_.numtext, $_.i + 1) + 1)); //#17427
            } //#17427
            if ((($get($_.msg, $_.i) >= 0) && ($get($_.numtext, $_.i) < 5)) && ($get($_.numdigits, $_.i) < 13)) { //#17431
                $put($_.numbytes, $_.i, $f($get($_.numbytes, $_.i + 1) + 1)); //#17430
            } //#17430
            $put($_.iseci, $_.i, $get($_.msg, $_.i) <= -1000000); //#17432
        } //#17432
        $_.numdigits = $geti($_.numdigits, 0, $_.msglen); //#17434
        $_.numtext = $geti($_.numtext, 0, $_.msglen); //#17435
        $_.numbytes = $geti($_.numbytes, 0, $_.msglen); //#17436
        $_.seq = $a([]); //#17438
        $_.seqlen = 0; //#17438
        $_.state = $_.T; //#17438
        $_.p = 0; //#17438
        for (;;) { //#17492
            if ($_.p == $_.msglen) { //#17439
                break; //#17439
            } //#17439
            if ($get($_.iseci, $_.p)) { //#17490
                $_.eci = $get($_.msg, $_.p); //#17441
                $k[$j++] = Infinity; //#17442
                $aload($_.seq); //#17443
                $k[$j++] = $a([$_.eci]); //#17444
                $_.seq = $a(); //#17444
                $_.p = $_.p + 1; //#17446
                $k[$j++] = 'seqlen'; //#17447
                $k[$j++] = $_.seqlen; //#17447
                if ($_.eci <= -1810900) { //#17447
                    $k[$j++] = 2; //#17447
                } else { //#17447
                    var _5s = ($_.eci <= -1000900) ? 3 : 2; //#17447
                    $k[$j++] = _5s; //#17447
                } //#17447
                var _5t = $k[--$j]; //#17447
                var _5u = $k[--$j]; //#17447
                $_[$k[--$j]] = $f(_5u + _5t); //#17447
            } else { //#17490
                $_.n = $get($_.numdigits, $_.p); //#17449
                if (($_.n >= 13) || (($_.n == $_.msglen) && ($_.n >= 8))) { //#17490
                    $k[$j++] = Infinity; //#17451
                    $aload($_.seq); //#17452
                    $k[$j++] = $_.nl; //#17454
                    $k[$j++] = Infinity; //#17454
                    $aload($geti($_.msg, $_.p, $_.n)); //#17454
                    var _69 = $a(); //#17454
                    $k[$j++] = _69; //#17454
                    $_.seq = $a(); //#17454
                    $_.state = $_.N; //#17456
                    $_.p = $f($_.p + $_.n); //#17457
                    $_.seqlen = $f(($_.seqlen + 1) + $_.n); //#17458
                } else { //#17490
                    $_.t = $get($_.numtext, $_.p); //#17460
                    if ($_.t >= 5) { //#17490
                        $k[$j++] = Infinity; //#17462
                        $aload($_.seq); //#17463
                        if ($_.state != $_.T) { //#17466
                            $k[$j++] = $_.tl; //#17465
                        } //#17465
                        $k[$j++] = Infinity; //#17467
                        $aload($geti($_.msg, $_.p, $_.t)); //#17467
                        var _6S = $a(); //#17467
                        $k[$j++] = _6S; //#17467
                        $_.seq = $a(); //#17467
                        $_.state = $_.T; //#17469
                        $_.p = $f($_.p + $_.t); //#17470
                        $_.seqlen = $f($f($_.seqlen + 1) + $_.t); //#17471
                    } else { //#17490
                        $_.b = $get($_.numbytes, $_.p); //#17473
                        if (($_.b == 1) && ($_.state == $_.T)) { //#17490
                            $k[$j++] = Infinity; //#17475
                            $aload($_.seq); //#17476
                            $k[$j++] = $_.bs; //#17478
                            $k[$j++] = $a([$get($_.msg, $_.p)]); //#17478
                            $_.seq = $a(); //#17478
                            $_.p = $f($_.p + $_.b); //#17480
                            $_.seqlen = $f($_.seqlen + 2); //#17481
                        } else { //#17490
                            $k[$j++] = Infinity; //#17483
                            $aload($_.seq); //#17484
                            var _6r = (($_.b % 6) != 0) ? $_.bl : $_.bl6; //#17485
                            $k[$j++] = _6r; //#17486
                            $k[$j++] = Infinity; //#17486
                            $aload($geti($_.msg, $_.p, $_.b)); //#17486
                            var _6w = $a(); //#17486
                            $k[$j++] = _6w; //#17486
                            $_.seq = $a(); //#17486
                            $_.state = $_.B; //#17488
                            $_.p = $f($_.p + $_.b); //#17489
                            $_.seqlen = $f($f($_.seqlen + 1) + $_.b); //#17490
                        } //#17490
                    } //#17490
                } //#17490
            } //#17490
        } //#17490
        $_.enca = function() {
            var _77 = $get($get($_.charvals, $_.A), $k[--$j]); //#17495
            $k[$j++] = _77; //#17495
        }; //#17495
        $_.encl = function() {
            var _7C = $get($get($_.charvals, $_.L), $k[--$j]); //#17496
            $k[$j++] = _7C; //#17496
        }; //#17496
        $_.encm = function() {
            var _7H = $get($get($_.charvals, $_.M), $k[--$j]); //#17497
            $k[$j++] = _7H; //#17497
        }; //#17497
        $_.encp = function() {
            var _7M = $get($get($_.charvals, $_.P), $k[--$j]); //#17498
            $k[$j++] = _7M; //#17498
        }; //#17498
        $_.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#17499
        $_.addtotext = function() {
            $put($_.text, $_.l, $k[--$j]); //#17502
            $_.l = $_.l + 1; //#17503
        }; //#17503
        $_.enct = function() {
            $_.in = $k[--$j]; //#17507
            $_.curlen = $a([$_.e, $_.e, $_.e, $_.e]); //#17509
            $put($_.curlen, $_.submode, 0); //#17510
            $_.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#17511
            $forall($_.in, function() { //#17581
                $_.char = $k[--$j]; //#17516
                for (;;) { //#17537
                    $_.imp = false; //#17520
                    var _7l = $a([$_.A, $_.L, $_.M, $_.P]); //#17521
                    for (var _7m = 0, _7n = _7l.length; _7m < _7n; _7m++) { //#17535
                        $_.x = $get(_7l, _7m); //#17522
                        var _7t = $a([$_.A, $_.L, $_.M, $_.P]); //#17523
                        for (var _7u = 0, _7v = _7t.length; _7u < _7v; _7u++) { //#17534
                            $_.y = $get(_7t, _7u); //#17524
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#17525
                            if ($_.cost < $get($_.curlen, $_.y)) { //#17533
                                $put($_.curlen, $_.y, $_.cost); //#17527
                                $k[$j++] = $_.curseq; //#17530
                                $k[$j++] = $_.y; //#17530
                                $k[$j++] = Infinity; //#17528
                                $aload($get($_.curseq, $_.x)); //#17529
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#17530
                                var _8M = $a(); //#17530
                                var _8N = $k[--$j]; //#17531
                                $put($k[--$j], _8N, _8M); //#17531
                                $_.imp = true; //#17532
                            } //#17532
                        } //#17532
                    } //#17532
                    if (!$_.imp) { //#17536
                        break; //#17536
                    } //#17536
                } //#17536
                $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e]); //#17540
                $_.nxtseq = $a(4); //#17541
                var _8a = $a([$_.A, $_.L, $_.M, $_.P]); //#17543
                for (var _8b = 0, _8c = _8a.length; _8b < _8c; _8b++) { //#17576
                    $_.x = $get(_8a, _8b); //#17544
                    for (;;) { //#17574
                        var _8i = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#17548
                        if (!_8i) { //#17548
                            break; //#17548
                        } //#17548
                        $_.cost = $f($get($_.curlen, $_.x) + 1); //#17551
                        if ($_.cost < $get($_.nxtlen, $_.x)) { //#17555
                            $put($_.nxtlen, $_.x, $_.cost); //#17553
                            $k[$j++] = $_.nxtseq; //#17554
                            $k[$j++] = $_.x; //#17554
                            $k[$j++] = Infinity; //#17554
                            $aload($get($_.curseq, $_.x)); //#17554
                            $k[$j++] = $_.char; //#17554
                            var _8z = $a(); //#17554
                            var _90 = $k[--$j]; //#17554
                            $put($k[--$j], _90, _8z); //#17554
                        } //#17554
                        var _96 = $a([$_.A, $_.L, $_.M, $_.P]); //#17558
                        for (var _97 = 0, _98 = _96.length; _97 < _98; _97++) { //#17571
                            $_.y = $get(_96, _97); //#17559
                            if ($ne($_.x, $_.y)) { //#17570
                                $_.cost = $f($f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)) + 1); //#17561
                                if ($_.cost < $get($_.nxtlen, $_.y)) { //#17569
                                    $put($_.nxtlen, $_.y, $_.cost); //#17563
                                    $k[$j++] = $_.nxtseq; //#17567
                                    $k[$j++] = $_.y; //#17567
                                    $k[$j++] = Infinity; //#17564
                                    $aload($get($_.curseq, $_.y)); //#17565
                                    var _9Y = ($_.x == $_.A) ? $_.as : $_.ps; //#17566
                                    $k[$j++] = _9Y; //#17567
                                    $k[$j++] = $_.char; //#17567
                                    var _9a = $a(); //#17567
                                    var _9b = $k[--$j]; //#17568
                                    $put($k[--$j], _9b, _9a); //#17568
                                } //#17568
                            } //#17568
                        } //#17568
                        break; //#17573
                    } //#17573
                } //#17573
                $_.curlen = $_.nxtlen; //#17578
                $_.curseq = $_.nxtseq; //#17579
            }); //#17579
            $_.minseq = $_.e; //#17584
            var _9k = $a([$_.A, $_.L, $_.M, $_.P]); //#17585
            for (var _9l = 0, _9m = _9k.length; _9l < _9m; _9l++) { //#17591
                $_.k = $get(_9k, _9l); //#17586
                if ($get($_.curlen, $_.k) < $_.minseq) { //#17590
                    $_.minseq = $get($_.curlen, $_.k); //#17588
                    $_.txtseq = $get($_.curseq, $_.k); //#17589
                } //#17589
            } //#17589
            $_.text = $a($_.minseq); //#17594
            $_.k = 0; //#17595
            $_.l = 0; //#17595
            for (;;) { //#17615
                if ($_.k >= $_.txtseq.length) { //#17596
                    break; //#17596
                } //#17596
                $_.char = $get($_.txtseq, $_.k); //#17598
                $k[$j++] = $_.char; //#17601
                if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                    break;
                } //#17601
                $_.addtotext(); //#17601
                $_.k = $_.k + 1; //#17602
                if (($_.char == $_.as) || ($_.char == $_.ps)) { //#17608
                    $k[$j++] = $get($_.txtseq, $_.k); //#17606
                    if ($_.char == $_.as) { //#17606
                        $_.enca(); //#17606
                    } else { //#17606
                        $_.encp(); //#17606
                    } //#17606
                    $_.addtotext(); //#17606
                    $_.k = $_.k + 1; //#17607
                } //#17607
                if ($_.char == $_.al) { //#17611
                    $_.submode = $_.A; //#17611
                } //#17611
                if ($_.char == $_.ll) { //#17612
                    $_.submode = $_.L; //#17612
                } //#17612
                if ($_.char == $_.ml) { //#17613
                    $_.submode = $_.M; //#17613
                } //#17613
                if ($_.char == $_.pl) { //#17614
                    $_.submode = $_.P; //#17614
                } //#17614
            } //#17614
            if (($_.text.length % 2) == 1) { //#17662
                if ($_.submode == $_.P) { //#17658
                    $k[$j++] = 'pad'; //#17619
                    $k[$j++] = $_.al; //#17619
                    $_.encp(); //#17619
                    var _Ab = $k[--$j]; //#17619
                    $_[$k[--$j]] = _Ab; //#17619
                    $_.submode = $_.A; //#17620
                } else { //#17658
                    $_.nextecitext = false; //#17623
                    for (var _Ah = $_.i + 1, _Ag = $_.seq.length - 1; _Ah <= _Ag; _Ah += 1) { //#17630
                        $_.ti = _Ah; //#17626
                        if ($ne($type($get($_.seq, $_.ti)), 'arraytype')) { //#17627
                            $_.nextecitext = false; //#17627
                            break; //#17627
                        } //#17627
                        if ($get($get($_.seq, $_.ti), 0) > -1000000) { //#17628
                            break; //#17628
                        } //#17628
                        $_.nextecitext = true; //#17629
                    } //#17629
                    if ($_.nextecitext) { //#17658
                        if ($_.submode == $_.A) { //#17655
                            var _B0 = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17633
                            if (_B0) { //#17638
                                $k[$j++] = 'pad'; //#17634
                                $k[$j++] = $_.ll; //#17634
                                $_.enca(); //#17634
                                var _B2 = $k[--$j]; //#17634
                                $_[$k[--$j]] = _B2; //#17634
                                $_.submode = $_.L; //#17635
                            } else { //#17638
                                $k[$j++] = 'pad'; //#17637
                                $k[$j++] = $_.ml; //#17637
                                $_.enca(); //#17637
                                var _B6 = $k[--$j]; //#17637
                                $_[$k[--$j]] = _B6; //#17637
                                $_.submode = $_.M; //#17638
                            } //#17638
                        } else { //#17655
                            if ($_.submode == $_.M) { //#17655
                                var _BI = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17642
                                if (_BI) { //#17651
                                    $k[$j++] = 'pad'; //#17643
                                    $k[$j++] = $_.ll; //#17643
                                    $_.encm(); //#17643
                                    var _BK = $k[--$j]; //#17643
                                    $_[$k[--$j]] = _BK; //#17643
                                    $_.submode = $_.L; //#17644
                                } else { //#17651
                                    var _BU = $get($get($_.charvals, $_.P), $get($get($_.seq, $_.ti), 0)) !== undefined; //#17646
                                    if (_BU) { //#17651
                                        $k[$j++] = 'pad'; //#17647
                                        $k[$j++] = $_.pl; //#17647
                                        $_.encm(); //#17647
                                        var _BW = $k[--$j]; //#17647
                                        $_[$k[--$j]] = _BW; //#17647
                                        $_.submode = $_.P; //#17648
                                    } else { //#17651
                                        $k[$j++] = 'pad'; //#17650
                                        $k[$j++] = $_.al; //#17650
                                        $_.encm(); //#17650
                                        var _Ba = $k[--$j]; //#17650
                                        $_[$k[--$j]] = _Ba; //#17650
                                        $_.submode = $_.A; //#17651
                                    } //#17651
                                } //#17651
                            } else { //#17655
                                $k[$j++] = 'pad'; //#17654
                                $k[$j++] = $_.ml; //#17654
                                $_.encl(); //#17654
                                var _Be = $k[--$j]; //#17654
                                $_[$k[--$j]] = _Be; //#17654
                                $_.submode = $_.M; //#17655
                            } //#17655
                        } //#17655
                    } else { //#17658
                        $k[$j++] = 'pad'; //#17658
                        $k[$j++] = $_.ps; //#17658
                        if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                            return true;
                        } //#17658
                        var _Bm = $k[--$j]; //#17658
                        $_[$k[--$j]] = _Bm; //#17658
                    } //#17658
                } //#17658
                $k[$j++] = Infinity; //#17661
                $aload($_.text); //#17661
                $k[$j++] = $_.pad; //#17661
                $_.text = $a(); //#17661
            } //#17661
            $_.out = $a(~~($_.text.length / 2)); //#17664
            for (var _Bv = 0, _Bu = $_.out.length - 1; _Bv <= _Bu; _Bv += 1) { //#17668
                $_.k = _Bv; //#17666
                $put($_.out, $_.k, $f(($get($_.text, $_.k * 2) * 30) + $get($_.text, ($_.k * 2) + 1))); //#17667
            } //#17667
            $k[$j++] = $_.out; //#17670
        }; //#17670
        $_.encn = function() {
            $_.in = $k[--$j]; //#17675
            $_.out = $a([]); //#17676
            for (var _C9 = 0, _C8 = $_.in.length - 1; _C9 <= _C8; _C9 += 44) { //#17704
                $_.k = _C9; //#17678
                $k[$j++] = Infinity; //#17679
                var _CE = $_.in.length - $_.k; //#17680
                $k[$j++] = 1; //#17680
                $k[$j++] = $_.in; //#17680
                $k[$j++] = $_.k; //#17680
                $k[$j++] = _CE; //#17680
                if (_CE > 44) { //#17680
                    $j--; //#17680
                    $k[$j++] = 44; //#17680
                } //#17680
                var _CF = $k[--$j]; //#17680
                var _CG = $k[--$j]; //#17680
                var _CI = $geti($k[--$j], _CG, _CF); //#17680
                for (var _CJ = 0, _CK = _CI.length; _CJ < _CK; _CJ++) { //#17681
                    $k[$j++] = $f($get(_CI, _CJ) - 48); //#17681
                } //#17681
                $_.gmod = $a(); //#17681
                $_.cwn = $a([]); //#17683
                for (;;) { //#17702
                    $_.dv = 900; //#17684
                    $_.gmul = $a([]); //#17685
                    $_.val = 0; //#17685
                    for (;;) { //#17697
                        if ($_.gmod.length == 0) { //#17686
                            break; //#17686
                        } //#17686
                        $_.val = $f(($_.val * 10) + $get($_.gmod, 0)); //#17687
                        $_.gmod = $geti($_.gmod, 1, $_.gmod.length - 1); //#17688
                        if ($_.val < $_.dv) { //#17694
                            if ($_.gmul.length != 0) { //#17692
                                $k[$j++] = Infinity; //#17691
                                $aload($_.gmul); //#17691
                                $k[$j++] = 0; //#17691
                                $_.gmul = $a(); //#17691
                            } //#17691
                        } else { //#17694
                            $k[$j++] = Infinity; //#17694
                            $aload($_.gmul); //#17694
                            $k[$j++] = ~~($_.val / $_.dv); //#17694
                            $_.gmul = $a(); //#17694
                        } //#17694
                        $_.val = $_.val % $_.dv; //#17696
                    } //#17696
                    $_.dv = $_.val; //#17698
                    $k[$j++] = Infinity; //#17699
                    $k[$j++] = $_.dv; //#17699
                    $aload($_.cwn); //#17699
                    $_.cwn = $a(); //#17699
                    $_.gmod = $_.gmul; //#17700
                    if ($_.gmul.length == 0) { //#17701
                        break; //#17701
                    } //#17701
                } //#17701
                $k[$j++] = Infinity; //#17703
                $aload($_.out); //#17703
                $aload($_.cwn); //#17703
                $_.out = $a(); //#17703
            } //#17703
            $k[$j++] = $_.out; //#17705
        }; //#17705
        $_.ence = function() {
            var _Ct = $f((-$get($k[--$j], 0)) - 1000000); //#17710
            $k[$j++] = _Ct; //#17718
            if (_Ct <= 899) { //#17717
                var _Cu = $k[--$j]; //#17711
                $k[$j++] = 927; //#17711
                $k[$j++] = _Cu; //#17711
                $astore($a(2)); //#17711
            } else { //#17717
                var _Cw = $k[--$j]; //#17712
                $k[$j++] = _Cw; //#17718
                if (_Cw <= 810899) { //#17717
                    var _Cx = $k[--$j]; //#17713
                    $k[$j++] = 926; //#17713
                    $k[$j++] = (~~(_Cx / 900)) - 1; //#17713
                    $k[$j++] = _Cx % 900; //#17713
                    $astore($a(3)); //#17713
                } else { //#17717
                    var _Cz = $k[--$j]; //#17714
                    $k[$j++] = _Cz; //#17718
                    if (_Cz <= 811799) { //#17717
                        var _D0 = $k[--$j]; //#17715
                        $k[$j++] = 925; //#17715
                        $k[$j++] = $f(_D0 - 810900); //#17715
                        $astore($a(2)); //#17715
                    } else { //#17717
                        $k[$j++] = 'bwipp.pdf417badECI#17717'; //#17717
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#17717
                        bwipp_raiseerror(); //#17717
                    } //#17717
                } //#17717
            } //#17717
        }; //#17717
        $_.encfuncs = $a(['enct', 'encn', 'encb']); //#17721
        $_.addtocws = function() {
            var _D3 = $k[--$j]; //#17724
            $puti($_.datcws, $_.j, _D3); //#17724
            $_.j = _D3.length + $_.j; //#17725
        }; //#17725
        $_.state = $_.T; //#17729
        $_.submode = $_.A; //#17729
        $_.datcws = $a($_.seqlen); //#17730
        $_.i = 0; //#17731
        $_.j = 0; //#17731
        for (;;) { //#17751
            if ($_.i >= $_.seq.length) { //#17732
                break; //#17732
            } //#17732
            $_.chars = $get($_.seq, $_.i); //#17733
            if ($eq($type($_.chars), 'arraytype')) { //#17747
                if ($get($_.chars, 0) <= -1000000) { //#17738
                    $k[$j++] = $_.chars; //#17736
                    $_.ence(); //#17736
                    $_.addtocws(); //#17736
                } else { //#17738
                    $k[$j++] = $_.chars; //#17738
                    if ($_[$get($_.encfuncs, $_.state)]() === true) {
                        break;
                    } //#17738
                    $_.addtocws(); //#17738
                } //#17738
            } else { //#17747
                $k[$j++] = $a([$get($_.latchcws, $_.chars)]); //#17741
                $_.addtocws(); //#17741
                if ($_.chars == $_.tl) { //#17742
                    $_.state = $_.T; //#17742
                    $_.submode = $_.A; //#17742
                } //#17742
                if ($_.chars == $_.nl) { //#17743
                    $_.state = $_.N; //#17743
                } //#17743
                if (($_.chars == $_.bl) || ($_.chars == $_.bl6)) { //#17744
                    $_.state = $_.B; //#17744
                } //#17744
                if ($_.chars == $_.bs) { //#17748
                    $_.i = $_.i + 1; //#17746
                    $k[$j++] = $get($_.seq, $_.i); //#17747
                    $_.encb(); //#17747
                    $_.addtocws(); //#17747
                } //#17747
            } //#17747
            $_.i = $_.i + 1; //#17750
        } //#17750
        $_.datcws = $geti($_.datcws, 0, $_.j); //#17752
    } //#17752
    $_.m = $_.datcws.length; //#17754
    if ($_.m > 926) { //#17758
        $k[$j++] = 'bwipp.pdf417dataTooLong#17757'; //#17757
        $k[$j++] = "The data is too long"; //#17757
        bwipp_raiseerror(); //#17757
    } //#17757
    if ($_.eclevel == -1) { //#17766
        if ($_.m <= 40) { //#17762
            $_.eclevel = 2; //#17762
        } //#17762
        if (($_.m >= 41) && ($_.m <= 160)) { //#17763
            $_.eclevel = 3; //#17763
        } //#17763
        if (($_.m >= 161) && ($_.m <= 320)) { //#17764
            $_.eclevel = 4; //#17764
        } //#17764
        if ($_.m >= 321) { //#17765
            $_.eclevel = 5; //#17765
        } //#17765
    } //#17765
    if (!$_.fixedeclevel) { //#17772
        $_.maxeclevel = (~~((Math.log((928 - 1) - $_.m)) / Math.log(2))) - 1; //#17770
        if ($_.eclevel > $_.maxeclevel) { //#17771
            $_.eclevel = $_.maxeclevel; //#17771
        } //#17771
    } //#17771
    $_.k = ~~Math.pow(2, $_.eclevel + 1); //#17775
    if ($_.columns == 0) { //#17776
        $_.columns = ~~(Math.round(Math.sqrt(($_.m + $_.k) / 3))); //#17776
    } //#17776
    $k[$j++] = 'c'; //#17777
    if ($_.columns >= 1) { //#17777
        $k[$j++] = $_.columns; //#17777
    } else { //#17777
        $k[$j++] = 1; //#17777
    } //#17777
    var _EA = $k[--$j]; //#17777
    $_[$k[--$j]] = _EA; //#17777
    $_.r = ~~(Math.ceil((($_.m + $_.k) + 1) / $_.columns)); //#17780
    if (($_.r < $_.rows) && ($_.rows <= 90)) { //#17781
        $_.r = $_.rows; //#17781
    } //#17781
    if ($_.r < 3) { //#17782
        $_.r = 3; //#17782
    } //#17782
    if ($_.r > 90) { //#17787
        $k[$j++] = 'bwipp.pdf417insufficientCapacity#17786'; //#17786
        $k[$j++] = "Insufficient capacity in the symbol"; //#17786
        bwipp_raiseerror(); //#17786
    } //#17786
    if (!$_.fixedeclevel) { //#17796
        var _EM = $_.c; //#17791
        var _EN = $_.r; //#17791
        var _EO = $_.m; //#17791
        var _EP = 8; //#17791
        var _EQ = (~~((Math.log($f(($f((_EM * _EN) - 1)) - _EO))) / Math.log(2))) - 1; //#17791
        if (((~~((Math.log($f(($f((_EM * _EN) - 1)) - _EO))) / Math.log(2))) - 1) > 8) { //#17791
            var _ = _EP; //#17791
            _EP = _EQ; //#17791
            _EQ = _; //#17791
        } //#17791
        $_.maxeclevel = _EQ; //#17791
        if ($_.maxeclevel > $_.eclevel) { //#17795
            $_.eclevel = $_.maxeclevel; //#17793
            $_.k = ~~Math.pow(2, $_.eclevel + 1); //#17794
        } //#17794
    } //#17794
    $_.n = $f(($_.c * $_.r) - $_.k); //#17799
    $_.cws = $a($f(($_.c * $_.r) + 1)); //#17800
    $put($_.cws, 0, $_.n); //#17801
    $puti($_.cws, 1, $_.datcws); //#17802
    $k[$j++] = $_.cws; //#17803
    $k[$j++] = $_.m + 1; //#17803
    $k[$j++] = Infinity; //#17803
    for (var _Ej = 0, _Ek = $f($f($_.n - $_.m) - 1); _Ej < _Ek; _Ej++) { //#17803
        $k[$j++] = 900; //#17803
    } //#17803
    var _El = $a(); //#17803
    var _Em = $k[--$j]; //#17803
    $puti($k[--$j], _Em, _El); //#17803
    $k[$j++] = $_.cws; //#17804
    $k[$j++] = $_.n; //#17804
    $k[$j++] = Infinity; //#17804
    for (var _Er = 0, _Es = $_.k; _Er < _Es; _Er++) { //#17804
        $k[$j++] = 0; //#17804
    } //#17804
    $k[$j++] = 0; //#17804
    var _Et = $a(); //#17804
    var _Eu = $k[--$j]; //#17804
    $puti($k[--$j], _Eu, _Et); //#17804
    if (!bwipp_pdf417.__17811__) { //#17811
        $_ = Object.create($_); //#17811
        $k[$j++] = Infinity; //#17808
        $k[$j++] = 1; //#17808
        for (var _Ew = 0, _Ex = 928; _Ew < _Ex; _Ew++) { //#17808
            var _Ey = $k[--$j]; //#17808
            $k[$j++] = _Ey; //#17808
            $k[$j++] = (_Ey * 3) % 929; //#17808
        } //#17808
        $_.rsalog = $a(); //#17808
        $_.rslog = $a(929); //#17809
        for (var _F1 = 1; _F1 <= 928; _F1 += 1) { //#17810
            $put($_.rslog, $get($_.rsalog, _F1), _F1); //#17810
        } //#17810
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_pdf417.$ctx[id] = $_[id]); //#17810
        bwipp_pdf417.__17811__ = 1; //#17810
        $_ = Object.getPrototypeOf($_); //#17810
    } //#17810
    $_.rsprod = function() {
        var _F6 = $k[--$j]; //#17815
        var _F7 = $k[--$j]; //#17815
        $k[$j++] = _F7; //#17819
        $k[$j++] = _F6; //#17819
        if ((_F6 != 0) && (_F7 != 0)) { //#17818
            var _FA = $get($_.rslog, $k[--$j]); //#17816
            var _FF = $get($_.rsalog, $f(_FA + $get($_.rslog, $k[--$j])) % 928); //#17816
            $k[$j++] = _FF; //#17816
        } else { //#17818
            $j -= 2; //#17818
            $k[$j++] = 0; //#17818
        } //#17818
    }; //#17818
    $k[$j++] = Infinity; //#17823
    $k[$j++] = 1; //#17823
    for (var _FH = 0, _FI = $_.k; _FH < _FI; _FH++) { //#17823
        $k[$j++] = 0; //#17823
    } //#17823
    $_.coeffs = $a(); //#17823
    for (var _FM = 1, _FL = $_.k; _FM <= _FL; _FM += 1) { //#17832
        $_.i = _FM; //#17825
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#17826
        for (var _FT = $_.i - 1; _FT >= 1; _FT -= 1) { //#17830
            $_.j = _FT; //#17828
            $k[$j++] = $_.coeffs; //#17829
            $k[$j++] = $_.j; //#17829
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#17829
            $k[$j++] = $get($_.coeffs, $_.j); //#17829
            $k[$j++] = $get($_.rsalog, $_.i); //#17829
            $_.rsprod(); //#17829
            var _Ff = $k[--$j]; //#17829
            var _Fg = $k[--$j]; //#17829
            var _Fh = $k[--$j]; //#17829
            $put($k[--$j], _Fh, $f(_Fg + _Ff) % 929); //#17829
        } //#17829
        $k[$j++] = $_.coeffs; //#17831
        $k[$j++] = 0; //#17831
        $k[$j++] = $get($_.coeffs, 0); //#17831
        $k[$j++] = $get($_.rsalog, $_.i); //#17831
        $_.rsprod(); //#17831
        var _Fp = $k[--$j]; //#17831
        var _Fq = $k[--$j]; //#17831
        $put($k[--$j], _Fq, _Fp); //#17831
    } //#17831
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#17833
    for (var _Fw = $_.coeffs.length - 1; _Fw >= 0; _Fw -= 2) { //#17834
        var _Fx = $_.coeffs; //#17834
        $put(_Fx, _Fw, $f(929 - $get(_Fx, _Fw))); //#17834
    } //#17834
    for (var _G1 = 0, _G0 = $f($_.n - 1); _G1 <= _G0; _G1 += 1) { //#17843
        $_.t = $f($get($_.cws, _G1) + $get($_.cws, $_.n)) % 929; //#17838
        for (var _G9 = 0, _G8 = $_.k - 1; _G9 <= _G8; _G9 += 1) { //#17842
            $_.j = _G9; //#17840
            $put($_.cws, $f($_.n + $_.j), ($f($get($_.cws, $f($f($_.n + $_.j) + 1)) + ($f(929 - (($_.t * $get($_.coeffs, ($_.k - $_.j) - 1)) % 929))))) % 929); //#17841
        } //#17841
    } //#17841
    for (var _GQ = $_.n, _GP = $f($_.n + $_.k); _GQ <= _GP; _GQ += 1) { //#17844
        $put($_.cws, _GQ, $f(929 - $get($_.cws, _GQ)) % 929); //#17844
    } //#17844
    $_.cws = $geti($_.cws, 0, $_.cws.length - 1); //#17847
    var _GY = $get($_.options, 'debugcws') !== undefined; //#17849
    if (_GY) { //#17849
        $k[$j++] = 'bwipp.debugcws#17849'; //#17849
        $k[$j++] = $_.cws; //#17849
        bwipp_raiseerror(); //#17849
    } //#17849
    if (!bwipp_pdf417.__18093__) { //#18093
        $_ = Object.create($_); //#18093
        $_.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#18092
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_pdf417.$ctx[id] = $_[id]); //#18092
        bwipp_pdf417.__18093__ = 1; //#18092
        $_ = Object.getPrototypeOf($_); //#18092
    } //#18092
    $_.cwtobits = function() {
        var _Gh = $get($_.clusters, $k[--$j]); //#18097
        $_.v = $get(_Gh, $k[--$j]); //#18097
        $k[$j++] = Infinity; //#18098
        for (var _Gk = 0, _Gl = 17; _Gk < _Gl; _Gk++) { //#18098
            $k[$j++] = 0; //#18098
        } //#18098
        var _Go = $cvrs($s(17), $_.v, 2); //#18098
        for (var _Gp = 0, _Gq = _Go.length; _Gp < _Gq; _Gp++) { //#18098
            $k[$j++] = $get(_Go, _Gp) - 48; //#18098
        } //#18098
        var _Gs = $a(); //#18098
        $k[$j++] = $geti(_Gs, _Gs.length - 17, 17); //#18099
    }; //#18099
    if ($_.compact) { //#18106
        $_.rwid = $f(($f(($f((17 * $_.c) + 17)) + 17)) + 1); //#18104
    } else { //#18106
        $_.rwid = $f(($f(($f(($f((17 * $_.c) + 17)) + 17)) + 17)) + 18); //#18106
    } //#18106
    $_.pixs = $a(($_.rwid * $_.r) * $_.rowmult); //#18108
    for (var _H3 = 0, _H2 = $_.r - 1; _H3 <= _H2; _H3 += 1) { //#18141
        $_.i = _H3; //#18111
        if (($_.i % 3) == 0) { //#18116
            $_.lcw = ((~~($_.i / 3)) * 30) + (~~(($_.r - 1) / 3)); //#18114
            $_.rcw = $f(($f(((~~($_.i / 3)) * 30) + $_.c)) - 1); //#18115
        } //#18115
        if (($_.i % 3) == 1) { //#18120
            $_.lcw = (((~~($_.i / 3)) * 30) + ($_.eclevel * 3)) + (($_.r - 1) % 3); //#18118
            $_.rcw = ((~~($_.i / 3)) * 30) + (~~(($_.r - 1) / 3)); //#18119
        } //#18119
        if (($_.i % 3) == 2) { //#18124
            $_.lcw = $f(($f(((~~($_.i / 3)) * 30) + $_.c)) - 1); //#18122
            $_.rcw = (((~~($_.i / 3)) * 30) + ($_.eclevel * 3)) + (($_.r - 1) % 3); //#18123
        } //#18123
        $k[$j++] = Infinity; //#18126
        $k[$j++] = 1; //#18128
        $k[$j++] = 1; //#18128
        $k[$j++] = 1; //#18128
        $k[$j++] = 1; //#18128
        $k[$j++] = 1; //#18128
        $k[$j++] = 1; //#18128
        $k[$j++] = 1; //#18128
        $k[$j++] = 1; //#18128
        $k[$j++] = 0; //#18128
        $k[$j++] = 1; //#18128
        $k[$j++] = 0; //#18128
        $k[$j++] = 1; //#18128
        $k[$j++] = 0; //#18128
        $k[$j++] = 1; //#18128
        $k[$j++] = 0; //#18128
        $k[$j++] = 0; //#18128
        $k[$j++] = 0; //#18128
        $k[$j++] = $_.lcw; //#18128
        $k[$j++] = $_.i % 3; //#18128
        $_.cwtobits(); //#18128
        $aload($k[--$j]); //#18128
        var _HS = $geti($_.cws, $_.c * $_.i, $_.c); //#18129
        for (var _HT = 0, _HU = _HS.length; _HT < _HU; _HT++) { //#18129
            $k[$j++] = $get(_HS, _HT); //#18129
            $k[$j++] = $_.i % 3; //#18129
            $_.cwtobits(); //#18129
            $aload($k[--$j]); //#18129
        } //#18129
        if ($_.compact) { //#18134
            $k[$j++] = 1; //#18131
        } else { //#18134
            $k[$j++] = $_.rcw; //#18133
            $k[$j++] = $_.i % 3; //#18133
            $_.cwtobits(); //#18133
            $aload($k[--$j]); //#18133
            $k[$j++] = 1; //#18134
            $k[$j++] = 1; //#18134
            $k[$j++] = 1; //#18134
            $k[$j++] = 1; //#18134
            $k[$j++] = 1; //#18134
            $k[$j++] = 1; //#18134
            $k[$j++] = 1; //#18134
            $k[$j++] = 0; //#18134
            $k[$j++] = 1; //#18134
            $k[$j++] = 0; //#18134
            $k[$j++] = 0; //#18134
            $k[$j++] = 0; //#18134
            $k[$j++] = 1; //#18134
            $k[$j++] = 0; //#18134
            $k[$j++] = 1; //#18134
            $k[$j++] = 0; //#18134
            $k[$j++] = 0; //#18134
            $k[$j++] = 1; //#18134
        } //#18134
        var _Hc = $a(); //#18134
        $k[$j++] = _Hc; //#18139
        for (var _Hf = 0, _He = $_.rowmult - 1; _Hf <= _He; _Hf += 1) { //#18139
            var _Hk = $k[--$j]; //#18138
            $puti($_.pixs, (_Hf + ($_.i * $_.rowmult)) * $_.rwid, _Hk); //#18138
            $k[$j++] = _Hk; //#18138
        } //#18138
        $j--; //#18140
    } //#18140
    var _Ht = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.rwid],
        ["pixy", $_.r * $_.rowmult],
        ["height", ($_.r * $_.rowmult) / 72],
        ["width", $_.rwid / 72],
        ["borderleft", 2],
        ["borderright", 2],
        ["bordertop", 2],
        ["borderbottom", 2],
        ["opt", $_.options]
    ]); //#18155
    $k[$j++] = _Ht; //#18158
    if (!$_.dontdraw) { //#18158
        bwipp_renmatrix(); //#18158
    } //#18158
    $_ = Object.getPrototypeOf($_); //#18160
    $_ = Object.getPrototypeOf($_); //#18162
} //bwipp_pdf417
function bwipp_pdf417compact() {
    $_ = Object.create($_); //#18191
    $_.dontdraw = false; //#18194
    $k[$j++] = $_; //#18196
    bwipp_processoptions(); //#18196
    $_.options = $k[--$j]; //#18196
    $_.barcode = $k[--$j]; //#18197
    $put($_.options, "dontdraw", true); //#18200
    $put($_.options, "compact", true); //#18201
    $k[$j++] = 'args'; //#18203
    $k[$j++] = $_.barcode; //#18203
    $k[$j++] = $_.options; //#18203
    bwipp_pdf417(); //#18203
    var _6 = $k[--$j]; //#18203
    $_[$k[--$j]] = _6; //#18203
    $put($_.args, "opt", $_.options); //#18205
    $k[$j++] = $_.args; //#18208
    if (!$_.dontdraw) { //#18208
        bwipp_renmatrix(); //#18208
    } //#18208
    $_ = Object.getPrototypeOf($_); //#18210
} //bwipp_pdf417compact
function bwipp_micropdf417() {
    $_ = Object.create($_); //#18241
    $_.dontdraw = false; //#18244
    $_.version = "unset"; //#18245
    $_.columns = 0; //#18246
    $_.rows = 0; //#18247
    $_.rowmult = 2; //#18248
    $_.cca = false; //#18249
    $_.ccb = false; //#18250
    $_.raw = false; //#18251
    $_.parse = false; //#18252
    $_.parsefnc = false; //#18253
    $k[$j++] = $_; //#18255
    bwipp_processoptions(); //#18255
    $_.options = $k[--$j]; //#18255
    $_.barcode = $k[--$j]; //#18256
    if ($eq($_.barcode, "")) { //#18260
        $k[$j++] = 'bwipp.micropdf417emptyData#18259'; //#18259
        $k[$j++] = "The data must not be empty"; //#18259
        bwipp_raiseerror(); //#18259
    } //#18259
    if ($_.rowmult <= 0) { //#18264
        $k[$j++] = 'bwipp.micropdf417badRowMult#18263'; //#18263
        $k[$j++] = "The row multiplier must be greater than zero"; //#18263
        bwipp_raiseerror(); //#18263
    } //#18263
    if (($_.cca && $_.ccb) || (($_.cca && $_.raw) || ($_.ccb && $_.raw))) { //#18268
        $k[$j++] = 'bwipp.micropdf417ccaAndCcb#18267'; //#18267
        $k[$j++] = "Cannot combine cca, ccb and raw"; //#18267
        bwipp_raiseerror(); //#18267
    } //#18267
    if ($ne($_.version, "unset")) { //#18289
        $search($_.version, "x"); //#18272
        if ($k[--$j]) { //#18287
            var _D = $k[--$j]; //#18273
            var _E = $k[--$j]; //#18273
            $k[$j++] = _D; //#18273
            $k[$j++] = _E; //#18273
            $j--; //#18273
            var _F = $k[--$j]; //#18274
            var _G = $k[--$j]; //#18274
            $k[$j++] = _G; //#18274
            $k[$j++] = _F; //#18274
            $k[$j++] = _G; //#18274
            $k[$j++] = _F; //#18274
            $astore($a(2)); //#18274
            $forall($k[--$j], function() { //#18283
                var _J = $k[--$j]; //#18276
                $k[$j++] = _J; //#18276
                $k[$j++] = true; //#18276
                if (_J.length == 0) { //#18276
                    $j--; //#18276
                    $k[$j++] = false; //#18276
                } //#18276
                var _K = $k[--$j]; //#18277
                var _L = $k[--$j]; //#18277
                $k[$j++] = _K; //#18279
                $forall(_L, function() { //#18279
                    var _M = $k[--$j]; //#18278
                    if ((_M < 48) || (_M > 57)) { //#18278
                        $j--; //#18278
                        $k[$j++] = false; //#18278
                    } //#18278
                }); //#18278
                if ($nt($k[--$j])) { //#18282
                    $k[$j++] = 'bwipp.micropdf417BadVersionBadRowOrColumn#18281'; //#18281
                    $k[$j++] = "version must be formatted as RxC"; //#18281
                    bwipp_raiseerror(); //#18281
                } //#18281
            }); //#18281
            $_.rows = $cvi($k[--$j]); //#18284
            $_.columns = $cvi($k[--$j]); //#18285
        } else { //#18287
            $j--; //#18287
            $k[$j++] = 'bwipp.micropdf417badVersionFormat#18287'; //#18287
            $k[$j++] = "version must be formatted as RxC"; //#18287
            bwipp_raiseerror(); //#18287
        } //#18287
    } //#18287
    bwipp_loadctx(bwipp_micropdf417); //#18291
    if (!bwipp_micropdf417.__18381__) { //#18381
        $_ = Object.create($_); //#18381
        $_.T = 0; //#18295
        $_.N = 1; //#18295
        $_.B = 2; //#18295
        $_.A = 0; //#18296
        $_.L = 1; //#18296
        $_.M = 2; //#18296
        $_.P = 3; //#18296
        $_.tl = -1; //#18299
        $_.nl = -2; //#18299
        $_.bl = -3; //#18299
        $_.bl6 = -4; //#18299
        $_.bs = -5; //#18299
        $_.al = -6; //#18302
        $_.ll = -7; //#18302
        $_.ml = -8; //#18302
        $_.pl = -9; //#18302
        $_.as = -10; //#18302
        $_.ps = -11; //#18302
        $_.m05 = -12; //#18305
        $_.m06 = -13; //#18305
        $_.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $_.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$_.ll, $_.as, $_.ll, "}"]), $a([$_.ml, $_.ml, $_.al, "'"]), $a([$_.ps, $_.ps, $_.ps, $_.al])]); //#18340
        $_.charvals = $a([new Map, new Map, new Map, new Map]); //#18343
        $_.alltext = new Map; //#18344
        for (var _19 = 0, _18 = $_.charmaps.length - 1; _19 <= _18; _19 += 1) { //#18354
            $_.i = _19; //#18346
            $_.encs = $get($_.charmaps, $_.i); //#18347
            for (var _1D = 0; _1D <= 3; _1D += 1) { //#18353
                $_.j = _1D; //#18349
                var _1G = $get($_.encs, $_.j); //#18350
                $k[$j++] = _1G; //#18350
                if ($eq($type(_1G), 'stringtype')) { //#18350
                    var _1J = $get($k[--$j], 0); //#18350
                    $k[$j++] = _1J; //#18350
                } //#18350
                var _1K = $k[--$j]; //#18351
                $put($get($_.charvals, $_.j), _1K, $_.i); //#18351
                $put($_.alltext, _1K, -1); //#18352
            } //#18352
        } //#18352
        $_.e = 10000; //#18356
        $_.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#18364
        $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.ml, $_.al]), $a([]), $a([$_.ml]), $a([$_.ml, $_.pl])]), $a([$a([$_.al]), $a([$_.ll]), $a([]), $a([$_.pl])]), $a([$a([$_.al]), $a([$_.al, $_.ll]), $a([$_.al, $_.ml]), $a([])])]); //#18372
        $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 1]), $a([1, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, 1]), $a([$_.e, $_.e, $_.e, $_.e])]); //#18380
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#18380
        bwipp_micropdf417.__18381__ = 1; //#18380
        $_ = Object.getPrototypeOf($_); //#18380
    } //#18380
    if ($_.raw || $_.cca) { //#18402
        $_.datcws = $a($_.barcode.length); //#18385
        $_.i = 0; //#18386
        $_.j = 0; //#18386
        for (;;) { //#18397
            if ($_.i >= ($_.barcode.length - 3)) { //#18388
                break; //#18388
            } //#18388
            if ($get($_.barcode, $_.i) != 94) { //#18389
                break; //#18389
            } //#18389
            var _2a = $geti($_.barcode, $_.i + 1, 3); //#18390
            $k[$j++] = _2a; //#18392
            $k[$j++] = false; //#18392
            for (var _2b = 0, _2c = _2a.length; _2b < _2c; _2b++) { //#18392
                var _2d = $get(_2a, _2b); //#18392
                if ((_2d < 48) || (_2d > 57)) { //#18391
                    $j--; //#18391
                    $k[$j++] = true; //#18391
                } //#18391
            } //#18391
            if ($k[--$j]) { //#18392
                $j--; //#18392
                break; //#18392
            } //#18392
            $_.cw = $cvi($k[--$j]); //#18393
            $put($_.datcws, $_.j, $_.cw); //#18394
            $_.i = $_.i + 4; //#18395
            $_.j = $_.j + 1; //#18396
        } //#18396
        if ($_.i != $_.barcode.length) { //#18400
            $k[$j++] = 'bwipp.micropdf417badCcaRawFormat#18399'; //#18399
            $k[$j++] = "cca and raw data must be formatted as ^NNN"; //#18399
            bwipp_raiseerror(); //#18399
        } //#18399
        $_.datcws = $geti($_.datcws, 0, $_.j); //#18401
    } //#18401
    $_.encb = function() {
        $_.in = $k[--$j]; //#18405
        $_.inlen = $_.in.length; //#18406
        $_.out = $a(((~~($_.inlen / 6)) * 5) + ($_.inlen % 6)); //#18407
        for (var _2x = 0, _2w = (~~($_.inlen / 6)) - 1; _2x <= _2w; _2x += 1) { //#18430
            $_.k = _2x; //#18409
            $k[$j++] = Infinity; //#18410
            $aload($geti($_.in, $_.k * 6, 3)); //#18410
            $_.msbs = $a(); //#18410
            $k[$j++] = Infinity; //#18411
            $aload($_.msbs); //#18412
            var _33 = $k[--$j]; //#18412
            var _34 = $k[--$j]; //#18412
            var _35 = $k[--$j]; //#18412
            $k[$j++] = $f(($f(_33 + (_34 * 256))) + (_35 * 65536)); //#18413
            for (var _36 = 0, _37 = 3; _36 < _37; _36++) { //#18413
                var _38 = $k[--$j]; //#18413
                $k[$j++] = _38 % 900; //#18413
                $k[$j++] = ~~(_38 / 900); //#18413
            } //#18413
            $_.mscs = $a(); //#18413
            $k[$j++] = Infinity; //#18415
            $aload($geti($_.in, ($_.k * 6) + 3, 3)); //#18415
            $_.lsbs = $a(); //#18415
            $k[$j++] = Infinity; //#18416
            $aload($_.lsbs); //#18417
            var _3F = $k[--$j]; //#18417
            var _3G = $k[--$j]; //#18417
            var _3H = $k[--$j]; //#18417
            $k[$j++] = $f(($f(_3F + (_3G * 256))) + (_3H * 65536)); //#18418
            for (var _3I = 0, _3J = 3; _3I < _3J; _3I++) { //#18418
                var _3K = $k[--$j]; //#18418
                $k[$j++] = _3K % 900; //#18418
                $k[$j++] = ~~(_3K / 900); //#18418
            } //#18418
            $_.lscs = $a(); //#18418
            var _3N = $get($_.lscs, 0); //#18420
            var _3P = $get($_.mscs, 0); //#18420
            $put($_.out, ($_.k * 5) + 4, ($f(_3N + (_3P * 316))) % 900); //#18421
            var _3T = $get($_.lscs, 1); //#18422
            var _3V = $get($_.mscs, 0); //#18422
            var _3X = $get($_.mscs, 1); //#18422
            $put($_.out, ($_.k * 5) + 3, ($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) % 900); //#18423
            var _3b = $get($_.lscs, 2); //#18424
            var _3d = $get($_.mscs, 0); //#18424
            var _3f = $get($_.mscs, 1); //#18424
            var _3h = $get($_.mscs, 2); //#18424
            $put($_.out, ($_.k * 5) + 2, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) / 900)) + _3b)) + (_3d * 20))) + (_3f * 641))) + (_3h * 316))) % 900); //#18425
            var _3l = $get($_.lscs, 3); //#18426
            var _3n = $get($_.mscs, 1); //#18426
            var _3p = $get($_.mscs, 2); //#18426
            $put($_.out, ($_.k * 5) + 1, ($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) / 900)) + _3b)) + (_3d * 20))) + (_3f * 641))) + (_3h * 316))) / 900)) + _3l)) + (_3n * 20))) + (_3p * 641))) % 900); //#18427
            $put($_.out, $_.k * 5, ($f((~~(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_3N + (_3P * 316))) / 900)) + _3T)) + (_3V * 641))) + (_3X * 316))) / 900)) + _3b)) + (_3d * 20))) + (_3f * 641))) + (_3h * 316))) / 900)) + _3l)) + (_3n * 20))) + (_3p * 641))) / 900)) + ($get($_.mscs, 2) * 20))) % 900); //#18429
        } //#18429
        $_.rem = $_.inlen % 6; //#18431
        if ($_.rem != 0) { //#18436
            $k[$j++] = $_.out; //#18434
            $k[$j++] = $_.out.length - $_.rem; //#18434
            $k[$j++] = Infinity; //#18434
            $aload($geti($_.in, $_.inlen - $_.rem, $_.rem)); //#18434
            var _46 = $a(); //#18434
            var _47 = $k[--$j]; //#18435
            $puti($k[--$j], _47, _46); //#18435
        } //#18435
        $k[$j++] = $_.out; //#18437
    }; //#18437
    if ($_.ccb) { //#18446
        $_.barlen = $_.barcode.length; //#18441
        $_.datcws = $a((((~~($_.barlen / 6)) * 5) + ($_.barlen % 6)) + 2); //#18442
        $put($_.datcws, 0, 920); //#18443
        var _4I = (($_.barlen % 6) == 0) ? 924 : 901; //#18444
        $put($_.datcws, 1, _4I); //#18444
        $k[$j++] = $_.datcws; //#18445
        $k[$j++] = 2; //#18445
        $k[$j++] = Infinity; //#18445
        $forall($_.barcode); //#18445
        var _4L = $a(); //#18445
        $k[$j++] = _4L; //#18445
        $_.encb(); //#18445
        var _4M = $k[--$j]; //#18445
        var _4N = $k[--$j]; //#18445
        $puti($k[--$j], _4N, _4M); //#18445
    } //#18445
    if (((!$_.raw) && (!$_.cca)) && (!$_.ccb)) { //#18847
        var _4U = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true]
        ]); //#18457
        $_.fncvals = _4U; //#18458
        $k[$j++] = 'msg'; //#18459
        $k[$j++] = $_.barcode; //#18459
        $k[$j++] = $_.fncvals; //#18459
        bwipp_parseinput(); //#18459
        var _4X = $k[--$j]; //#18459
        $_[$k[--$j]] = _4X; //#18459
        $_.msglen = $_.msg.length; //#18460
        if ($_.msglen >= 9) { //#18478
            $aload($geti($_.msg, 0, 7)); //#18464
            var _4d = $k[--$j]; //#18465
            var _4e = $k[--$j]; //#18465
            $k[$j++] = _4d == 29; //#18465
            $k[$j++] = _4e; //#18465
            $j--; //#18465
            var _4f = $k[--$j]; //#18465
            var _4g = $k[--$j]; //#18465
            var _4h = $k[--$j]; //#18465
            var _4i = $k[--$j]; //#18466
            var _4j = $k[--$j]; //#18466
            var _4k = $k[--$j]; //#18466
            if (((((_4f && (_4g == 48)) && (_4h == 30)) && (_4i == 62)) && (_4j == 41)) && (_4k == 91)) { //#18477
                $aload($geti($_.msg, $_.msglen - 2, 2)); //#18467
                var _4o = $k[--$j]; //#18468
                var _4p = $k[--$j]; //#18468
                if ((_4o == 4) && (_4p == 30)) { //#18476
                    if ($get($_.msg, 5) == 53) { //#18473
                        $k[$j++] = Infinity; //#18470
                        $k[$j++] = $_.m05; //#18470
                        $aload($geti($_.msg, 7, $_.msg.length - 9)); //#18470
                        $_.msg = $a(); //#18470
                    } else { //#18473
                        if ($get($_.msg, 5) == 54) { //#18474
                            $k[$j++] = Infinity; //#18473
                            $k[$j++] = $_.m06; //#18473
                            $aload($geti($_.msg, 7, $_.msg.length - 9)); //#18473
                            $_.msg = $a(); //#18473
                        } //#18473
                    } //#18473
                } //#18473
            } //#18473
        } //#18473
        $_.msglen = $_.msg.length; //#18479
        $k[$j++] = Infinity; //#18482
        for (var _56 = 0, _57 = $_.msglen; _56 < _57; _56++) { //#18482
            $k[$j++] = 0; //#18482
        } //#18482
        $k[$j++] = 0; //#18482
        $_.numdigits = $a(); //#18482
        $k[$j++] = Infinity; //#18483
        for (var _5A = 0, _5B = $_.msglen; _5A < _5B; _5A++) { //#18483
            $k[$j++] = 0; //#18483
        } //#18483
        $k[$j++] = 0; //#18483
        $_.numtext = $a(); //#18483
        $k[$j++] = Infinity; //#18484
        for (var _5E = 0, _5F = $_.msglen; _5E < _5F; _5E++) { //#18484
            $k[$j++] = 0; //#18484
        } //#18484
        $k[$j++] = 0; //#18484
        $_.numbytes = $a(); //#18484
        $k[$j++] = Infinity; //#18485
        for (var _5I = 0, _5J = $_.msglen; _5I < _5J; _5I++) { //#18485
            $k[$j++] = 0; //#18485
        } //#18485
        $_.iseci = $a(); //#18485
        for (var _5M = $_.msglen - 1; _5M >= 0; _5M -= 1) { //#18498
            $_.i = _5M; //#18487
            var _5P = $get($_.msg, $_.i); //#18488
            if ((_5P >= 48) && (_5P <= 57)) { //#18490
                $put($_.numdigits, $_.i, $f($get($_.numdigits, $_.i + 1) + 1)); //#18489
            } //#18489
            var _5Z = $get($_.alltext, $get($_.msg, $_.i)) !== undefined; //#18491
            if (_5Z && ($get($_.numdigits, $_.i) < 13)) { //#18493
                $put($_.numtext, $_.i, $f($get($_.numtext, $_.i + 1) + 1)); //#18492
            } //#18492
            if ((($get($_.msg, $_.i) >= 0) && ($get($_.numtext, $_.i) < 5)) && ($get($_.numdigits, $_.i) < 13)) { //#18496
                $put($_.numbytes, $_.i, $f($get($_.numbytes, $_.i + 1) + 1)); //#18495
            } //#18495
            $put($_.iseci, $_.i, $get($_.msg, $_.i) <= -1000000); //#18497
        } //#18497
        $_.numdigits = $geti($_.numdigits, 0, $_.msglen); //#18499
        $_.numtext = $geti($_.numtext, 0, $_.msglen); //#18500
        $_.numbytes = $geti($_.numbytes, 0, $_.msglen); //#18501
        $_.seq = $a([]); //#18503
        $_.seqlen = 0; //#18503
        $_.state = $_.B; //#18503
        $_.p = 0; //#18503
        for (;;) { //#18565
            if ($_.p == $_.msglen) { //#18504
                break; //#18504
            } //#18504
            var _6H = $get($_.msg, $_.p); //#18505
            if (($_.p == 0) && ((_6H == $_.m05) || (_6H == $_.m06))) { //#18563
                $k[$j++] = Infinity; //#18506
                $aload($_.seq); //#18507
                var _6P = ($get($_.msg, $_.p) == $_.m05) ? $_.m05 : $_.m06; //#18508
                $k[$j++] = _6P; //#18508
                $_.seq = $a(); //#18508
                $_.p = $_.p + 1; //#18510
                $_.seqlen = $_.seqlen + 1; //#18511
            } else { //#18563
                if ($get($_.iseci, $_.p)) { //#18563
                    $_.eci = $get($_.msg, $_.p); //#18514
                    $k[$j++] = Infinity; //#18515
                    $aload($_.seq); //#18516
                    $k[$j++] = $a([$_.eci]); //#18517
                    $_.seq = $a(); //#18517
                    $_.p = $_.p + 1; //#18519
                    $k[$j++] = 'seqlen'; //#18520
                    $k[$j++] = $_.seqlen; //#18520
                    if ($_.eci <= -1810900) { //#18520
                        $k[$j++] = 2; //#18520
                    } else { //#18520
                        var _6h = ($_.eci <= -1000900) ? 3 : 2; //#18520
                        $k[$j++] = _6h; //#18520
                    } //#18520
                    var _6i = $k[--$j]; //#18520
                    var _6j = $k[--$j]; //#18520
                    $_[$k[--$j]] = $f(_6j + _6i); //#18520
                } else { //#18563
                    $_.n = $get($_.numdigits, $_.p); //#18522
                    if (($_.n >= 13) || (($_.n == $_.msglen) && ($_.n >= 8))) { //#18563
                        $k[$j++] = Infinity; //#18524
                        $aload($_.seq); //#18525
                        $k[$j++] = $_.nl; //#18527
                        $k[$j++] = Infinity; //#18527
                        $aload($geti($_.msg, $_.p, $_.n)); //#18527
                        var _6y = $a(); //#18527
                        $k[$j++] = _6y; //#18527
                        $_.seq = $a(); //#18527
                        $_.state = $_.N; //#18529
                        $_.p = $f($_.p + $_.n); //#18530
                        $_.seqlen = $f(($_.seqlen + 1) + $_.n); //#18531
                    } else { //#18563
                        $_.t = $get($_.numtext, $_.p); //#18533
                        if ($_.t >= 5) { //#18563
                            $k[$j++] = Infinity; //#18535
                            $aload($_.seq); //#18536
                            if ($_.state != $_.T) { //#18539
                                $k[$j++] = $_.tl; //#18538
                            } //#18538
                            $k[$j++] = Infinity; //#18540
                            $aload($geti($_.msg, $_.p, $_.t)); //#18540
                            var _7H = $a(); //#18540
                            $k[$j++] = _7H; //#18540
                            $_.seq = $a(); //#18540
                            $_.state = $_.T; //#18542
                            $_.p = $f($_.p + $_.t); //#18543
                            $_.seqlen = $f($f($_.seqlen + 1) + $_.t); //#18544
                        } else { //#18563
                            $_.b = $get($_.numbytes, $_.p); //#18546
                            if (($_.b == 1) && ($_.state == $_.T)) { //#18563
                                $k[$j++] = Infinity; //#18548
                                $aload($_.seq); //#18549
                                $k[$j++] = $_.bs; //#18551
                                $k[$j++] = $a([$get($_.msg, $_.p)]); //#18551
                                $_.seq = $a(); //#18551
                                $_.p = $f($_.p + $_.b); //#18553
                                $_.seqlen = $f($_.seqlen + 2); //#18554
                            } else { //#18563
                                $k[$j++] = Infinity; //#18556
                                $aload($_.seq); //#18557
                                var _7g = (($_.b % 6) != 0) ? $_.bl : $_.bl6; //#18558
                                $k[$j++] = _7g; //#18559
                                $k[$j++] = Infinity; //#18559
                                $aload($geti($_.msg, $_.p, $_.b)); //#18559
                                var _7l = $a(); //#18559
                                $k[$j++] = _7l; //#18559
                                $_.seq = $a(); //#18559
                                $_.state = $_.B; //#18561
                                $_.p = $f($_.p + $_.b); //#18562
                                $_.seqlen = $f($f($_.seqlen + 1) + $_.b); //#18563
                            } //#18563
                        } //#18563
                    } //#18563
                } //#18563
            } //#18563
        } //#18563
        $k[$j++] = Infinity; //#18567
        $k[$j++] = $_.tl; //#18568
        $k[$j++] = 900; //#18568
        $k[$j++] = $_.bl; //#18568
        $k[$j++] = 901; //#18568
        $k[$j++] = $_.bl6; //#18568
        $k[$j++] = 924; //#18568
        $k[$j++] = $_.nl; //#18568
        $k[$j++] = 902; //#18568
        $k[$j++] = $_.bs; //#18568
        $k[$j++] = 913; //#18568
        $k[$j++] = $_.m05; //#18568
        $k[$j++] = 916; //#18568
        $k[$j++] = $_.m06; //#18568
        $k[$j++] = 917; //#18568
        $_.latchcws = $d(); //#18569
        $_.enca = function() {
            var _84 = $get($get($_.charvals, $_.A), $k[--$j]); //#18572
            $k[$j++] = _84; //#18572
        }; //#18572
        $_.encl = function() {
            var _89 = $get($get($_.charvals, $_.L), $k[--$j]); //#18573
            $k[$j++] = _89; //#18573
        }; //#18573
        $_.encm = function() {
            var _8E = $get($get($_.charvals, $_.M), $k[--$j]); //#18574
            $k[$j++] = _8E; //#18574
        }; //#18574
        $_.encp = function() {
            var _8J = $get($get($_.charvals, $_.P), $k[--$j]); //#18575
            $k[$j++] = _8J; //#18575
        }; //#18575
        $_.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#18576
        $_.addtotext = function() {
            $put($_.text, $_.l, $k[--$j]); //#18579
            $_.l = $_.l + 1; //#18580
        }; //#18580
        $_.enct = function() {
            $_.in = $k[--$j]; //#18585
            $_.curlen = $a([$_.e, $_.e, $_.e, $_.e]); //#18587
            $put($_.curlen, $_.submode, 0); //#18588
            $_.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#18589
            $forall($_.in, function() { //#18659
                $_.char = $k[--$j]; //#18594
                for (;;) { //#18615
                    $_.imp = false; //#18598
                    var _8i = $a([$_.A, $_.L, $_.M, $_.P]); //#18599
                    for (var _8j = 0, _8k = _8i.length; _8j < _8k; _8j++) { //#18613
                        $_.x = $get(_8i, _8j); //#18600
                        var _8q = $a([$_.A, $_.L, $_.M, $_.P]); //#18601
                        for (var _8r = 0, _8s = _8q.length; _8r < _8s; _8r++) { //#18612
                            $_.y = $get(_8q, _8r); //#18602
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#18603
                            if ($_.cost < $get($_.curlen, $_.y)) { //#18611
                                $put($_.curlen, $_.y, $_.cost); //#18605
                                $k[$j++] = $_.curseq; //#18608
                                $k[$j++] = $_.y; //#18608
                                $k[$j++] = Infinity; //#18606
                                $aload($get($_.curseq, $_.x)); //#18607
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#18608
                                var _9J = $a(); //#18608
                                var _9K = $k[--$j]; //#18609
                                $put($k[--$j], _9K, _9J); //#18609
                                $_.imp = true; //#18610
                            } //#18610
                        } //#18610
                    } //#18610
                    if (!$_.imp) { //#18614
                        break; //#18614
                    } //#18614
                } //#18614
                $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e]); //#18618
                $_.nxtseq = $a(4); //#18619
                var _9X = $a([$_.A, $_.L, $_.M, $_.P]); //#18621
                for (var _9Y = 0, _9Z = _9X.length; _9Y < _9Z; _9Y++) { //#18654
                    $_.x = $get(_9X, _9Y); //#18622
                    for (;;) { //#18652
                        var _9f = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#18626
                        if (!_9f) { //#18626
                            break; //#18626
                        } //#18626
                        $_.cost = $f($get($_.curlen, $_.x) + 1); //#18629
                        if ($_.cost < $get($_.nxtlen, $_.x)) { //#18633
                            $put($_.nxtlen, $_.x, $_.cost); //#18631
                            $k[$j++] = $_.nxtseq; //#18632
                            $k[$j++] = $_.x; //#18632
                            $k[$j++] = Infinity; //#18632
                            $aload($get($_.curseq, $_.x)); //#18632
                            $k[$j++] = $_.char; //#18632
                            var _9w = $a(); //#18632
                            var _9x = $k[--$j]; //#18632
                            $put($k[--$j], _9x, _9w); //#18632
                        } //#18632
                        var _A3 = $a([$_.A, $_.L, $_.M, $_.P]); //#18636
                        for (var _A4 = 0, _A5 = _A3.length; _A4 < _A5; _A4++) { //#18649
                            $_.y = $get(_A3, _A4); //#18637
                            if ($ne($_.x, $_.y)) { //#18648
                                $_.cost = $f($f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)) + 1); //#18639
                                if ($_.cost < $get($_.nxtlen, $_.y)) { //#18647
                                    $put($_.nxtlen, $_.y, $_.cost); //#18641
                                    $k[$j++] = $_.nxtseq; //#18645
                                    $k[$j++] = $_.y; //#18645
                                    $k[$j++] = Infinity; //#18642
                                    $aload($get($_.curseq, $_.y)); //#18643
                                    var _AV = ($_.x == $_.A) ? $_.as : $_.ps; //#18644
                                    $k[$j++] = _AV; //#18645
                                    $k[$j++] = $_.char; //#18645
                                    var _AX = $a(); //#18645
                                    var _AY = $k[--$j]; //#18646
                                    $put($k[--$j], _AY, _AX); //#18646
                                } //#18646
                            } //#18646
                        } //#18646
                        break; //#18651
                    } //#18651
                } //#18651
                $_.curlen = $_.nxtlen; //#18656
                $_.curseq = $_.nxtseq; //#18657
            }); //#18657
            $_.minseq = $_.e; //#18662
            var _Ah = $a([$_.A, $_.L, $_.M, $_.P]); //#18663
            for (var _Ai = 0, _Aj = _Ah.length; _Ai < _Aj; _Ai++) { //#18669
                $_.k = $get(_Ah, _Ai); //#18664
                if ($get($_.curlen, $_.k) < $_.minseq) { //#18668
                    $_.minseq = $get($_.curlen, $_.k); //#18666
                    $_.txtseq = $get($_.curseq, $_.k); //#18667
                } //#18667
            } //#18667
            $_.text = $a($_.minseq); //#18672
            $_.k = 0; //#18673
            $_.l = 0; //#18673
            for (;;) { //#18693
                if ($_.k >= $_.txtseq.length) { //#18674
                    break; //#18674
                } //#18674
                $_.char = $get($_.txtseq, $_.k); //#18676
                $k[$j++] = $_.char; //#18679
                if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                    break;
                } //#18679
                $_.addtotext(); //#18679
                $_.k = $_.k + 1; //#18680
                if (($_.char == $_.as) || ($_.char == $_.ps)) { //#18686
                    $k[$j++] = $get($_.txtseq, $_.k); //#18684
                    if ($_.char == $_.as) { //#18684
                        $_.enca(); //#18684
                    } else { //#18684
                        $_.encp(); //#18684
                    } //#18684
                    $_.addtotext(); //#18684
                    $_.k = $_.k + 1; //#18685
                } //#18685
                if ($_.char == $_.al) { //#18689
                    $_.submode = $_.A; //#18689
                } //#18689
                if ($_.char == $_.ll) { //#18690
                    $_.submode = $_.L; //#18690
                } //#18690
                if ($_.char == $_.ml) { //#18691
                    $_.submode = $_.M; //#18691
                } //#18691
                if ($_.char == $_.pl) { //#18692
                    $_.submode = $_.P; //#18692
                } //#18692
            } //#18692
            if (($_.text.length % 2) == 1) { //#18740
                if ($_.submode == $_.P) { //#18736
                    $k[$j++] = 'pad'; //#18697
                    $k[$j++] = $_.al; //#18697
                    $_.encp(); //#18697
                    var _BY = $k[--$j]; //#18697
                    $_[$k[--$j]] = _BY; //#18697
                    $_.submode = $_.A; //#18698
                } else { //#18736
                    $_.nextecitext = false; //#18701
                    for (var _Be = $_.i + 1, _Bd = $_.seq.length - 1; _Be <= _Bd; _Be += 1) { //#18708
                        $_.ti = _Be; //#18704
                        if ($ne($type($get($_.seq, $_.ti)), 'arraytype')) { //#18705
                            $_.nextecitext = false; //#18705
                            break; //#18705
                        } //#18705
                        if ($get($get($_.seq, $_.ti), 0) > -1000000) { //#18706
                            break; //#18706
                        } //#18706
                        $_.nextecitext = true; //#18707
                    } //#18707
                    if ($_.nextecitext) { //#18736
                        if ($_.submode == $_.A) { //#18733
                            var _Bx = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#18711
                            if (_Bx) { //#18716
                                $k[$j++] = 'pad'; //#18712
                                $k[$j++] = $_.ll; //#18712
                                $_.enca(); //#18712
                                var _Bz = $k[--$j]; //#18712
                                $_[$k[--$j]] = _Bz; //#18712
                                $_.submode = $_.L; //#18713
                            } else { //#18716
                                $k[$j++] = 'pad'; //#18715
                                $k[$j++] = $_.ml; //#18715
                                $_.enca(); //#18715
                                var _C3 = $k[--$j]; //#18715
                                $_[$k[--$j]] = _C3; //#18715
                                $_.submode = $_.M; //#18716
                            } //#18716
                        } else { //#18733
                            if ($_.submode == $_.M) { //#18733
                                var _CF = $get($get($_.charvals, $_.L), $get($get($_.seq, $_.ti), 0)) !== undefined; //#18720
                                if (_CF) { //#18729
                                    $k[$j++] = 'pad'; //#18721
                                    $k[$j++] = $_.ll; //#18721
                                    $_.encm(); //#18721
                                    var _CH = $k[--$j]; //#18721
                                    $_[$k[--$j]] = _CH; //#18721
                                    $_.submode = $_.L; //#18722
                                } else { //#18729
                                    var _CR = $get($get($_.charvals, $_.P), $get($get($_.seq, $_.ti), 0)) !== undefined; //#18724
                                    if (_CR) { //#18729
                                        $k[$j++] = 'pad'; //#18725
                                        $k[$j++] = $_.pl; //#18725
                                        $_.encm(); //#18725
                                        var _CT = $k[--$j]; //#18725
                                        $_[$k[--$j]] = _CT; //#18725
                                        $_.submode = $_.P; //#18726
                                    } else { //#18729
                                        $k[$j++] = 'pad'; //#18728
                                        $k[$j++] = $_.al; //#18728
                                        $_.encm(); //#18728
                                        var _CX = $k[--$j]; //#18728
                                        $_[$k[--$j]] = _CX; //#18728
                                        $_.submode = $_.A; //#18729
                                    } //#18729
                                } //#18729
                            } else { //#18733
                                $k[$j++] = 'pad'; //#18732
                                $k[$j++] = $_.ml; //#18732
                                $_.encl(); //#18732
                                var _Cb = $k[--$j]; //#18732
                                $_[$k[--$j]] = _Cb; //#18732
                                $_.submode = $_.M; //#18733
                            } //#18733
                        } //#18733
                    } else { //#18736
                        $k[$j++] = 'pad'; //#18736
                        $k[$j++] = $_.ps; //#18736
                        if ($_[$get($_.textencfuncs, $_.submode)]() === true) {
                            return true;
                        } //#18736
                        var _Cj = $k[--$j]; //#18736
                        $_[$k[--$j]] = _Cj; //#18736
                    } //#18736
                } //#18736
                $k[$j++] = Infinity; //#18739
                $aload($_.text); //#18739
                $k[$j++] = $_.pad; //#18739
                $_.text = $a(); //#18739
            } //#18739
            $_.out = $a(~~($_.text.length / 2)); //#18742
            for (var _Cs = 0, _Cr = $_.out.length - 1; _Cs <= _Cr; _Cs += 1) { //#18746
                $_.k = _Cs; //#18744
                $put($_.out, $_.k, $f(($get($_.text, $_.k * 2) * 30) + $get($_.text, ($_.k * 2) + 1))); //#18745
            } //#18745
            $k[$j++] = $_.out; //#18748
        }; //#18748
        $_.encn = function() {
            $_.in = $k[--$j]; //#18753
            $_.out = $a([]); //#18754
            for (var _D6 = 0, _D5 = $_.in.length - 1; _D6 <= _D5; _D6 += 44) { //#18782
                $_.k = _D6; //#18756
                $k[$j++] = Infinity; //#18757
                var _DB = $_.in.length - $_.k; //#18758
                $k[$j++] = 1; //#18758
                $k[$j++] = $_.in; //#18758
                $k[$j++] = $_.k; //#18758
                $k[$j++] = _DB; //#18758
                if (_DB > 44) { //#18758
                    $j--; //#18758
                    $k[$j++] = 44; //#18758
                } //#18758
                var _DC = $k[--$j]; //#18758
                var _DD = $k[--$j]; //#18758
                var _DF = $geti($k[--$j], _DD, _DC); //#18758
                for (var _DG = 0, _DH = _DF.length; _DG < _DH; _DG++) { //#18759
                    $k[$j++] = $f($get(_DF, _DG) - 48); //#18759
                } //#18759
                $_.gmod = $a(); //#18759
                $_.cwn = $a([]); //#18761
                for (;;) { //#18780
                    $_.dv = 900; //#18762
                    $_.gmul = $a([]); //#18763
                    $_.val = 0; //#18763
                    for (;;) { //#18775
                        if ($_.gmod.length == 0) { //#18764
                            break; //#18764
                        } //#18764
                        $_.val = $f(($_.val * 10) + $get($_.gmod, 0)); //#18765
                        $_.gmod = $geti($_.gmod, 1, $_.gmod.length - 1); //#18766
                        if ($_.val < $_.dv) { //#18772
                            if ($_.gmul.length != 0) { //#18770
                                $k[$j++] = Infinity; //#18769
                                $aload($_.gmul); //#18769
                                $k[$j++] = 0; //#18769
                                $_.gmul = $a(); //#18769
                            } //#18769
                        } else { //#18772
                            $k[$j++] = Infinity; //#18772
                            $aload($_.gmul); //#18772
                            $k[$j++] = ~~($_.val / $_.dv); //#18772
                            $_.gmul = $a(); //#18772
                        } //#18772
                        $_.val = $_.val % $_.dv; //#18774
                    } //#18774
                    $_.dv = $_.val; //#18776
                    $k[$j++] = Infinity; //#18777
                    $k[$j++] = $_.dv; //#18777
                    $aload($_.cwn); //#18777
                    $_.cwn = $a(); //#18777
                    $_.gmod = $_.gmul; //#18778
                    if ($_.gmul.length == 0) { //#18779
                        break; //#18779
                    } //#18779
                } //#18779
                $k[$j++] = Infinity; //#18781
                $aload($_.out); //#18781
                $aload($_.cwn); //#18781
                $_.out = $a(); //#18781
            } //#18781
            $k[$j++] = $_.out; //#18783
        }; //#18783
        $_.ence = function() {
            var _Dq = $f((-$get($k[--$j], 0)) - 1000000); //#18788
            $k[$j++] = _Dq; //#18796
            if (_Dq <= 899) { //#18795
                var _Dr = $k[--$j]; //#18789
                $k[$j++] = 927; //#18789
                $k[$j++] = _Dr; //#18789
                $astore($a(2)); //#18789
            } else { //#18795
                var _Dt = $k[--$j]; //#18790
                $k[$j++] = _Dt; //#18796
                if (_Dt <= 810899) { //#18795
                    var _Du = $k[--$j]; //#18791
                    $k[$j++] = 926; //#18791
                    $k[$j++] = (~~(_Du / 900)) - 1; //#18791
                    $k[$j++] = _Du % 900; //#18791
                    $astore($a(3)); //#18791
                } else { //#18795
                    var _Dw = $k[--$j]; //#18792
                    $k[$j++] = _Dw; //#18796
                    if (_Dw <= 811799) { //#18795
                        var _Dx = $k[--$j]; //#18793
                        $k[$j++] = 925; //#18793
                        $k[$j++] = $f(_Dx - 810900); //#18793
                        $astore($a(2)); //#18793
                    } else { //#18795
                        $k[$j++] = 'bwipp.pdf417badECI#18795'; //#18795
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#18795
                        bwipp_raiseerror(); //#18795
                    } //#18795
                } //#18795
            } //#18795
        }; //#18795
        $_.encfuncs = $a(['enct', 'encn', 'encb']); //#18799
        $_.addtocws = function() {
            var _E0 = $k[--$j]; //#18802
            $puti($_.datcws, $_.j, _E0); //#18802
            $_.j = _E0.length + $_.j; //#18803
        }; //#18803
        $_.datcws = $a($_.seqlen); //#18808
        $_.i = 0; //#18809
        $_.j = 0; //#18809
        for (;;) { //#18845
            if ($_.i >= $_.seq.length) { //#18810
                break; //#18810
            } //#18810
            $_.chars = $get($_.seq, $_.i); //#18811
            if ($eq($type($_.chars), 'arraytype')) { //#18841
                if ($get($_.chars, 0) <= -1000000) { //#18816
                    $k[$j++] = $_.chars; //#18814
                    $_.ence(); //#18814
                    $_.addtocws(); //#18814
                } else { //#18816
                    $k[$j++] = $_.chars; //#18816
                    if ($_[$get($_.encfuncs, $_.state)]() === true) {
                        break;
                    } //#18816
                    $_.addtocws(); //#18816
                } //#18816
            } else { //#18841
                $k[$j++] = $a([$get($_.latchcws, $_.chars)]); //#18819
                $_.addtocws(); //#18819
                if ($_.chars == $_.tl) { //#18820
                    $_.state = $_.T; //#18820
                    $_.submode = $_.A; //#18820
                } //#18820
                if ($_.chars == $_.nl) { //#18821
                    $_.state = $_.N; //#18821
                } //#18821
                if (($_.chars == $_.bl) || ($_.chars == $_.bl6)) { //#18822
                    $_.state = $_.B; //#18822
                } //#18822
                if ($_.chars == $_.bs) { //#18826
                    $_.i = $_.i + 1; //#18824
                    $k[$j++] = $get($_.seq, $_.i); //#18825
                    $_.encb(); //#18825
                    $_.addtocws(); //#18825
                } //#18825
                if ($_.chars == $_.m05) { //#18834
                    if (($_.i + 1) < $_.seq.length) { //#18832
                        if ($get($_.seq, $_.i + 1) == $_.nl) { //#18831
                            $_.i = $_.i + 1; //#18830
                        } //#18830
                    } //#18830
                    $_.state = $_.N; //#18833
                } //#18833
                if ($_.chars == $_.m06) { //#18842
                    if (($_.i + 1) < $_.seq.length) { //#18840
                        if ($get($_.seq, $_.i + 1) == $_.tl) { //#18839
                            $_.i = $_.i + 1; //#18838
                        } //#18838
                    } //#18838
                    $_.state = $_.T; //#18841
                    $_.submode = $_.M; //#18841
                } //#18841
            } //#18841
            $_.i = $_.i + 1; //#18844
        } //#18844
        $_.datcws = $geti($_.datcws, 0, $_.j); //#18846
    } //#18846
    if (!bwipp_micropdf417.__18910__) { //#18910
        $_ = Object.create($_); //#18910
        $_.ccametrics = $a([$a([2, 5, 4, 39, 0, 19]), $a([2, 6, 4, 1, 0, 33]), $a([2, 7, 5, 32, 0, 12]), $a([2, 8, 5, 8, 0, 40]), $a([2, 9, 6, 14, 0, 46]), $a([2, 10, 6, 43, 0, 23]), $a([2, 12, 7, 20, 0, 52]), $a([3, 4, 4, 11, 43, 23]), $a([3, 5, 5, 1, 33, 13]), $a([3, 6, 6, 5, 37, 17]), $a([3, 7, 7, 15, 47, 27]), $a([3, 8, 7, 21, 1, 33]), $a([4, 3, 4, 40, 20, 52]), $a([4, 4, 5, 43, 23, 3]), $a([4, 5, 6, 46, 26, 6]), $a([4, 6, 7, 34, 14, 46]), $a([4, 7, 8, 29, 9, 41])]); //#18870
        $_.nonccametrics = $a([$a([1, 11, 7, 1, 0, 9]), $a([1, 14, 7, 8, 0, 8]), $a([1, 17, 7, 36, 0, 36]), $a([1, 20, 8, 19, 0, 19]), $a([1, 24, 8, 9, 0, 17]), $a([1, 28, 8, 25, 0, 33]), $a([2, 8, 8, 1, 0, 1]), $a([2, 11, 9, 1, 0, 9]), $a([2, 14, 9, 8, 0, 8]), $a([2, 17, 10, 36, 0, 36]), $a([2, 20, 11, 19, 0, 19]), $a([2, 23, 13, 9, 0, 17]), $a([2, 26, 15, 27, 0, 35]), $a([3, 6, 12, 1, 1, 1]), $a([3, 8, 14, 7, 7, 7]), $a([3, 10, 16, 15, 15, 15]), $a([3, 12, 18, 25, 25, 25]), $a([3, 15, 21, 37, 37, 37]), $a([3, 20, 26, 1, 17, 33]), $a([3, 26, 32, 1, 9, 17]), $a([3, 32, 38, 21, 29, 37]), $a([3, 38, 44, 15, 31, 47]), $a([3, 44, 50, 1, 25, 49]), $a([4, 4, 8, 47, 19, 43]), $a([4, 6, 12, 1, 1, 1]), $a([4, 8, 14, 7, 7, 7]), $a([4, 10, 16, 15, 15, 15]), $a([4, 12, 18, 25, 25, 25]), $a([4, 15, 21, 37, 37, 37]), $a([4, 20, 26, 1, 17, 33]), $a([4, 26, 32, 1, 9, 17]), $a([4, 32, 38, 21, 29, 37]), $a([4, 38, 44, 15, 31, 47]), $a([4, 44, 50, 1, 25, 49])]); //#18909
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#18909
        bwipp_micropdf417.__18910__ = 1; //#18909
        $_ = Object.getPrototypeOf($_); //#18909
    } //#18909
    $k[$j++] = 'metrics'; //#18912
    if ($_.cca) { //#18912
        $k[$j++] = $_.ccametrics; //#18912
    } else { //#18912
        $k[$j++] = $_.nonccametrics; //#18912
    } //#18912
    var _G1 = $k[--$j]; //#18912
    $_[$k[--$j]] = _G1; //#18912
    $_.urows = $_.rows; //#18915
    $_.ucols = $_.columns; //#18916
    $forall($_.metrics, function() { //#18931
        $_.m = $k[--$j]; //#18918
        $_.c = $get($_.m, 0); //#18919
        $_.r = $get($_.m, 1); //#18920
        $_.k = $get($_.m, 2); //#18921
        $_.rapl = $get($_.m, 3); //#18922
        $_.rapc = $get($_.m, 4); //#18923
        $_.rapr = $get($_.m, 5); //#18924
        $_.ncws = $f(($_.r * $_.c) - $_.k); //#18925
        $_.okay = true; //#18926
        if ($_.datcws.length > $_.ncws) { //#18927
            $_.okay = false; //#18927
        } //#18927
        if (($_.urows != 0) && ($_.urows != $_.r)) { //#18928
            $_.okay = false; //#18928
        } //#18928
        if (($_.ucols != 0) && ($_.ucols != $_.c)) { //#18929
            $_.okay = false; //#18929
        } //#18929
        if ($_.okay) { //#18930
            return true; //#18930
        } //#18930
    }); //#18930
    if (!$_.okay) { //#18935
        $k[$j++] = 'bwipp.micropdf417noValidSymbol#18934'; //#18934
        $k[$j++] = "Maximum length exceeded or invalid size"; //#18934
        bwipp_raiseerror(); //#18934
    } //#18934
    $_.m = $_.datcws.length; //#18938
    $_.n = $f(($_.c * $_.r) - $_.k); //#18939
    $_.cws = $a($f(($_.c * $_.r) + 1)); //#18940
    $puti($_.cws, 0, $_.datcws); //#18941
    $k[$j++] = $_.cws; //#18942
    $k[$j++] = $_.m; //#18942
    $k[$j++] = Infinity; //#18942
    for (var _Gj = 0, _Gk = $f($_.n - $_.m); _Gj < _Gk; _Gj++) { //#18942
        $k[$j++] = 900; //#18942
    } //#18942
    var _Gl = $a(); //#18942
    var _Gm = $k[--$j]; //#18942
    $puti($k[--$j], _Gm, _Gl); //#18942
    $k[$j++] = $_.cws; //#18943
    $k[$j++] = $_.n; //#18943
    $k[$j++] = Infinity; //#18943
    for (var _Gr = 0, _Gs = $_.k; _Gr < _Gs; _Gr++) { //#18943
        $k[$j++] = 0; //#18943
    } //#18943
    $k[$j++] = 0; //#18943
    var _Gt = $a(); //#18943
    var _Gu = $k[--$j]; //#18943
    $puti($k[--$j], _Gu, _Gt); //#18943
    if (!bwipp_micropdf417.__18950__) { //#18950
        $_ = Object.create($_); //#18950
        $k[$j++] = Infinity; //#18947
        $k[$j++] = 1; //#18947
        for (var _Gw = 0, _Gx = 928; _Gw < _Gx; _Gw++) { //#18947
            var _Gy = $k[--$j]; //#18947
            $k[$j++] = _Gy; //#18947
            $k[$j++] = (_Gy * 3) % 929; //#18947
        } //#18947
        $_.rsalog = $a(); //#18947
        $_.rslog = $a(929); //#18948
        for (var _H1 = 1; _H1 <= 928; _H1 += 1) { //#18949
            $put($_.rslog, $get($_.rsalog, _H1), _H1); //#18949
        } //#18949
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#18949
        bwipp_micropdf417.__18950__ = 1; //#18949
        $_ = Object.getPrototypeOf($_); //#18949
    } //#18949
    $_.rsprod = function() {
        var _H6 = $k[--$j]; //#18954
        var _H7 = $k[--$j]; //#18954
        $k[$j++] = _H7; //#18958
        $k[$j++] = _H6; //#18958
        if ((_H6 != 0) && (_H7 != 0)) { //#18957
            var _HA = $get($_.rslog, $k[--$j]); //#18955
            var _HF = $get($_.rsalog, $f(_HA + $get($_.rslog, $k[--$j])) % 928); //#18955
            $k[$j++] = _HF; //#18955
        } else { //#18957
            $j -= 2; //#18957
            $k[$j++] = 0; //#18957
        } //#18957
    }; //#18957
    $k[$j++] = Infinity; //#18962
    $k[$j++] = 1; //#18962
    for (var _HH = 0, _HI = $_.k; _HH < _HI; _HH++) { //#18962
        $k[$j++] = 0; //#18962
    } //#18962
    $_.coeffs = $a(); //#18962
    for (var _HM = 1, _HL = $_.k; _HM <= _HL; _HM += 1) { //#18971
        $_.i = _HM; //#18964
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#18965
        for (var _HT = $_.i - 1; _HT >= 1; _HT -= 1) { //#18969
            $_.j = _HT; //#18967
            $k[$j++] = $_.coeffs; //#18968
            $k[$j++] = $_.j; //#18968
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#18968
            $k[$j++] = $get($_.coeffs, $_.j); //#18968
            $k[$j++] = $get($_.rsalog, $_.i); //#18968
            $_.rsprod(); //#18968
            var _Hf = $k[--$j]; //#18968
            var _Hg = $k[--$j]; //#18968
            var _Hh = $k[--$j]; //#18968
            $put($k[--$j], _Hh, $f(_Hg + _Hf) % 929); //#18968
        } //#18968
        $k[$j++] = $_.coeffs; //#18970
        $k[$j++] = 0; //#18970
        $k[$j++] = $get($_.coeffs, 0); //#18970
        $k[$j++] = $get($_.rsalog, $_.i); //#18970
        $_.rsprod(); //#18970
        var _Hp = $k[--$j]; //#18970
        var _Hq = $k[--$j]; //#18970
        $put($k[--$j], _Hq, _Hp); //#18970
    } //#18970
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#18972
    for (var _Hw = $_.coeffs.length - 1; _Hw >= 0; _Hw -= 2) { //#18973
        var _Hx = $_.coeffs; //#18973
        $put(_Hx, _Hw, $f(929 - $get(_Hx, _Hw))); //#18973
    } //#18973
    for (var _I1 = 0, _I0 = $f($_.n - 1); _I1 <= _I0; _I1 += 1) { //#18982
        $_.t = $f($get($_.cws, _I1) + $get($_.cws, $_.n)) % 929; //#18977
        for (var _I9 = 0, _I8 = $f($_.k - 1); _I9 <= _I8; _I9 += 1) { //#18981
            $_.j = _I9; //#18979
            $put($_.cws, $f($_.n + $_.j), ($f($get($_.cws, $f($f($_.n + $_.j) + 1)) + ($f(929 - (($_.t * $get($_.coeffs, $f($f($_.k - $_.j) - 1))) % 929))))) % 929); //#18980
        } //#18980
    } //#18980
    for (var _IQ = $_.n, _IP = $f($_.n + $_.k); _IQ <= _IP; _IQ += 1) { //#18983
        $put($_.cws, _IQ, $f(929 - $get($_.cws, _IQ)) % 929); //#18983
    } //#18983
    $_.cws = $geti($_.cws, 0, $_.cws.length - 1); //#18986
    var _IY = $get($_.options, 'debugcws') !== undefined; //#18988
    if (_IY) { //#18988
        $k[$j++] = 'bwipp.debugcws#18988'; //#18988
        $k[$j++] = $_.cws; //#18988
        bwipp_raiseerror(); //#18988
    } //#18988
    if (!bwipp_micropdf417.__19247__) { //#19247
        $_ = Object.create($_); //#19247
        $_.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#19231
        $_.raps = $a([$a([802, 930, 946, 818, 882, 890, 826, 954, 922, 986, 970, 906, 778, 794, 786, 914, 978, 982, 980, 916, 948, 932, 934, 942, 940, 936, 808, 812, 814, 806, 822, 950, 918, 790, 788, 820, 884, 868, 870, 878, 876, 872, 840, 856, 860, 862, 846, 844, 836, 838, 834, 866]), $a([718, 590, 622, 558, 550, 566, 534, 530, 538, 570, 562, 546, 610, 626, 634, 762, 754, 758, 630, 628, 612, 614, 582, 578, 706, 738, 742, 740, 748, 620, 556, 552, 616, 744, 712, 716, 708, 710, 646, 654, 652, 668, 664, 696, 688, 656, 720, 592, 600, 604, 732, 734])]); //#19246
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_micropdf417.$ctx[id] = $_[id]); //#19246
        bwipp_micropdf417.__19247__ = 1; //#19246
        $_ = Object.getPrototypeOf($_); //#19246
    } //#19246
    $_.cwtobits = function() {
        var _Ik = $get($_.clusters, $k[--$j]); //#19251
        $_.v = $get(_Ik, $k[--$j]); //#19251
        $k[$j++] = Infinity; //#19252
        for (var _In = 0, _Io = 17; _In < _Io; _In++) { //#19252
            $k[$j++] = 0; //#19252
        } //#19252
        var _Ir = $cvrs($s(17), $_.v, 2); //#19252
        for (var _Is = 0, _It = _Ir.length; _Is < _It; _Is++) { //#19252
            $k[$j++] = $get(_Ir, _Is) - 48; //#19252
        } //#19252
        var _Iv = $a(); //#19252
        $k[$j++] = $geti(_Iv, _Iv.length - 17, 17); //#19253
    }; //#19253
    $_.raptobits = function() {
        var _Iz = $get($_.raps, $k[--$j]); //#19258
        $_.v = $get(_Iz, $k[--$j]); //#19258
        $k[$j++] = Infinity; //#19259
        for (var _J2 = 0, _J3 = 10; _J2 < _J3; _J2++) { //#19259
            $k[$j++] = 0; //#19259
        } //#19259
        var _J6 = $cvrs($s(10), $_.v, 2); //#19259
        for (var _J7 = 0, _J8 = _J6.length; _J7 < _J8; _J7++) { //#19259
            $k[$j++] = $get(_J6, _J7) - 48; //#19259
        } //#19259
        var _JA = $a(); //#19259
        $k[$j++] = $geti(_JA, _JA.length - 10, 10); //#19260
    }; //#19260
    $_.rwid = $get($a([38, 55, 82, 99]), $f($_.c - 1)); //#19264
    if (($_.c == 3) && $_.cca) { //#19265
        $_.rwid = 72; //#19265
    } //#19265
    $_.pixs = $a(($_.rwid * $_.r) * $_.rowmult); //#19266
    for (var _JN = 0, _JM = $f($_.r - 1); _JN <= _JM; _JN += 1) { //#19308
        $_.i = _JN; //#19269
        $_.clst = ($f($f($_.i + $_.rapl) - 1)) % 3; //#19270
        $k[$j++] = Infinity; //#19271
        if ($_.c == 1) { //#19276
            $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#19273
            $k[$j++] = 0; //#19273
            $_.raptobits(); //#19273
            $aload($k[--$j]); //#19273
            $k[$j++] = $get($_.cws, $_.i); //#19274
            $k[$j++] = $_.clst; //#19274
            $_.cwtobits(); //#19274
            $aload($k[--$j]); //#19274
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#19275
            $k[$j++] = 0; //#19275
            $_.raptobits(); //#19275
            $aload($k[--$j]); //#19275
        } //#19275
        if ($_.c == 2) { //#19282
            $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#19278
            $k[$j++] = 0; //#19278
            $_.raptobits(); //#19278
            $aload($k[--$j]); //#19278
            $k[$j++] = $get($_.cws, $_.i * 2); //#19279
            $k[$j++] = $_.clst; //#19279
            $_.cwtobits(); //#19279
            $aload($k[--$j]); //#19279
            $k[$j++] = $get($_.cws, ($_.i * 2) + 1); //#19280
            $k[$j++] = $_.clst; //#19280
            $_.cwtobits(); //#19280
            $aload($k[--$j]); //#19280
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#19281
            $k[$j++] = 0; //#19281
            $_.raptobits(); //#19281
            $aload($k[--$j]); //#19281
        } //#19281
        if ($_.c == 3) { //#19292
            if (!$_.cca) { //#19286
                $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#19285
                $k[$j++] = 0; //#19285
                $_.raptobits(); //#19285
                $aload($k[--$j]); //#19285
            } //#19285
            $k[$j++] = $get($_.cws, $_.i * 3); //#19287
            $k[$j++] = $_.clst; //#19287
            $_.cwtobits(); //#19287
            $aload($k[--$j]); //#19287
            $k[$j++] = ($f($f($_.i + $_.rapc) - 1)) % 52; //#19288
            $k[$j++] = 1; //#19288
            $_.raptobits(); //#19288
            $aload($k[--$j]); //#19288
            $k[$j++] = $get($_.cws, ($_.i * 3) + 1); //#19289
            $k[$j++] = $_.clst; //#19289
            $_.cwtobits(); //#19289
            $aload($k[--$j]); //#19289
            $k[$j++] = $get($_.cws, ($_.i * 3) + 2); //#19290
            $k[$j++] = $_.clst; //#19290
            $_.cwtobits(); //#19290
            $aload($k[--$j]); //#19290
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#19291
            $k[$j++] = 0; //#19291
            $_.raptobits(); //#19291
            $aload($k[--$j]); //#19291
        } //#19291
        if ($_.c == 4) { //#19301
            $k[$j++] = ($f($f($_.i + $_.rapl) - 1)) % 52; //#19294
            $k[$j++] = 0; //#19294
            $_.raptobits(); //#19294
            $aload($k[--$j]); //#19294
            $k[$j++] = $get($_.cws, $_.i * 4); //#19295
            $k[$j++] = $_.clst; //#19295
            $_.cwtobits(); //#19295
            $aload($k[--$j]); //#19295
            $k[$j++] = $get($_.cws, ($_.i * 4) + 1); //#19296
            $k[$j++] = $_.clst; //#19296
            $_.cwtobits(); //#19296
            $aload($k[--$j]); //#19296
            $k[$j++] = ($f($f($_.i + $_.rapc) - 1)) % 52; //#19297
            $k[$j++] = 1; //#19297
            $_.raptobits(); //#19297
            $aload($k[--$j]); //#19297
            $k[$j++] = $get($_.cws, ($_.i * 4) + 2); //#19298
            $k[$j++] = $_.clst; //#19298
            $_.cwtobits(); //#19298
            $aload($k[--$j]); //#19298
            $k[$j++] = $get($_.cws, ($_.i * 4) + 3); //#19299
            $k[$j++] = $_.clst; //#19299
            $_.cwtobits(); //#19299
            $aload($k[--$j]); //#19299
            $k[$j++] = ($f($f($_.i + $_.rapr) - 1)) % 52; //#19300
            $k[$j++] = 0; //#19300
            $_.raptobits(); //#19300
            $aload($k[--$j]); //#19300
        } //#19300
        $k[$j++] = 1; //#19302
        var _Kn = $a(); //#19302
        $k[$j++] = _Kn; //#19306
        for (var _Kq = 0, _Kp = $_.rowmult - 1; _Kq <= _Kp; _Kq += 1) { //#19306
            var _Kv = $k[--$j]; //#19305
            $puti($_.pixs, (_Kq + ($_.i * $_.rowmult)) * $_.rwid, _Kv); //#19305
            $k[$j++] = _Kv; //#19305
        } //#19305
        $j--; //#19307
    } //#19307
    var _L4 = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.rwid],
        ["pixy", $_.r * $_.rowmult],
        ["height", ($_.r * $_.rowmult) / 72],
        ["width", $_.rwid / 72],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#19322
    $k[$j++] = _L4; //#19325
    if (!$_.dontdraw) { //#19325
        bwipp_renmatrix(); //#19325
    } //#19325
    $_ = Object.getPrototypeOf($_); //#19327
    $_ = Object.getPrototypeOf($_); //#19329
} //bwipp_micropdf417
function bwipp_datamatrix() {
    $_ = Object.create($_); //#19360
    $_.dontdraw = false; //#19363
    $_.columns = 0; //#19364
    $_.rows = 0; //#19365
    $_.format = "unset"; //#19366
    $_.version = "unset"; //#19367
    $_.parse = false; //#19368
    $_.parsefnc = false; //#19369
    $_.c40headerlength = -1; //#19370
    $_.raw = false; //#19371
    $_.dmre = false; //#19372
    $k[$j++] = $_; //#19374
    bwipp_processoptions(); //#19374
    $_.options = $k[--$j]; //#19374
    $_.barcode = $k[--$j]; //#19375
    if ($eq($_.barcode, "")) { //#19379
        $k[$j++] = 'bwipp.datamatrixEmptyData#19378'; //#19378
        $k[$j++] = "The data must not be empty"; //#19378
        bwipp_raiseerror(); //#19378
    } //#19378
    if ($ne($_.version, "unset") && (($_.rows != 0) || ($_.columns != 0))) { //#19383
        $k[$j++] = 'bwipp.datamatrixVersionRowsCols#19382'; //#19382
        $k[$j++] = "rows and columns must not be given if version is specified"; //#19382
        bwipp_raiseerror(); //#19382
    } //#19382
    if ($ne($_.version, "unset")) { //#19407
        $search($_.version, "x"); //#19387
        if ($k[--$j]) { //#19403
            var _9 = $k[--$j]; //#19388
            var _A = $k[--$j]; //#19388
            $k[$j++] = _9; //#19388
            $k[$j++] = _A; //#19388
            $j--; //#19388
            var _B = $k[--$j]; //#19389
            var _C = $k[--$j]; //#19389
            $k[$j++] = _C; //#19389
            $k[$j++] = _B; //#19389
            $k[$j++] = _C; //#19389
            $k[$j++] = _B; //#19389
            $astore($a(2)); //#19389
            $forall($k[--$j], function() { //#19398
                var _F = $k[--$j]; //#19391
                $k[$j++] = _F; //#19391
                $k[$j++] = true; //#19391
                if (_F.length == 0) { //#19391
                    $j--; //#19391
                    $k[$j++] = false; //#19391
                } //#19391
                var _G = $k[--$j]; //#19392
                var _H = $k[--$j]; //#19392
                $k[$j++] = _G; //#19394
                $forall(_H, function() { //#19394
                    var _I = $k[--$j]; //#19393
                    if ((_I < 48) || (_I > 57)) { //#19393
                        $j--; //#19393
                        $k[$j++] = false; //#19393
                    } //#19393
                }); //#19393
                if ($nt($k[--$j])) { //#19397
                    $k[$j++] = 'bwipp.datamatrixVersionBadRowOrColumn#19396'; //#19396
                    $k[$j++] = "version must be formatted as RxC"; //#19396
                    bwipp_raiseerror(); //#19396
                } //#19396
            }); //#19396
            $_.rows = $cvi($k[--$j]); //#19399
            $_.columns = $cvi($k[--$j]); //#19400
            $k[$j++] = 'format'; //#19401
            if ($_.rows == $_.columns) { //#19401
                $k[$j++] = "square"; //#19401
            } else { //#19401
                $k[$j++] = "rectangle"; //#19401
            } //#19401
            var _O = $k[--$j]; //#19401
            $_[$k[--$j]] = _O; //#19401
        } else { //#19403
            $j--; //#19403
            $k[$j++] = 'bwipp.datamatrixVersionFormat#19403'; //#19403
            $k[$j++] = "version must be formatted as RxC"; //#19403
            bwipp_raiseerror(); //#19403
        } //#19403
    } else { //#19407
        if ($eq($_.format, "unset")) { //#19408
            $k[$j++] = 'format'; //#19407
            if ($_.dmre) { //#19407
                $k[$j++] = "rectangle"; //#19407
            } else { //#19407
                $k[$j++] = "square"; //#19407
            } //#19407
            var _S = $k[--$j]; //#19407
            $_[$k[--$j]] = _S; //#19407
        } //#19407
    } //#19407
    if ($ne($_.format, "square") && $ne($_.format, "rectangle")) { //#19413
        $k[$j++] = 'bwipp.datamatrixInvalidFormat#19412'; //#19412
        $k[$j++] = "The format must be either square or rectangle"; //#19412
        bwipp_raiseerror(); //#19412
    } //#19412
    bwipp_loadctx(bwipp_datamatrix); //#19415
    if (!bwipp_datamatrix.__19472__) { //#19472
        $_ = Object.create($_); //#19472
        var _19 = $a([20, 36, 1, 2, 28, 1, 1]); //#19462
        $_.metrics = $a([$a([10, 10, 1, 1, 5, 1, 0]), $a([12, 12, 1, 1, 7, 1, 0]), $a([14, 14, 1, 1, 10, 1, 0]), $a([16, 16, 1, 1, 12, 1, 0]), $a([18, 18, 1, 1, 14, 1, 0]), $a([20, 20, 1, 1, 18, 1, 0]), $a([22, 22, 1, 1, 20, 1, 0]), $a([24, 24, 1, 1, 24, 1, 0]), $a([26, 26, 1, 1, 28, 1, 0]), $a([32, 32, 2, 2, 36, 1, 0]), $a([36, 36, 2, 2, 42, 1, 0]), $a([40, 40, 2, 2, 48, 1, 0]), $a([44, 44, 2, 2, 56, 1, 0]), $a([48, 48, 2, 2, 68, 1, 0]), $a([52, 52, 2, 2, 84, 2, 0]), $a([64, 64, 4, 4, 112, 2, 0]), $a([72, 72, 4, 4, 144, 4, 0]), $a([80, 80, 4, 4, 192, 4, 0]), $a([88, 88, 4, 4, 224, 4, 0]), $a([96, 96, 4, 4, 272, 4, 0]), $a([104, 104, 4, 4, 336, 6, 0]), $a([120, 120, 6, 6, 408, 6, 0]), $a([132, 132, 6, 6, 496, 8, 0]), $a([144, 144, 6, 6, 620, 10, 0]), $a([8, 18, 1, 1, 7, 1, 0]), $a([8, 32, 1, 2, 11, 1, 0]), $a([8, 48, 1, 2, 15, 1, 1]), $a([8, 64, 1, 4, 18, 1, 1]), $a([8, 80, 1, 4, 22, 1, 1]), $a([8, 96, 1, 4, 28, 1, 1]), $a([8, 120, 1, 6, 32, 1, 1]), $a([8, 144, 1, 6, 36, 1, 1]), $a([12, 26, 1, 1, 14, 1, 0]), $a([12, 36, 1, 2, 18, 1, 0]), $a([12, 64, 1, 4, 27, 1, 1]), $a([12, 88, 1, 4, 36, 1, 1]), $a([16, 36, 1, 2, 24, 1, 0]), $a([16, 48, 1, 2, 28, 1, 0]), $a([16, 64, 1, 4, 36, 1, 1]), _19, $a([20, 44, 1, 2, 34, 1, 1]), $a([20, 64, 1, 4, 42, 1, 1]), $a([22, 48, 1, 2, 38, 1, 1]), $a([24, 48, 1, 2, 41, 1, 1]), $a([24, 64, 1, 4, 46, 1, 1]), $a([26, 40, 1, 2, 38, 1, 1]), $a([26, 48, 1, 2, 42, 1, 1]), $a([26, 64, 1, 4, 50, 1, 1])]); //#19471
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_datamatrix.$ctx[id] = $_[id]); //#19471
        bwipp_datamatrix.__19472__ = 1; //#19471
        $_ = Object.getPrototypeOf($_); //#19471
    } //#19471
    $_.urows = $_.rows; //#19475
    $_.ucols = $_.columns; //#19476
    $_.fullcws = $a([]); //#19477
    var _1N = $_.metrics; //#19478
    for (var _1O = 0, _1P = _1N.length; _1O < _1P; _1O++) { //#19497
        $_.m = $get(_1N, _1O); //#19479
        $_.rows = $get($_.m, 0); //#19480
        $_.cols = $get($_.m, 1); //#19481
        $_.regh = $get($_.m, 2); //#19482
        $_.regv = $get($_.m, 3); //#19483
        $_.rscw = $get($_.m, 4); //#19484
        $_.rsbl = $get($_.m, 5); //#19485
        $_.doly = $get($_.m, 6); //#19486
        $_.mrows = $f($_.rows - (2 * $_.regh)); //#19487
        $_.mcols = $f($_.cols - (2 * $_.regv)); //#19488
        $_.ncws = $f((~~(($_.mrows * $_.mcols) / 8)) - $_.rscw); //#19489
        $_.okay = true; //#19490
        if (($_.urows != 0) && ($_.urows != $_.rows)) { //#19491
            $_.okay = false; //#19491
        } //#19491
        if (($_.ucols != 0) && ($_.ucols != $_.cols)) { //#19492
            $_.okay = false; //#19492
        } //#19492
        if ($eq($_.format, "square") && $ne($_.rows, $_.cols)) { //#19493
            $_.okay = false; //#19493
        } //#19493
        if ($eq($_.format, "rectangle") && $eq($_.rows, $_.cols)) { //#19494
            $_.okay = false; //#19494
        } //#19494
        if ((!$_.dmre) && ($_.doly == 1)) { //#19495
            $_.okay = false; //#19495
        } //#19495
        if ($_.okay) { //#19496
            $k[$j++] = Infinity; //#19496
            $aload($_.fullcws); //#19496
            $k[$j++] = $_.ncws; //#19496
            $_.fullcws = $a(); //#19496
        } //#19496
    } //#19496
    $k[$j++] = Infinity; //#19498
    for (var _24 = 0, _25 = 1558; _24 < _25; _24++) { //#19498
        $k[$j++] = 10000; //#19498
    } //#19498
    $_.numremcws = $a(); //#19498
    var _27 = $_.fullcws; //#19499
    for (var _28 = 0, _29 = _27.length; _28 < _29; _28++) { //#19499
        $put($_.numremcws, $f($get(_27, _28) - 1), 1); //#19499
    } //#19499
    for (var _2C = 1556; _2C >= 0; _2C -= 1) { //#19505
        $_.i = _2C; //#19501
        if ($get($_.numremcws, $_.i) != 1) { //#19504
            $put($_.numremcws, $_.i, $f($get($_.numremcws, $_.i + 1) + 1)); //#19503
        } //#19503
    } //#19503
    if (!bwipp_datamatrix.__19618__) { //#19618
        $_ = Object.create($_); //#19618
        $_.fnc1 = -1; //#19509
        $_.prog = -2; //#19509
        $_.m05 = -3; //#19509
        $_.m06 = -4; //#19509
        $_.lC = -5; //#19510
        $_.lB = -6; //#19510
        $_.lX = -7; //#19510
        $_.lT = -8; //#19510
        $_.lE = -9; //#19510
        $_.unl = -10; //#19510
        $_.sapp = -11; //#19511
        $_.usft = -12; //#19511
        $_.sft1 = -13; //#19511
        $_.sft2 = -14; //#19511
        $_.sft3 = -15; //#19511
        $_.eci = -16; //#19511
        $_.pad = -17; //#19511
        $_.unlcw = 254; //#19512
        $k[$j++] = Infinity; //#19514
        for (var _2L = 0; _2L <= 128; _2L += 1) { //#19515
            $k[$j++] = _2L; //#19515
            $k[$j++] = _2L + 1; //#19515
        } //#19515
        $k[$j++] = $_.pad; //#19520
        $k[$j++] = 129; //#19520
        for (var _2N = 0; _2N <= 99; _2N += 1) { //#19520
            var _2P = $cvrs($s(2), _2N, 10); //#19518
            var _2R = $strcpy($s(2), "00"); //#19518
            $puti(_2R, 2 - _2P.length, _2P); //#19518
            $k[$j++] = _2R; //#19519
            $k[$j++] = _2N + 130; //#19519
        } //#19519
        var _2e = $a([$_.lC, $_.lB, $_.fnc1, $_.sapp, $_.prog, $_.usft, $_.m05, $_.m06, $_.lX, $_.lT, $_.lE, $_.eci]); //#19521
        $k[$j++] = 229; //#19521
        for (var _2f = 0, _2g = _2e.length; _2f < _2g; _2f++) { //#19521
            var _2j = $f($k[--$j] + 1); //#19521
            $k[$j++] = $get(_2e, _2f); //#19521
            $k[$j++] = _2j; //#19521
            $k[$j++] = _2j; //#19521
        } //#19521
        $j--; //#19521
        $_.Avals = $d(); //#19522
        $k[$j++] = Infinity; //#19523
        var _2l = $_.Avals; //#19524
        for (var _2q = _2l.size, _2p = _2l.keys(), _2o = 0; _2o < _2q; _2o++) { //#19524
            var _2m = _2p.next().value; //#19524
            $k[$j++] = _2m; //#19524
            $k[$j++] = _2l.get(_2m); //#19524
            $k[$j++] = Infinity; //#19524
            var _2r = $k[--$j]; //#19524
            var _2s = $k[--$j]; //#19524
            $k[$j++] = _2r; //#19524
            $k[$j++] = _2s; //#19524
            var _2t = $a(); //#19524
            $k[$j++] = _2t; //#19524
        } //#19524
        $_.Avals = $d(); //#19525
        $k[$j++] = Infinity; //#19527
        $k[$j++] = $_.sft1; //#19532
        $k[$j++] = 0; //#19532
        $k[$j++] = $_.sft2; //#19532
        $k[$j++] = 1; //#19532
        $k[$j++] = $_.sft3; //#19532
        $k[$j++] = 2; //#19532
        $k[$j++] = 32; //#19532
        $k[$j++] = 3; //#19532
        for (var _2y = 48; _2y <= 57; _2y += 1) { //#19532
            $k[$j++] = _2y; //#19532
            $k[$j++] = _2y - 44; //#19532
        } //#19532
        for (var _2z = 65; _2z <= 90; _2z += 1) { //#19533
            $k[$j++] = _2z; //#19533
            $k[$j++] = _2z - 51; //#19533
        } //#19533
        $_.CNvals = $d(); //#19534
        $k[$j++] = Infinity; //#19535
        for (var _31 = 0; _31 <= 31; _31 += 1) { //#19535
            $k[$j++] = _31; //#19535
            $k[$j++] = _31; //#19535
        } //#19535
        $_.C1vals = $d(); //#19535
        $k[$j++] = Infinity; //#19536
        for (var _33 = 33; _33 <= 47; _33 += 1) { //#19537
            $k[$j++] = _33; //#19537
            $k[$j++] = _33 - 33; //#19537
        } //#19537
        for (var _34 = 58; _34 <= 64; _34 += 1) { //#19538
            $k[$j++] = _34; //#19538
            $k[$j++] = _34 - 43; //#19538
        } //#19538
        for (var _35 = 91; _35 <= 95; _35 += 1) { //#19539
            $k[$j++] = _35; //#19539
            $k[$j++] = _35 - 69; //#19539
        } //#19539
        $k[$j++] = $_.fnc1; //#19541
        $k[$j++] = 27; //#19541
        $k[$j++] = $_.usft; //#19541
        $k[$j++] = 30; //#19541
        $_.C2vals = $d(); //#19542
        $k[$j++] = Infinity; //#19543
        for (var _39 = 96; _39 <= 127; _39 += 1) { //#19543
            $k[$j++] = _39; //#19543
            $k[$j++] = _39 - 96; //#19543
        } //#19543
        $_.C3vals = $d(); //#19543
        $k[$j++] = Infinity; //#19544
        var _3B = $_.CNvals; //#19545
        for (var _3G = _3B.size, _3F = _3B.keys(), _3E = 0; _3E < _3G; _3E++) { //#19545
            var _3C = _3F.next().value; //#19545
            $k[$j++] = _3C; //#19545
            $k[$j++] = _3B.get(_3C); //#19545
            $k[$j++] = Infinity; //#19545
            var _3H = $k[--$j]; //#19545
            var _3I = $k[--$j]; //#19545
            $k[$j++] = _3H; //#19545
            $k[$j++] = _3I; //#19545
            var _3J = $a(); //#19545
            $k[$j++] = _3J; //#19545
        } //#19545
        var _3K = $_.C1vals; //#19546
        for (var _3P = _3K.size, _3O = _3K.keys(), _3N = 0; _3N < _3P; _3N++) { //#19546
            var _3L = _3O.next().value; //#19546
            $k[$j++] = _3L; //#19546
            $k[$j++] = _3K.get(_3L); //#19546
            $k[$j++] = Infinity; //#19546
            var _3Q = $k[--$j]; //#19546
            var _3R = $k[--$j]; //#19546
            $k[$j++] = _3Q; //#19546
            $k[$j++] = $get($_.CNvals, $_.sft1); //#19546
            $k[$j++] = _3R; //#19546
            var _3V = $a(); //#19546
            $k[$j++] = _3V; //#19546
        } //#19546
        var _3W = $_.C2vals; //#19547
        for (var _3b = _3W.size, _3a = _3W.keys(), _3Z = 0; _3Z < _3b; _3Z++) { //#19547
            var _3X = _3a.next().value; //#19547
            $k[$j++] = _3X; //#19547
            $k[$j++] = _3W.get(_3X); //#19547
            $k[$j++] = Infinity; //#19547
            var _3c = $k[--$j]; //#19547
            var _3d = $k[--$j]; //#19547
            $k[$j++] = _3c; //#19547
            $k[$j++] = $get($_.CNvals, $_.sft2); //#19547
            $k[$j++] = _3d; //#19547
            var _3h = $a(); //#19547
            $k[$j++] = _3h; //#19547
        } //#19547
        var _3i = $_.C3vals; //#19548
        for (var _3n = _3i.size, _3m = _3i.keys(), _3l = 0; _3l < _3n; _3l++) { //#19548
            var _3j = _3m.next().value; //#19548
            $k[$j++] = _3j; //#19548
            $k[$j++] = _3i.get(_3j); //#19548
            $k[$j++] = Infinity; //#19548
            var _3o = $k[--$j]; //#19548
            var _3p = $k[--$j]; //#19548
            $k[$j++] = _3o; //#19548
            $k[$j++] = $get($_.CNvals, $_.sft3); //#19548
            $k[$j++] = _3p; //#19548
            var _3t = $a(); //#19548
            $k[$j++] = _3t; //#19548
        } //#19548
        $_.Cvals = $d(); //#19549
        $k[$j++] = Infinity; //#19551
        $k[$j++] = $_.sft1; //#19556
        $k[$j++] = 0; //#19556
        $k[$j++] = $_.sft2; //#19556
        $k[$j++] = 1; //#19556
        $k[$j++] = $_.sft3; //#19556
        $k[$j++] = 2; //#19556
        $k[$j++] = 32; //#19556
        $k[$j++] = 3; //#19556
        for (var _3y = 48; _3y <= 57; _3y += 1) { //#19556
            $k[$j++] = _3y; //#19556
            $k[$j++] = _3y - 44; //#19556
        } //#19556
        for (var _3z = 97; _3z <= 122; _3z += 1) { //#19557
            $k[$j++] = _3z; //#19557
            $k[$j++] = _3z - 83; //#19557
        } //#19557
        $_.TNvals = $d(); //#19558
        $k[$j++] = Infinity; //#19559
        for (var _41 = 0; _41 <= 31; _41 += 1) { //#19559
            $k[$j++] = _41; //#19559
            $k[$j++] = _41; //#19559
        } //#19559
        $_.T1vals = $d(); //#19559
        $k[$j++] = Infinity; //#19560
        for (var _43 = 33; _43 <= 47; _43 += 1) { //#19561
            $k[$j++] = _43; //#19561
            $k[$j++] = _43 - 33; //#19561
        } //#19561
        for (var _44 = 58; _44 <= 64; _44 += 1) { //#19562
            $k[$j++] = _44; //#19562
            $k[$j++] = _44 - 43; //#19562
        } //#19562
        for (var _45 = 91; _45 <= 95; _45 += 1) { //#19563
            $k[$j++] = _45; //#19563
            $k[$j++] = _45 - 69; //#19563
        } //#19563
        $k[$j++] = $_.fnc1; //#19565
        $k[$j++] = 27; //#19565
        $k[$j++] = $_.usft; //#19565
        $k[$j++] = 30; //#19565
        $_.T2vals = $d(); //#19566
        $k[$j++] = Infinity; //#19567
        $k[$j++] = 96; //#19569
        $k[$j++] = 0; //#19569
        for (var _49 = 65; _49 <= 90; _49 += 1) { //#19569
            $k[$j++] = _49; //#19569
            $k[$j++] = _49 - 64; //#19569
        } //#19569
        for (var _4A = 123; _4A <= 127; _4A += 1) { //#19570
            $k[$j++] = _4A; //#19570
            $k[$j++] = _4A - 96; //#19570
        } //#19570
        $_.T3vals = $d(); //#19571
        $k[$j++] = Infinity; //#19572
        var _4C = $_.TNvals; //#19573
        for (var _4H = _4C.size, _4G = _4C.keys(), _4F = 0; _4F < _4H; _4F++) { //#19573
            var _4D = _4G.next().value; //#19573
            $k[$j++] = _4D; //#19573
            $k[$j++] = _4C.get(_4D); //#19573
            $k[$j++] = Infinity; //#19573
            var _4I = $k[--$j]; //#19573
            var _4J = $k[--$j]; //#19573
            $k[$j++] = _4I; //#19573
            $k[$j++] = _4J; //#19573
            var _4K = $a(); //#19573
            $k[$j++] = _4K; //#19573
        } //#19573
        var _4L = $_.T1vals; //#19574
        for (var _4Q = _4L.size, _4P = _4L.keys(), _4O = 0; _4O < _4Q; _4O++) { //#19574
            var _4M = _4P.next().value; //#19574
            $k[$j++] = _4M; //#19574
            $k[$j++] = _4L.get(_4M); //#19574
            $k[$j++] = Infinity; //#19574
            var _4R = $k[--$j]; //#19574
            var _4S = $k[--$j]; //#19574
            $k[$j++] = _4R; //#19574
            $k[$j++] = $get($_.TNvals, $_.sft1); //#19574
            $k[$j++] = _4S; //#19574
            var _4W = $a(); //#19574
            $k[$j++] = _4W; //#19574
        } //#19574
        var _4X = $_.T2vals; //#19575
        for (var _4c = _4X.size, _4b = _4X.keys(), _4a = 0; _4a < _4c; _4a++) { //#19575
            var _4Y = _4b.next().value; //#19575
            $k[$j++] = _4Y; //#19575
            $k[$j++] = _4X.get(_4Y); //#19575
            $k[$j++] = Infinity; //#19575
            var _4d = $k[--$j]; //#19575
            var _4e = $k[--$j]; //#19575
            $k[$j++] = _4d; //#19575
            $k[$j++] = $get($_.TNvals, $_.sft2); //#19575
            $k[$j++] = _4e; //#19575
            var _4i = $a(); //#19575
            $k[$j++] = _4i; //#19575
        } //#19575
        var _4j = $_.T3vals; //#19576
        for (var _4o = _4j.size, _4n = _4j.keys(), _4m = 0; _4m < _4o; _4m++) { //#19576
            var _4k = _4n.next().value; //#19576
            $k[$j++] = _4k; //#19576
            $k[$j++] = _4j.get(_4k); //#19576
            $k[$j++] = Infinity; //#19576
            var _4p = $k[--$j]; //#19576
            var _4q = $k[--$j]; //#19576
            $k[$j++] = _4p; //#19576
            $k[$j++] = $get($_.TNvals, $_.sft3); //#19576
            $k[$j++] = _4q; //#19576
            var _4u = $a(); //#19576
            $k[$j++] = _4u; //#19576
        } //#19576
        $_.Tvals = $d(); //#19577
        for (var _4w = 128; _4w <= 255; _4w += 1) { //#19585
            $_.i = _4w; //#19581
            $k[$j++] = $_.Avals; //#19582
            $k[$j++] = $_.i; //#19582
            $k[$j++] = Infinity; //#19582
            $aload($get($_.Avals, $_.usft)); //#19582
            $aload($get($_.Avals, $_.i - 128)); //#19582
            var _55 = $a(); //#19582
            var _56 = $k[--$j]; //#19582
            $put($k[--$j], _56, _55); //#19582
            $k[$j++] = $_.Cvals; //#19583
            $k[$j++] = $_.i; //#19583
            $k[$j++] = Infinity; //#19583
            $aload($get($_.Cvals, $_.usft)); //#19583
            $aload($get($_.Cvals, $_.i - 128)); //#19583
            var _5G = $a(); //#19583
            var _5H = $k[--$j]; //#19583
            $put($k[--$j], _5H, _5G); //#19583
            $k[$j++] = $_.Tvals; //#19584
            $k[$j++] = $_.i; //#19584
            $k[$j++] = Infinity; //#19584
            $aload($get($_.Tvals, $_.usft)); //#19584
            $aload($get($_.Tvals, $_.i - 128)); //#19584
            var _5R = $a(); //#19584
            var _5S = $k[--$j]; //#19584
            $put($k[--$j], _5S, _5R); //#19584
        } //#19584
        $k[$j++] = Infinity; //#19587
        $k[$j++] = 13; //#19592
        $k[$j++] = 0; //#19592
        $k[$j++] = 42; //#19592
        $k[$j++] = 1; //#19592
        $k[$j++] = 62; //#19592
        $k[$j++] = 2; //#19592
        $k[$j++] = 32; //#19592
        $k[$j++] = 3; //#19592
        for (var _5U = 48; _5U <= 57; _5U += 1) { //#19592
            $k[$j++] = _5U; //#19592
            $k[$j++] = _5U - 44; //#19592
        } //#19592
        for (var _5V = 65; _5V <= 90; _5V += 1) { //#19593
            $k[$j++] = _5V; //#19593
            $k[$j++] = _5V - 51; //#19593
        } //#19593
        $_.Xvals = $d(); //#19594
        $k[$j++] = Infinity; //#19595
        var _5X = $_.Xvals; //#19596
        for (var _5c = _5X.size, _5b = _5X.keys(), _5a = 0; _5a < _5c; _5a++) { //#19596
            var _5Y = _5b.next().value; //#19596
            $k[$j++] = _5Y; //#19596
            $k[$j++] = _5X.get(_5Y); //#19596
            $k[$j++] = Infinity; //#19596
            var _5d = $k[--$j]; //#19596
            var _5e = $k[--$j]; //#19596
            $k[$j++] = _5d; //#19596
            $k[$j++] = _5e; //#19596
            var _5f = $a(); //#19596
            $k[$j++] = _5f; //#19596
        } //#19596
        $_.Xvals = $d(); //#19597
        $k[$j++] = Infinity; //#19599
        for (var _5h = 64; _5h <= 94; _5h += 1) { //#19600
            $k[$j++] = _5h; //#19600
            $k[$j++] = _5h - 64; //#19600
        } //#19600
        $k[$j++] = $_.unl; //#19602
        $k[$j++] = 31; //#19602
        for (var _5j = 32; _5j <= 63; _5j += 1) { //#19602
            $k[$j++] = _5j; //#19602
            $k[$j++] = _5j; //#19602
        } //#19602
        $_.Evals = $d(); //#19603
        $k[$j++] = Infinity; //#19604
        var _5l = $_.Evals; //#19605
        for (var _5q = _5l.size, _5p = _5l.keys(), _5o = 0; _5o < _5q; _5o++) { //#19605
            var _5m = _5p.next().value; //#19605
            $k[$j++] = _5m; //#19605
            $k[$j++] = _5l.get(_5m); //#19605
            $k[$j++] = Infinity; //#19605
            var _5r = $k[--$j]; //#19605
            var _5s = $k[--$j]; //#19605
            $k[$j++] = _5r; //#19605
            $k[$j++] = _5s; //#19605
            var _5t = $a(); //#19605
            $k[$j++] = _5t; //#19605
        } //#19605
        $_.Evals = $d(); //#19606
        $k[$j++] = Infinity; //#19608
        for (var _5v = 0; _5v <= 255; _5v += 1) { //#19609
            $k[$j++] = _5v; //#19609
            $k[$j++] = _5v; //#19609
        } //#19609
        $_.Bvals = $d(); //#19610
        $k[$j++] = Infinity; //#19611
        var _5x = $_.Bvals; //#19612
        for (var _62 = _5x.size, _61 = _5x.keys(), _60 = 0; _60 < _62; _60++) { //#19612
            var _5y = _61.next().value; //#19612
            $k[$j++] = _5y; //#19612
            $k[$j++] = _5x.get(_5y); //#19612
            $k[$j++] = Infinity; //#19612
            var _63 = $k[--$j]; //#19612
            var _64 = $k[--$j]; //#19612
            $k[$j++] = _63; //#19612
            $k[$j++] = _64; //#19612
            var _65 = $a(); //#19612
            $k[$j++] = _65; //#19612
        } //#19612
        $_.Bvals = $d(); //#19613
        $_.encvals = $a([$_.Avals, $_.Cvals, $_.Tvals, $_.Xvals, $_.Evals, $_.Bvals]); //#19615
        $_.A = 0; //#19617
        $_.C = 1; //#19617
        $_.T = 2; //#19617
        $_.X = 3; //#19617
        $_.E = 4; //#19617
        $_.B = 5; //#19617
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_datamatrix.$ctx[id] = $_[id]); //#19617
        bwipp_datamatrix.__19618__ = 1; //#19617
        $_ = Object.getPrototypeOf($_); //#19617
    } //#19617
    if ($_.raw) { //#20022
        $_.cws = $a($_.barcode.length); //#19622
        $_.i = 0; //#19623
        $_.j = 0; //#19623
        for (;;) { //#19630
            if ($_.i == $_.barcode.length) { //#19625
                break; //#19625
            } //#19625
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#19626
            $put($_.cws, $_.j, $_.cw); //#19627
            $_.i = $_.i + 4; //#19628
            $_.j = $_.j + 1; //#19629
        } //#19629
        $_.cws = $geti($_.cws, 0, $_.j); //#19631
    } else { //#20022
        var _6Z = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fnc1],
            ["PROG", $_.prog]
        ]); //#19641
        $_.fncvals = _6Z; //#19644
        $k[$j++] = 'msg'; //#19645
        $k[$j++] = $_.barcode; //#19645
        $k[$j++] = $_.fncvals; //#19645
        bwipp_parseinput(); //#19645
        var _6c = $k[--$j]; //#19645
        $_[$k[--$j]] = _6c; //#19645
        $_.msglen = $_.msg.length; //#19646
        if ($_.msglen >= 9) { //#19664
            $aload($geti($_.msg, 0, 7)); //#19650
            var _6i = $k[--$j]; //#19651
            var _6j = $k[--$j]; //#19651
            $k[$j++] = _6i == 29; //#19651
            $k[$j++] = _6j; //#19651
            $j--; //#19651
            var _6k = $k[--$j]; //#19651
            var _6l = $k[--$j]; //#19651
            var _6m = $k[--$j]; //#19651
            var _6n = $k[--$j]; //#19652
            var _6o = $k[--$j]; //#19652
            var _6p = $k[--$j]; //#19652
            if (((((_6k && (_6l == 48)) && (_6m == 30)) && (_6n == 62)) && (_6o == 41)) && (_6p == 91)) { //#19663
                $aload($geti($_.msg, $_.msglen - 2, 2)); //#19653
                var _6t = $k[--$j]; //#19654
                var _6u = $k[--$j]; //#19654
                if ((_6t == 4) && (_6u == 30)) { //#19662
                    if ($get($_.msg, 5) == 53) { //#19659
                        $k[$j++] = Infinity; //#19656
                        $k[$j++] = $_.m05; //#19656
                        $aload($geti($_.msg, 7, $_.msg.length - 9)); //#19656
                        $_.msg = $a(); //#19656
                    } else { //#19659
                        if ($get($_.msg, 5) == 54) { //#19660
                            $k[$j++] = Infinity; //#19659
                            $k[$j++] = $_.m06; //#19659
                            $aload($geti($_.msg, 7, $_.msg.length - 9)); //#19659
                            $_.msg = $a(); //#19659
                        } //#19659
                    } //#19659
                } //#19659
            } //#19659
        } //#19659
        $_.msglen = $_.msg.length; //#19665
        $k[$j++] = Infinity; //#19667
        for (var _7B = 0, _7C = $_.msglen; _7B < _7C; _7B++) { //#19667
            $k[$j++] = 0; //#19667
        } //#19667
        $k[$j++] = 0; //#19667
        $_.numD = $a(); //#19667
        $k[$j++] = Infinity; //#19668
        for (var _7F = 0, _7G = $_.msglen; _7F < _7G; _7F++) { //#19668
            $k[$j++] = 0; //#19668
        } //#19668
        $k[$j++] = 9999; //#19668
        $_.nextXterm = $a(); //#19668
        $k[$j++] = Infinity; //#19669
        for (var _7J = 0, _7K = $_.msglen; _7J < _7K; _7J++) { //#19669
            $k[$j++] = 0; //#19669
        } //#19669
        $k[$j++] = 9999; //#19669
        $_.nextNonX = $a(); //#19669
        $k[$j++] = Infinity; //#19670
        for (var _7N = 0, _7O = $_.msglen; _7N < _7O; _7N++) { //#19670
            $k[$j++] = false; //#19670
        } //#19670
        $k[$j++] = false; //#19670
        $_.isECI = $a(); //#19670
        for (var _7R = $_.msglen - 1; _7R >= 0; _7R -= 1) { //#19688
            $_.i = _7R; //#19672
            $_.barchar = $get($_.msg, $_.i); //#19673
            if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#19676
                $put($_.numD, $_.i, $f($get($_.numD, $_.i + 1) + 1)); //#19675
            } //#19675
            if ((($_.barchar == 13) || ($_.barchar == 42)) || ($_.barchar == 62)) { //#19680
                $put($_.nextXterm, $_.i, 0); //#19678
            } else { //#19680
                $put($_.nextXterm, $_.i, $f($get($_.nextXterm, $_.i + 1) + 1)); //#19680
            } //#19680
            var _7o = $get($_.Xvals, $_.barchar) !== undefined; //#19682
            if (!_7o) { //#19685
                $put($_.nextNonX, $_.i, 0); //#19683
            } else { //#19685
                $put($_.nextNonX, $_.i, $f($get($_.nextNonX, $_.i + 1) + 1)); //#19685
            } //#19685
            $put($_.isECI, $_.i, $_.barchar <= -1000000); //#19687
        } //#19687
        $k[$j++] = Infinity; //#19689
        var _7z = $_.nextXterm; //#19689
        for (var _80 = 0, _81 = _7z.length; _80 < _81; _80++) { //#19689
            var _82 = $get(_7z, _80); //#19689
            $k[$j++] = _82; //#19689
            if (_82 > 10000) { //#19689
                $j--; //#19689
                $k[$j++] = 10000; //#19689
            } //#19689
        } //#19689
        $_.nextXterm = $a(); //#19689
        $k[$j++] = Infinity; //#19690
        var _84 = $_.nextNonX; //#19690
        for (var _85 = 0, _86 = _84.length; _85 < _86; _85++) { //#19690
            var _87 = $get(_84, _85); //#19690
            $k[$j++] = _87; //#19690
            if (_87 > 10000) { //#19690
                $j--; //#19690
                $k[$j++] = 10000; //#19690
            } //#19690
        } //#19690
        $_.nextNonX = $a(); //#19690
        $_.isD = function() {
            $k[$j++] = ($_.char >= 48) && ($_.char <= 57); //#19692
        }; //#19692
        $_.isC = function() {
            var _8D = $get($_.CNvals, $_.char) !== undefined; //#19693
            $k[$j++] = _8D; //#19693
        }; //#19693
        $_.isT = function() {
            var _8G = $get($_.TNvals, $_.char) !== undefined; //#19694
            $k[$j++] = _8G; //#19694
        }; //#19694
        $_.isX = function() {
            var _8J = $get($_.Xvals, $_.char) !== undefined; //#19695
            $k[$j++] = _8J; //#19695
        }; //#19695
        $_.isE = function() {
            var _8M = $get($_.Evals, $_.char) !== undefined; //#19696
            $k[$j++] = _8M; //#19696
        }; //#19696
        $_.isEA = function() {
            $k[$j++] = $_.char > 127; //#19697
        }; //#19697
        $_.isFN = function() {
            $k[$j++] = $_.char < 0; //#19698
        }; //#19698
        $_.XtermFirst = function() {
            var _8P = $k[--$j]; //#19699
            $k[$j++] = $lt($get($_.nextXterm, _8P), $get($_.nextNonX, _8P)); //#19699
        }; //#19699
        $_.lookup = function() {
            $_.ac = 1; //#19703
            $_.cc = 2; //#19703
            $_.tc = 2; //#19703
            $_.xc = 2; //#19703
            $_.ec = 2; //#19703
            $_.bc = 2.25; //#19703
            if ($_.mode == $_.A) { //#19704
                $_.ac = 0; //#19704
                $_.cc = 1; //#19704
                $_.tc = 1; //#19704
                $_.xc = 1; //#19704
                $_.ec = 1; //#19704
                $_.bc = 1.25; //#19704
            } //#19704
            if ($_.mode == $_.C) { //#19705
                $_.cc = 0; //#19705
            } //#19705
            if ($_.mode == $_.T) { //#19706
                $_.tc = 0; //#19706
            } //#19706
            if ($_.mode == $_.X) { //#19707
                $_.xc = 0; //#19707
            } //#19707
            if ($_.mode == $_.E) { //#19708
                $_.ec = 0; //#19708
            } //#19708
            if ($_.mode == $_.B) { //#19709
                $_.bc = 0; //#19709
            } //#19709
            for (var _8g = 0, _8h = 1; _8g < _8h; _8g++) { //#19744
                if ($get($_.isECI, $_.i)) { //#19711
                    $k[$j++] = $_.A; //#19711
                    break; //#19711
                } //#19711
                if (($_.c40headerlength != -1) && ($_.i < $_.c40headerlength)) { //#19712
                    $k[$j++] = $_.C; //#19712
                    break; //#19712
                } //#19712
                $_.k = 0; //#19713
                for (;;) { //#19743
                    if (($_.i + $_.k) == $_.msglen) { //#19722
                        var _8t = $a(['ac', 'cc', 'tc', 'xc', 'ec', 'bc']); //#19715
                        for (var _8u = 0, _8v = _8t.length; _8u < _8v; _8u++) { //#19715
                            var _8w = $get(_8t, _8u); //#19715
                            $_[_8w] = Math.ceil($_[_8w]); //#19715
                        } //#19715
                        var _93 = $a([$_.cc, $_.tc, $_.xc, $_.ec, $_.bc]); //#19716
                        $k[$j++] = true; //#19716
                        for (var _94 = 0, _95 = _93.length; _94 < _95; _94++) { //#19716
                            var _98 = $k[--$j]; //#19716
                            $k[$j++] = _98 && ($_.ac <= $get(_93, _94)); //#19716
                        } //#19716
                        if ($k[--$j]) { //#19716
                            $k[$j++] = $_.A; //#19716
                            break; //#19716
                        } //#19716
                        var _9G = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.ec]); //#19717
                        $k[$j++] = true; //#19717
                        for (var _9H = 0, _9I = _9G.length; _9H < _9I; _9H++) { //#19717
                            var _9L = $k[--$j]; //#19717
                            $k[$j++] = _9L && ($_.bc < $get(_9G, _9H)); //#19717
                        } //#19717
                        if ($k[--$j]) { //#19717
                            $k[$j++] = $_.B; //#19717
                            break; //#19717
                        } //#19717
                        var _9T = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.bc]); //#19718
                        $k[$j++] = true; //#19718
                        for (var _9U = 0, _9V = _9T.length; _9U < _9V; _9U++) { //#19718
                            var _9Y = $k[--$j]; //#19718
                            $k[$j++] = _9Y && ($_.ec < $get(_9T, _9U)); //#19718
                        } //#19718
                        if ($k[--$j]) { //#19718
                            $k[$j++] = $_.E; //#19718
                            break; //#19718
                        } //#19718
                        var _9g = $a([$_.ac, $_.cc, $_.xc, $_.ec, $_.bc]); //#19719
                        $k[$j++] = true; //#19719
                        for (var _9h = 0, _9i = _9g.length; _9h < _9i; _9h++) { //#19719
                            var _9l = $k[--$j]; //#19719
                            $k[$j++] = _9l && ($_.tc < $get(_9g, _9h)); //#19719
                        } //#19719
                        if ($k[--$j]) { //#19719
                            $k[$j++] = $_.T; //#19719
                            break; //#19719
                        } //#19719
                        var _9t = $a([$_.ac, $_.cc, $_.tc, $_.ec, $_.bc]); //#19720
                        $k[$j++] = true; //#19720
                        for (var _9u = 0, _9v = _9t.length; _9u < _9v; _9u++) { //#19720
                            var _9y = $k[--$j]; //#19720
                            $k[$j++] = _9y && ($_.xc < $get(_9t, _9u)); //#19720
                        } //#19720
                        if ($k[--$j]) { //#19720
                            $k[$j++] = $_.X; //#19720
                            break; //#19720
                        } //#19720
                        $k[$j++] = $_.C; //#19721
                        break; //#19721
                    } //#19721
                    $_.char = $get($_.msg, $_.i + $_.k); //#19723
                    $k[$j++] = 'ac'; //#19724
                    $k[$j++] = $_.ac; //#19724
                    $_.isD(); //#19724
                    if ($k[--$j]) { //#19724
                        var _A8 = $k[--$j]; //#19724
                        $k[$j++] = $f(_A8 + (1 / 2)); //#19724
                    } else { //#19724
                        $_.isEA(); //#19724
                        if ($k[--$j]) { //#19724
                            var _AA = $k[--$j]; //#19724
                            $k[$j++] = Math.ceil(_AA) + 2; //#19724
                        } else { //#19724
                            var _AB = $k[--$j]; //#19724
                            $k[$j++] = Math.ceil(_AB) + 1; //#19724
                        } //#19724
                    } //#19724
                    var _AC = $k[--$j]; //#19724
                    $_[$k[--$j]] = _AC; //#19724
                    $k[$j++] = 'cc'; //#19725
                    $k[$j++] = $_.cc; //#19725
                    $_.isC(); //#19725
                    if ($k[--$j]) { //#19725
                        var _AG = $k[--$j]; //#19725
                        $k[$j++] = $f(_AG + 0.6666667); //#19725
                    } else { //#19725
                        $_.isEA(); //#19725
                        if ($k[--$j]) { //#19725
                            var _AI = $k[--$j]; //#19725
                            $k[$j++] = $f(_AI + 2.6666667); //#19725
                        } else { //#19725
                            var _AJ = $k[--$j]; //#19725
                            $k[$j++] = $f(_AJ + 1.3333334); //#19725
                        } //#19725
                    } //#19725
                    var _AK = $k[--$j]; //#19725
                    $_[$k[--$j]] = _AK; //#19725
                    $k[$j++] = 'tc'; //#19726
                    $k[$j++] = $_.tc; //#19726
                    $_.isT(); //#19726
                    if ($k[--$j]) { //#19726
                        var _AO = $k[--$j]; //#19726
                        $k[$j++] = $f(_AO + 0.6666667); //#19726
                    } else { //#19726
                        $_.isEA(); //#19726
                        if ($k[--$j]) { //#19726
                            var _AQ = $k[--$j]; //#19726
                            $k[$j++] = $f(_AQ + 2.6666667); //#19726
                        } else { //#19726
                            var _AR = $k[--$j]; //#19726
                            $k[$j++] = $f(_AR + 1.3333334); //#19726
                        } //#19726
                    } //#19726
                    var _AS = $k[--$j]; //#19726
                    $_[$k[--$j]] = _AS; //#19726
                    $k[$j++] = 'xc'; //#19727
                    $k[$j++] = $_.xc; //#19727
                    $_.isX(); //#19727
                    if ($k[--$j]) { //#19727
                        var _AW = $k[--$j]; //#19727
                        $k[$j++] = $f(_AW + 0.6666667); //#19727
                    } else { //#19727
                        $_.isEA(); //#19727
                        if ($k[--$j]) { //#19727
                            var _AY = $k[--$j]; //#19727
                            $k[$j++] = $f(_AY + 4.3333334); //#19727
                        } else { //#19727
                            var _AZ = $k[--$j]; //#19727
                            $k[$j++] = $f(_AZ + 3.3333334); //#19727
                        } //#19727
                    } //#19727
                    var _Aa = $k[--$j]; //#19727
                    $_[$k[--$j]] = _Aa; //#19727
                    $k[$j++] = 'ec'; //#19728
                    $k[$j++] = $_.ec; //#19728
                    $_.isE(); //#19728
                    if ($k[--$j]) { //#19728
                        var _Ae = $k[--$j]; //#19728
                        $k[$j++] = $f(_Ae + (3 / 4)); //#19728
                    } else { //#19728
                        $_.isEA(); //#19728
                        if ($k[--$j]) { //#19728
                            var _Ag = $k[--$j]; //#19728
                            $k[$j++] = $f(_Ag + (17 / 4)); //#19728
                        } else { //#19728
                            var _Ah = $k[--$j]; //#19728
                            $k[$j++] = $f(_Ah + (13 / 4)); //#19728
                        } //#19728
                    } //#19728
                    var _Ai = $k[--$j]; //#19728
                    $_[$k[--$j]] = _Ai; //#19728
                    $k[$j++] = 'bc'; //#19729
                    $k[$j++] = $_.bc; //#19729
                    $_.isFN(); //#19729
                    if ($k[--$j]) { //#19729
                        var _Am = $k[--$j]; //#19729
                        $k[$j++] = $f(_Am + 4); //#19729
                    } else { //#19729
                        var _An = $k[--$j]; //#19729
                        $k[$j++] = $f(_An + 1); //#19729
                    } //#19729
                    var _Ao = $k[--$j]; //#19729
                    $_[$k[--$j]] = _Ao; //#19729
                    if ($_.k >= 4) { //#19741
                        var _Aw = $a([$_.cc, $_.tc, $_.xc, $_.ec, $_.bc]); //#19731
                        $k[$j++] = true; //#19731
                        for (var _Ax = 0, _Ay = _Aw.length; _Ax < _Ay; _Ax++) { //#19731
                            var _B1 = $k[--$j]; //#19731
                            $k[$j++] = _B1 && (($_.ac + 1) <= $get(_Aw, _Ax)); //#19731
                        } //#19731
                        if ($k[--$j]) { //#19731
                            $k[$j++] = $_.A; //#19731
                            break; //#19731
                        } //#19731
                        if (($_.bc + 1) <= $_.ac) { //#19732
                            $k[$j++] = $_.B; //#19732
                            break; //#19732
                        } //#19732
                        var _BB = $a([$_.cc, $_.tc, $_.xc, $_.ec]); //#19733
                        $k[$j++] = true; //#19733
                        for (var _BC = 0, _BD = _BB.length; _BC < _BD; _BC++) { //#19733
                            var _BG = $k[--$j]; //#19733
                            $k[$j++] = _BG && (($_.bc + 1) < $get(_BB, _BC)); //#19733
                        } //#19733
                        if ($k[--$j]) { //#19733
                            $k[$j++] = $_.B; //#19733
                            break; //#19733
                        } //#19733
                        var _BO = $a([$_.ac, $_.cc, $_.tc, $_.xc, $_.bc]); //#19734
                        $k[$j++] = true; //#19734
                        for (var _BP = 0, _BQ = _BO.length; _BP < _BQ; _BP++) { //#19734
                            var _BT = $k[--$j]; //#19734
                            $k[$j++] = _BT && (($_.ec + 1) < $get(_BO, _BP)); //#19734
                        } //#19734
                        if ($k[--$j]) { //#19734
                            $k[$j++] = $_.E; //#19734
                            break; //#19734
                        } //#19734
                        var _Bb = $a([$_.ac, $_.cc, $_.xc, $_.ec, $_.bc]); //#19735
                        $k[$j++] = true; //#19735
                        for (var _Bc = 0, _Bd = _Bb.length; _Bc < _Bd; _Bc++) { //#19735
                            var _Bg = $k[--$j]; //#19735
                            $k[$j++] = _Bg && (($_.tc + 1) < $get(_Bb, _Bc)); //#19735
                        } //#19735
                        if ($k[--$j]) { //#19735
                            $k[$j++] = $_.T; //#19735
                            break; //#19735
                        } //#19735
                        var _Bo = $a([$_.ac, $_.cc, $_.tc, $_.ec, $_.bc]); //#19736
                        $k[$j++] = true; //#19736
                        for (var _Bp = 0, _Bq = _Bo.length; _Bp < _Bq; _Bp++) { //#19736
                            var _Bt = $k[--$j]; //#19736
                            $k[$j++] = _Bt && (($_.xc + 1) < $get(_Bo, _Bp)); //#19736
                        } //#19736
                        if ($k[--$j]) { //#19736
                            $k[$j++] = $_.X; //#19736
                            break; //#19736
                        } //#19736
                        var _C0 = $a([$_.ac, $_.tc, $_.ec, $_.bc]); //#19737
                        $k[$j++] = true; //#19737
                        for (var _C1 = 0, _C2 = _C0.length; _C1 < _C2; _C1++) { //#19737
                            var _C5 = $k[--$j]; //#19737
                            $k[$j++] = _C5 && (($_.cc + 1) < $get(_C0, _C1)); //#19737
                        } //#19737
                        if ($k[--$j]) { //#19740
                            if ($_.cc < $_.xc) { //#19738
                                $k[$j++] = $_.C; //#19738
                                break; //#19738
                            } //#19738
                            if ($_.cc == $_.xc) { //#19739
                                $k[$j++] = ($_.i + $_.k) + 1; //#19739
                                $_.XtermFirst(); //#19739
                                if ($k[--$j]) { //#19739
                                    $k[$j++] = $_.X; //#19739
                                    break; //#19739
                                } else { //#19739
                                    $k[$j++] = $_.C; //#19739
                                    break; //#19739
                                } //#19739
                            } //#19739
                        } //#19739
                    } //#19739
                    $_.k = $_.k + 1; //#19742
                } //#19742
            } //#19742
        }; //#19742
        $_.addtocws = function() {
            var _CI = $k[--$j]; //#19748
            $puti($_.cws, $_.j, _CI); //#19748
            $_.j = _CI.length + $_.j; //#19749
        }; //#19749
        $_.ECItocws = function() {
            var _CN = $f((-$k[--$j]) - 1000000); //#19754
            $k[$j++] = _CN; //#19768
            if (_CN <= 126) { //#19767
                var _CO = $k[--$j]; //#19755
                $k[$j++] = $f(_CO + 1); //#19756
                $astore($a(1)); //#19756
            } else { //#19767
                var _CQ = $k[--$j]; //#19757
                $k[$j++] = _CQ; //#19768
                if (_CQ <= 16382) { //#19767
                    var _CS = $f($k[--$j] - 127); //#19759
                    $k[$j++] = (~~(_CS / 254)) + 128; //#19761
                    $k[$j++] = $f((_CS % 254) + 1); //#19761
                    $astore($a(2)); //#19761
                } else { //#19767
                    var _CV = $f($k[--$j] - 16383); //#19764
                    $k[$j++] = (~~(_CV / 64516)) + 192; //#19767
                    $k[$j++] = ((~~(_CV / 254)) % 254) + 1; //#19767
                    $k[$j++] = $f((_CV % 254) + 1); //#19767
                    $astore($a(3)); //#19767
                } //#19767
            } //#19767
        }; //#19767
        $_.encA = function() {
            for (var _CX = 0, _CY = 1; _CX < _CY; _CX++) { //#19793
                if ($get($_.isECI, $_.i)) { //#19778
                    $k[$j++] = $get($_.Avals, $_.eci); //#19774
                    $_.addtocws(); //#19774
                    $k[$j++] = $get($_.msg, $_.i); //#19775
                    $_.ECItocws(); //#19775
                    $_.addtocws(); //#19775
                    $_.i = $_.i + 1; //#19776
                    break; //#19777
                } //#19777
                if ($get($_.numD, $_.i) >= 2) { //#19783
                    var _Cm = $s(2); //#19780
                    $put(_Cm, 0, $get($_.msg, $_.i)); //#19780
                    $put(_Cm, 1, $get($_.msg, $_.i + 1)); //#19780
                    $k[$j++] = $get($_.Avals, _Cm); //#19780
                    $_.addtocws(); //#19780
                    $_.i = $_.i + 2; //#19781
                    break; //#19782
                } //#19782
                $k[$j++] = 'newmode'; //#19784
                $_.lookup(); //#19784
                var _Cw = $k[--$j]; //#19784
                $_[$k[--$j]] = _Cw; //#19784
                if ($_.newmode != $_.mode) { //#19789
                    $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lE, $_.lB]), $_.newmode)); //#19786
                    $_.addtocws(); //#19786
                    $_.mode = $_.newmode; //#19787
                    break; //#19788
                } //#19788
                $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19790
                $_.addtocws(); //#19790
                $_.i = $_.i + 1; //#19791
                break; //#19792
            } //#19792
        }; //#19792
        $_.CTXvalstocws = function() {
            $_.in = $k[--$j]; //#19797
            $k[$j++] = Infinity; //#19798
            for (var _DK = 0, _DJ = $_.in.length - 1; _DK <= _DJ; _DK += 3) { //#19802
                var _DM = $geti($_.in, _DK, 3); //#19800
                $k[$j++] = 0; //#19800
                for (var _DN = 0, _DO = _DM.length; _DN < _DO; _DN++) { //#19800
                    var _DQ = $k[--$j]; //#19800
                    $k[$j++] = $f(_DQ + $get(_DM, _DN)) * 40; //#19800
                } //#19800
                var _DS = (~~($k[--$j] / 40)) + 1; //#19801
                $k[$j++] = ~~(_DS / 256); //#19801
                $k[$j++] = _DS % 256; //#19801
            } //#19801
            $astore($a($counttomark())); //#19803
            var _DV = $k[--$j]; //#19803
            var _DW = $k[--$j]; //#19803
            $k[$j++] = _DV; //#19803
            $k[$j++] = _DW; //#19803
            $j--; //#19803
        }; //#19803
        $_.encCTX = function() {
            $_.p = 0; //#19807
            $_.ctxvals = $a(2500); //#19808
            $_.done = false; //#19809
            for (;;) { //#19888
                if ($_.i == $_.msglen) { //#19813
                    break; //#19813
                } //#19813
                var _Dg = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)) !== undefined; //#19814
                if (!_Dg) { //#19814
                    break; //#19814
                } //#19814
                if (($_.p % 3) == 0) { //#19883
                    if ($_.p > 0) { //#19828
                        $k[$j++] = 'newmode'; //#19817
                        $_.lookup(); //#19817
                        var _Dj = $k[--$j]; //#19817
                        $_[$k[--$j]] = _Dj; //#19817
                        if ($ne($_.newmode, $_.mode)) { //#19827
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#19819
                            $_.CTXvalstocws(); //#19819
                            $_.addtocws(); //#19819
                            $k[$j++] = $a([$_.unlcw]); //#19820
                            $_.addtocws(); //#19820
                            if ($_.newmode != $_.A) { //#19823
                                $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lE, $_.lB]), $_.newmode)); //#19822
                                $_.addtocws(); //#19822
                            } //#19822
                            $_.mode = $_.newmode; //#19824
                            $_.done = true; //#19825
                            break; //#19826
                        } //#19826
                    } //#19826
                    if (($_.msglen - $_.i) <= 3) { //#19882
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 3)) * 2)); //#19830
                        $k[$j++] = Infinity; //#19831
                        var _EF = $geti($_.msg, $_.i, $_.msglen - $_.i); //#19832
                        for (var _EG = 0, _EH = _EF.length; _EG < _EH; _EG++) { //#19838
                            var _EI = $get(_EF, _EG); //#19838
                            var _EM = $get($get($_.encvals, $_.mode), _EI) !== undefined; //#19833
                            $k[$j++] = _EI; //#19837
                            if (_EM) { //#19836
                                $aload($get($get($_.encvals, $_.mode), $k[--$j])); //#19834
                            } else { //#19836
                                $j--; //#19836
                                $k[$j++] = -1; //#19836
                                $k[$j++] = -1; //#19836
                                $k[$j++] = -1; //#19836
                                $k[$j++] = -1; //#19836
                            } //#19836
                        } //#19836
                        $_.remvals = $a(); //#19836
                        if (($_.remcws == 2) && ($_.remvals.length == 3)) { //#19850
                            $k[$j++] = Infinity; //#19842
                            $aload($geti($_.ctxvals, 0, $_.p)); //#19843
                            $aload($_.remvals); //#19844
                            var _EZ = $a(); //#19844
                            $k[$j++] = _EZ; //#19845
                            $_.CTXvalstocws(); //#19845
                            $_.addtocws(); //#19845
                            $_.mode = $_.A; //#19846
                            $_.i = $_.msglen; //#19847
                            $_.done = true; //#19848
                            break; //#19849
                        } //#19849
                        if ((($_.remcws == 2) && ($_.remvals.length == 2)) && ($_.mode != $_.X)) { //#19862
                            $k[$j++] = Infinity; //#19853
                            $aload($geti($_.ctxvals, 0, $_.p)); //#19854
                            $aload($_.remvals); //#19855
                            $aload($get($get($_.encvals, $_.mode), $_.sft1)); //#19856
                            var _Ep = $a(); //#19856
                            $k[$j++] = _Ep; //#19857
                            $_.CTXvalstocws(); //#19857
                            $_.addtocws(); //#19857
                            $_.mode = $_.A; //#19858
                            $_.i = $_.msglen; //#19859
                            $_.done = true; //#19860
                            break; //#19861
                        } //#19861
                        if (($_.remcws == 2) && ($_.remvals.length == 1)) { //#19872
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#19865
                            $_.CTXvalstocws(); //#19865
                            $_.addtocws(); //#19865
                            $k[$j++] = $a([$_.unlcw]); //#19866
                            $_.addtocws(); //#19866
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19867
                            $_.addtocws(); //#19867
                            $_.mode = $_.A; //#19868
                            $_.i = $_.msglen; //#19869
                            $_.done = true; //#19870
                            break; //#19871
                        } //#19871
                        if (($_.remcws == 1) && ($_.remvals.length == 1)) { //#19881
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#19875
                            $_.CTXvalstocws(); //#19875
                            $_.addtocws(); //#19875
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19876
                            $_.addtocws(); //#19876
                            $_.mode = $_.A; //#19877
                            $_.i = $_.msglen; //#19878
                            $_.done = true; //#19879
                            break; //#19880
                        } //#19880
                    } //#19880
                } //#19880
                var _FO = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)); //#19884
                $puti($_.ctxvals, $_.p, _FO); //#19885
                $_.p = _FO.length + $_.p; //#19886
                $_.i = $_.i + 1; //#19887
            } //#19887
            if (!$_.done) { //#19912
                for (;;) { //#19896
                    if (($_.p % 3) == 0) { //#19893
                        break; //#19893
                    } //#19893
                    $_.i = $_.i - 1; //#19894
                    $_.p = $_.p - $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)).length; //#19895
                } //#19895
                $k[$j++] = Infinity; //#19897
                $aload($geti($_.ctxvals, 0, $_.p)); //#19898
                var _Fh = $a(); //#19898
                $k[$j++] = _Fh; //#19899
                $_.CTXvalstocws(); //#19899
                $_.addtocws(); //#19899
                $k[$j++] = $a([$_.unlcw]); //#19900
                $_.addtocws(); //#19900
                $_.mode = $_.A; //#19901
                if (($_.i != $_.msglen) && $nt($get($_.isECI, $_.i))) { //#19911
                    if ($get($_.numD, $_.i) >= 2) { //#19909
                        var _Ft = $s(2); //#19905
                        $put(_Ft, 0, $get($_.msg, $_.i)); //#19905
                        $put(_Ft, 1, $get($_.msg, $_.i + 1)); //#19905
                        $k[$j++] = $get($_.Avals, _Ft); //#19905
                        $_.addtocws(); //#19905
                        $_.i = $_.i + 2; //#19906
                    } else { //#19909
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19908
                        $_.addtocws(); //#19908
                        $_.i = $_.i + 1; //#19909
                    } //#19909
                } //#19909
            } //#19909
        }; //#19909
        $_.Evalstocws = function() {
            $_.in = $k[--$j]; //#19917
            $_.inlen = $_.in.length; //#19918
            $_.outlen = ~~(Math.ceil(($_.in.length / 4) * 3)); //#19919
            $k[$j++] = Infinity; //#19920
            $aload($_.in); //#19920
            $k[$j++] = 0; //#19920
            $k[$j++] = 0; //#19920
            $k[$j++] = 0; //#19920
            $_.in = $a(); //#19920
            $k[$j++] = Infinity; //#19921
            for (var _GG = 0, _GF = $_.inlen - 1; _GG <= _GF; _GG += 4) { //#19927
                var _GI = $geti($_.in, _GG, 4); //#19923
                $k[$j++] = 0; //#19923
                for (var _GJ = 0, _GK = _GI.length; _GJ < _GK; _GJ++) { //#19923
                    var _GM = $k[--$j]; //#19923
                    $k[$j++] = $or(_GM, $get(_GI, _GJ)) << 6; //#19923
                } //#19923
                var _GO = $k[--$j] >>> 6; //#19924
                $k[$j++] = (_GO >>> 16) & 255; //#19926
                $k[$j++] = (_GO >>> 8) & 255; //#19926
                $k[$j++] = _GO & 255; //#19926
            } //#19926
            $astore($a($counttomark())); //#19928
            var _GR = $k[--$j]; //#19928
            var _GS = $k[--$j]; //#19928
            $k[$j++] = _GR; //#19928
            $k[$j++] = _GS; //#19928
            $j--; //#19928
            var _GV = $geti($k[--$j], 0, $_.outlen); //#19929
            $k[$j++] = _GV; //#19929
        }; //#19929
        $_.encE = function() {
            $_.p = 0; //#19933
            $_.edifactvals = $a(2100); //#19934
            for (;;) { //#19963
                if ($_.i == $_.msglen) { //#19938
                    break; //#19938
                } //#19938
                var _Gd = $get($_.Evals, $get($_.msg, $_.i)) !== undefined; //#19939
                if (!_Gd) { //#19939
                    break; //#19939
                } //#19939
                if (($_.p % 4) == 0) { //#19958
                    if (($_.msglen - $_.i) <= 2) { //#19956
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 4)) * 3)); //#19942
                        $k[$j++] = Infinity; //#19943
                        var _Gp = $geti($_.msg, $_.i, $_.msglen - $_.i); //#19944
                        for (var _Gq = 0, _Gr = _Gp.length; _Gq < _Gr; _Gq++) { //#19946
                            $aload($get($_.Avals, $get(_Gp, _Gq))); //#19945
                        } //#19945
                        $_.remvals = $a(); //#19945
                        if ((($_.remcws == 1) || ($_.remcws == 2)) && ($_.remvals.length <= $_.remcws)) { //#19955
                            $k[$j++] = $geti($_.edifactvals, 0, $_.p); //#19950
                            $_.Evalstocws(); //#19950
                            $_.addtocws(); //#19950
                            $k[$j++] = $_.remvals; //#19951
                            $_.addtocws(); //#19951
                            $_.mode = $_.A; //#19952
                            $_.i = $_.msglen; //#19953
                            break; //#19954
                        } //#19954
                    } //#19954
                    $_.lookup(); //#19957
                    if ($k[--$j] != $_.mode) { //#19957
                        break; //#19957
                    } //#19957
                } //#19957
                var _HC = $get($_.Evals, $get($_.msg, $_.i)); //#19959
                $puti($_.edifactvals, $_.p, _HC); //#19960
                $_.p = _HC.length + $_.p; //#19961
                $_.i = $_.i + 1; //#19962
            } //#19962
            if ($_.mode != $_.A) { //#19985
                $_.remcws = $f($get($_.numremcws, ($_.j + ((~~($_.p / 4)) * 3)) - 1) - 1); //#19967
                if (((($_.p % 4) != 0) || ($_.i != $_.msglen)) || ($_.remcws >= 3)) { //#19972
                    var _HT = $get($_.Evals, $_.unl); //#19969
                    $puti($_.edifactvals, $_.p, _HT); //#19970
                    $_.p = _HT.length + $_.p; //#19971
                } //#19971
                $k[$j++] = $geti($_.edifactvals, 0, $_.p); //#19973
                $_.Evalstocws(); //#19973
                $_.addtocws(); //#19973
                $_.mode = $_.A; //#19974
                if (($_.i != $_.msglen) && $nt($get($_.isECI, $_.i))) { //#19984
                    if ($get($_.numD, $_.i) >= 2) { //#19982
                        var _Hj = $s(2); //#19978
                        $put(_Hj, 0, $get($_.msg, $_.i)); //#19978
                        $put(_Hj, 1, $get($_.msg, $_.i + 1)); //#19978
                        $k[$j++] = $get($_.Avals, _Hj); //#19978
                        $_.addtocws(); //#19978
                        $_.i = $_.i + 2; //#19979
                    } else { //#19982
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#19981
                        $_.addtocws(); //#19981
                        $_.i = $_.i + 1; //#19982
                    } //#19982
                } //#19982
            } //#19982
        }; //#19982
        $_.encB = function() {
            $_.p = 0; //#19990
            $_.bvals = $a(1558); //#19990
            for (;;) { //#19996
                if ($_.i == $_.msglen) { //#19991
                    break; //#19991
                } //#19991
                $_.lookup(); //#19992
                if ($k[--$j] != $_.mode) { //#19992
                    break; //#19992
                } //#19992
                $put($_.bvals, $_.p, $get($_.msg, $_.i)); //#19993
                $_.p = $_.p + 1; //#19994
                $_.i = $_.i + 1; //#19995
            } //#19995
            $_.remcws = $f($get($_.numremcws, $_.j + $_.p) - 1); //#19997
            $k[$j++] = Infinity; //#19998
            if (($_.remcws == 0) && ($_.i == $_.msglen)) { //#20002
                $k[$j++] = 0; //#20000
            } else { //#20002
                if ($_.p < 250) { //#20002
                    $k[$j++] = $_.p; //#20002
                } else { //#20002
                    $k[$j++] = (~~($_.p / 250)) + 249; //#20002
                    $k[$j++] = $_.p % 250; //#20002
                } //#20002
            } //#20002
            $aload($geti($_.bvals, 0, $_.p)); //#20004
            $_.bvals = $a(); //#20004
            for (var _IS = 0, _IR = $_.bvals.length - 1; _IS <= _IR; _IS += 1) { //#20011
                $_.p = _IS; //#20007
                var _IY = $f(((((($_.j + $_.p) + 1) * 149) % 255) + 1) + $get($_.bvals, $_.p)); //#20009
                $k[$j++] = _IY; //#20009
                if (_IY >= 256) { //#20009
                    var _IZ = $k[--$j]; //#20009
                    $k[$j++] = $f(_IZ - 256); //#20009
                } //#20009
                $put($_.bvals, $_.p, $k[--$j]); //#20010
            } //#20010
            $k[$j++] = $_.bvals; //#20012
            $_.addtocws(); //#20012
            $_.mode = $_.A; //#20013
        }; //#20013
        $_.cws = $a(1558); //#20017
        $_.mode = $_.A; //#20018
        $_.i = 0; //#20018
        $_.j = 0; //#20018
        for (;;) { //#20021
            if ($_.i >= $_.msglen) { //#20019
                break; //#20019
            } //#20019
            if ($_[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encE', 'encB']), $_.mode)]() === true) {
                break;
            } //#20020
        } //#20020
        $_.cws = $geti($_.cws, 0, $_.j); //#20022
    } //#20022
    $_.datlen = $_.cws.length; //#20027
    $_.remcws = $f($get($_.numremcws, $_.j - 1) - 1); //#20028
    if ($_.remcws > 0) { //#20037
        $k[$j++] = Infinity; //#20030
        $aload($_.cws); //#20030
        for (var _Ix = 0, _Iy = $_.remcws; _Ix < _Iy; _Ix++) { //#20030
            $k[$j++] = 129; //#20030
        } //#20030
        $_.cws = $a(); //#20030
        for (var _J4 = $_.datlen + 1, _J3 = $f($f($_.datlen + $_.remcws) - 1); _J4 <= _J3; _J4 += 1) { //#20036
            $_.i = _J4; //#20032
            var _J6 = (((($_.i + 1) * 149) % 253) + 1) + 129; //#20034
            $k[$j++] = _J6; //#20034
            if (_J6 > 254) { //#20034
                var _J7 = $k[--$j]; //#20034
                $k[$j++] = $f(_J7 - 254); //#20034
            } //#20034
            $put($_.cws, $_.i, $k[--$j]); //#20035
        } //#20035
    } //#20035
    var _JC = $get($_.options, 'debugcws') !== undefined; //#20039
    if (_JC) { //#20039
        $k[$j++] = 'bwipp.debugcws#20039'; //#20039
        $k[$j++] = $_.cws; //#20039
        bwipp_raiseerror(); //#20039
    } //#20039
    var _JE = $_.metrics; //#20042
    for (var _JF = 0, _JG = _JE.length; _JF < _JG; _JF++) { //#20064
        $_.m = $get(_JE, _JF); //#20043
        $_.rows = $get($_.m, 0); //#20044
        $_.cols = $get($_.m, 1); //#20045
        $_.regh = $get($_.m, 2); //#20046
        $_.regv = $get($_.m, 3); //#20047
        $_.rscw = $get($_.m, 4); //#20048
        $_.rsbl = $get($_.m, 5); //#20049
        $_.doly = $get($_.m, 6); //#20050
        $_.mrows = $f($_.rows - (2 * $_.regh)); //#20051
        $_.mcols = $f($_.cols - (2 * $_.regv)); //#20052
        $_.rrows = ~~($_.mrows / $_.regh); //#20053
        $_.rcols = ~~($_.mcols / $_.regv); //#20054
        $_.ncws = $f((~~(($_.mrows * $_.mcols) / 8)) - $_.rscw); //#20055
        $_.okay = true; //#20056
        if ($_.cws.length != $_.ncws) { //#20057
            $_.okay = false; //#20057
        } //#20057
        if (($_.urows != 0) && ($_.urows != $_.rows)) { //#20058
            $_.okay = false; //#20058
        } //#20058
        if (($_.ucols != 0) && ($_.ucols != $_.cols)) { //#20059
            $_.okay = false; //#20059
        } //#20059
        if ($eq($_.format, "square") && $ne($_.rows, $_.cols)) { //#20060
            $_.okay = false; //#20060
        } //#20060
        if ($eq($_.format, "rectangle") && $eq($_.rows, $_.cols)) { //#20061
            $_.okay = false; //#20061
        } //#20061
        if ((!$_.dmre) && ($_.doly == 1)) { //#20062
            $_.okay = false; //#20062
        } //#20062
        if ($_.okay) { //#20063
            break; //#20063
        } //#20063
    } //#20063
    if (!$_.okay) { //#20068
        $k[$j++] = 'bwipp.datamatrixNoValidSymbol#20067'; //#20067
        $k[$j++] = "Maximum length exceeded or invalid size"; //#20067
        bwipp_raiseerror(); //#20067
    } //#20067
    $_.cwbs = $a($_.rsbl); //#20071
    $_.ecbs = $a($_.rsbl); //#20072
    for (var _K5 = 0, _K4 = $f($_.rsbl - 1); _K5 <= _K4; _K5 += 1) { //#20087
        $_.i = _K5; //#20074
        if ($_.cws.length != 1558) { //#20078
            $_.cwbsize = ~~($_.cws.length / $_.rsbl); //#20076
        } else { //#20078
            if ($_.i <= 7) { //#20078
                $_.cwbsize = 156; //#20078
            } else { //#20078
                $_.cwbsize = 155; //#20078
            } //#20078
        } //#20078
        $_.cwb = $a($_.cwbsize); //#20080
        for (var _KE = 0, _KD = $_.cwbsize - 1; _KE <= _KD; _KE += 1) { //#20084
            $_.j = _KE; //#20082
            $put($_.cwb, $_.j, $get($_.cws, $f(($_.j * $_.rsbl) + $_.i))); //#20083
        } //#20083
        $put($_.cwbs, $_.i, $_.cwb); //#20085
        $k[$j++] = $_.ecbs; //#20086
        $k[$j++] = $_.i; //#20086
        $k[$j++] = Infinity; //#20086
        for (var _KT = 0, _KU = ~~($_.rscw / $_.rsbl); _KT < _KU; _KT++) { //#20086
            $k[$j++] = 0; //#20086
        } //#20086
        var _KV = $a(); //#20086
        var _KW = $k[--$j]; //#20086
        $put($k[--$j], _KW, _KV); //#20086
    } //#20086
    if (!bwipp_datamatrix.__20094__) { //#20094
        $_ = Object.create($_); //#20094
        $k[$j++] = Infinity; //#20091
        $k[$j++] = 1; //#20091
        for (var _KY = 0, _KZ = 255; _KY < _KZ; _KY++) { //#20091
            var _Ka = $k[--$j]; //#20091
            var _Kb = _Ka * 2; //#20091
            $k[$j++] = _Ka; //#20091
            $k[$j++] = _Kb; //#20091
            if (_Kb >= 256) { //#20091
                var _Kc = $k[--$j]; //#20091
                $k[$j++] = _Kc ^ 301; //#20091
            } //#20091
        } //#20091
        $_.rsalog = $a(); //#20091
        $_.rslog = $a(256); //#20092
        for (var _Kf = 1; _Kf <= 255; _Kf += 1) { //#20093
            $put($_.rslog, $get($_.rsalog, _Kf), _Kf); //#20093
        } //#20093
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_datamatrix.$ctx[id] = $_[id]); //#20093
        bwipp_datamatrix.__20094__ = 1; //#20093
        $_ = Object.getPrototypeOf($_); //#20093
    } //#20093
    $_.rsprod = function() {
        var _Kk = $k[--$j]; //#20098
        var _Kl = $k[--$j]; //#20098
        $k[$j++] = _Kl; //#20102
        $k[$j++] = _Kk; //#20102
        if ((_Kk != 0) && (_Kl != 0)) { //#20101
            var _Ko = $get($_.rslog, $k[--$j]); //#20099
            var _Kt = $get($_.rsalog, $f(_Ko + $get($_.rslog, $k[--$j])) % 255); //#20099
            $k[$j++] = _Kt; //#20099
        } else { //#20101
            $j -= 2; //#20101
            $k[$j++] = 0; //#20101
        } //#20101
    }; //#20101
    $k[$j++] = Infinity; //#20106
    $k[$j++] = 1; //#20106
    for (var _Kw = 0, _Kx = ~~($_.rscw / $_.rsbl); _Kw < _Kx; _Kw++) { //#20106
        $k[$j++] = 0; //#20106
    } //#20106
    $_.coeffs = $a(); //#20106
    for (var _L2 = 1, _L1 = ~~($_.rscw / $_.rsbl); _L2 <= _L1; _L2 += 1) { //#20115
        $_.i = _L2; //#20108
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#20109
        for (var _L9 = $_.i - 1; _L9 >= 1; _L9 -= 1) { //#20113
            $_.j = _L9; //#20111
            $k[$j++] = $_.coeffs; //#20112
            $k[$j++] = $_.j; //#20112
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#20112
            $k[$j++] = $get($_.coeffs, $_.j); //#20112
            $k[$j++] = $get($_.rsalog, $_.i); //#20112
            $_.rsprod(); //#20112
            var _LL = $k[--$j]; //#20112
            var _LM = $k[--$j]; //#20112
            var _LN = $k[--$j]; //#20112
            $put($k[--$j], _LN, $xo(_LM, _LL)); //#20112
        } //#20112
        $k[$j++] = $_.coeffs; //#20114
        $k[$j++] = 0; //#20114
        $k[$j++] = $get($_.coeffs, 0); //#20114
        $k[$j++] = $get($_.rsalog, $_.i); //#20114
        $_.rsprod(); //#20114
        var _LV = $k[--$j]; //#20114
        var _LW = $k[--$j]; //#20114
        $put($k[--$j], _LW, _LV); //#20114
    } //#20114
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#20116
    for (var _Ld = 0, _Lc = $_.cwbs.length - 1; _Ld <= _Lc; _Ld += 1) { //#20132
        $_.i = _Ld; //#20120
        $_.cwb = $get($_.cwbs, $_.i); //#20121
        $_.ecb = $get($_.ecbs, $_.i); //#20122
        for (var _Lm = 0, _Ll = $_.cwb.length - 1; _Lm <= _Ll; _Lm += 1) { //#20131
            $_.t = $xo($get($_.cwb, _Lm), $get($_.ecb, 0)); //#20124
            for (var _Ls = $_.ecb.length - 1; _Ls >= 0; _Ls -= 1) { //#20130
                $_.j = _Ls; //#20126
                $_.p = ($_.ecb.length - $_.j) - 1; //#20127
                $k[$j++] = $_.ecb; //#20128
                $k[$j++] = $_.p; //#20128
                $k[$j++] = $_.t; //#20128
                $k[$j++] = $get($_.coeffs, $_.j); //#20128
                $_.rsprod(); //#20128
                var _M1 = $k[--$j]; //#20128
                var _M2 = $k[--$j]; //#20128
                $put($k[--$j], _M2, _M1); //#20128
                if ($_.j > 0) { //#20129
                    $put($_.ecb, $_.p, $xo($get($_.ecb, $_.p + 1), $get($_.ecb, $_.p))); //#20129
                } //#20129
            } //#20129
        } //#20129
    } //#20129
    if ($_.ncws == 1558) { //#20140
        $k[$j++] = Infinity; //#20136
        $aload($geti($_.ecbs, 8, 2)); //#20137
        $aload($geti($_.ecbs, 0, 8)); //#20138
        $_.ecbs = $a(); //#20138
    } //#20139
    $k[$j++] = Infinity; //#20143
    $aload($_.cws); //#20143
    for (var _ML = 0, _MM = $_.rscw; _ML < _MM; _ML++) { //#20143
        $k[$j++] = 0; //#20143
    } //#20143
    $_.cws = $a(); //#20143
    for (var _MQ = 0, _MP = $f($_.rscw - 1); _MQ <= _MP; _MQ += 1) { //#20147
        $_.i = _MQ; //#20145
        $put($_.cws, $f($_.ncws + $_.i), $get($get($_.ecbs, $_.i % $_.rsbl), ~~($_.i / $_.rsbl))); //#20146
    } //#20146
    $_.module = function() {
        $r(4, -1); //#20152
        var _Mc = $strcpy($s(8), "00000000"); //#20153
        $k[$j++] = _Mc; //#20153
        $k[$j++] = _Mc; //#20153
        $r(3, -1); //#20153
        var _Mf = $cvrs($s(8), $k[--$j], 2); //#20153
        $puti($k[--$j], 8 - _Mf.length, _Mf); //#20154
        for (var _Mh = 7; _Mh >= 0; _Mh -= 1) { //#20155
            var _Mi = $k[--$j]; //#20155
            $k[$j++] = $f($get(_Mi, _Mh) - 48); //#20155
            $k[$j++] = _Mi; //#20155
        } //#20155
        $j--; //#20155
        $r(11, -3); //#20156
        $forall($k[--$j], function() { //#20173
            if ($k[--$j]() === true) {
                return true;
            } //#20159
            var _Mm = $k[--$j]; //#20160
            var _Mn = $k[--$j]; //#20160
            $k[$j++] = _Mn; //#20163
            $k[$j++] = _Mm; //#20163
            if (_Mn < 0) { //#20163
                var _Mo = $k[--$j]; //#20161
                var _Mp = $k[--$j]; //#20161
                $k[$j++] = $f(_Mp + $_.mrows); //#20162
                $k[$j++] = $f(_Mo + ($f(4 - ($f($_.mrows + 4) % 8)))); //#20162
            } //#20162
            var _Ms = $k[--$j]; //#20164
            $k[$j++] = _Ms; //#20167
            if (_Ms < 0) { //#20167
                var _Mu = $k[--$j]; //#20165
                var _Mv = $k[--$j]; //#20165
                $k[$j++] = $f(_Mv + ($f(4 - ($f($_.mcols + 4) % 8)))); //#20166
                $k[$j++] = $f(_Mu + $_.mcols); //#20166
            } //#20166
            var _Mx = $k[--$j]; //#20168
            var _My = $k[--$j]; //#20168
            $k[$j++] = _My; //#20170
            $k[$j++] = _Mx; //#20170
            if (_My >= $_.mrows) { //#20170
                var _N0 = $k[--$j]; //#20169
                var _N1 = $k[--$j]; //#20169
                $k[$j++] = $f(_N1 - $_.mrows); //#20169
                $k[$j++] = _N0; //#20169
            } //#20169
            var _N3 = $k[--$j]; //#20171
            var _N4 = $k[--$j]; //#20171
            $k[$j++] = $_.mmat; //#20172
            $k[$j++] = $f(_N3 + (_N4 * $_.mcols)); //#20172
            $r(5, -1); //#20172
            var _N7 = $k[--$j]; //#20172
            var _N8 = $k[--$j]; //#20172
            $put($k[--$j], _N8, _N7); //#20172
        }); //#20172
    }; //#20172
    var _NQ = $a([function() {
        var _NA = $k[--$j]; //#20178
        var _NB = $k[--$j]; //#20178
        $k[$j++] = _NB; //#20178
        $k[$j++] = _NA; //#20178
        $k[$j++] = $f(_NB - 2); //#20178
        $k[$j++] = $f(_NA - 2); //#20178
    }, function() {
        var _NC = $k[--$j]; //#20178
        var _ND = $k[--$j]; //#20178
        $k[$j++] = _ND; //#20178
        $k[$j++] = _NC; //#20178
        $k[$j++] = $f(_ND - 2); //#20178
        $k[$j++] = $f(_NC - 1); //#20178
    }, function() {
        var _NE = $k[--$j]; //#20179
        var _NF = $k[--$j]; //#20179
        $k[$j++] = _NF; //#20179
        $k[$j++] = _NE; //#20179
        $k[$j++] = $f(_NF - 1); //#20179
        $k[$j++] = $f(_NE - 2); //#20179
    }, function() {
        var _NG = $k[--$j]; //#20179
        var _NH = $k[--$j]; //#20179
        $k[$j++] = _NH; //#20179
        $k[$j++] = _NG; //#20179
        $k[$j++] = $f(_NH - 1); //#20179
        $k[$j++] = $f(_NG - 1); //#20179
    }, function() {
        var _NI = $k[--$j]; //#20180
        var _NJ = $k[--$j]; //#20180
        $k[$j++] = _NJ; //#20180
        $k[$j++] = _NI; //#20180
        $k[$j++] = $f(_NJ - 1); //#20180
        $k[$j++] = _NI; //#20180
    }, function() {
        var _NK = $k[--$j]; //#20180
        var _NL = $k[--$j]; //#20180
        $k[$j++] = _NL; //#20180
        $k[$j++] = _NK; //#20180
        $k[$j++] = _NL; //#20180
        $k[$j++] = $f(_NK - 2); //#20180
    }, function() {
        var _NM = $k[--$j]; //#20181
        var _NN = $k[--$j]; //#20181
        $k[$j++] = _NN; //#20181
        $k[$j++] = _NM; //#20181
        $k[$j++] = _NN; //#20181
        $k[$j++] = $f(_NM - 1); //#20181
    }, function() {
        var _NO = $k[--$j]; //#20181
        var _NP = $k[--$j]; //#20181
        $k[$j++] = _NP; //#20181
        $k[$j++] = _NO; //#20181
        $k[$j++] = _NP; //#20181
        $k[$j++] = _NO; //#20181
    }]); //#20181
    $_.dmn = _NQ; //#20182
    var _NZ = $a([function() {
        $k[$j++] = $f($_.mrows - 1); //#20185
        $k[$j++] = 0; //#20185
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#20185
        $k[$j++] = 1; //#20185
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#20186
        $k[$j++] = 2; //#20186
    }, function() {
        $k[$j++] = 0; //#20186
        $k[$j++] = $f($_.mcols - 2); //#20186
    }, function() {
        $k[$j++] = 0; //#20187
        $k[$j++] = $f($_.mcols - 1); //#20187
    }, function() {
        $k[$j++] = 1; //#20187
        $k[$j++] = $f($_.mcols - 1); //#20187
    }, function() {
        $k[$j++] = 2; //#20188
        $k[$j++] = $f($_.mcols - 1); //#20188
    }, function() {
        $k[$j++] = 3; //#20188
        $k[$j++] = $f($_.mcols - 1); //#20188
    }]); //#20188
    $_.dmc1 = _NZ; //#20189
    var _Ni = $a([function() {
        $k[$j++] = $f($_.mrows - 3); //#20192
        $k[$j++] = 0; //#20192
    }, function() {
        $k[$j++] = $f($_.mrows - 2); //#20192
        $k[$j++] = 0; //#20192
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#20193
        $k[$j++] = 0; //#20193
    }, function() {
        $k[$j++] = 0; //#20193
        $k[$j++] = $f($_.mcols - 4); //#20193
    }, function() {
        $k[$j++] = 0; //#20194
        $k[$j++] = $f($_.mcols - 3); //#20194
    }, function() {
        $k[$j++] = 0; //#20194
        $k[$j++] = $f($_.mcols - 2); //#20194
    }, function() {
        $k[$j++] = 0; //#20195
        $k[$j++] = $f($_.mcols - 1); //#20195
    }, function() {
        $k[$j++] = 1; //#20195
        $k[$j++] = $f($_.mcols - 1); //#20195
    }]); //#20195
    $_.dmc2 = _Ni; //#20196
    var _Nr = $a([function() {
        $k[$j++] = $f($_.mrows - 3); //#20199
        $k[$j++] = 0; //#20199
    }, function() {
        $k[$j++] = $f($_.mrows - 2); //#20199
        $k[$j++] = 0; //#20199
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#20200
        $k[$j++] = 0; //#20200
    }, function() {
        $k[$j++] = 0; //#20200
        $k[$j++] = $f($_.mcols - 2); //#20200
    }, function() {
        $k[$j++] = 0; //#20201
        $k[$j++] = $f($_.mcols - 1); //#20201
    }, function() {
        $k[$j++] = 1; //#20201
        $k[$j++] = $f($_.mcols - 1); //#20201
    }, function() {
        $k[$j++] = 2; //#20202
        $k[$j++] = $f($_.mcols - 1); //#20202
    }, function() {
        $k[$j++] = 3; //#20202
        $k[$j++] = $f($_.mcols - 1); //#20202
    }]); //#20202
    $_.dmc3 = _Nr; //#20203
    var _O1 = $a([function() {
        $k[$j++] = $f($_.mrows - 1); //#20206
        $k[$j++] = 0; //#20206
    }, function() {
        $k[$j++] = $f($_.mrows - 1); //#20206
        $k[$j++] = $f($_.mcols - 1); //#20206
    }, function() {
        $k[$j++] = 0; //#20207
        $k[$j++] = $f($_.mcols - 3); //#20207
    }, function() {
        $k[$j++] = 0; //#20207
        $k[$j++] = $f($_.mcols - 2); //#20207
    }, function() {
        $k[$j++] = 0; //#20208
        $k[$j++] = $f($_.mcols - 1); //#20208
    }, function() {
        $k[$j++] = 1; //#20208
        $k[$j++] = $f($_.mcols - 3); //#20208
    }, function() {
        $k[$j++] = 1; //#20209
        $k[$j++] = $f($_.mcols - 2); //#20209
    }, function() {
        $k[$j++] = 1; //#20209
        $k[$j++] = $f($_.mcols - 1); //#20209
    }]); //#20209
    $_.dmc4 = _O1; //#20210
    $k[$j++] = Infinity; //#20212
    for (var _O4 = 0, _O5 = $_.mrows * $_.mcols; _O4 < _O5; _O4++) { //#20212
        $k[$j++] = -1; //#20212
    } //#20212
    $_.mmat = $a(); //#20212
    for (var _O8 = $_.cws.length - 1; _O8 >= 0; _O8 -= 1) { //#20213
        $k[$j++] = $get($_.cws, _O8); //#20213
    } //#20213
    $k[$j++] = 4; //#20253
    $k[$j++] = 0; //#20253
    for (;;) { //#20253
        var _OB = $k[--$j]; //#20216
        var _OC = $k[--$j]; //#20216
        $k[$j++] = _OC; //#20218
        $k[$j++] = _OB; //#20218
        if ((_OB == 0) && (_OC == $_.mrows)) { //#20218
            $k[$j++] = $_.dmc1; //#20217
            $_.module(); //#20217
        } //#20217
        var _OF = $k[--$j]; //#20219
        var _OG = $k[--$j]; //#20219
        $k[$j++] = _OG; //#20221
        $k[$j++] = _OF; //#20221
        if (((_OF == 0) && (_OG == $f($_.mrows - 2))) && (($_.mcols % 4) != 0)) { //#20221
            $k[$j++] = $_.dmc2; //#20220
            $_.module(); //#20220
        } //#20220
        var _OK = $k[--$j]; //#20222
        var _OL = $k[--$j]; //#20222
        $k[$j++] = _OL; //#20224
        $k[$j++] = _OK; //#20224
        if (((_OK == 0) && (_OL == $f($_.mrows - 2))) && (($_.mcols % 8) == 4)) { //#20224
            $k[$j++] = $_.dmc3; //#20223
            $_.module(); //#20223
        } //#20223
        var _OP = $k[--$j]; //#20225
        var _OQ = $k[--$j]; //#20225
        $k[$j++] = _OQ; //#20227
        $k[$j++] = _OP; //#20227
        if (((_OP == 2) && (_OQ == $f($_.mrows + 4))) && (($_.mcols % 8) == 0)) { //#20227
            $k[$j++] = $_.dmc4; //#20226
            $_.module(); //#20226
        } //#20226
        for (;;) { //#20237
            var _OU = $k[--$j]; //#20230
            var _OV = $k[--$j]; //#20230
            $k[$j++] = _OV; //#20234
            $k[$j++] = _OU; //#20234
            if ((_OU >= 0) && (_OV < $_.mrows)) { //#20234
                var _OX = $k[--$j]; //#20231
                var _OY = $k[--$j]; //#20231
                $k[$j++] = _OY; //#20233
                $k[$j++] = _OX; //#20233
                if ($get($_.mmat, $f(_OX + (_OY * $_.mcols))) == -1) { //#20233
                    $k[$j++] = $_.dmn; //#20232
                    $_.module(); //#20232
                } //#20232
            } //#20232
            var _Od = $k[--$j]; //#20235
            var _Oe = $k[--$j]; //#20235
            $k[$j++] = $f(_Oe - 2); //#20236
            $k[$j++] = $f(_Od + 2); //#20236
            if (!(($f(_Od + 2) < $_.mcols) && ($f(_Oe - 2) >= 0))) { //#20236
                break; //#20236
            } //#20236
        } //#20236
        var _Og = $k[--$j]; //#20238
        var _Oh = $k[--$j]; //#20238
        $k[$j++] = $f(_Oh + 1); //#20248
        $k[$j++] = $f(_Og + 3); //#20248
        for (;;) { //#20248
            var _Oi = $k[--$j]; //#20241
            var _Oj = $k[--$j]; //#20241
            $k[$j++] = _Oj; //#20245
            $k[$j++] = _Oi; //#20245
            if ((_Oi < $_.mcols) && (_Oj >= 0)) { //#20245
                var _Ol = $k[--$j]; //#20242
                var _Om = $k[--$j]; //#20242
                $k[$j++] = _Om; //#20244
                $k[$j++] = _Ol; //#20244
                if ($get($_.mmat, $f(_Ol + (_Om * $_.mcols))) == -1) { //#20244
                    $k[$j++] = $_.dmn; //#20243
                    $_.module(); //#20243
                } //#20243
            } //#20243
            var _Or = $k[--$j]; //#20246
            var _Os = $k[--$j]; //#20246
            $k[$j++] = $f(_Os + 2); //#20247
            $k[$j++] = $f(_Or - 2); //#20247
            if (!(($f(_Or - 2) >= 0) && ($f(_Os + 2) < $_.mrows))) { //#20247
                break; //#20247
            } //#20247
        } //#20247
        var _Ou = $k[--$j]; //#20249
        var _Ov = $k[--$j]; //#20249
        $k[$j++] = $f(_Ov + 3); //#20251
        $k[$j++] = $f(_Ou + 1); //#20251
        if (!(($f(_Ou + 1) < $_.mcols) || ($f(_Ov + 3) < $_.mrows))) { //#20251
            $j -= 2; //#20251
            break; //#20251
        } //#20251
    } //#20251
    if ($get($_.mmat, $f(($_.mrows * $_.mcols) - 1)) == -1) { //#20259
        $puti($_.mmat, $f(($_.mrows * $f($_.mcols - 1)) - 2), $a([1, 0])); //#20257
        $puti($_.mmat, $f(($_.mrows * $_.mcols) - 2), $a([0, 1])); //#20258
    } //#20258
    $_.pixs = $a($_.rows * $_.cols); //#20262
    $_.cwpos = 0; //#20263
    for (var _PF = 0, _PE = $f($_.rows - 1); _PF <= _PE; _PF += 1) { //#20279
        $_.i = _PF; //#20265
        if (($_.i % ($_.rrows + 2)) == 0) { //#20266
            $k[$j++] = $_.pixs; //#20266
            $k[$j++] = $_.i * $_.cols; //#20266
            $k[$j++] = Infinity; //#20266
            for (var _PM = 0, _PN = ~~($_.cols / 2); _PM < _PN; _PM++) { //#20266
                $k[$j++] = 1; //#20266
                $k[$j++] = 0; //#20266
            } //#20266
            var _PO = $a(); //#20266
            var _PP = $k[--$j]; //#20266
            $puti($k[--$j], _PP, _PO); //#20266
        } //#20266
        if (($_.i % ($_.rrows + 2)) == ($_.rrows + 1)) { //#20267
            $k[$j++] = $_.pixs; //#20267
            $k[$j++] = $_.i * $_.cols; //#20267
            $k[$j++] = Infinity; //#20267
            for (var _PY = 0, _PZ = $_.cols; _PY < _PZ; _PY++) { //#20267
                $k[$j++] = 1; //#20267
            } //#20267
            var _Pa = $a(); //#20267
            var _Pb = $k[--$j]; //#20267
            $puti($k[--$j], _Pb, _Pa); //#20267
        } //#20267
        if ((($_.i % ($_.rrows + 2)) != 0) && (($_.i % ($_.rrows + 2)) != ($_.rrows + 1))) { //#20278
            for (var _Pk = 0, _Pj = $f($_.cols - 1); _Pk <= _Pj; _Pk += 1) { //#20277
                $_.j = _Pk; //#20270
                if (($_.j % ($_.rcols + 2)) == 0) { //#20271
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), 1); //#20271
                } //#20271
                if (($_.j % ($_.rcols + 2)) == ($_.rcols + 1)) { //#20272
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), $_.i % 2); //#20272
                } //#20272
                if ((($_.j % ($_.rcols + 2)) != 0) && (($_.j % ($_.rcols + 2)) != ($_.rcols + 1))) { //#20276
                    $put($_.pixs, $f(($_.i * $_.cols) + $_.j), $get($_.mmat, $_.cwpos)); //#20274
                    $_.cwpos = $_.cwpos + 1; //#20275
                } //#20275
            } //#20275
        } //#20275
    } //#20275
    var _QI = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.cols],
        ["pixy", $_.rows],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.cols * 2) / 72],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#20293
    $k[$j++] = _QI; //#20296
    if (!$_.dontdraw) { //#20296
        bwipp_renmatrix(); //#20296
    } //#20296
    $_ = Object.getPrototypeOf($_); //#20298
    $_ = Object.getPrototypeOf($_); //#20300
} //bwipp_datamatrix
function bwipp_datamatrixrectangular() {
    $_ = Object.create($_); //#20329
    $_.dontdraw = false; //#20332
    $k[$j++] = $_; //#20334
    bwipp_processoptions(); //#20334
    $_.options = $k[--$j]; //#20334
    $_.barcode = $k[--$j]; //#20335
    $put($_.options, "dontdraw", true); //#20338
    $put($_.options, "format", "rectangle"); //#20339
    $k[$j++] = 'args'; //#20341
    $k[$j++] = $_.barcode; //#20341
    $k[$j++] = $_.options; //#20341
    bwipp_datamatrix(); //#20341
    var _6 = $k[--$j]; //#20341
    $_[$k[--$j]] = _6; //#20341
    $put($_.args, "opt", $_.options); //#20343
    $k[$j++] = $_.args; //#20346
    if (!$_.dontdraw) { //#20346
        bwipp_renmatrix(); //#20346
    } //#20346
    $_ = Object.getPrototypeOf($_); //#20348
} //bwipp_datamatrixrectangular
function bwipp_datamatrixrectangularextension() {
    $_ = Object.create($_); //#20377
    $_.dontdraw = false; //#20380
    $k[$j++] = $_; //#20382
    bwipp_processoptions(); //#20382
    $_.options = $k[--$j]; //#20382
    $_.barcode = $k[--$j]; //#20383
    $put($_.options, "dontdraw", true); //#20386
    $put($_.options, "dmre", true); //#20387
    $k[$j++] = 'args'; //#20389
    $k[$j++] = $_.barcode; //#20389
    $k[$j++] = $_.options; //#20389
    bwipp_datamatrix(); //#20389
    var _6 = $k[--$j]; //#20389
    $_[$k[--$j]] = _6; //#20389
    $put($_.args, "opt", $_.options); //#20391
    $k[$j++] = $_.args; //#20394
    if (!$_.dontdraw) { //#20394
        bwipp_renmatrix(); //#20394
    } //#20394
    $_ = Object.getPrototypeOf($_); //#20396
} //bwipp_datamatrixrectangularextension
function bwipp_mailmark() {
    $_ = Object.create($_); //#20426
    $_.type = "unset"; //#20429
    $_.parse = false; //#20430
    $_.dontdraw = false; //#20431
    $k[$j++] = $_; //#20433
    bwipp_processoptions(); //#20433
    $_.options = $k[--$j]; //#20433
    $_.barcode = $k[--$j]; //#20434
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#20440
    $_.fncvals = _3; //#20441
    $k[$j++] = 'barcode'; //#20442
    $k[$j++] = $_.barcode; //#20442
    $k[$j++] = $_.fncvals; //#20442
    bwipp_parseinput(); //#20442
    var _6 = $k[--$j]; //#20442
    $_[$k[--$j]] = _6; //#20442
    $_.barlen = $_.barcode.length; //#20443
    delete $_.options["parse"]; //#20444
    var _A = $_['type']; //#20447
    if ($ne(_A, "7") && ($ne(_A, "9") && $ne(_A, "29"))) { //#20449
        $k[$j++] = 'bwipp.mailmarkBadType#20448'; //#20448
        $k[$j++] = "Royal Mail Mailmark type must be 7, 9 or 29"; //#20448
        bwipp_raiseerror(); //#20448
    } //#20448
    var _B = new Map([
        ["7", "24x24"],
        ["9", "32x32"],
        ["29", "16x48"]
    ]); //#20453
    $_.version = $get(_B, $_['type']); //#20454
    var _E = new Map([
        ["7", "square"],
        ["9", "square"],
        ["29", "rectangle"]
    ]); //#20459
    $_.format = $get(_E, $_['type']); //#20460
    if ($_.barcode.length < 45) { //#20465
        $k[$j++] = 'bwipp.mailmarkBadLength#20464'; //#20464
        $k[$j++] = "Royal Mail Mailmark must contain at least 45 characters of Mailmark formatted data, including any required space padding"; //#20464
        bwipp_raiseerror(); //#20464
    } //#20464
    if ($ne($geti($_.barcode, 0, 4), "JGB ")) { //#20468
        $k[$j++] = 'bwipp.mailmarkBadIndicator#20467'; //#20467
        $k[$j++] = "Royal Mail Mailmark must begin with JGB<space> identifier"; //#20467
        bwipp_raiseerror(); //#20467
    } //#20467
    $put($_.options, "dontdraw", true); //#20471
    $put($_.options, "version", $_.version); //#20472
    $put($_.options, "format", $_.format); //#20473
    $put($_.options, "c40headerlength", 45); //#20474
    $k[$j++] = 'args'; //#20475
    $k[$j++] = $_.barcode; //#20475
    $k[$j++] = $_.options; //#20475
    bwipp_datamatrix(); //#20475
    var _S = $k[--$j]; //#20475
    $_[$k[--$j]] = _S; //#20475
    $put($_.args, "opt", $_.options); //#20477
    $k[$j++] = $_.args; //#20480
    if (!$_.dontdraw) { //#20480
        bwipp_renmatrix(); //#20480
    } //#20480
    $_ = Object.getPrototypeOf($_); //#20482
} //bwipp_mailmark
function bwipp_qrcode() {
    $_ = Object.create($_); //#20513
    $_.dontdraw = false; //#20516
    $_.format = "unset"; //#20517
    $_.version = "unset"; //#20518
    $_.eclevel = "unset"; //#20519
    $_.fixedeclevel = false; //#20520
    $_.parse = false; //#20521
    $_.parsefnc = false; //#20522
    $_.mask = -1; //#20523
    $_.suppresskanjimode = true; //#20524
    $k[$j++] = $_; //#20526
    bwipp_processoptions(); //#20526
    $_.options = $k[--$j]; //#20526
    $_.barcode = $k[--$j]; //#20527
    bwipp_loadctx(bwipp_qrcode); //#20529
    if ($eq($_.barcode, "")) { //#20533
        $k[$j++] = 'bwipp.qrcodeEmptyData#20532'; //#20532
        $k[$j++] = "The data must not be empty"; //#20532
        bwipp_raiseerror(); //#20532
    } //#20532
    if ($ne($_.version, "unset")) { //#20544
        if ($eq($_.format, "unset")) { //#20542
            $k[$j++] = "full"; //#20539
            if ($eq($geti($_.version, 0, 1), "M")) { //#20539
                $j--; //#20539
                $k[$j++] = "micro"; //#20539
            } //#20539
            if ($eq($geti($_.version, 0, 1), "R")) { //#20540
                $j--; //#20540
                $k[$j++] = "rmqr"; //#20540
            } //#20540
            $_.format = $k[--$j]; //#20541
        } //#20541
    } else { //#20544
        if ($eq($_.format, "unset")) { //#20544
            $_.format = "full"; //#20544
        } //#20544
    } //#20544
    if ($ne($_.format, "full") && ($ne($_.format, "micro") && $ne($_.format, "rmqr"))) { //#20549
        $k[$j++] = 'bwipp.qrcodeInvalidFormat#20548'; //#20548
        $k[$j++] = "The format must be either full, micro or rmqr"; //#20548
        bwipp_raiseerror(); //#20548
    } //#20548
    if ($eq($_.format, "rmqr") && $eq($_.version, "unset")) { //#20553
        $k[$j++] = 'bwipp.qrcodeRMQRwithoutVersion#20552'; //#20552
        $k[$j++] = "A version must be provided for RMQR"; //#20552
        bwipp_raiseerror(); //#20552
    } //#20552
    if ($eq($_.eclevel, "unset")) { //#20556
        $k[$j++] = 'eclevel'; //#20556
        if ($ne($_.format, "micro")) { //#20556
            $k[$j++] = "M"; //#20556
        } else { //#20556
            $k[$j++] = "L"; //#20556
        } //#20556
        var _I = $k[--$j]; //#20556
        $_[$k[--$j]] = _I; //#20556
    } //#20556
    if ($ne($_.eclevel, "L") && ($ne($_.eclevel, "M") && ($ne($_.eclevel, "Q") && $ne($_.eclevel, "H")))) { //#20560
        $k[$j++] = 'bwipp.qrcodeInvalidEClevel#20559'; //#20559
        $k[$j++] = "Error correction level must be either L, M, Q, or H"; //#20559
        bwipp_raiseerror(); //#20559
    } //#20559
    if (($_.mask != -1) && $eq($_.format, "rmqr")) { //#20564
        $k[$j++] = 'bwipp.qrcodeRMQRmask#20563'; //#20563
        $k[$j++] = "A mask cannot be supplied for RMQR"; //#20563
        bwipp_raiseerror(); //#20563
    } //#20563
    if ($_.mask != -1) { //#20570
        var _U = $eq($_.format, "full") ? 8 : 4; //#20567
        if (($_.mask < 1) || ($_.mask > _U)) { //#20569
            $k[$j++] = 'bwipp.qrcodeBadMask#20568'; //#20568
            $k[$j++] = "An invalid mask was supplied"; //#20568
            bwipp_raiseerror(); //#20568
        } //#20568
    } //#20568
    $_.fn1 = -1; //#20573
    var _Y = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1]
    ]); //#20578
    $_.fncvals = _Y; //#20579
    $k[$j++] = 'msg'; //#20580
    $k[$j++] = $_.barcode; //#20580
    $k[$j++] = $_.fncvals; //#20580
    bwipp_parseinput(); //#20580
    var _b = $k[--$j]; //#20580
    $_[$k[--$j]] = _b; //#20580
    $_.msglen = $_.msg.length; //#20581
    $_.fnc1first = false; //#20584
    if ($_.msglen > 0) { //#20591
        if ($get($_.msg, 0) == $_.fn1) { //#20590
            $_.fnc1first = true; //#20587
            $k[$j++] = Infinity; //#20588
            var _k = $geti($_.msg, 1, $_.msglen - 1); //#20588
            for (var _l = 0, _m = _k.length; _l < _m; _l++) { //#20588
                var _n = $get(_k, _l); //#20588
                $k[$j++] = _n; //#20588
                if (_n == 37) { //#20588
                    var _o = $k[--$j]; //#20588
                    $k[$j++] = _o; //#20588
                    $k[$j++] = _o; //#20588
                } //#20588
            } //#20588
            $_.msg = $a(); //#20588
            $_.msglen = $_.msg.length; //#20589
        } //#20589
    } //#20589
    if (!bwipp_qrcode.__20712__) { //#20712
        $_ = Object.create($_); //#20712
        var _r = $a(['v1to9', 'v10to26', 'v27to40', 'vM1', 'vM2', 'vM3', 'vM4', 'vR7x43', 'vR7x59', 'vR7x77', 'vR7x99', 'vR7x139', 'vR9x43', 'vR9x59', 'vR9x77', 'vR9x99', 'vR9x139', 'vR11x27', 'vR11x43', 'vR11x59', 'vR11x77', 'vR11x99', 'vR11x139', 'vR13x27', 'vR13x43', 'vR13x59', 'vR13x77', 'vR13x99', 'vR13x139', 'vR15x43', 'vR15x59', 'vR15x77', 'vR15x99', 'vR15x139', 'vR17x43', 'vR17x59', 'vR17x77', 'vR17x99', 'vR17x139']); //#20604
        $k[$j++] = 0; //#20605
        for (var _s = 0, _t = _r.length; _s < _t; _s++) { //#20605
            var _v = $k[--$j]; //#20605
            $_[$get(_r, _s)] = _v; //#20605
            $k[$j++] = $f(_v + 1); //#20605
        } //#20605
        $j--; //#20605
        $_.N = 0; //#20611
        $_.A = 1; //#20611
        $_.B = 2; //#20611
        $_.K = 3; //#20611
        $_.E = 4; //#20611
        $k[$j++] = Infinity; //#20613
        $k[$j++] = Infinity; //#20614
        for (var _w = 48; _w <= 57; _w += 1) { //#20615
            $k[$j++] = _w; //#20615
        } //#20615
        var _x = $a(); //#20615
        for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#20616
            $k[$j++] = $get(_x, _y); //#20616
            $k[$j++] = -1; //#20616
        } //#20616
        $_.Nexcl = $d(); //#20617
        $k[$j++] = Infinity; //#20619
        $k[$j++] = Infinity; //#20620
        $k[$j++] = 32; //#20622
        $k[$j++] = 36; //#20622
        $k[$j++] = 37; //#20622
        $k[$j++] = 42; //#20622
        $k[$j++] = 43; //#20622
        $k[$j++] = 45; //#20622
        $k[$j++] = 46; //#20622
        $k[$j++] = 47; //#20622
        $k[$j++] = 58; //#20622
        for (var _12 = 65; _12 <= 90; _12 += 1) { //#20622
            $k[$j++] = _12; //#20622
        } //#20622
        $k[$j++] = $_.fn1; //#20623
        var _14 = $a(); //#20623
        for (var _15 = 0, _16 = _14.length; _15 < _16; _15++) { //#20624
            $k[$j++] = $get(_14, _15); //#20624
            $k[$j++] = -1; //#20624
        } //#20624
        $_.Aexcl = $d(); //#20625
        $k[$j++] = Infinity; //#20629
        $k[$j++] = Infinity; //#20630
        for (var _19 = 129; _19 <= 159; _19 += 1) { //#20631
            $k[$j++] = _19; //#20631
        } //#20631
        for (var _1A = 224; _1A <= 235; _1A += 1) { //#20632
            $k[$j++] = _1A; //#20632
        } //#20632
        var _1B = $a(); //#20632
        for (var _1C = 0, _1D = _1B.length; _1C < _1D; _1C++) { //#20633
            $k[$j++] = $get(_1B, _1C); //#20633
            $k[$j++] = -1; //#20633
        } //#20633
        $_.Kexcl = $d(); //#20634
        $k[$j++] = Infinity; //#20636
        $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#20647
        $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#20647
        $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#20647
        $k[$j++] = $a(["", -1, -1, -1, -1]); //#20647
        $k[$j++] = $a(["0", "1", -1, -1, -1]); //#20647
        $k[$j++] = $a(["00", "01", "10", "11", -1]); //#20647
        $k[$j++] = $a(["000", "001", "010", "011", -1]); //#20647
        for (var _1N = 0, _1O = 32; _1N < _1O; _1N++) { //#20647
            $k[$j++] = $a(["001", "010", "011", "100", "111"]); //#20646
        } //#20646
        $_.mids = $a(); //#20646
        $_.cclens = $a([$a([10, 9, 8, 8]), $a([12, 11, 16, 10]), $a([14, 13, 16, 12]), $a([3, -1, -1, -1]), $a([4, 3, -1, -1]), $a([5, 4, 4, 3]), $a([6, 5, 5, 4]), $a([4, 3, 3, 2]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([4, 4, 3, 2]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([5, 5, 4, 3]), $a([6, 6, 5, 5]), $a([7, 6, 6, 5]), $a([7, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 7]), $a([7, 6, 6, 5]), $a([7, 7, 6, 5]), $a([8, 7, 7, 6]), $a([8, 7, 7, 6]), $a([9, 8, 7, 7]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 6]), $a([9, 8, 8, 7])]); //#20690
        $k[$j++] = Infinity; //#20692
        for (var _25 = 0, _26 = 3; _25 < _26; _25++) { //#20695
            $k[$j++] = 4; //#20694
        } //#20694
        $k[$j++] = 3; //#20702
        $k[$j++] = 5; //#20702
        $k[$j++] = 7; //#20702
        $k[$j++] = 9; //#20702
        for (var _27 = 0, _28 = 32; _27 < _28; _27++) { //#20702
            $k[$j++] = 3; //#20701
        } //#20701
        $_.termlens = $a(); //#20701
        $_.padstrs = $a(["11101100", "00010001"]); //#20705
        $_.charmap = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"; //#20708
        $_.charvals = new Map; //#20709
        for (var _2B = 0; _2B <= 44; _2B += 1) { //#20710
            $put($_.charvals, $get($_.charmap, _2B), _2B); //#20710
        } //#20710
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20710
        bwipp_qrcode.__20712__ = 1; //#20710
        $_ = Object.getPrototypeOf($_); //#20710
    } //#20710
    $_.tobin = function() {
        var _2H = $s($k[--$j]); //#20716
        $k[$j++] = _2H; //#20716
        for (var _2J = 0, _2I = _2H.length - 1; _2J <= _2I; _2J += 1) { //#20716
            var _2K = $k[--$j]; //#20716
            $put(_2K, _2J, 48); //#20716
            $k[$j++] = _2K; //#20716
        } //#20716
        var _2L = $k[--$j]; //#20717
        $k[$j++] = _2L; //#20717
        $k[$j++] = _2L; //#20717
        $r(3, -1); //#20717
        var _2M = $k[--$j]; //#20717
        var _2N = $k[--$j]; //#20717
        var _2P = $cvrs($s(_2N.length), _2M, 2); //#20717
        $puti(_2N, _2N.length - _2P.length, _2P); //#20717
    }; //#20717
    $_.encA = function() {
        $_.in = $k[--$j]; //#20721
        if ($_.fnc1first) { //#20724
            $k[$j++] = Infinity; //#20723
            $forall($_.in, function() { //#20723
                var _2T = $k[--$j]; //#20723
                $k[$j++] = _2T; //#20723
                if (_2T == $_.fn1) { //#20723
                    $j--; //#20723
                    $k[$j++] = 37; //#20723
                } //#20723
            }); //#20723
            $_.in = $a(); //#20723
        } //#20723
        $_.out = $s((~~(($_.in.length * 11) / 2)) + 1); //#20725
        $_.k = 0; //#20726
        $_.m = 0; //#20726
        for (;;) { //#20737
            if ($_.k == $_.in.length) { //#20727
                break; //#20727
            } //#20727
            if ($_.k < ($_.in.length - 1)) { //#20733
                $k[$j++] = $f(($get($_.charvals, $get($_.in, $_.k)) * 45) + $get($_.charvals, $get($_.in, $_.k + 1))); //#20729
                $k[$j++] = 11; //#20729
                $_.tobin(); //#20729
                $_.k = $_.k + 2; //#20730
            } else { //#20733
                $k[$j++] = $get($_.charvals, $get($_.in, $_.k)); //#20732
                $k[$j++] = 6; //#20732
                $_.tobin(); //#20732
                $_.k = $_.k + 1; //#20733
            } //#20733
            var _2t = $k[--$j]; //#20735
            $puti($_.out, $_.m, _2t); //#20735
            $_.m = _2t.length + $_.m; //#20736
        } //#20736
        $k[$j++] = $geti($_.out, 0, $_.m); //#20738
    }; //#20738
    $_.encN = function() {
        $_.in = $k[--$j]; //#20742
        $_.out = $s((~~(($_.in.length * 10) / 3)) + 1); //#20743
        $_.k = 0; //#20744
        $_.m = 0; //#20744
        for (;;) { //#20760
            if ($_.k == $_.in.length) { //#20745
                break; //#20745
            } //#20745
            if ($_.k < ($_.in.length - 2)) { //#20755
                var _39 = $geti($_.in, $_.k, 3); //#20747
                $k[$j++] = 0; //#20747
                for (var _3A = 0, _3B = _39.length; _3A < _3B; _3A++) { //#20747
                    var _3D = $k[--$j]; //#20747
                    $k[$j++] = $f($get(_39, _3A) + ($f((_3D * 10) - 48))); //#20747
                } //#20747
                $k[$j++] = 10; //#20747
                $_.tobin(); //#20747
                $_.k = $_.k + 3; //#20748
            } else { //#20755
                if ($_.k == ($_.in.length - 2)) { //#20755
                    var _3J = $geti($_.in, $_.k, 2); //#20751
                    $k[$j++] = 0; //#20751
                    for (var _3K = 0, _3L = _3J.length; _3K < _3L; _3K++) { //#20751
                        var _3N = $k[--$j]; //#20751
                        $k[$j++] = $f($get(_3J, _3K) + ($f((_3N * 10) - 48))); //#20751
                    } //#20751
                    $k[$j++] = 7; //#20751
                    $_.tobin(); //#20751
                    $_.k = $_.k + 2; //#20752
                } else { //#20755
                    var _3R = $geti($_.in, $_.k, 1); //#20754
                    $k[$j++] = 0; //#20754
                    for (var _3S = 0, _3T = _3R.length; _3S < _3T; _3S++) { //#20754
                        var _3V = $k[--$j]; //#20754
                        $k[$j++] = $f($get(_3R, _3S) + ($f((_3V * 10) - 48))); //#20754
                    } //#20754
                    $k[$j++] = 4; //#20754
                    $_.tobin(); //#20754
                    $_.k = $_.k + 1; //#20755
                } //#20755
            } //#20755
            var _3X = $k[--$j]; //#20758
            $puti($_.out, $_.m, _3X); //#20758
            $_.m = _3X.length + $_.m; //#20759
        } //#20759
        $k[$j++] = $geti($_.out, 0, $_.m); //#20761
    }; //#20761
    $_.encB = function() {
        $_.in = $k[--$j]; //#20765
        if ($_.fnc1first) { //#20768
            $k[$j++] = Infinity; //#20767
            $forall($_.in, function() { //#20767
                var _3h = $k[--$j]; //#20767
                $k[$j++] = _3h; //#20767
                if (_3h == $_.fn1) { //#20767
                    $j--; //#20767
                    $k[$j++] = 29; //#20767
                } //#20767
            }); //#20767
            $_.in = $a(); //#20767
        } //#20767
        $_.out = $s($_.in.length * 8); //#20769
        for (var _3o = 0, _3n = $_.in.length - 1; _3o <= _3n; _3o += 1) { //#20774
            $_.k = _3o; //#20771
            $k[$j++] = $cvi($get($_.in, $_.k)); //#20772
            $k[$j++] = 8; //#20772
            $_.tobin(); //#20772
            $k[$j++] = $_.out; //#20773
            $k[$j++] = $_.k * 8; //#20773
            $r(3, -1); //#20773
            var _3u = $k[--$j]; //#20773
            var _3v = $k[--$j]; //#20773
            $puti($k[--$j], _3v, _3u); //#20773
        } //#20773
        $k[$j++] = $_.out; //#20775
    }; //#20775
    $_.encK = function() {
        $_.in = $k[--$j]; //#20779
        $_.out = $s((~~($_.in.length / 2)) * 13); //#20780
        $_.k = 0; //#20781
        $_.m = 0; //#20781
        for (;;) { //#20789
            if ($_.k == $_.in.length) { //#20782
                break; //#20782
            } //#20782
            var _49 = $f(($get($_.in, $_.k) * 256) + $get($_.in, $_.k + 1)); //#20784
            $k[$j++] = _49; //#20784
            if (_49 < 57408) { //#20784
                $k[$j++] = 33088; //#20784
            } else { //#20784
                $k[$j++] = 49472; //#20784
            } //#20784
            var _4A = $k[--$j]; //#20784
            var _4C = $f($k[--$j] - _4A); //#20785
            $k[$j++] = $f(((_4C >>> 8) * 192) + (_4C & 255)); //#20786
            $k[$j++] = 13; //#20786
            $_.tobin(); //#20786
            var _4D = $k[--$j]; //#20786
            $puti($_.out, $_.m, _4D); //#20786
            $_.m = _4D.length + $_.m; //#20787
            $_.k = $_.k + 2; //#20788
        } //#20788
        $k[$j++] = $_.out; //#20790
    }; //#20790
    $_.encE = function() {
        var _4L = $f((-$get($k[--$j], 0)) - 1000000); //#20795
        $k[$j++] = _4L; //#20801
        if (_4L <= 127) { //#20800
            $k[$j++] = 8; //#20796
            $_.tobin(); //#20796
        } else { //#20800
            var _4M = $k[--$j]; //#20797
            $k[$j++] = _4M; //#20801
            if (_4M <= 16383) { //#20800
                var _4N = $k[--$j]; //#20798
                $k[$j++] = $f(_4N + 32768); //#20798
                $k[$j++] = 16; //#20798
                $_.tobin(); //#20798
            } else { //#20800
                var _4O = $k[--$j]; //#20800
                $k[$j++] = $f(_4O + 12582912); //#20800
                $k[$j++] = 24; //#20800
                $_.tobin(); //#20800
            } //#20800
        } //#20800
    }; //#20800
    $_.encfuncs = $a(['encN', 'encA', 'encB', 'encK', 'encE']); //#20804
    $_.addtobits = function() {
        var _4Q = $k[--$j]; //#20807
        $puti($_.bits, $_.j, _4Q); //#20807
        $_.j = _4Q.length + $_.j; //#20808
    }; //#20808
    $k[$j++] = Infinity; //#20811
    for (var _4V = 0, _4W = $_.msglen; _4V < _4W; _4V++) { //#20811
        $k[$j++] = 0; //#20811
    } //#20811
    $k[$j++] = 0; //#20811
    $_.numNs = $a(); //#20811
    $k[$j++] = Infinity; //#20812
    for (var _4Z = 0, _4a = $_.msglen; _4Z < _4a; _4Z++) { //#20812
        $k[$j++] = 0; //#20812
    } //#20812
    $k[$j++] = 0; //#20812
    $_.numAs = $a(); //#20812
    $k[$j++] = Infinity; //#20813
    for (var _4d = 0, _4e = $_.msglen; _4d < _4e; _4d++) { //#20813
        $k[$j++] = 0; //#20813
    } //#20813
    $k[$j++] = 0; //#20813
    $_.numAorNs = $a(); //#20813
    $k[$j++] = Infinity; //#20814
    for (var _4h = 0, _4i = $_.msglen; _4h < _4i; _4h++) { //#20814
        $k[$j++] = 0; //#20814
    } //#20814
    $k[$j++] = 0; //#20814
    $_.numBs = $a(); //#20814
    $k[$j++] = Infinity; //#20815
    for (var _4l = 0, _4m = $_.msglen; _4l < _4m; _4l++) { //#20815
        $k[$j++] = 0; //#20815
    } //#20815
    $k[$j++] = 0; //#20815
    $_.numKs = $a(); //#20815
    $k[$j++] = Infinity; //#20816
    for (var _4p = 0, _4q = $_.msglen; _4p < _4q; _4p++) { //#20816
        $k[$j++] = 0; //#20816
    } //#20816
    $k[$j++] = 9999; //#20816
    $_.nextNs = $a(); //#20816
    $k[$j++] = Infinity; //#20817
    for (var _4t = 0, _4u = $_.msglen; _4t < _4u; _4t++) { //#20817
        $k[$j++] = 0; //#20817
    } //#20817
    $k[$j++] = 9999; //#20817
    $_.nextBs = $a(); //#20817
    $k[$j++] = Infinity; //#20818
    for (var _4x = 0, _4y = $_.msglen; _4x < _4y; _4x++) { //#20818
        $k[$j++] = 0; //#20818
    } //#20818
    $k[$j++] = 9999; //#20818
    $_.nextAs = $a(); //#20818
    $k[$j++] = Infinity; //#20819
    for (var _51 = 0, _52 = $_.msglen; _51 < _52; _51++) { //#20819
        $k[$j++] = 0; //#20819
    } //#20819
    $k[$j++] = 9999; //#20819
    $_.nextKs = $a(); //#20819
    $_.isECI = $a($_.msglen); //#20820
    for (var _57 = $_.msglen - 1; _57 >= 0; _57 -= 1) { //#20855
        $_.i = _57; //#20822
        $_.barchar = $get($_.msg, $_.i); //#20823
        var _5D = $get($_.Kexcl, $_.barchar) !== undefined; //#20824
        if (_5D && (!$_.suppresskanjimode)) { //#20838
            if (($_.i + 1) < $_.msglen) { //#20825
                $k[$j++] = $f(($_.barchar * 256) + $get($_.msg, $_.i + 1)); //#20825
            } else { //#20825
                $k[$j++] = 0; //#20825
            } //#20825
            var _5L = $k[--$j]; //#20826
            var _5M = _5L & 255; //#20830
            if ((((_5L >= 33088) && (_5L <= 40956)) || ((_5L >= 57408) && (_5L <= 60351))) && (((_5M >= 64) && (_5M <= 252)) && (_5M != 127))) { //#20835
                $put($_.nextKs, $_.i, 0); //#20832
                $put($_.numKs, $_.i, $f($get($_.numKs, $_.i + 2) + 1)); //#20833
            } else { //#20835
                $put($_.nextKs, $_.i, $f($get($_.nextKs, $_.i + 1) + 1)); //#20835
            } //#20835
        } else { //#20838
            $put($_.nextKs, $_.i, $f($get($_.nextKs, $_.i + 1) + 1)); //#20838
        } //#20838
        var _5g = $get($_.Nexcl, $_.barchar) !== undefined; //#20840
        if (_5g) { //#20845
            $put($_.nextNs, $_.i, 0); //#20841
            $put($_.numNs, $_.i, $f($get($_.numNs, $_.i + 1) + 1)); //#20842
            $put($_.numAorNs, $_.i, $f($get($_.numAorNs, $_.i + 1) + 1)); //#20843
        } else { //#20845
            $put($_.nextNs, $_.i, $f($get($_.nextNs, $_.i + 1) + 1)); //#20845
        } //#20845
        var _60 = $get($_.Aexcl, $_.barchar) !== undefined; //#20847
        if (_60) { //#20852
            $put($_.nextAs, $_.i, 0); //#20848
            $put($_.numAs, $_.i, $f($get($_.numAs, $_.i + 1) + 1)); //#20849
            $put($_.numAorNs, $_.i, $f($get($_.numAorNs, $_.i + 1) + 1)); //#20850
        } else { //#20852
            $put($_.nextAs, $_.i, $f($get($_.nextAs, $_.i + 1) + 1)); //#20852
        } //#20852
        $put($_.isECI, $_.i, $_.barchar <= -1000000); //#20854
    } //#20854
    for (var _6N = 0, _6M = $_.msglen - 1; _6N <= _6M; _6N += 1) { //#20862
        $_.i = _6N; //#20857
        if ($get($_.numKs, $_.i) > 0) { //#20861
            $put($_.numKs, $_.i + 1, 0); //#20859
            $put($_.nextKs, $_.i + 1, $f($get($_.nextKs, $_.i + 1) + 1)); //#20860
        } //#20860
    } //#20860
    for (var _6Z = $_.msglen - 1; _6Z >= 0; _6Z -= 1) { //#20871
        $_.i = _6Z; //#20864
        if ((($f($get($_.numNs, $_.i) + $f($get($_.numAs, $_.i) + $get($_.numKs, $_.i)))) == 0) && $nt($get($_.isECI, $_.i))) { //#20869
            $put($_.nextBs, $_.i, 0); //#20866
            $put($_.numBs, $_.i, $f($get($_.numBs, $_.i + 1) + 1)); //#20867
        } else { //#20869
            $put($_.nextBs, $_.i, $f($get($_.nextBs, $_.i + 1) + 1)); //#20869
        } //#20869
    } //#20869
    $_.KbeforeB = function() {
        var _71 = $get($k[--$j], $_.ver); //#20873
        $k[$j++] = $ge($_.numK, _71) && ($get($_.nextBs, $f(($_.numK * 2) + $_.i)) == 0); //#20873
    }; //#20873
    $_.KbeforeA = function() {
        var _79 = $get($k[--$j], $_.ver); //#20874
        $k[$j++] = $ge($_.numK, _79) && ($get($_.nextAs, $f(($_.numK * 2) + $_.i)) == 0); //#20874
    }; //#20874
    $_.KbeforeN = function() {
        var _7H = $get($k[--$j], $_.ver); //#20875
        $k[$j++] = $ge($_.numK, _7H) && ($get($_.nextNs, $f(($_.numK * 2) + $_.i)) == 0); //#20875
    }; //#20875
    $_.KbeforeE = function() {
        var _7P = $get($k[--$j], $_.ver); //#20876
        $k[$j++] = $ge($_.numK, _7P) && (($f(($_.numK * 2) + $_.i)) == $_.msglen); //#20876
    }; //#20876
    $_.AbeforeK = function() {
        var _7W = $get($k[--$j], $_.ver); //#20877
        $k[$j++] = $ge($_.numA, _7W) && ($get($_.nextKs, $f($_.numA + $_.i)) == 0); //#20877
    }; //#20877
    $_.AbeforeB = function() {
        var _7e = $get($k[--$j], $_.ver); //#20878
        $k[$j++] = $ge($_.numA, _7e) && ($get($_.nextBs, $f($_.numA + $_.i)) == 0); //#20878
    }; //#20878
    $_.AbeforeN = function() {
        var _7m = $get($k[--$j], $_.ver); //#20879
        $k[$j++] = $ge($_.numA, _7m) && ($get($_.nextNs, $f($_.numA + $_.i)) == 0); //#20879
    }; //#20879
    $_.AbeforeE = function() {
        var _7u = $get($k[--$j], $_.ver); //#20880
        $k[$j++] = $ge($_.numA, _7u) && ($f($_.numA + $_.i) == $_.msglen); //#20880
    }; //#20880
    $_.NbeforeK = function() {
        var _81 = $get($k[--$j], $_.ver); //#20881
        $k[$j++] = $ge($_.numN, _81) && ($get($_.nextKs, $f($_.numN + $_.i)) == 0); //#20881
    }; //#20881
    $_.NbeforeB = function() {
        var _89 = $get($k[--$j], $_.ver); //#20882
        $k[$j++] = $ge($_.numN, _89) && ($get($_.nextBs, $f($_.numN + $_.i)) == 0); //#20882
    }; //#20882
    $_.NbeforeA = function() {
        var _8H = $get($k[--$j], $_.ver); //#20883
        $k[$j++] = $ge($_.numN, _8H) && ($get($_.nextAs, $f($_.numN + $_.i)) == 0); //#20883
    }; //#20883
    $_.NbeforeE = function() {
        var _8P = $get($k[--$j], $_.ver); //#20884
        $k[$j++] = $ge($_.numN, _8P) && ($f($_.numN + $_.i) == $_.msglen); //#20884
    }; //#20884
    $_.AorNbeforeB = function() {
        var _8W = $get($k[--$j], $_.ver); //#20885
        $k[$j++] = $ge($_.numAorN, _8W) && ($get($_.nextBs, $f($_.numAorN + $_.i)) == 0); //#20885
    }; //#20885
    $_.AorNbeforeE = function() {
        var _8e = $get($k[--$j], $_.ver); //#20886
        $k[$j++] = $ge($_.numAorN, _8e) && ($f($_.numAorN + $_.i) == $_.msglen); //#20886
    }; //#20886
    $_.nextNslt = function() {
        if ($get($_.nextNs, $_.i) >= $_.msglen) { //#20888
            $j--; //#20888
            $k[$j++] = true; //#20888
        } else { //#20888
            var _8u = $get($k[--$j], $_.ver); //#20888
            $k[$j++] = $lt($get($_.numNs, $f($get($_.nextNs, $_.i) + $_.i)), _8u); //#20888
        } //#20888
    }; //#20888
    if (!bwipp_qrcode.__20918__) { //#20918
        $_ = Object.create($_); //#20918
        $k[$j++] = Infinity; //#20898
        $k[$j++] = "full"; //#20902
        $k[$j++] = Infinity; //#20899
        for (var _8v = 0; _8v <= 9; _8v += 1) { //#20900
            $k[$j++] = $cvrs($s(2), _8v, 10); //#20900
            $k[$j++] = $_.v1to9; //#20900
        } //#20900
        for (var _8z = 10; _8z <= 26; _8z += 1) { //#20901
            $k[$j++] = $cvrs($s(2), _8z, 10); //#20901
            $k[$j++] = $_.v10to26; //#20901
        } //#20901
        for (var _93 = 27; _93 <= 40; _93 += 1) { //#20902
            $k[$j++] = $cvrs($s(2), _93, 10); //#20902
            $k[$j++] = $_.v27to40; //#20902
        } //#20902
        var _97 = $d(); //#20902
        var _9C = new Map([
            ["M1", $_.vM1],
            ["M2", $_.vM2],
            ["M3", $_.vM3],
            ["M4", $_.vM4]
        ]); //#20905
        var _9j = new Map([
            ["R7x43", $_.vR7x43],
            ["R7x59", $_.vR7x59],
            ["R7x77", $_.vR7x77],
            ["R7x99", $_.vR7x99],
            ["R7x139", $_.vR7x139],
            ["R9x43", $_.vR9x43],
            ["R9x59", $_.vR9x59],
            ["R9x77", $_.vR9x77],
            ["R9x99", $_.vR9x99],
            ["R9x139", $_.vR9x139],
            ["R11x27", $_.vR11x27],
            ["R11x43", $_.vR11x43],
            ["R11x59", $_.vR11x59],
            ["R11x77", $_.vR11x77],
            ["R11x99", $_.vR11x99],
            ["R11x139", $_.vR11x139],
            ["R13x27", $_.vR13x27],
            ["R13x43", $_.vR13x43],
            ["R13x59", $_.vR13x59],
            ["R13x77", $_.vR13x77],
            ["R13x99", $_.vR13x99],
            ["R13x139", $_.vR13x139],
            ["R15x43", $_.vR15x43],
            ["R15x59", $_.vR15x59],
            ["R15x77", $_.vR15x77],
            ["R15x99", $_.vR15x99],
            ["R15x139", $_.vR15x139],
            ["R17x43", $_.vR17x43],
            ["R17x59", $_.vR17x59],
            ["R17x77", $_.vR17x77],
            ["R17x99", $_.vR17x99],
            ["R17x139", $_.vR17x139]
        ]); //#20913
        $k[$j++] = _97; //#20913
        $k[$j++] = "micro"; //#20913
        $k[$j++] = _9C; //#20913
        $k[$j++] = "rmqr"; //#20913
        $k[$j++] = _9j; //#20913
        $_.versetmap = $d(); //#20915
        $_.versetfull = $a([$_.v1to9, $_.v10to26, $_.v27to40]); //#20916
        $_.versetmicro = $a([$_.vM1, $_.vM2, $_.vM3, $_.vM4]); //#20917
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20917
        bwipp_qrcode.__20918__ = 1; //#20917
        $_ = Object.getPrototypeOf($_); //#20917
    } //#20917
    if ($ne($_.version, "unset")) { //#20936
        var _9y = $get($_.versetmap, $_.format); //#20921
        var _9z = $_.version; //#20921
        var _A0 = $get(_9y, _9z) !== undefined; //#20921
        $k[$j++] = _9y; //#20931
        $k[$j++] = _9z; //#20931
        if (!_A0) { //#20931
            $j -= 2; //#20922
            if ($eq($_.format, "full")) { //#20929
                $k[$j++] = 'bwipp.qrcodeInvalidFullVersion#20924'; //#20924
                $k[$j++] = "Valid versions for QR Code symbols are 1 to 40"; //#20924
                bwipp_raiseerror(); //#20924
            } else { //#20929
                if ($eq($_.format, "micro")) { //#20929
                    $k[$j++] = 'bwipp.qrcodeInvalidMicroVersion#20927'; //#20927
                    $k[$j++] = "Valid versions for Micro QR Code symbols are M1 to M4"; //#20927
                    bwipp_raiseerror(); //#20927
                } else { //#20929
                    $k[$j++] = 'bwipp.qrcodeInvalidRMQRversion#20929'; //#20929
                    $k[$j++] = "Invalid version for an RMQR symbol"; //#20929
                    bwipp_raiseerror(); //#20929
                } //#20929
            } //#20929
        } //#20929
        var _A3 = $k[--$j]; //#20932
        var _A5 = $get($k[--$j], _A3); //#20932
        $k[$j++] = _A5; //#20932
        $k[$j++] = Infinity; //#20932
        var _A6 = $k[--$j]; //#20932
        var _A7 = $k[--$j]; //#20932
        $k[$j++] = _A6; //#20932
        $k[$j++] = _A7; //#20932
        $_.verset = $a(); //#20932
    } else { //#20936
        if ($eq($_.format, "full")) { //#20935
            $_.verset = $_.versetfull; //#20935
        } //#20935
        if ($eq($_.format, "micro")) { //#20936
            $_.verset = $_.versetmicro; //#20936
        } //#20936
    } //#20936
    $k[$j++] = Infinity; //#20941
    for (var _AD = 0, _AE = 39; _AD < _AE; _AD++) { //#20941
        $k[$j++] = -1; //#20941
    } //#20941
    $_.msgbits = $a(); //#20941
    $_.e = 10000; //#20942
    if (!bwipp_qrcode.__20972__) { //#20972
        $_ = Object.create($_); //#20972
        $_.mode0forceKB = $a([1, 1, 1, $_.e, $_.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#20948
        $_.mode0forceA = $a([1, 1, 1, $_.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#20949
        $_.mode0forceN = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#20950
        $_.mode0NbeforeB = $a([4, 4, 5, $_.e, $_.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#20952
        $_.modeBKbeforeB = $a([9, 12, 13, $_.e, $_.e, 4, 6, 4, 5, 6, 6, 6, 5, 6, 6, 6, 7, 4, 6, 6, 6, 7, 7, 5, 6, 6, 7, 7, 7, 6, 6, 7, 7, 7, 6, 7, 7, 7, 8]); //#20954
        $_.modeBKbeforeA = $a([8, 10, 11, $_.e, $_.e, 4, 5, 4, 5, 5, 6, 6, 5, 5, 6, 6, 6, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 7]); //#20955
        $_.modeBKbeforeN = $a([8, 9, 11, $_.e, $_.e, 3, 5, 3, 4, 5, 5, 5, 4, 5, 5, 5, 6, 3, 5, 5, 5, 6, 6, 4, 5, 5, 6, 6, 6, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7]); //#20956
        $_.modeBKbeforeE = $a([5, 5, 6, $_.e, $_.e, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4]); //#20957
        $_.modeBAbeforeK = $a([11, 12, 14, $_.e, $_.e, 5, 7, 5, 6, 7, 8, 8, 6, 7, 8, 8, 8, 6, 7, 8, 8, 8, 8, 6, 8, 8, 8, 8, 9, 8, 8, 8, 8, 9, 8, 8, 8, 9, 9]); //#20959
        $_.modeBAbeforeB = $a([11, 15, 16, $_.e, $_.e, 6, 7, 6, 7, 7, 8, 8, 7, 7, 8, 8, 8, 6, 7, 8, 8, 8, 9, 7, 8, 8, 8, 9, 9, 8, 8, 9, 9, 9, 8, 8, 9, 9, 10]); //#20960
        $_.modeBAbeforeN = $a([12, 13, 15, $_.e, $_.e, 6, 8, 6, 7, 8, 8, 8, 7, 8, 8, 8, 9, 6, 8, 8, 8, 9, 9, 7, 8, 8, 9, 9, 10, 8, 9, 9, 9, 10, 8, 9, 9, 10, 10]); //#20961
        $_.modeBAbeforeE = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5]); //#20962
        $_.modeBNbeforeK = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]); //#20964
        $_.modeBNbeforeB = $a([6, 8, 9, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6]); //#20965
        $_.modeBNbeforeA = $a([6, 7, 8, $_.e, $_.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6]); //#20966
        $_.modeBNbeforeE = $a([3, 4, 4, $_.e, $_.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#20967
        $_.modeANbeforeA = $a([13, 15, 17, $_.e, 5, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 11, 7, 9, 9, 9, 11, 11, 8, 9, 9, 10, 11, 11, 9, 10, 11, 11, 11, 9, 11, 11, 11, 11]); //#20969
        $_.modeANbeforeB = $a([13, 17, 18, $_.e, $_.e, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 10, 7, 9, 9, 9, 10, 11, 8, 9, 9, 9, 11, 11, 9, 9, 11, 11, 11, 9, 10, 11, 11, 11]); //#20970
        $_.modeANbeforeE = $a([7, 8, 9, $_.e, 3, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6]); //#20971
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#20971
        bwipp_qrcode.__20972__ = 1; //#20971
        $_ = Object.getPrototypeOf($_); //#20971
    } //#20971
    var _B7 = $_.verset; //#20974
    for (var _B8 = 0, _B9 = _B7.length; _B8 < _B9; _B8++) { //#21107
        $_.ver = $get(_B7, _B8); //#20975
        $_.mode = -1; //#20978
        $_.seq = $a([]); //#20978
        $_.i = 0; //#20978
        for (;;) { //#21076
            if ($_.i >= $_.msglen) { //#20979
                break; //#20979
            } //#20979
            $_.numK = $get($_.numKs, $_.i); //#20980
            $_.numB = $get($_.numBs, $_.i); //#20981
            $_.numA = $get($_.numAs, $_.i); //#20982
            $_.numN = $get($_.numNs, $_.i); //#20983
            $_.numAorN = $get($_.numAorNs, $_.i); //#20984
            $_.eci = $get($_.isECI, $_.i); //#20985
            if ($eq($_.ver, $_.vM1) && ($_.numA >= 1)) { //#20986
                $_.seq = -1; //#20986
                break; //#20986
            } //#20986
            if ($eq($_.ver, $_.vM1) && ($_.numB >= 1)) { //#20987
                $_.seq = -1; //#20987
                break; //#20987
            } //#20987
            if ($eq($_.ver, $_.vM1) && ($_.numK >= 1)) { //#20988
                $_.seq = -1; //#20988
                break; //#20988
            } //#20988
            if ($eq($_.ver, $_.vM1) && $_.eci) { //#20989
                $_.seq = -1; //#20989
                break; //#20989
            } //#20989
            if ($eq($_.ver, $_.vM2) && ($_.numB >= 1)) { //#20990
                $_.seq = -1; //#20990
                break; //#20990
            } //#20990
            if ($eq($_.ver, $_.vM2) && ($_.numK >= 1)) { //#20991
                $_.seq = -1; //#20991
                break; //#20991
            } //#20991
            if ($eq($_.ver, $_.vM2) && $_.eci) { //#20992
                $_.seq = -1; //#20992
                break; //#20992
            } //#20992
            if ($eq($_.ver, $_.vM3) && $_.eci) { //#20993
                $_.seq = -1; //#20993
                break; //#20993
            } //#20993
            if ($eq($_.ver, $_.vM4) && $_.eci) { //#20994
                $_.seq = -1; //#20994
                break; //#20994
            } //#20994
            for (;;) { //#21056
                if ($_.eci) { //#20998
                    $k[$j++] = $_.E; //#20997
                    break; //#20997
                } //#20997
                if ($_.mode == -1) { //#21014
                    $k[$j++] = $_.mode0forceKB; //#21000
                    $_.KbeforeA(); //#21000
                    if ($k[--$j]) { //#21000
                        $k[$j++] = $_.K; //#21000
                        break; //#21000
                    } //#21000
                    $k[$j++] = $_.mode0forceKB; //#21001
                    $_.KbeforeN(); //#21001
                    if ($k[--$j]) { //#21001
                        $k[$j++] = $_.K; //#21001
                        break; //#21001
                    } //#21001
                    $k[$j++] = $_.modeBKbeforeE; //#21002
                    $_.KbeforeB(); //#21002
                    if ($k[--$j]) { //#21002
                        $k[$j++] = $_.K; //#21002
                        break; //#21002
                    } //#21002
                    $k[$j++] = $_.mode0forceKB; //#21003
                    $_.KbeforeE(); //#21003
                    if ($k[--$j]) { //#21003
                        $k[$j++] = $_.K; //#21003
                        break; //#21003
                    } //#21003
                    if ($_.numK >= 1) { //#21004
                        $k[$j++] = $_.B; //#21004
                        break; //#21004
                    } //#21004
                    $k[$j++] = $_.mode0NbeforeB; //#21005
                    $_.NbeforeK(); //#21005
                    if ($k[--$j]) { //#21005
                        $k[$j++] = $_.N; //#21005
                        break; //#21005
                    } //#21005
                    $k[$j++] = $_.mode0NbeforeB; //#21006
                    $_.NbeforeB(); //#21006
                    if ($k[--$j]) { //#21006
                        $k[$j++] = $_.N; //#21006
                        break; //#21006
                    } //#21006
                    $k[$j++] = $_.mode0forceKB; //#21007
                    $_.NbeforeB(); //#21007
                    if ($k[--$j]) { //#21007
                        $k[$j++] = $_.B; //#21007
                        break; //#21007
                    } //#21007
                    $k[$j++] = $_.modeANbeforeE; //#21008
                    $_.NbeforeA(); //#21008
                    if ($k[--$j]) { //#21008
                        $k[$j++] = $_.N; //#21008
                        break; //#21008
                    } //#21008
                    $k[$j++] = $_.mode0forceN; //#21009
                    $_.NbeforeE(); //#21009
                    if ($k[--$j]) { //#21009
                        $k[$j++] = $_.N; //#21009
                        break; //#21009
                    } //#21009
                    $k[$j++] = $_.modeBAbeforeE; //#21010
                    $_.AbeforeK(); //#21010
                    if ($k[--$j]) { //#21010
                        $k[$j++] = $_.A; //#21010
                        break; //#21010
                    } //#21010
                    $k[$j++] = $_.modeBAbeforeE; //#21011
                    $_.AorNbeforeB(); //#21011
                    if ($k[--$j]) { //#21011
                        $k[$j++] = $_.A; //#21011
                        break; //#21011
                    } //#21011
                    $k[$j++] = $_.mode0forceA; //#21012
                    $_.AorNbeforeE(); //#21012
                    if ($k[--$j]) { //#21012
                        $k[$j++] = $_.A; //#21012
                        break; //#21012
                    } //#21012
                    $k[$j++] = $_.B; //#21013
                    break; //#21013
                } //#21013
                if ($_.mode == $_.B) { //#21032
                    $k[$j++] = $_.modeBKbeforeB; //#21016
                    $_.KbeforeB(); //#21016
                    if ($k[--$j]) { //#21016
                        $k[$j++] = $_.K; //#21016
                        break; //#21016
                    } //#21016
                    $k[$j++] = $_.modeBKbeforeA; //#21017
                    $_.KbeforeA(); //#21017
                    if ($k[--$j]) { //#21017
                        $k[$j++] = $_.K; //#21017
                        break; //#21017
                    } //#21017
                    $k[$j++] = $_.modeBKbeforeN; //#21018
                    $_.KbeforeN(); //#21018
                    if ($k[--$j]) { //#21018
                        $k[$j++] = $_.K; //#21018
                        break; //#21018
                    } //#21018
                    $k[$j++] = $_.modeBKbeforeE; //#21019
                    $_.KbeforeE(); //#21019
                    if ($k[--$j]) { //#21019
                        $k[$j++] = $_.K; //#21019
                        break; //#21019
                    } //#21019
                    $k[$j++] = $_.modeBAbeforeK; //#21020
                    $_.AbeforeK(); //#21020
                    if ($k[--$j]) { //#21020
                        $k[$j++] = $_.A; //#21020
                        break; //#21020
                    } //#21020
                    $k[$j++] = $_.modeBAbeforeB; //#21021
                    $_.AbeforeB(); //#21021
                    if ($k[--$j]) { //#21021
                        $k[$j++] = $_.A; //#21021
                        break; //#21021
                    } //#21021
                    $k[$j++] = $_.modeBAbeforeN; //#21022
                    $_.AbeforeN(); //#21022
                    if ($k[--$j]) { //#21022
                        $k[$j++] = $_.A; //#21022
                        break; //#21022
                    } //#21022
                    $k[$j++] = $_.modeBAbeforeE; //#21023
                    $_.AbeforeE(); //#21023
                    if ($k[--$j]) { //#21023
                        $k[$j++] = $_.A; //#21023
                        break; //#21023
                    } //#21023
                    $k[$j++] = $_.modeBNbeforeK; //#21024
                    $_.NbeforeK(); //#21024
                    if ($k[--$j]) { //#21024
                        $k[$j++] = $_.N; //#21024
                        break; //#21024
                    } //#21024
                    $k[$j++] = $_.modeBNbeforeB; //#21025
                    $_.NbeforeB(); //#21025
                    if ($k[--$j]) { //#21025
                        $k[$j++] = $_.N; //#21025
                        break; //#21025
                    } //#21025
                    $k[$j++] = $_.modeBNbeforeA; //#21026
                    $_.NbeforeA(); //#21026
                    if ($k[--$j]) { //#21026
                        $k[$j++] = $_.N; //#21026
                        break; //#21026
                    } //#21026
                    $k[$j++] = $_.modeBNbeforeE; //#21027
                    $_.NbeforeE(); //#21027
                    if ($k[--$j]) { //#21027
                        $k[$j++] = $_.N; //#21027
                        break; //#21027
                    } //#21027
                    $k[$j++] = $_.modeBAbeforeE; //#21028
                    $_.AorNbeforeE(); //#21028
                    var _DK = $k[--$j]; //#21028
                    if (_DK && $le($_.numAorN, $get($_.modeBAbeforeN, $_.ver))) { //#21030
                        $k[$j++] = $_.modeBNbeforeA; //#21029
                        $_.nextNslt(); //#21029
                        if ($k[--$j]) { //#21029
                            $k[$j++] = $_.A; //#21029
                            break; //#21029
                        } //#21029
                    } //#21029
                    $k[$j++] = $_.B; //#21031
                    break; //#21031
                } //#21031
                if ($_.mode == $_.A) { //#21041
                    if ($_.numK >= 1) { //#21034
                        $k[$j++] = $_.K; //#21034
                        break; //#21034
                    } //#21034
                    if ($_.numB >= 1) { //#21035
                        $k[$j++] = $_.B; //#21035
                        break; //#21035
                    } //#21035
                    $k[$j++] = $_.modeANbeforeA; //#21036
                    $_.NbeforeA(); //#21036
                    if ($k[--$j]) { //#21036
                        $k[$j++] = $_.N; //#21036
                        break; //#21036
                    } //#21036
                    $k[$j++] = $_.modeANbeforeB; //#21037
                    $_.NbeforeB(); //#21037
                    if ($k[--$j]) { //#21037
                        $k[$j++] = $_.N; //#21037
                        break; //#21037
                    } //#21037
                    $k[$j++] = $_.modeANbeforeE; //#21038
                    $_.NbeforeE(); //#21038
                    if ($k[--$j]) { //#21038
                        $k[$j++] = $_.N; //#21038
                        break; //#21038
                    } //#21038
                    if (($_.numA >= 1) || ($_.numN >= 1)) { //#21039
                        $k[$j++] = $_.A; //#21039
                        break; //#21039
                    } //#21039
                    $k[$j++] = $_.B; //#21040
                    break; //#21040
                } //#21040
                if ($_.mode == $_.N) { //#21048
                    if ($_.numK >= 1) { //#21043
                        $k[$j++] = $_.K; //#21043
                        break; //#21043
                    } //#21043
                    if ($_.numB >= 1) { //#21044
                        $k[$j++] = $_.B; //#21044
                        break; //#21044
                    } //#21044
                    if ($_.numA >= 1) { //#21045
                        $k[$j++] = $_.A; //#21045
                        break; //#21045
                    } //#21045
                    if ($_.numN >= 1) { //#21046
                        $k[$j++] = $_.N; //#21046
                        break; //#21046
                    } //#21046
                    $k[$j++] = $_.B; //#21047
                    break; //#21047
                } //#21047
                if ($_.mode == $_.K) { //#21055
                    if ($_.numB >= 1) { //#21050
                        $k[$j++] = $_.B; //#21050
                        break; //#21050
                    } //#21050
                    if ($_.numA >= 1) { //#21051
                        $k[$j++] = $_.A; //#21051
                        break; //#21051
                    } //#21051
                    if ($_.numN >= 1) { //#21052
                        $k[$j++] = $_.N; //#21052
                        break; //#21052
                    } //#21052
                    if ($_.numK >= 1) { //#21053
                        $k[$j++] = $_.K; //#21053
                        break; //#21053
                    } //#21053
                    $k[$j++] = $_.B; //#21054
                    break; //#21054
                } //#21054
            } //#21054
            var _E4 = $k[--$j]; //#21057
            $k[$j++] = _E4; //#21057
            if ((_E4 == $_.K) && $_.fnc1first) { //#21057
                $j--; //#21057
                $k[$j++] = $_.B; //#21057
            } //#21057
            var _E8 = $k[--$j]; //#21058
            $k[$j++] = _E8; //#21074
            if (_E8 == $_.mode) { //#21073
                $j--; //#21059
                var _EE = ($_.mode == $_.K) ? 2 : 1; //#21060
                $_.dat = $geti($_.msg, $_.i, _EE); //#21060
                $k[$j++] = Infinity; //#21061
                $aload($_.seq); //#21062
                $k[$j++] = Infinity; //#21063
                var _EH = $k[--$j]; //#21063
                var _EI = $k[--$j]; //#21063
                $k[$j++] = _EH; //#21063
                $aload(_EI); //#21063
                $aload($_.dat); //#21063
                var _EK = $a(); //#21063
                $k[$j++] = _EK; //#21063
                $_.seq = $a(); //#21063
            } else { //#21073
                $_.mode = $k[--$j]; //#21066
                if ($_.mode == $_.K) { //#21067
                    $k[$j++] = $_.K; //#21067
                    $k[$j++] = $geti($_.msg, $_.i, $_.numK * 2); //#21067
                } //#21067
                if ($_.mode == $_.B) { //#21068
                    $k[$j++] = $_.B; //#21068
                    $k[$j++] = $geti($_.msg, $_.i, $_.numB); //#21068
                } //#21068
                if ($_.mode == $_.A) { //#21069
                    $k[$j++] = $_.A; //#21069
                    $k[$j++] = $geti($_.msg, $_.i, $_.numA); //#21069
                } //#21069
                if ($_.mode == $_.N) { //#21070
                    $k[$j++] = $_.N; //#21070
                    $k[$j++] = $geti($_.msg, $_.i, $_.numN); //#21070
                } //#21070
                if ($_.mode == $_.E) { //#21071
                    $_.mode = -1; //#21071
                    $k[$j++] = $_.E; //#21071
                    $k[$j++] = $geti($_.msg, $_.i, 1); //#21071
                } //#21071
                $_.dat = $k[--$j]; //#21072
                $_.sw = $k[--$j]; //#21072
                $k[$j++] = Infinity; //#21073
                $aload($_.seq); //#21073
                $k[$j++] = $_.sw; //#21073
                $k[$j++] = $_.dat; //#21073
                $_.seq = $a(); //#21073
            } //#21073
            $_.i = $_.i + $_.dat.length; //#21075
        } //#21075
        for (;;) { //#21106
            if ($_.seq == -1) { //#21080
                break; //#21080
            } //#21080
            $_.bits = $s(23648); //#21081
            $_.j = 0; //#21082
            if ($_.fnc1first) { //#21085
                if ($lt($_.ver, $_.vR7x43)) { //#21084
                    $k[$j++] = "0101"; //#21084
                } else { //#21084
                    $k[$j++] = "101"; //#21084
                } //#21084
                $_.addtobits(); //#21084
            } //#21084
            $_.abort = false; //#21086
            for (var _FA = 0, _F9 = $_.seq.length - 1; _FA <= _F9; _FA += 2) { //#21101
                $_.i = _FA; //#21088
                $_.mode = $get($_.seq, $_.i); //#21089
                $k[$j++] = $get($get($_.mids, $_.ver), $_.mode); //#21090
                $_.addtobits(); //#21090
                $_.chars = $get($_.seq, $_.i + 1); //#21091
                $k[$j++] = 'charslen'; //#21092
                $k[$j++] = $_.chars.length; //#21092
                if ($_.mode == $_.K) { //#21092
                    var _FP = $k[--$j]; //#21092
                    $k[$j++] = ~~(_FP / 2); //#21092
                } //#21092
                var _FQ = $k[--$j]; //#21092
                $_[$k[--$j]] = _FQ; //#21092
                if ($_.mode != $_.E) { //#21099
                    $_.cclen = $get($get($_.cclens, $_.ver), $_.mode); //#21094
                    if ($_.charslen >= (~~Math.pow(2, $_.cclen))) { //#21097
                        $_.abort = true; //#21096
                        break; //#21096
                    } //#21096
                    $k[$j++] = $_.charslen; //#21098
                    $k[$j++] = $_.cclen; //#21098
                    $_.tobin(); //#21098
                    $_.addtobits(); //#21098
                } //#21098
                $k[$j++] = $_.chars; //#21100
                if ($_[$get($_.encfuncs, $_.mode)]() === true) {
                    break;
                } //#21100
                $_.addtobits(); //#21100
            } //#21100
            if ($_.abort) { //#21102
                break; //#21102
            } //#21102
            $_.bits = $geti($_.bits, 0, $_.j); //#21103
            $put($_.msgbits, $_.ver, $_.bits); //#21104
            break; //#21105
        } //#21105
    } //#21105
    if (!bwipp_qrcode.__21191__) { //#21191
        $_ = Object.create($_); //#21191
        $_.metrics = $a([$a(["micro", "M1", $_.vM1, 11, 11, 98, 99, 36, $a([2, 99, 99, 99]), $a([1, 0, -1, -1, -1, -1, -1, -1])]), $a(["micro", "M2", $_.vM2, 13, 13, 98, 99, 80, $a([5, 6, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M3", $_.vM3, 15, 15, 98, 99, 132, $a([6, 8, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M4", $_.vM4, 17, 17, 98, 99, 192, $a([8, 10, 14, 99]), $a([1, 0, 1, 0, 1, 0, -1, -1])]), $a(["full", "1", $_.v1to9, 21, 21, 98, 99, 208, $a([7, 10, 13, 17]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "2", $_.v1to9, 25, 25, 18, 99, 359, $a([10, 16, 22, 28]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "3", $_.v1to9, 29, 29, 22, 99, 567, $a([15, 26, 36, 44]), $a([1, 0, 1, 0, 2, 0, 2, 0])]), $a(["full", "4", $_.v1to9, 33, 33, 26, 99, 807, $a([20, 36, 52, 64]), $a([1, 0, 2, 0, 2, 0, 4, 0])]), $a(["full", "5", $_.v1to9, 37, 37, 30, 99, 1079, $a([26, 48, 72, 88]), $a([1, 0, 2, 0, 2, 2, 2, 2])]), $a(["full", "6", $_.v1to9, 41, 41, 34, 99, 1383, $a([36, 64, 96, 112]), $a([2, 0, 4, 0, 4, 0, 4, 0])]), $a(["full", "7", $_.v1to9, 45, 45, 22, 38, 1568, $a([40, 72, 108, 130]), $a([2, 0, 4, 0, 2, 4, 4, 1])]), $a(["full", "8", $_.v1to9, 49, 49, 24, 42, 1936, $a([48, 88, 132, 156]), $a([2, 0, 2, 2, 4, 2, 4, 2])]), $a(["full", "9", $_.v1to9, 53, 53, 26, 46, 2336, $a([60, 110, 160, 192]), $a([2, 0, 3, 2, 4, 4, 4, 4])]), $a(["full", "10", $_.v10to26, 57, 57, 28, 50, 2768, $a([72, 130, 192, 224]), $a([2, 2, 4, 1, 6, 2, 6, 2])]), $a(["full", "11", $_.v10to26, 61, 61, 30, 54, 3232, $a([80, 150, 224, 264]), $a([4, 0, 1, 4, 4, 4, 3, 8])]), $a(["full", "12", $_.v10to26, 65, 65, 32, 58, 3728, $a([96, 176, 260, 308]), $a([2, 2, 6, 2, 4, 6, 7, 4])]), $a(["full", "13", $_.v10to26, 69, 69, 34, 62, 4256, $a([104, 198, 288, 352]), $a([4, 0, 8, 1, 8, 4, 12, 4])]), $a(["full", "14", $_.v10to26, 73, 73, 26, 46, 4651, $a([120, 216, 320, 384]), $a([3, 1, 4, 5, 11, 5, 11, 5])]), $a(["full", "15", $_.v10to26, 77, 77, 26, 48, 5243, $a([132, 240, 360, 432]), $a([5, 1, 5, 5, 5, 7, 11, 7])]), $a(["full", "16", $_.v10to26, 81, 81, 26, 50, 5867, $a([144, 280, 408, 480]), $a([5, 1, 7, 3, 15, 2, 3, 13])]), $a(["full", "17", $_.v10to26, 85, 85, 30, 54, 6523, $a([168, 308, 448, 532]), $a([1, 5, 10, 1, 1, 15, 2, 17])]), $a(["full", "18", $_.v10to26, 89, 89, 30, 56, 7211, $a([180, 338, 504, 588]), $a([5, 1, 9, 4, 17, 1, 2, 19])]), $a(["full", "19", $_.v10to26, 93, 93, 30, 58, 7931, $a([196, 364, 546, 650]), $a([3, 4, 3, 11, 17, 4, 9, 16])]), $a(["full", "20", $_.v10to26, 97, 97, 34, 62, 8683, $a([224, 416, 600, 700]), $a([3, 5, 3, 13, 15, 5, 15, 10])]), $a(["full", "21", $_.v10to26, 101, 101, 28, 50, 9252, $a([224, 442, 644, 750]), $a([4, 4, 17, 0, 17, 6, 19, 6])]), $a(["full", "22", $_.v10to26, 105, 105, 26, 50, 10068, $a([252, 476, 690, 816]), $a([2, 7, 17, 0, 7, 16, 34, 0])]), $a(["full", "23", $_.v10to26, 109, 109, 30, 54, 10916, $a([270, 504, 750, 900]), $a([4, 5, 4, 14, 11, 14, 16, 14])]), $a(["full", "24", $_.v10to26, 113, 113, 28, 54, 11796, $a([300, 560, 810, 960]), $a([6, 4, 6, 14, 11, 16, 30, 2])]), $a(["full", "25", $_.v10to26, 117, 117, 32, 58, 12708, $a([312, 588, 870, 1050]), $a([8, 4, 8, 13, 7, 22, 22, 13])]), $a(["full", "26", $_.v10to26, 121, 121, 30, 58, 13652, $a([336, 644, 952, 1110]), $a([10, 2, 19, 4, 28, 6, 33, 4])]), $a(["full", "27", $_.v27to40, 125, 125, 34, 62, 14628, $a([360, 700, 1020, 1200]), $a([8, 4, 22, 3, 8, 26, 12, 28])]), $a(["full", "28", $_.v27to40, 129, 129, 26, 50, 15371, $a([390, 728, 1050, 1260]), $a([3, 10, 3, 23, 4, 31, 11, 31])]), $a(["full", "29", $_.v27to40, 133, 133, 30, 54, 16411, $a([420, 784, 1140, 1350]), $a([7, 7, 21, 7, 1, 37, 19, 26])]), $a(["full", "30", $_.v27to40, 137, 137, 26, 52, 17483, $a([450, 812, 1200, 1440]), $a([5, 10, 19, 10, 15, 25, 23, 25])]), $a(["full", "31", $_.v27to40, 141, 141, 30, 56, 18587, $a([480, 868, 1290, 1530]), $a([13, 3, 2, 29, 42, 1, 23, 28])]), $a(["full", "32", $_.v27to40, 145, 145, 34, 60, 19723, $a([510, 924, 1350, 1620]), $a([17, 0, 10, 23, 10, 35, 19, 35])]), $a(["full", "33", $_.v27to40, 149, 149, 30, 58, 20891, $a([540, 980, 1440, 1710]), $a([17, 1, 14, 21, 29, 19, 11, 46])]), $a(["full", "34", $_.v27to40, 153, 153, 34, 62, 22091, $a([570, 1036, 1530, 1800]), $a([13, 6, 14, 23, 44, 7, 59, 1])]), $a(["full", "35", $_.v27to40, 157, 157, 30, 54, 23008, $a([570, 1064, 1590, 1890]), $a([12, 7, 12, 26, 39, 14, 22, 41])]), $a(["full", "36", $_.v27to40, 161, 161, 24, 50, 24272, $a([600, 1120, 1680, 1980]), $a([6, 14, 6, 34, 46, 10, 2, 64])]), $a(["full", "37", $_.v27to40, 165, 165, 28, 54, 25568, $a([630, 1204, 1770, 2100]), $a([17, 4, 29, 14, 49, 10, 24, 46])]), $a(["full", "38", $_.v27to40, 169, 169, 32, 58, 26896, $a([660, 1260, 1860, 2220]), $a([4, 18, 13, 32, 48, 14, 42, 32])]), $a(["full", "39", $_.v27to40, 173, 173, 26, 54, 28256, $a([720, 1316, 1950, 2310]), $a([20, 4, 40, 7, 43, 22, 10, 67])]), $a(["full", "40", $_.v27to40, 177, 177, 30, 58, 29648, $a([750, 1372, 2040, 2430]), $a([19, 6, 18, 31, 34, 34, 20, 61])]), $a(["rmqr", "R7x43", $_.vR7x43, 7, 43, 22, 99, 104, $a([99, 7, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x59", $_.vR7x59, 7, 59, 20, 40, 171, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x77", $_.vR7x77, 7, 77, 26, 52, 261, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x99", $_.vR7x99, 7, 99, 24, 50, 358, $a([99, 16, 99, 30]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x139", $_.vR7x139, 7, 139, 28, 56, 545, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x43", $_.vR9x43, 9, 43, 22, 99, 170, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x59", $_.vR9x59, 9, 59, 20, 40, 267, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x77", $_.vR9x77, 9, 77, 26, 52, 393, $a([99, 18, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R9x99", $_.vR9x99, 9, 99, 24, 50, 532, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x139", $_.vR9x139, 9, 139, 28, 56, 797, $a([99, 36, 99, 66]), $a([-1, -1, 1, 1, -1, -1, 3, 0])]), $a(["rmqr", "R11x27", $_.vR11x27, 11, 27, 98, 99, 122, $a([99, 8, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x43", $_.vR11x43, 11, 43, 22, 99, 249, $a([99, 12, 99, 20]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x59", $_.vR11x59, 11, 59, 20, 40, 376, $a([99, 16, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x77", $_.vR11x77, 11, 77, 26, 52, 538, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x99", $_.vR11x99, 11, 99, 24, 50, 719, $a([99, 32, 99, 60]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R11x139", $_.vR11x139, 11, 139, 28, 56, 1062, $a([99, 48, 99, 90]), $a([-1, -1, 2, 0, -1, -1, 3, 0])]), $a(["rmqr", "R13x27", $_.vR13x27, 13, 27, 98, 99, 172, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x43", $_.vR13x43, 13, 43, 22, 99, 329, $a([99, 14, 99, 28]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x59", $_.vR13x59, 13, 59, 20, 40, 486, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R13x77", $_.vR13x77, 13, 77, 26, 52, 684, $a([99, 32, 99, 56]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R13x99", $_.vR13x99, 13, 99, 24, 50, 907, $a([99, 40, 99, 78]), $a([-1, -1, 1, 1, -1, -1, 1, 2])]), $a(["rmqr", "R13x139", $_.vR13x139, 13, 139, 28, 56, 1328, $a([99, 60, 99, 112]), $a([-1, -1, 2, 1, -1, -1, 2, 2])]), $a(["rmqr", "R15x43", $_.vR15x43, 15, 43, 22, 99, 409, $a([99, 18, 99, 36]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R15x59", $_.vR15x59, 15, 59, 20, 40, 596, $a([99, 26, 99, 48]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R15x77", $_.vR15x77, 15, 77, 26, 52, 830, $a([99, 36, 99, 72]), $a([-1, -1, 1, 1, -1, -1, 2, 1])]), $a(["rmqr", "R15x99", $_.vR15x99, 15, 99, 24, 50, 1095, $a([99, 48, 99, 88]), $a([-1, -1, 2, 0, -1, -1, 4, 0])]), $a(["rmqr", "R15x139", $_.vR15x139, 15, 139, 28, 56, 1594, $a([99, 72, 99, 130]), $a([-1, -1, 2, 1, -1, -1, 1, 4])]), $a(["rmqr", "R17x43", $_.vR17x43, 17, 43, 22, 99, 489, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R17x59", $_.vR17x59, 17, 59, 20, 40, 706, $a([99, 32, 99, 60]), $a([-1, -1, 2, 0, -1, -1, 2, 0])]), $a(["rmqr", "R17x77", $_.vR17x77, 17, 77, 26, 52, 976, $a([99, 44, 99, 84]), $a([-1, -1, 2, 0, -1, -1, 1, 2])]), $a(["rmqr", "R17x99", $_.vR17x99, 17, 99, 24, 50, 1283, $a([99, 60, 99, 104]), $a([-1, -1, 2, 1, -1, -1, 4, 0])]), $a(["rmqr", "R17x139", $_.vR17x139, 17, 139, 28, 56, 1860, $a([99, 80, 99, 156]), $a([-1, -1, 4, 0, -1, -1, 2, 4])])]); //#21190
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21190
        bwipp_qrcode.__21191__ = 1; //#21190
        $_ = Object.getPrototypeOf($_); //#21190
    } //#21190
    $k[$j++] = 'eclval'; //#21193
    $search("LMQH", $_.eclevel); //#21193
    $j--; //#21193
    var _Km = $k[--$j]; //#21193
    var _Kn = $k[--$j]; //#21193
    $k[$j++] = _Km.length; //#21193
    $k[$j++] = _Kn; //#21193
    $j--; //#21193
    var _Ko = $k[--$j]; //#21193
    var _Kp = $k[--$j]; //#21193
    $k[$j++] = _Ko; //#21193
    $k[$j++] = _Kp; //#21193
    $j--; //#21193
    var _Kq = $k[--$j]; //#21193
    $_[$k[--$j]] = _Kq; //#21193
    for (var _Ku = 0, _Kt = $_.metrics.length - 1; _Ku <= _Kt; _Ku += 1) { //#21232
        $_.i = _Ku; //#21195
        $_.m = $get($_.metrics, $_.i); //#21196
        $_.frmt = $get($_.m, 0); //#21197
        $_.vers = $get($_.m, 1); //#21198
        $_.vergrp = $get($_.m, 2); //#21199
        $_.verind = $_.i - 44; //#21200
        $_.rows = $get($_.m, 3); //#21201
        $_.cols = $get($_.m, 4); //#21202
        $_.asp2 = $get($_.m, 5); //#21203
        $_.asp3 = $get($_.m, 6); //#21204
        $_.nmod = $get($_.m, 7); //#21205
        $_.ncws = ~~($_.nmod / 8); //#21206
        $_.rbit = $_.nmod % 8; //#21207
        $_.lc4b = false; //#21208
        if ($eq($_.vers, "M1") || $eq($_.vers, "M3")) { //#21213
            $_.ncws = $_.ncws + 1; //#21210
            $_.rbit = 0; //#21211
            $_.lc4b = true; //#21212
        } //#21212
        $_.ecws = $get($get($_.m, 8), $_.eclval); //#21214
        $_.dcws = $f($_.ncws - $_.ecws); //#21215
        var _LS = $_.lc4b ? 4 : 0; //#21216
        $_.dmod = $f(($_.dcws * 8) - _LS); //#21216
        $_.ecb1 = $get($get($_.m, 9), $_.eclval * 2); //#21217
        $_.ecb2 = $get($get($_.m, 9), ($_.eclval * 2) + 1); //#21218
        $_.okay = true; //#21219
        if ($ne($_.format, $_.frmt)) { //#21220
            $_.okay = false; //#21220
        } //#21220
        if ($eq($_.frmt, "micro") && $_.fnc1first) { //#21221
            $_.okay = false; //#21221
        } //#21221
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#21222
            $_.okay = false; //#21222
        } //#21222
        if (($_.ecb1 == -1) || ($_.ecb2 == -1)) { //#21223
            $_.okay = false; //#21223
        } //#21223
        $_.verbits = $get($_.msgbits, $_.vergrp); //#21224
        if ($_.verbits == -1) { //#21228
            $_.okay = false; //#21226
        } else { //#21228
            if ($_.verbits.length > $_.dmod) { //#21228
                $_.okay = false; //#21228
            } //#21228
        } //#21228
        $_.term = $geti("000000000", 0, $get($_.termlens, $_.vergrp)); //#21230
        if ($_.okay) { //#21231
            break; //#21231
        } //#21231
    } //#21231
    if (!$_.okay) { //#21236
        $k[$j++] = 'bwipp.qrcodeNoValidSymbol#21235'; //#21235
        $k[$j++] = "Maximum length exceeded or invalid content"; //#21235
        bwipp_raiseerror(); //#21235
    } //#21235
    $_.format = $_.frmt; //#21238
    $_.version = $_.vers; //#21239
    $_.msgbits = $_.verbits; //#21240
    if (!$_.fixedeclevel) { //#21262
        for (var _M1 = $_.eclval + 1; _M1 <= 3; _M1 += 1) { //#21261
            $_.eclval_ = _M1; //#21245
            $_.ecws_ = $get($get($_.m, 8), $_.eclval_); //#21246
            $_.dcws_ = $f($_.ncws - $_.ecws_); //#21247
            var _MA = $_.lc4b ? 4 : 0; //#21248
            $_.dmod_ = $f(($_.dcws_ * 8) - _MA); //#21248
            $_.ecb1_ = $get($get($_.m, 9), $_.eclval_ * 2); //#21249
            $_.ecb2_ = $get($get($_.m, 9), ($_.eclval_ * 2) + 1); //#21250
            $_.okay = true; //#21251
            if (($_.ecb1_ == -1) || ($_.ecb2_ == -1)) { //#21252
                $_.okay = false; //#21252
            } //#21252
            if ($_.msgbits.length > $_.dmod_) { //#21253
                $_.okay = false; //#21253
            } //#21253
            if ($_.okay) { //#21260
                $_.eclval = $_.eclval_; //#21255
                $_.dcws = $_.dcws_; //#21256
                $_.dmod = $_.dmod_; //#21257
                $_.ecb1 = $_.ecb1_; //#21258
                $_.ecb2 = $_.ecb2_; //#21259
            } //#21259
        } //#21259
    } //#21259
    $_.dcpb = ~~($_.dcws / $f($_.ecb1 + $_.ecb2)); //#21264
    $_.ecpb = (~~($_.ncws / $f($_.ecb1 + $_.ecb2))) - $_.dcpb; //#21265
    var _Ma = $_.term; //#21268
    var _Mb = $_.dmod; //#21268
    var _Mc = $_.msgbits; //#21268
    var _Md = $_.term; //#21268
    var _Me = _Md.length; //#21268
    var _Mf = $f(_Mb - _Mc.length); //#21268
    if ($f(_Mb - _Mc.length) > _Md.length) { //#21268
        var _ = _Me; //#21268
        _Me = _Mf; //#21268
        _Mf = _; //#21268
    } //#21268
    $_.term = $geti(_Ma, 0, _Mf); //#21268
    var _Mj = $s($_.msgbits.length + $_.term.length); //#21269
    $puti(_Mj, 0, $_.msgbits); //#21270
    $puti(_Mj, $_.msgbits.length, $_.term); //#21271
    $_.msgbits = _Mj; //#21272
    $_.pad = $s($_.dmod); //#21275
    for (var _Mr = 0, _Mq = $_.pad.length - 1; _Mr <= _Mq; _Mr += 1) { //#21276
        $put($_.pad, _Mr, 48); //#21276
    } //#21276
    $puti($_.pad, 0, $_.msgbits); //#21277
    $_.padnum = 0; //#21278
    var _My = $_.lc4b ? 5 : 1; //#21279
    for (var _N0 = ~~(Math.ceil($_.msgbits.length / 8) * 8), _Mz = $f($_.dmod - _My); _N0 <= _Mz; _N0 += 8) { //#21282
        $puti($_.pad, _N0, $get($_.padstrs, $_.padnum)); //#21280
        $_.padnum = ($_.padnum + 1) % 2; //#21281
    } //#21281
    $_.cws = $a($_.dcws); //#21285
    for (var _NA = 0, _N9 = $_.cws.length - 1; _NA <= _N9; _NA += 1) { //#21297
        $_.c = _NA; //#21287
        $_.bpcw = 8; //#21288
        if ($_.lc4b && ($_.c == ($_.cws.length - 1))) { //#21289
            $_.bpcw = 4; //#21289
        } //#21289
        $_.cwb = $geti($_.pad, $_.c * 8, $_.bpcw); //#21290
        $_.cw = 0; //#21291
        for (var _NK = 0, _NJ = $_.bpcw - 1; _NK <= _NJ; _NK += 1) { //#21295
            $_.i = _NK; //#21293
            $_.cw = $f($_.cw + ((~~(Math.pow(2, ($_.bpcw - $_.i) - 1))) * $f($get($_.cwb, $_.i) - 48))); //#21294
        } //#21294
        $put($_.cws, $_.c, $_.cw); //#21296
    } //#21296
    if ($_.lc4b) { //#21300
        var _NV = $_.cws; //#21300
        var _NW = $_.cws; //#21300
        $put(_NV, _NW.length - 1, $get(_NV, _NW.length - 1) << 4); //#21300
    } //#21300
    var _NZ = $get($_.options, 'debugcws') !== undefined; //#21302
    if (_NZ) { //#21302
        $k[$j++] = 'bwipp.debugcws#21302'; //#21302
        $k[$j++] = $_.cws; //#21302
        bwipp_raiseerror(); //#21302
    } //#21302
    if (!bwipp_qrcode.__21309__) { //#21309
        $_ = Object.create($_); //#21309
        $k[$j++] = Infinity; //#21306
        $k[$j++] = 1; //#21306
        for (var _Nb = 0, _Nc = 255; _Nb < _Nc; _Nb++) { //#21306
            var _Nd = $k[--$j]; //#21306
            var _Ne = _Nd * 2; //#21306
            $k[$j++] = _Nd; //#21306
            $k[$j++] = _Ne; //#21306
            if (_Ne >= 256) { //#21306
                var _Nf = $k[--$j]; //#21306
                $k[$j++] = _Nf ^ 285; //#21306
            } //#21306
        } //#21306
        $_.rsalog = $a(); //#21306
        $_.rslog = $a(256); //#21307
        for (var _Ni = 1; _Ni <= 255; _Ni += 1) { //#21308
            $put($_.rslog, $get($_.rsalog, _Ni), _Ni); //#21308
        } //#21308
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21308
        bwipp_qrcode.__21309__ = 1; //#21308
        $_ = Object.getPrototypeOf($_); //#21308
    } //#21308
    $_.rsprod = function() {
        var _Nn = $k[--$j]; //#21313
        var _No = $k[--$j]; //#21313
        $k[$j++] = _No; //#21317
        $k[$j++] = _Nn; //#21317
        if ((_Nn != 0) && (_No != 0)) { //#21316
            var _Nr = $get($_.rslog, $k[--$j]); //#21314
            var _Nw = $get($_.rsalog, $f(_Nr + $get($_.rslog, $k[--$j])) % 255); //#21314
            $k[$j++] = _Nw; //#21314
        } else { //#21316
            $j -= 2; //#21316
            $k[$j++] = 0; //#21316
        } //#21316
    }; //#21316
    $k[$j++] = Infinity; //#21321
    $k[$j++] = 1; //#21321
    for (var _Ny = 0, _Nz = $_.ecpb; _Ny < _Nz; _Ny++) { //#21321
        $k[$j++] = 0; //#21321
    } //#21321
    $_.coeffs = $a(); //#21321
    for (var _O3 = 0, _O2 = $_.ecpb - 1; _O3 <= _O2; _O3 += 1) { //#21330
        $_.i = _O3; //#21323
        $put($_.coeffs, $_.i + 1, $get($_.coeffs, $_.i)); //#21324
        for (var _OA = $_.i; _OA >= 1; _OA -= 1) { //#21328
            $_.j = _OA; //#21326
            $k[$j++] = $_.coeffs; //#21327
            $k[$j++] = $_.j; //#21327
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#21327
            $k[$j++] = $get($_.coeffs, $_.j); //#21327
            $k[$j++] = $get($_.rsalog, $_.i); //#21327
            $_.rsprod(); //#21327
            var _OM = $k[--$j]; //#21327
            var _ON = $k[--$j]; //#21327
            var _OO = $k[--$j]; //#21327
            $put($k[--$j], _OO, $xo(_ON, _OM)); //#21327
        } //#21327
        $k[$j++] = $_.coeffs; //#21329
        $k[$j++] = 0; //#21329
        $k[$j++] = $get($_.coeffs, 0); //#21329
        $k[$j++] = $get($_.rsalog, $_.i); //#21329
        $_.rsprod(); //#21329
        var _OW = $k[--$j]; //#21329
        var _OX = $k[--$j]; //#21329
        $put($k[--$j], _OX, _OW); //#21329
    } //#21329
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#21331
    $_.rscodes = function() {
        $_.rscws = $k[--$j]; //#21335
        $_.rsnd = $_.rscws.length; //#21336
        $k[$j++] = Infinity; //#21337
        $aload($_.rscws); //#21337
        for (var _Og = 0, _Oh = $_.ecpb; _Og < _Oh; _Og++) { //#21337
            $k[$j++] = 0; //#21337
        } //#21337
        $_.rscws = $a(); //#21337
        for (var _Ol = 0, _Ok = $_.rsnd - 1; _Ol <= _Ok; _Ol += 1) { //#21345
            $_.m = _Ol; //#21339
            $_.k = $get($_.rscws, $_.m); //#21340
            for (var _Or = 0, _Oq = $_.ecpb - 1; _Or <= _Oq; _Or += 1) { //#21344
                $_.j = _Or; //#21342
                $k[$j++] = $_.rscws; //#21343
                $k[$j++] = ($_.m + $_.j) + 1; //#21343
                $k[$j++] = $get($_.coeffs, ($_.ecpb - $_.j) - 1); //#21343
                $k[$j++] = $_.k; //#21343
                $_.rsprod(); //#21343
                var _P4 = $k[--$j]; //#21343
                var _P5 = $k[--$j]; //#21343
                $put($k[--$j], _P5, $xo(_P4, $get($_.rscws, ($_.m + $_.j) + 1))); //#21343
            } //#21343
        } //#21343
        $k[$j++] = $geti($_.rscws, $_.rsnd, $_.ecpb); //#21346
    }; //#21346
    $_.dcwsb = $a($f($_.ecb1 + $_.ecb2)); //#21350
    $_.ecwsb = $a($f($_.ecb1 + $_.ecb2)); //#21351
    for (var _PJ = 0, _PI = $f($_.ecb1 - 1); _PJ <= _PI; _PJ += 1) { //#21356
        $_.i = _PJ; //#21353
        $put($_.dcwsb, $_.i, $geti($_.cws, $_.i * $_.dcpb, $_.dcpb)); //#21354
        $k[$j++] = $_.ecwsb; //#21355
        $k[$j++] = $_.i; //#21355
        $k[$j++] = $get($_.dcwsb, $_.i); //#21355
        $_.rscodes(); //#21355
        var _PW = $k[--$j]; //#21355
        var _PX = $k[--$j]; //#21355
        $put($k[--$j], _PX, _PW); //#21355
    } //#21355
    for (var _Pb = 0, _Pa = $f($_.ecb2 - 1); _Pb <= _Pa; _Pb += 1) { //#21361
        $_.i = _Pb; //#21358
        $put($_.dcwsb, $f($_.ecb1 + $_.i), $geti($_.cws, $f(($_.ecb1 * $_.dcpb) + ($_.i * ($_.dcpb + 1))), $_.dcpb + 1)); //#21359
        $k[$j++] = $_.ecwsb; //#21360
        $k[$j++] = $f($_.ecb1 + $_.i); //#21360
        $k[$j++] = $get($_.dcwsb, $f($_.ecb1 + $_.i)); //#21360
        $_.rscodes(); //#21360
        var _Pt = $k[--$j]; //#21360
        var _Pu = $k[--$j]; //#21360
        $put($k[--$j], _Pu, _Pt); //#21360
    } //#21360
    $_.cws = $a($_.ncws); //#21364
    $_.cw = 0; //#21365
    for (var _Q0 = 0, _Pz = $_.dcpb; _Q0 <= _Pz; _Q0 += 1) { //#21375
        $_.i = _Q0; //#21367
        for (var _Q4 = 0, _Q3 = $f($f($_.ecb1 + $_.ecb2) - 1); _Q4 <= _Q3; _Q4 += 1) { //#21374
            $_.j = _Q4; //#21369
            if ($_.i < $get($_.dcwsb, $_.j).length) { //#21373
                $put($_.cws, $_.cw, $get($get($_.dcwsb, $_.j), $_.i)); //#21371
                $_.cw = $_.cw + 1; //#21372
            } //#21372
        } //#21372
    } //#21372
    for (var _QJ = 0, _QI = $_.ecpb - 1; _QJ <= _QI; _QJ += 1) { //#21383
        $_.i = _QJ; //#21377
        for (var _QN = 0, _QM = $f($f($_.ecb1 + $_.ecb2) - 1); _QN <= _QM; _QN += 1) { //#21382
            $_.j = _QN; //#21379
            $put($_.cws, $_.cw, $get($get($_.ecwsb, $_.j), $_.i)); //#21380
            $_.cw = $_.cw + 1; //#21381
        } //#21381
    } //#21381
    if ($_.rbit > 0) { //#21391
        $_.pad = $a($_.cws.length + 1); //#21387
        $puti($_.pad, 0, $_.cws); //#21388
        $put($_.pad, $_.pad.length - 1, 0); //#21389
        $_.cws = $_.pad; //#21390
    } //#21390
    if ($_.lc4b) { //#21402
        var _Qf = $_.cws; //#21395
        var _Qg = $_.dcws; //#21395
        $put(_Qf, $f(_Qg - 1), $get(_Qf, $f(_Qg - 1)) >>> 4); //#21395
        for (var _Ql = $f($_.dcws - 1), _Qk = $_.ncws - 2; _Ql <= _Qk; _Ql += 1) { //#21400
            $_.i = _Ql; //#21397
            $put($_.cws, $_.i, ($get($_.cws, $_.i) & 15) << 4); //#21398
            $put($_.cws, $_.i, (($get($_.cws, $_.i + 1) >>> 4) & 15) | $get($_.cws, $_.i)); //#21399
        } //#21399
        $put($_.cws, $_.ncws - 1, ($get($_.cws, $_.ncws - 1) & 15) << 4); //#21401
    } //#21401
    var _R5 = $get($_.options, 'debugecc') !== undefined; //#21404
    if (_R5) { //#21404
        $k[$j++] = 'bwipp.debugecc#21404'; //#21404
        $k[$j++] = $_.cws; //#21404
        bwipp_raiseerror(); //#21404
    } //#21404
    $k[$j++] = Infinity; //#21407
    for (var _R9 = 0, _RA = $_.rows * $_.cols; _R9 < _RA; _R9++) { //#21407
        $k[$j++] = -1; //#21407
    } //#21407
    $_.pixs = $a(); //#21407
    $_.qmv = function() {
        var _RD = $k[--$j]; //#21408
        var _RE = $k[--$j]; //#21408
        $k[$j++] = $f(_RE + (_RD * $_.cols)); //#21408
    }; //#21408
    if ($eq($_.format, "full")) { //#21417
        for (var _RI = 8, _RH = $f($_.cols - 9); _RI <= _RH; _RI += 1) { //#21416
            $_.i = _RI; //#21413
            $k[$j++] = $_.pixs; //#21414
            $k[$j++] = $_.i; //#21414
            $k[$j++] = 6; //#21414
            $_.qmv(); //#21414
            var _RM = $k[--$j]; //#21414
            $put($k[--$j], _RM, ($_.i + 1) % 2); //#21414
            $k[$j++] = $_.pixs; //#21415
            $k[$j++] = 6; //#21415
            $k[$j++] = $_.i; //#21415
            $_.qmv(); //#21415
            var _RR = $k[--$j]; //#21415
            $put($k[--$j], _RR, ($_.i + 1) % 2); //#21415
        } //#21415
    } //#21415
    if ($eq($_.format, "micro")) { //#21424
        for (var _RW = 8, _RV = $f($_.cols - 1); _RW <= _RV; _RW += 1) { //#21423
            $_.i = _RW; //#21420
            $k[$j++] = $_.pixs; //#21421
            $k[$j++] = $_.i; //#21421
            $k[$j++] = 0; //#21421
            $_.qmv(); //#21421
            var _Ra = $k[--$j]; //#21421
            $put($k[--$j], _Ra, ($_.i + 1) % 2); //#21421
            $k[$j++] = $_.pixs; //#21422
            $k[$j++] = 0; //#21422
            $k[$j++] = $_.i; //#21422
            $_.qmv(); //#21422
            var _Rf = $k[--$j]; //#21422
            $put($k[--$j], _Rf, ($_.i + 1) % 2); //#21422
        } //#21422
    } //#21422
    if ($eq($_.format, "rmqr")) { //#21443
        for (var _Rk = 3, _Rj = $f($_.cols - 4); _Rk <= _Rj; _Rk += 1) { //#21430
            $_.i = _Rk; //#21427
            $k[$j++] = $_.pixs; //#21428
            $k[$j++] = $_.i; //#21428
            $k[$j++] = 0; //#21428
            $_.qmv(); //#21428
            var _Ro = $k[--$j]; //#21428
            $put($k[--$j], _Ro, ($_.i + 1) % 2); //#21428
            $k[$j++] = $_.pixs; //#21429
            $k[$j++] = $_.i; //#21429
            $k[$j++] = $f($_.rows - 1); //#21429
            $_.qmv(); //#21429
            var _Ru = $k[--$j]; //#21429
            $put($k[--$j], _Ru, ($_.i + 1) % 2); //#21429
        } //#21429
        for (var _Ry = 3, _Rx = $f($_.rows - 4); _Ry <= _Rx; _Ry += 1) { //#21435
            $_.i = _Ry; //#21432
            $k[$j++] = $_.pixs; //#21433
            $k[$j++] = 0; //#21433
            $k[$j++] = $_.i; //#21433
            $_.qmv(); //#21433
            var _S2 = $k[--$j]; //#21433
            $put($k[--$j], _S2, ($_.i + 1) % 2); //#21433
            $k[$j++] = $_.pixs; //#21434
            $k[$j++] = $f($_.cols - 1); //#21434
            $k[$j++] = $_.i; //#21434
            $_.qmv(); //#21434
            var _S8 = $k[--$j]; //#21434
            $put($k[--$j], _S8, ($_.i + 1) % 2); //#21434
        } //#21434
        for (var _SF = $f($_.asp2 - 1), _SG = $f($_.asp3 - $_.asp2), _SE = $f($_.cols - 13); _SG < 0 ? _SF >= _SE : _SF <= _SE; _SF += _SG) { //#21442
            $_.i = _SF; //#21437
            for (var _SJ = 3, _SI = $f($_.rows - 4); _SJ <= _SI; _SJ += 1) { //#21441
                $_.j = _SJ; //#21439
                $k[$j++] = $_.pixs; //#21440
                $k[$j++] = $_.i; //#21440
                $k[$j++] = $_.j; //#21440
                $_.qmv(); //#21440
                var _SO = $k[--$j]; //#21440
                $put($k[--$j], _SO, ($_.j + 1) % 2); //#21440
            } //#21440
        } //#21440
    } //#21440
    if (!bwipp_qrcode.__21493__) { //#21493
        $_ = Object.create($_); //#21493
        $_.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#21456
        $_.fsubpat = $a([$a([1, 1, 1, 1, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 0, 1, 0, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 1, 1, 1, 1, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#21466
        $_.fcorpat = $a([$a([1, 1, 1, 9, 9, 9, 9, 9]), $a([1, 0, 9, 9, 9, 9, 9, 9]), $a([1, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#21476
        $_.fnullpat = $a([$a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#21486
        var _TF = new Map([
            ["full", $a([$_.fpat, $_.fpat, $_.fpat, $_.fnullpat])],
            ["micro", $a([$_.fpat, $_.fnullpat, $_.fnullpat, $_.fnullpat])],
            ["rmqr", $a([$_.fpat, $_.fcorpat, $_.fcorpat, $_.fsubpat])]
        ]); //#21491
        $_.fpatmap = _TF; //#21492
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21492
        bwipp_qrcode.__21493__ = 1; //#21492
        $_ = Object.getPrototypeOf($_); //#21492
    } //#21492
    $_.fpats = $get($_.fpatmap, $_.format); //#21494
    for (var _TK = 0; _TK <= 7; _TK += 1) { //#21508
        $_.y = _TK; //#21496
        for (var _TL = 0; _TL <= 7; _TL += 1) { //#21507
            $_.x = _TL; //#21498
            $_.fpb0 = $get($get($get($_.fpats, 0), $_.y), $_.x); //#21499
            $_.fpb1 = $get($get($get($_.fpats, 1), $_.y), $_.x); //#21500
            $_.fpb2 = $get($get($get($_.fpats, 2), $_.y), $_.x); //#21501
            $_.fpb3 = $get($get($get($_.fpats, 3), $_.y), $_.x); //#21502
            if (($_.fpb0 != 9) && ($_.y < $_.rows)) { //#21503
                $k[$j++] = $_.pixs; //#21503
                $k[$j++] = $_.x; //#21503
                $k[$j++] = $_.y; //#21503
                $_.qmv(); //#21503
                var _Tr = $k[--$j]; //#21503
                $put($k[--$j], _Tr, $_.fpb0); //#21503
            } //#21503
            if ($_.fpb1 != 9) { //#21504
                $k[$j++] = $_.pixs; //#21504
                $k[$j++] = $f($f($_.cols - $_.x) - 1); //#21504
                $k[$j++] = $_.y; //#21504
                $_.qmv(); //#21504
                var _Tz = $k[--$j]; //#21504
                $put($k[--$j], _Tz, $_.fpb1); //#21504
            } //#21504
            if ($_.fpb2 != 9) { //#21505
                $k[$j++] = $_.pixs; //#21505
                $k[$j++] = $_.x; //#21505
                $k[$j++] = $f($f($_.rows - $_.y) - 1); //#21505
                $_.qmv(); //#21505
                var _U7 = $k[--$j]; //#21505
                $put($k[--$j], _U7, $_.fpb2); //#21505
            } //#21505
            if ($_.fpb3 != 9) { //#21506
                $k[$j++] = $_.pixs; //#21506
                $k[$j++] = $f($f($_.cols - $_.x) - 1); //#21506
                $k[$j++] = $f($f($_.rows - $_.y) - 1); //#21506
                $_.qmv(); //#21506
                var _UG = $k[--$j]; //#21506
                $put($k[--$j], _UG, $_.fpb3); //#21506
            } //#21506
        } //#21506
    } //#21506
    if (!bwipp_qrcode.__21526__) { //#21526
        $_ = Object.create($_); //#21526
        $_.algnpatfull = $a([$a([1, 1, 1, 1, 1]), $a([1, 0, 0, 0, 1]), $a([1, 0, 1, 0, 1]), $a([1, 0, 0, 0, 1]), $a([1, 1, 1, 1, 1])]); //#21518
        $_.algnpatrmqr = $a([$a([1, 1, 1, 9, 9]), $a([1, 0, 1, 9, 9]), $a([1, 1, 1, 9, 9]), $a([9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9])]); //#21525
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21525
        bwipp_qrcode.__21526__ = 1; //#21525
        $_ = Object.getPrototypeOf($_); //#21525
    } //#21525
    $_.putalgnpat = function() {
        $_.py = $k[--$j]; //#21529
        $_.px = $k[--$j]; //#21530
        for (var _UX = 0; _UX <= 4; _UX += 1) { //#21540
            $_.pb = _UX; //#21532
            for (var _UY = 0; _UY <= 4; _UY += 1) { //#21539
                $_.pa = _UY; //#21534
                $_.algnb = $get($get($_.algnpat, $_.pb), $_.pa); //#21535
                if ($_.algnb != 9) { //#21538
                    $k[$j++] = $_.pixs; //#21537
                    $k[$j++] = $f($_.px + $_.pa); //#21537
                    $k[$j++] = $f($_.py + $_.pb); //#21537
                    $_.qmv(); //#21537
                    var _Ul = $k[--$j]; //#21537
                    $put($k[--$j], _Ul, $_.algnb); //#21537
                } //#21537
            } //#21537
        } //#21537
    }; //#21537
    if ($eq($_.format, "full")) { //#21556
        $_.algnpat = $_.algnpatfull; //#21543
        for (var _Uu = $f($_.asp2 - 2), _Uv = $f($_.asp3 - $_.asp2), _Ut = $f($_.cols - 13); _Uv < 0 ? _Uu >= _Ut : _Uu <= _Ut; _Uu += _Uv) { //#21548
            $_.i = _Uu; //#21545
            $k[$j++] = $_.i; //#21546
            $k[$j++] = 4; //#21546
            $_.putalgnpat(); //#21546
            $k[$j++] = 4; //#21547
            $k[$j++] = $_.i; //#21547
            $_.putalgnpat(); //#21547
        } //#21547
        for (var _V3 = $f($_.asp2 - 2), _V4 = $f($_.asp3 - $_.asp2), _V2 = $f($_.cols - 9); _V4 < 0 ? _V3 >= _V2 : _V3 <= _V2; _V3 += _V4) { //#21555
            $_.x = _V3; //#21550
            for (var _VA = $f($_.asp2 - 2), _VB = $f($_.asp3 - $_.asp2), _V9 = $f($_.rows - 9); _VB < 0 ? _VA >= _V9 : _VA <= _V9; _VA += _VB) { //#21554
                $_.y = _VA; //#21552
                $k[$j++] = $_.x; //#21553
                $k[$j++] = $_.y; //#21553
                $_.putalgnpat(); //#21553
            } //#21553
        } //#21553
    } //#21553
    if ($eq($_.format, "rmqr")) { //#21564
        $_.algnpat = $_.algnpatrmqr; //#21558
        for (var _VL = $f($_.asp2 - 2), _VM = $f($_.asp3 - $_.asp2), _VK = $f($_.cols - 13); _VM < 0 ? _VL >= _VK : _VL <= _VK; _VL += _VM) { //#21563
            $_.i = _VL; //#21560
            $k[$j++] = $_.i; //#21561
            $k[$j++] = 0; //#21561
            $_.putalgnpat(); //#21561
            $k[$j++] = $_.i; //#21562
            $k[$j++] = $f($_.rows - 3); //#21562
            $_.putalgnpat(); //#21562
        } //#21562
    } //#21562
    if (!bwipp_qrcode.__21573__) { //#21573
        $_ = Object.create($_); //#21573
        $_.formatmapmicro = $a([$a([$a([1, 8])]), $a([$a([2, 8])]), $a([$a([3, 8])]), $a([$a([4, 8])]), $a([$a([5, 8])]), $a([$a([6, 8])]), $a([$a([7, 8])]), $a([$a([8, 8])]), $a([$a([8, 7])]), $a([$a([8, 6])]), $a([$a([8, 5])]), $a([$a([8, 4])]), $a([$a([8, 3])]), $a([$a([8, 2])]), $a([$a([8, 1])])]); //#21572
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21572
        bwipp_qrcode.__21573__ = 1; //#21572
        $_ = Object.getPrototypeOf($_); //#21572
    } //#21572
    var _YP = new Map([
        ["full", $a([$a([$a([0, 8]), $a([8, $f($_.cols - 1)])]), $a([$a([1, 8]), $a([8, $f($_.cols - 2)])]), $a([$a([2, 8]), $a([8, $f($_.cols - 3)])]), $a([$a([3, 8]), $a([8, $f($_.cols - 4)])]), $a([$a([4, 8]), $a([8, $f($_.cols - 5)])]), $a([$a([5, 8]), $a([8, $f($_.cols - 6)])]), $a([$a([7, 8]), $a([8, $f($_.cols - 7)])]), $a([$a([8, 8]), $a([$f($_.cols - 8), 8])]), $a([$a([8, 7]), $a([$f($_.cols - 7), 8])]), $a([$a([8, 5]), $a([$f($_.cols - 6), 8])]), $a([$a([8, 4]), $a([$f($_.cols - 5), 8])]), $a([$a([8, 3]), $a([$f($_.cols - 4), 8])]), $a([$a([8, 2]), $a([$f($_.cols - 3), 8])]), $a([$a([8, 1]), $a([$f($_.cols - 2), 8])]), $a([$a([8, 0]), $a([$f($_.cols - 1), 8])])])],
        ["micro", $_.formatmapmicro],
        ["rmqr", $a([$a([$a([11, 3]), $a([$f($_.cols - 3), $f($_.rows - 6)])]), $a([$a([11, 2]), $a([$f($_.cols - 4), $f($_.rows - 6)])]), $a([$a([11, 1]), $a([$f($_.cols - 5), $f($_.rows - 6)])]), $a([$a([10, 5]), $a([$f($_.cols - 6), $f($_.rows - 2)])]), $a([$a([10, 4]), $a([$f($_.cols - 6), $f($_.rows - 3)])]), $a([$a([10, 3]), $a([$f($_.cols - 6), $f($_.rows - 4)])]), $a([$a([10, 2]), $a([$f($_.cols - 6), $f($_.rows - 5)])]), $a([$a([10, 1]), $a([$f($_.cols - 6), $f($_.rows - 6)])]), $a([$a([9, 5]), $a([$f($_.cols - 7), $f($_.rows - 2)])]), $a([$a([9, 4]), $a([$f($_.cols - 7), $f($_.rows - 3)])]), $a([$a([9, 3]), $a([$f($_.cols - 7), $f($_.rows - 4)])]), $a([$a([9, 2]), $a([$f($_.cols - 7), $f($_.rows - 5)])]), $a([$a([9, 1]), $a([$f($_.cols - 7), $f($_.rows - 6)])]), $a([$a([8, 5]), $a([$f($_.cols - 8), $f($_.rows - 2)])]), $a([$a([8, 4]), $a([$f($_.cols - 8), $f($_.rows - 3)])]), $a([$a([8, 3]), $a([$f($_.cols - 8), $f($_.rows - 4)])]), $a([$a([8, 2]), $a([$f($_.cols - 8), $f($_.rows - 5)])]), $a([$a([8, 1]), $a([$f($_.cols - 8), $f($_.rows - 6)])])])]
    ]); //#21589
    $_.formatmap = $get(_YP, $_.format); //#21591
    $forall($_.formatmap, function() { //#21594
        $forall($k[--$j], function() { //#21593
            $aload($k[--$j]); //#21593
            $_.qmv(); //#21593
            $put($_.pixs, $k[--$j], 1); //#21593
        }); //#21593
    }); //#21593
    if ($eq($_.format, "full") && ($_.cols >= 45)) { //#21610
        $_.versionmap = $a([$a([$a([$f($_.cols - 9), 5]), $a([5, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 5]), $a([5, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 5]), $a([5, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 4]), $a([4, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 4]), $a([4, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 4]), $a([4, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 3]), $a([3, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 3]), $a([3, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 3]), $a([3, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 2]), $a([2, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 2]), $a([2, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 2]), $a([2, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 1]), $a([1, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 1]), $a([1, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 1]), $a([1, $f($_.cols - 11)])]), $a([$a([$f($_.cols - 9), 0]), $a([0, $f($_.cols - 9)])]), $a([$a([$f($_.cols - 10), 0]), $a([0, $f($_.cols - 10)])]), $a([$a([$f($_.cols - 11), 0]), $a([0, $f($_.cols - 11)])])]); //#21608
    } else { //#21610
        $_.versionmap = $a([]); //#21610
    } //#21610
    var _a3 = $_.versionmap; //#21612
    for (var _a4 = 0, _a5 = _a3.length; _a4 < _a5; _a4++) { //#21614
        $forall($get(_a3, _a4), function() { //#21613
            $aload($k[--$j]); //#21613
            $_.qmv(); //#21613
            $put($_.pixs, $k[--$j], 0); //#21613
        }); //#21613
    } //#21613
    if ($eq($_.format, "full")) { //#21619
        $k[$j++] = $_.pixs; //#21618
        $k[$j++] = 8; //#21618
        $k[$j++] = $f($_.rows - 8); //#21618
        $_.qmv(); //#21618
        var _aD = $k[--$j]; //#21618
        $put($k[--$j], _aD, 0); //#21618
    } //#21618
    var _aX = $a([function() {
        var _aF = $k[--$j]; //#21624
        var _aG = $k[--$j]; //#21624
        $k[$j++] = $f(_aG + _aF) % 2; //#21624
    }, function() {
        var _aH = $k[--$j]; //#21625
        var _aI = $k[--$j]; //#21625
        $k[$j++] = _aH; //#21625
        $k[$j++] = _aI; //#21625
        $j--; //#21625
        var _aJ = $k[--$j]; //#21625
        $k[$j++] = _aJ % 2; //#21625
    }, function() {
        $j--; //#21626
        var _aK = $k[--$j]; //#21626
        $k[$j++] = _aK % 3; //#21626
    }, function() {
        var _aL = $k[--$j]; //#21627
        var _aM = $k[--$j]; //#21627
        $k[$j++] = $f(_aM + _aL) % 3; //#21627
    }, function() {
        var _aN = $k[--$j]; //#21628
        var _aO = $k[--$j]; //#21628
        $k[$j++] = ((~~(_aN / 2)) + (~~(_aO / 3))) % 2; //#21628
    }, function() {
        var _aP = $k[--$j]; //#21629
        var _aR = $k[--$j] * _aP; //#21629
        $k[$j++] = $f((_aR % 2) + (_aR % 3)); //#21629
    }, function() {
        var _aS = $k[--$j]; //#21630
        var _aU = $k[--$j] * _aS; //#21630
        $k[$j++] = ($f((_aU % 2) + (_aU % 3))) % 2; //#21630
    }, function() {
        var _aV = $k[--$j]; //#21631
        var _aW = $k[--$j]; //#21631
        $k[$j++] = ($f(((_aW * _aV) % 3) + ($f(_aW + _aV) % 2))) % 2; //#21631
    }]); //#21631
    var _ai = $a([function() {
        var _aY = $k[--$j]; //#21634
        var _aZ = $k[--$j]; //#21634
        $k[$j++] = _aY; //#21634
        $k[$j++] = _aZ; //#21634
        $j--; //#21634
        var _aa = $k[--$j]; //#21634
        $k[$j++] = _aa % 2; //#21634
    }, function() {
        var _ab = $k[--$j]; //#21635
        var _ac = $k[--$j]; //#21635
        $k[$j++] = ((~~(_ab / 2)) + (~~(_ac / 3))) % 2; //#21635
    }, function() {
        var _ad = $k[--$j]; //#21636
        var _af = $k[--$j] * _ad; //#21636
        $k[$j++] = ($f((_af % 2) + (_af % 3))) % 2; //#21636
    }, function() {
        var _ag = $k[--$j]; //#21637
        var _ah = $k[--$j]; //#21637
        $k[$j++] = ($f(((_ah * _ag) % 3) + ($f(_ah + _ag) % 2))) % 2; //#21637
    }]); //#21637
    var _al = $a([function() {
        var _aj = $k[--$j]; //#21640
        var _ak = $k[--$j]; //#21640
        $k[$j++] = ((~~(_aj / 2)) + (~~(_ak / 3))) % 2; //#21640
    }]); //#21640
    var _am = new Map([
        ["full", _aX],
        ["micro", _ai],
        ["rmqr", _al]
    ]); //#21640
    $_.maskfuncs = $get(_am, $_.format); //#21642
    if ($_.mask != -1) { //#21646
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask - 1)]); //#21644
        $_.bestmaskval = $_.mask - 1; //#21645
    } //#21645
    $_.masks = $a($_.maskfuncs.length); //#21647
    for (var _az = 0, _ay = $_.masks.length - 1; _az <= _ay; _az += 1) { //#21661
        $_.m = _az; //#21649
        $_.mask = $a($_.rows * $_.cols); //#21650
        for (var _b5 = 0, _b4 = $f($_.rows - 1); _b5 <= _b4; _b5 += 1) { //#21659
            $_.j = _b5; //#21652
            for (var _b8 = 0, _b7 = $f($_.cols - 1); _b8 <= _b7; _b8 += 1) { //#21658
                $_.i = _b8; //#21654
                $k[$j++] = $_.i; //#21655
                $k[$j++] = $_.j; //#21655
                if ($get($_.maskfuncs, $_.m)() === true) {
                    break;
                } //#21655
                var _bE = $k[--$j]; //#21655
                $k[$j++] = _bE == 0; //#21656
                $k[$j++] = $_.pixs; //#21656
                $k[$j++] = $_.i; //#21656
                $k[$j++] = $_.j; //#21656
                $_.qmv(); //#21656
                var _bI = $k[--$j]; //#21656
                var _bK = $get($k[--$j], _bI); //#21656
                var _bL = $k[--$j]; //#21656
                var _bM = (_bL && (_bK == -1)) ? 1 : 0; //#21656
                $k[$j++] = _bM; //#21657
                $k[$j++] = $_.mask; //#21657
                $k[$j++] = $_.i; //#21657
                $k[$j++] = $_.j; //#21657
                $_.qmv(); //#21657
                $r(3, -1); //#21657
                var _bQ = $k[--$j]; //#21657
                var _bR = $k[--$j]; //#21657
                $put($k[--$j], _bR, _bQ); //#21657
            } //#21657
        } //#21657
        $put($_.masks, $_.m, $_.mask); //#21660
    } //#21660
    var _bY = $ne($_.format, "rmqr") ? 1 : 2; //#21664
    $_.posx = $f($_.cols - _bY); //#21664
    $_.posy = $f($_.rows - 1); //#21665
    $_.dir = -1; //#21666
    $_.col = 1; //#21667
    $_.num = 0; //#21668
    for (;;) { //#21691
        if ($_.posx < 0) { //#21670
            break; //#21670
        } //#21670
        $k[$j++] = $_.pixs; //#21671
        $k[$j++] = $_.posx; //#21671
        $k[$j++] = $_.posy; //#21671
        $_.qmv(); //#21671
        var _be = $k[--$j]; //#21671
        if ($get($k[--$j], _be) == -1) { //#21675
            var _bj = $get($_.cws, ~~($_.num / 8)); //#21672
            var _bl = -(7 - ($_.num % 8)); //#21672
            $k[$j++] = ((_bl < 0 ? _bj >>> -_bl : _bj << _bl)) & 1; //#21673
            $k[$j++] = $_.pixs; //#21673
            $k[$j++] = $_.posx; //#21673
            $k[$j++] = $_.posy; //#21673
            $_.qmv(); //#21673
            $r(3, -1); //#21673
            var _bp = $k[--$j]; //#21673
            var _bq = $k[--$j]; //#21673
            $put($k[--$j], _bq, _bp); //#21673
            $_.num = $_.num + 1; //#21674
        } //#21674
        if ($_.col == 1) { //#21688
            $_.col = 0; //#21677
            $_.posx = $f($_.posx - 1); //#21678
        } else { //#21688
            $_.col = 1; //#21680
            $_.posx = $f($_.posx + 1); //#21681
            $_.posy = $f($_.posy + $_.dir); //#21682
            if (($_.posy < 0) || ($_.posy >= $_.rows)) { //#21689
                $_.dir = $_.dir * -1; //#21684
                $_.posy = $f($_.posy + $_.dir); //#21685
                $_.posx = $f($_.posx - 2); //#21686
                if ($eq($_.format, "full") && ($_.posx == 6)) { //#21688
                    $_.posx = $f($_.posx - 1); //#21688
                } //#21688
            } //#21688
        } //#21688
    } //#21688
    $_.evalfulln1n3 = function() {
        $_.scrle = $k[--$j]; //#21695
        $k[$j++] = 'scr1'; //#21697
        $k[$j++] = 0; //#21697
        $forall($_.scrle, function() { //#21697
            var _cA = $k[--$j]; //#21697
            $k[$j++] = _cA; //#21697
            if (_cA >= 5) { //#21697
                var _cB = $k[--$j]; //#21697
                var _cD = $f($f($k[--$j] + _cB) - 2); //#21697
                $k[$j++] = _cD; //#21697
                $k[$j++] = _cD; //#21697
            } //#21697
            $j--; //#21697
        }); //#21697
        var _cE = $k[--$j]; //#21697
        $_[$k[--$j]] = _cE; //#21697
        $_.scr3 = 0; //#21699
        for (var _cI = 3, _cH = $_.scrle.length - 3; _cI <= _cH; _cI += 2) { //#21714
            $_.j = _cI; //#21701
            if (($get($_.scrle, $_.j) % 3) == 0) { //#21713
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#21703
                var _cR = $geti($_.scrle, $_.j - 2, 5); //#21704
                for (var _cS = 0, _cT = _cR.length; _cS < _cT; _cS++) { //#21704
                    $k[$j++] = $get(_cR, _cS) == $_.fact; //#21704
                } //#21704
                var _cW = $k[--$j]; //#21704
                var _cX = $k[--$j]; //#21704
                var _cY = $k[--$j]; //#21704
                $k[$j++] = $an(_cX, _cW); //#21704
                $k[$j++] = _cY; //#21704
                $j--; //#21704
                var _cZ = $k[--$j]; //#21704
                var _ca = $k[--$j]; //#21704
                if ($an($k[--$j], $an(_ca, _cZ))) { //#21712
                    if (($_.j == 3) || (($_.j + 4) >= $_.scrle.length)) { //#21709
                        $_.scr3 = $_.scr3 + 40; //#21706
                    } else { //#21709
                        if (($get($_.scrle, $_.j - 3) >= 4) || ($get($_.scrle, $_.j + 3) >= 4)) { //#21710
                            $_.scr3 = $_.scr3 + 40; //#21709
                        } //#21709
                    } //#21709
                } //#21709
            } //#21709
        } //#21709
        $k[$j++] = $_.scr1; //#21715
        $k[$j++] = $_.scr3; //#21715
    }; //#21715
    $_.evalfull = function() {
        $_.sym = $k[--$j]; //#21720
        $_.n1 = 0; //#21722
        $_.n2 = 0; //#21722
        $_.n3 = 0; //#21722
        $_.rle = $a($f($_.cols + 1)); //#21723
        $_.lastpairs = $a($_.cols); //#21724
        $_.thispairs = $a($_.cols); //#21725
        $_.colsadd1 = $f($_.cols + 1); //#21726
        for (var _cz = 0, _cy = $f($_.cols - 1); _cz <= _cy; _cz += 1) { //#21765
            $_.i = _cz; //#21728
            $k[$j++] = Infinity; //#21731
            var _d1 = $_.cols; //#21732
            $k[$j++] = 0; //#21734
            $k[$j++] = 0; //#21734
            for (var _d3 = $_.i, _d4 = _d1, _d2 = $f((_d1 * _d1) - 1); _d4 < 0 ? _d3 >= _d2 : _d3 <= _d2; _d3 += _d4) { //#21734
                var _d6 = $get($_.sym, _d3); //#21733
                var _d7 = $k[--$j]; //#21733
                $k[$j++] = _d6; //#21733
                if ($eq(_d7, _d6)) { //#21733
                    var _d8 = $k[--$j]; //#21733
                    var _d9 = $k[--$j]; //#21733
                    $k[$j++] = $f(_d9 + 1); //#21733
                    $k[$j++] = _d8; //#21733
                } else { //#21733
                    var _dA = $k[--$j]; //#21733
                    $k[$j++] = 1; //#21733
                    $k[$j++] = _dA; //#21733
                } //#21733
            } //#21733
            $j--; //#21735
            var _dC = $counttomark() + 2; //#21736
            $astore($geti($_.rle, 0, _dC - 2)); //#21736
            $_.evalfulln1n3(); //#21737
            $_.n3 = $f($k[--$j] + $_.n3); //#21737
            $_.n1 = $f($k[--$j] + $_.n1); //#21737
            $j--; //#21738
            $_.symrow = $geti($_.sym, $_.i * $_.cols, $_.cols); //#21741
            $k[$j++] = Infinity; //#21742
            var _dN = $_.symrow; //#21743
            $k[$j++] = 0; //#21745
            $k[$j++] = 0; //#21745
            for (var _dO = 0, _dP = _dN.length; _dO < _dP; _dO++) { //#21745
                var _dQ = $get(_dN, _dO); //#21745
                var _dR = $k[--$j]; //#21744
                $k[$j++] = _dQ; //#21744
                if ($eq(_dR, _dQ)) { //#21744
                    var _dS = $k[--$j]; //#21744
                    var _dT = $k[--$j]; //#21744
                    $k[$j++] = $f(_dT + 1); //#21744
                    $k[$j++] = _dS; //#21744
                } else { //#21744
                    var _dU = $k[--$j]; //#21744
                    $k[$j++] = 1; //#21744
                    $k[$j++] = _dU; //#21744
                } //#21744
            } //#21744
            $j--; //#21746
            var _dW = $counttomark() + 2; //#21747
            $astore($geti($_.rle, 0, _dW - 2)); //#21747
            $_.evalfulln1n3(); //#21748
            $_.n3 = $f($k[--$j] + $_.n3); //#21748
            $_.n1 = $f($k[--$j] + $_.n1); //#21748
            $j--; //#21749
            var _dc = $_.thispairs; //#21752
            $_.thispairs = $_.lastpairs; //#21752
            $_.lastpairs = _dc; //#21752
            var _dg = ($get($_.symrow, 0) == 1) ? 0 : 1; //#21753
            var _dh = $_.symrow; //#21754
            $k[$j++] = _dg; //#21754
            for (var _di = 0, _dj = _dh.length; _di < _dj; _di++) { //#21754
                var _dk = $get(_dh, _di); //#21754
                var _dl = $k[--$j]; //#21754
                $k[$j++] = $f(_dl + _dk); //#21754
                $k[$j++] = _dk; //#21754
            } //#21754
            $j--; //#21755
            $astore($_.thispairs); //#21756
            $j--; //#21756
            if ($_.i > 0) { //#21763
                $k[$j++] = Infinity; //#21758
                $aload($_.lastpairs); //#21759
                $aload($_.thispairs); //#21759
                $k[$j++] = $_.n2; //#21760
                for (var _ds = 0, _dt = $_.cols; _ds < _dt; _ds++) { //#21760
                    var _du = $k[--$j]; //#21760
                    var _dv = $k[--$j]; //#21760
                    $k[$j++] = _du; //#21760
                    $k[$j++] = _dv; //#21760
                    var _dx = $k[$j - 1 - $_.colsadd1]; //#21760
                    if (($f($k[--$j] + _dx) & 3) == 0) { //#21760
                        var _dz = $k[--$j]; //#21760
                        $k[$j++] = $f(_dz + 3); //#21760
                    } //#21760
                } //#21760
                $_.n2 = $k[--$j]; //#21761
                $cleartomark(); //#21762
            } //#21762
        } //#21762
        $k[$j++] = 'dark'; //#21768
        $k[$j++] = 0; //#21768
        $forall($_.sym, function() { //#21768
            var _e2 = $k[--$j]; //#21768
            var _e3 = $k[--$j]; //#21768
            $k[$j++] = $f(_e3 + _e2); //#21768
        }); //#21768
        var _e4 = $k[--$j]; //#21768
        $_[$k[--$j]] = _e4; //#21768
        var _e7 = $_.cols; //#21769
        $_.n4 = (~~((Math.abs($f((($_.dark * 100) / (_e7 * _e7)) - 50))) / 5)) * 10; //#21769
        $k[$j++] = $f(($f($f($_.n1 + $_.n2) + $_.n3)) + $_.n4); //#21771
    }; //#21771
    $_.evalmicro = function() {
        $_.sym = $k[--$j]; //#21776
        $_.dkrhs = 0; //#21777
        $_.dkbot = 0; //#21777
        for (var _eF = 1, _eE = $f($_.cols - 1); _eF <= _eE; _eF += 1) { //#21782
            $_.i = _eF; //#21779
            $k[$j++] = 'dkrhs'; //#21780
            $k[$j++] = $_.dkrhs; //#21780
            $k[$j++] = $_.sym; //#21780
            $k[$j++] = $f($_.cols - 1); //#21780
            $k[$j++] = $_.i; //#21780
            $_.qmv(); //#21780
            var _eK = $k[--$j]; //#21780
            var _eM = $get($k[--$j], _eK); //#21780
            var _eN = $k[--$j]; //#21780
            $_[$k[--$j]] = $f(_eN + _eM); //#21780
            $k[$j++] = 'dkbot'; //#21781
            $k[$j++] = $_.dkbot; //#21781
            $k[$j++] = $_.sym; //#21781
            $k[$j++] = $_.i; //#21781
            $k[$j++] = $f($_.cols - 1); //#21781
            $_.qmv(); //#21781
            var _eT = $k[--$j]; //#21781
            var _eV = $get($k[--$j], _eT); //#21781
            var _eW = $k[--$j]; //#21781
            $_[$k[--$j]] = $f(_eW + _eV); //#21781
        } //#21781
        if ($_.dkrhs <= $_.dkbot) { //#21786
            $k[$j++] = -(($_.dkrhs * 16) + $_.dkbot); //#21784
        } else { //#21786
            $k[$j++] = -(($_.dkbot * 16) + $_.dkrhs); //#21786
        } //#21786
    }; //#21786
    $_.bestscore = 999999999; //#21791
    for (var _eg = 0, _ef = $_.masks.length - 1; _eg <= _ef; _eg += 1) { //#21813
        $_.m = _eg; //#21793
        $_.masksym = $a($_.rows * $_.cols); //#21794
        for (var _en = 0, _em = $f(($_.rows * $_.cols) - 1); _en <= _em; _en += 1) { //#21798
            $_.i = _en; //#21796
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#21797
        } //#21797
        if ($_.masks.length != 1) { //#21811
            if ($eq($_.format, "full")) { //#21803
                $k[$j++] = $_.masksym; //#21801
                $_.evalfull(); //#21801
                $_.score = $k[--$j]; //#21801
            } else { //#21803
                $k[$j++] = $_.masksym; //#21803
                $_.evalmicro(); //#21803
                $_.score = $k[--$j]; //#21803
            } //#21803
            if ($_.score < $_.bestscore) { //#21809
                $_.bestsym = $_.masksym; //#21806
                $_.bestmaskval = $_.m; //#21807
                $_.bestscore = $_.score; //#21808
            } //#21808
        } else { //#21811
            $_.bestsym = $_.masksym; //#21811
        } //#21811
    } //#21811
    $_.pixs = $_.bestsym; //#21814
    if ($eq($_.format, "full")) { //#21819
        $k[$j++] = $_.pixs; //#21818
        $k[$j++] = 8; //#21818
        $k[$j++] = $f($_.cols - 8); //#21818
        $_.qmv(); //#21818
        var _fE = $k[--$j]; //#21818
        $put($k[--$j], _fE, 1); //#21818
    } //#21818
    if (!bwipp_qrcode.__21855__) { //#21855
        $_ = Object.create($_); //#21855
        $_.fmtvalsfull = $a([21522, 20773, 24188, 23371, 17913, 16590, 20375, 19104, 30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998, 5769, 5054, 7399, 6608, 1890, 597, 3340, 2107, 13663, 12392, 16177, 14854, 9396, 8579, 11994, 11245]); //#21828
        $_.fmtvalsmicro = $a([17477, 16754, 20011, 19228, 21934, 20633, 24512, 23287, 26515, 25252, 28157, 26826, 30328, 29519, 31766, 31009, 1758, 1001, 3248, 2439, 5941, 4610, 7515, 6252, 9480, 8255, 12134, 10833, 13539, 12756, 16013, 15290]); //#21834
        $_.fmtvalsrmqr1 = $a([129714, 124311, 121821, 115960, 112748, 108361, 104707, 99878, 98062, 90155, 89697, 82244, 81360, 74485, 72895, 66458, 61898, 61167, 53413, 53120, 45844, 44081, 37499, 36190, 29814, 27475, 21785, 19004, 13992, 10637, 6087, 2274, 258919, 257090, 250376, 249133, 242105, 241308, 233686, 233459, 227035, 223742, 219060, 215185, 209925, 207648, 202090, 199247, 194591, 190266, 186736, 181845, 178881, 173540, 170926, 165003, 163235, 156294, 154828, 148457, 147325, 139352, 138770, 131383]); //#21844
        $_.fmtvalsrmqr2 = $a([133755, 136542, 142100, 144433, 149669, 153472, 158154, 161519, 167879, 168162, 175784, 176525, 183577, 184892, 191606, 193363, 196867, 204326, 204908, 212809, 213981, 220408, 221874, 228759, 230591, 236442, 239056, 244469, 247393, 252228, 255758, 260139, 942, 7307, 8897, 15844, 16752, 24149, 24607, 32570, 34322, 39223, 42877, 47192, 50380, 56297, 58787, 64134, 67798, 71667, 76217, 79516, 84488, 87341, 93031, 95298, 101738, 102991, 109573, 111392, 118708, 118929, 126683, 127486]); //#21854
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21854
        bwipp_qrcode.__21855__ = 1; //#21854
        $_ = Object.getPrototypeOf($_); //#21854
    } //#21854
    if ($eq($_.format, "full")) { //#21865
        $_.ecid = $get($a([1, 0, 3, 2]), $_.eclval); //#21857
        $_.fmtval = $get($_.fmtvalsfull, ($_.ecid << 3) + $_.bestmaskval); //#21858
        for (var _fV = 0, _fU = $_.formatmap.length - 1; _fV <= _fU; _fV += 1) { //#21864
            $_.i = _fV; //#21860
            $forall($get($_.formatmap, $_.i), function() { //#21863
                var _fa = $k[--$j]; //#21862
                $k[$j++] = $_.pixs; //#21862
                $aload(_fa); //#21862
                $_.qmv(); //#21862
                var _fb = $_.fmtval; //#21862
                var _fd = -(14 - $_.i); //#21862
                var _fe = $k[--$j]; //#21862
                $put($k[--$j], _fe, ((_fd < 0 ? _fb >>> -_fd : _fb << _fd)) & 1); //#21862
            }); //#21862
        } //#21862
    } //#21862
    if ($eq($_.format, "micro")) { //#21873
        $_.symid = $get($get($a([$a([0]), $a([1, 2]), $a([3, 4]), $a([5, 6, 7])]), ~~($f($_.cols - 11) / 2)), $_.eclval); //#21867
        $_.fmtval = $get($_.fmtvalsmicro, ($_.symid << 2) + $_.bestmaskval); //#21868
        for (var _fw = 0, _fv = $_.formatmap.length - 1; _fw <= _fv; _fw += 1) { //#21872
            $_.i = _fw; //#21870
            $k[$j++] = $_.pixs; //#21871
            $aload($get($get($_.formatmap, $_.i), 0)); //#21871
            $_.qmv(); //#21871
            var _g2 = $_.fmtval; //#21871
            var _g4 = -(14 - $_.i); //#21871
            var _g5 = $k[--$j]; //#21871
            $put($k[--$j], _g5, ((_g4 < 0 ? _g2 >>> -_g4 : _g2 << _g4)) & 1); //#21871
        } //#21871
    } //#21871
    if ($eq($_.format, "rmqr")) { //#21883
        $_.fmtvalu = ($get($a([-1, 0, -1, 1]), $_.eclval) << 5) + $_.verind; //#21875
        $_.fmtval1 = $get($_.fmtvalsrmqr1, $_.fmtvalu); //#21876
        $_.fmtval2 = $get($_.fmtvalsrmqr2, $_.fmtvalu); //#21877
        for (var _gK = 0, _gJ = $_.formatmap.length - 1; _gK <= _gJ; _gK += 1) { //#21882
            $_.i = _gK; //#21879
            $k[$j++] = $_.pixs; //#21880
            $aload($get($get($_.formatmap, $_.i), 0)); //#21880
            $_.qmv(); //#21880
            var _gQ = $_.fmtval1; //#21880
            var _gS = -(17 - $_.i); //#21880
            var _gT = $k[--$j]; //#21880
            $put($k[--$j], _gT, ((_gS < 0 ? _gQ >>> -_gS : _gQ << _gS)) & 1); //#21880
            $k[$j++] = $_.pixs; //#21881
            $aload($get($get($_.formatmap, $_.i), 1)); //#21881
            $_.qmv(); //#21881
            var _ga = $_.fmtval2; //#21881
            var _gc = -(17 - $_.i); //#21881
            var _gd = $k[--$j]; //#21881
            $put($k[--$j], _gd, ((_gc < 0 ? _ga >>> -_gc : _ga << _gc)) & 1); //#21881
        } //#21881
    } //#21881
    if (!bwipp_qrcode.__21894__) { //#21894
        $_ = Object.create($_); //#21894
        $_.vervals = $a([31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784, 68472, 70749, 76311, 79154, 84390, 87683, 92361, 96236, 102084, 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589, 136944, 141498, 145311, 150283, 152622, 158308, 161089, 167017]); //#21893
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_qrcode.$ctx[id] = $_[id]); //#21893
        bwipp_qrcode.__21894__ = 1; //#21893
        $_ = Object.getPrototypeOf($_); //#21893
    } //#21893
    if ($eq($_.format, "full") && ($_.cols >= 45)) { //#21903
        $_.verval = $get($_.vervals, (~~($f($_.cols - 17) / 4)) - 7); //#21896
        for (var _go = 0, _gn = $_.versionmap.length - 1; _go <= _gn; _go += 1) { //#21902
            $_.i = _go; //#21898
            $forall($get($_.versionmap, $_.i), function() { //#21901
                var _gt = $k[--$j]; //#21900
                $k[$j++] = $_.pixs; //#21900
                $forall(_gt); //#21900
                $_.qmv(); //#21900
                var _gu = $_.verval; //#21900
                var _gw = -(17 - $_.i); //#21900
                var _gx = $k[--$j]; //#21900
                $put($k[--$j], _gx, ((_gw < 0 ? _gu >>> -_gw : _gu << _gw)) & 1); //#21900
            }); //#21900
        } //#21900
    } //#21900
    $k[$j++] = Infinity; //#21906
    $k[$j++] = 'ren'; //#21913
    $k[$j++] = 'renmatrix'; //#21913
    $k[$j++] = 'pixs'; //#21913
    $k[$j++] = $_.pixs; //#21913
    $k[$j++] = 'pixx'; //#21913
    $k[$j++] = $_.cols; //#21913
    $k[$j++] = 'pixy'; //#21913
    $k[$j++] = $_.rows; //#21913
    $k[$j++] = 'height'; //#21913
    $k[$j++] = ($_.rows * 2) / 72; //#21913
    $k[$j++] = 'width'; //#21913
    $k[$j++] = ($_.cols * 2) / 72; //#21913
    $k[$j++] = 'borderleft'; //#21913
    if ($eq($_.format, "full")) { //#21913
        $k[$j++] = 4; //#21913
    } else { //#21913
        $k[$j++] = 2; //#21913
    } //#21913
    $k[$j++] = 'borderright'; //#21914
    if ($eq($_.format, "full")) { //#21914
        $k[$j++] = 4; //#21914
    } else { //#21914
        $k[$j++] = 2; //#21914
    } //#21914
    $k[$j++] = 'bordertop'; //#21915
    if ($eq($_.format, "full")) { //#21915
        $k[$j++] = 4; //#21915
    } else { //#21915
        $k[$j++] = 2; //#21915
    } //#21915
    $k[$j++] = 'borderbottom'; //#21916
    if ($eq($_.format, "full")) { //#21916
        $k[$j++] = 4; //#21916
    } else { //#21916
        $k[$j++] = 2; //#21916
    } //#21916
    $k[$j++] = 'opt'; //#21917
    $k[$j++] = $_.options; //#21917
    var _h9 = $d(); //#21917
    $k[$j++] = _h9; //#21920
    if (!$_.dontdraw) { //#21920
        bwipp_renmatrix(); //#21920
    } //#21920
    $_ = Object.getPrototypeOf($_); //#21922
    $_ = Object.getPrototypeOf($_); //#21924
} //bwipp_qrcode
function bwipp_swissqrcode() {
    $_ = Object.create($_); //#21954
    $_.dontdraw = false; //#21957
    $_.parse = false; //#21958
    $k[$j++] = $_; //#21960
    bwipp_processoptions(); //#21960
    $_.options = $k[--$j]; //#21960
    $_.barcode = $k[--$j]; //#21961
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#21967
    $_.fncvals = _3; //#21968
    $k[$j++] = 'barcode'; //#21969
    $k[$j++] = $_.barcode; //#21969
    $k[$j++] = $_.fncvals; //#21969
    bwipp_parseinput(); //#21969
    var _6 = $k[--$j]; //#21969
    $_[$k[--$j]] = _6; //#21969
    $_.barlen = $_.barcode.length; //#21970
    delete $_.options["parse"]; //#21971
    if ($_.barcode.length > 997) { //#21976
        $k[$j++] = 'bwipp.swissqrcodeBadLength#21975'; //#21975
        $k[$j++] = "Swiss QR Code input must not exceed 997 digits"; //#21975
        bwipp_raiseerror(); //#21975
    } //#21975
    $put($_.options, "dontdraw", true); //#21979
    $k[$j++] = 'args'; //#21980
    $k[$j++] = $_.barcode; //#21980
    $k[$j++] = $_.options; //#21980
    bwipp_qrcode(); //#21980
    var _E = $k[--$j]; //#21980
    $_[$k[--$j]] = _E; //#21980
    $put($_.args, "opt", $_.options); //#21982
    $k[$j++] = $_.args; //#22051
    if (!$_.dontdraw) { //#22051
        $$.save(); //#21996
        var _K = $$.currpos(); //#21997
        $$.translate(_K.x, _K.y); //#21997
        var _L = 72 / 25.4; //#21998
        $$.scale(_L, _L); //#21998
        $$.save(); //#22001
        $$.newpath(); //#22002
        $$.moveto(0, 0); //#22003
        $$.lineto(46, 0); //#22004
        $$.lineto(46, 46); //#22005
        $$.lineto(0, 46); //#22006
        $$.closepath(); //#22007
        $$.moveto(19.5, 19.5); //#22008
        $$.lineto(19.5, 26.5); //#22009
        $$.lineto(26.5, 26.5); //#22010
        $$.lineto(26.5, 19.5); //#22011
        $$.closepath(); //#22012
        $$.clip(); //#22013
        $$.save(); //#22016
        $$.moveto(0, 0); //#22017
        var _O = (46 / $get($_.args, "pixx")) / 2; //#22018
        $$.scale(_O, _O); //#22018
        bwipp_renmatrix(); //#22019
        $$.restore(); //#22020
        $$.restore(); //#22022
        $$.translate(19.5, 19.5); //#22025
        var _P = 7 / 83; //#22026
        $$.scale(_P, _P); //#22026
        $$.newpath(); //#22028
        $$.moveto(6, 6); //#22029
        $$.lineto(6, 77); //#22030
        $$.lineto(77, 77); //#22031
        $$.lineto(77, 6); //#22032
        $$.closepath(); //#22033
        $$.moveto(49, 18); //#22034
        $$.lineto(49, 34); //#22035
        $$.lineto(65, 34); //#22036
        $$.lineto(65, 49); //#22037
        $$.lineto(49, 49); //#22038
        $$.lineto(49, 65); //#22039
        $$.lineto(34, 65); //#22040
        $$.lineto(34, 49); //#22041
        $$.lineto(18, 49); //#22042
        $$.lineto(18, 34); //#22043
        $$.lineto(34, 34); //#22044
        $$.lineto(34, 18); //#22045
        $$.closepath(); //#22046
        $$.setrgbcolor(0, 0, 0); //#22047
        $$.fill(); //#22047
        $$.restore(); //#22049
    } //#22049
    $_ = Object.getPrototypeOf($_); //#22053
} //bwipp_swissqrcode
function bwipp_microqrcode() {
    $_ = Object.create($_); //#22082
    $_.dontdraw = false; //#22085
    $k[$j++] = $_; //#22087
    bwipp_processoptions(); //#22087
    $_.options = $k[--$j]; //#22087
    $_.barcode = $k[--$j]; //#22088
    $put($_.options, "dontdraw", true); //#22091
    $put($_.options, "format", "micro"); //#22092
    $k[$j++] = 'args'; //#22094
    $k[$j++] = $_.barcode; //#22094
    $k[$j++] = $_.options; //#22094
    bwipp_qrcode(); //#22094
    var _6 = $k[--$j]; //#22094
    $_[$k[--$j]] = _6; //#22094
    $put($_.args, "opt", $_.options); //#22096
    $k[$j++] = $_.args; //#22099
    if (!$_.dontdraw) { //#22099
        bwipp_renmatrix(); //#22099
    } //#22099
    $_ = Object.getPrototypeOf($_); //#22101
} //bwipp_microqrcode
function bwipp_rectangularmicroqrcode() {
    $_ = Object.create($_); //#22130
    $_.dontdraw = false; //#22133
    $k[$j++] = $_; //#22135
    bwipp_processoptions(); //#22135
    $_.options = $k[--$j]; //#22135
    $_.barcode = $k[--$j]; //#22136
    $put($_.options, "dontdraw", true); //#22139
    $put($_.options, "format", "rmqr"); //#22140
    $k[$j++] = 'args'; //#22142
    $k[$j++] = $_.barcode; //#22142
    $k[$j++] = $_.options; //#22142
    bwipp_qrcode(); //#22142
    var _6 = $k[--$j]; //#22142
    $_[$k[--$j]] = _6; //#22142
    $put($_.args, "opt", $_.options); //#22144
    $k[$j++] = $_.args; //#22147
    if (!$_.dontdraw) { //#22147
        bwipp_renmatrix(); //#22147
    } //#22147
    $_ = Object.getPrototypeOf($_); //#22149
} //bwipp_rectangularmicroqrcode
function bwipp_maxicode() {
    $_ = Object.create($_); //#22180
    $_.dontdraw = false; //#22183
    $_.mode = -1; //#22184
    $_.sam = -1; //#22185
    $_.parse = false; //#22186
    $_.parsefnc = false; //#22187
    $_.legacyencoder = false; //#22188
    $k[$j++] = $_; //#22190
    bwipp_processoptions(); //#22190
    $_.options = $k[--$j]; //#22190
    $_.barcode = $k[--$j]; //#22191
    if ($eq($_.barcode, "")) { //#22195
        $k[$j++] = 'bwipp.maxicodeEmptyData#22194'; //#22194
        $k[$j++] = "The data must not be empty"; //#22194
        bwipp_raiseerror(); //#22194
    } //#22194
    if (($_.mode != -1) && (($_.mode < 2) || ($_.mode > 6))) { //#22199
        $k[$j++] = 'bwipp.maxicodeBadMode#22198'; //#22198
        $k[$j++] = "Mode must be 2 to 6"; //#22198
        bwipp_raiseerror(); //#22198
    } //#22198
    if ($_.sam != -1) { //#22211
        $k[$j++] = true; //#22207
        for (var _7 = 0, _8 = 1; _7 < _8; _7++) { //#22207
            var _9 = $_.sam; //#22204
            if ((_9 < 12) || (_9 > 88)) { //#22204
                $j--; //#22204
                $k[$j++] = false; //#22204
                break; //#22204
            } //#22204
            var _B = $_.sam % 10; //#22205
            if ((_B < 2) || (_B > 8)) { //#22205
                $j--; //#22205
                $k[$j++] = false; //#22205
                break; //#22205
            } //#22205
            if ((~~($_.sam / 10)) > ($_.sam % 10)) { //#22206
                $j--; //#22206
                $k[$j++] = false; //#22206
                break; //#22206
            } //#22206
        } //#22206
        if ($nt($k[--$j])) { //#22210
            $k[$j++] = 'bwipp.maxicodeBadSAM#22209'; //#22209
            $k[$j++] = "SAM must be formatted as \"NM\" for Nth of M symbols, from 2 to 8 symbols"; //#22209
            bwipp_raiseerror(); //#22209
        } //#22209
    } //#22209
    $_.encoding = "new"; //#22213
    if ($_.legacyencoder) { //#22214
        $_.encoding = "legacy"; //#22214
    } //#22214
    bwipp_loadctx(bwipp_maxicode); //#22216
    var _I = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true]
    ]); //#22222
    $_.fncvals = _I; //#22224
    $k[$j++] = 'msg'; //#22225
    $k[$j++] = $_.barcode; //#22225
    $k[$j++] = $_.fncvals; //#22225
    bwipp_parseinput(); //#22225
    var _L = $k[--$j]; //#22225
    $_[$k[--$j]] = _L; //#22225
    $_.msglen = $_.msg.length; //#22226
    if (($_.mode == 2) || ($_.mode == 3)) { //#22321
        $_.barcode = $s($_.msglen); //#22232
        $_.barlen = $_.msglen; //#22233
        for (var _V = 0, _U = $_.msglen - 1; _V <= _U; _V += 1) { //#22238
            $_.i = _V; //#22235
            if ($get($_.msg, $_.i) < 0) { //#22236
                $_.barlen = $_.i; //#22236
                break; //#22236
            } //#22236
            $put($_.barcode, $_.i, $get($_.msg, $_.i)); //#22237
        } //#22237
        $_.difflen = $_.msglen - $_.barlen; //#22239
        $_.fid = ""; //#22242
        if ($_.barlen >= 9) { //#22250
            var _i = $_.barcode; //#22244
            var _k = $get(_i, 7); //#22245
            var _l = $get(_i, 8); //#22246
            if ($eq($geti(_i, 0, 7), "\x5b\x29\x3e\x1e\x30\x31\x1d") && (((_k >= 48) && (_k <= 57)) && ((_l >= 48) && (_l <= 57)))) { //#22249
                $_.fid = $geti($_.barcode, 0, 9); //#22247
                $_.barcode = $geti($_.barcode, 9, $_.barlen - 9); //#22248
            } //#22248
        } //#22248
        $search($_.barcode, "\x1d"); //#22254
        if ($k[--$j]) { //#22281
            $_.pcode = $k[--$j]; //#22255
            $j--; //#22255
            if ($_.mode == 2) { //#22277
                $k[$j++] = true; //#22261
                for (var _v = 0, _w = 1; _v < _w; _v++) { //#22261
                    var _y = $_.pcode.length; //#22259
                    if ((_y > 9) || (_y == 0)) { //#22259
                        $j--; //#22259
                        $k[$j++] = false; //#22259
                        break; //#22259
                    } //#22259
                    $forall($_.pcode, function() { //#22260
                        var _10 = $k[--$j]; //#22260
                        if ((_10 < 48) || (_10 > 57)) { //#22260
                            $j--; //#22260
                            $k[$j++] = false; //#22260
                            return true; //#22260
                        } //#22260
                    }); //#22260
                } //#22260
                if ($nt($k[--$j])) { //#22264
                    $j--; //#22263
                    $k[$j++] = 'bwipp.maxicodeBadMode2PostCode#22263'; //#22263
                    $k[$j++] = "A mode 2 postcode must not be empty or exceed 9 digits"; //#22263
                    bwipp_raiseerror(); //#22263
                } //#22263
            } else { //#22277
                $k[$j++] = true; //#22275
                for (var _12 = 0, _13 = 1; _12 < _13; _12++) { //#22275
                    var _15 = $_.pcode.length; //#22268
                    if ((_15 > 6) || (_15 == 0)) { //#22268
                        $j--; //#22268
                        $k[$j++] = false; //#22268
                        break; //#22268
                    } //#22268
                    $forall($_.pcode, function() { //#22274
                        var _17 = $k[--$j]; //#22270
                        if (!((_17 == 32) || (((_17 >= 34) && (_17 <= 58)) || ((_17 >= 65) && (_17 <= 90))))) { //#22273
                            $j--; //#22273
                            $k[$j++] = false; //#22273
                            return true; //#22273
                        } //#22273
                    }); //#22273
                } //#22273
                if ($nt($k[--$j])) { //#22278
                    $j--; //#22277
                    $k[$j++] = 'bwipp.maxicodeBadMode3PostCode#22277'; //#22277
                    $k[$j++] = "A mode 3 postcode must not be empty or exceed 6 characters"; //#22277
                    bwipp_raiseerror(); //#22277
                } //#22277
            } //#22277
        } else { //#22281
            $j--; //#22281
            $k[$j++] = 'bwipp.maxicodeExpectedPostCode#22281'; //#22281
            $k[$j++] = "Expected postcode followed by group separator character"; //#22281
            bwipp_raiseerror(); //#22281
        } //#22281
        $search($k[--$j], "\x1d"); //#22283
        if ($k[--$j]) { //#22294
            $_.ccode = $k[--$j]; //#22284
            $j--; //#22284
            $k[$j++] = true; //#22289
            for (var _1C = 0, _1D = 1; _1C < _1D; _1C++) { //#22289
                if ($_.ccode.length != 3) { //#22287
                    $j--; //#22287
                    $k[$j++] = false; //#22287
                    break; //#22287
                } //#22287
                $forall($_.ccode, function() { //#22288
                    var _1G = $k[--$j]; //#22288
                    if ((_1G < 48) || (_1G > 57)) { //#22288
                        $j--; //#22288
                        $k[$j++] = false; //#22288
                        return true; //#22288
                    } //#22288
                }); //#22288
            } //#22288
            if ($nt($k[--$j])) { //#22292
                $j--; //#22291
                $k[$j++] = 'bwipp.maxicodeBadCountryCode#22291'; //#22291
                $k[$j++] = "Country code must be three digits"; //#22291
                bwipp_raiseerror(); //#22291
            } //#22291
        } else { //#22294
            $j--; //#22294
            $k[$j++] = 'bwipp.maxicodeExpectedCountryCode#22294'; //#22294
            $k[$j++] = "Expected country code followed by group separator character"; //#22294
            bwipp_raiseerror(); //#22294
        } //#22294
        $search($k[--$j], "\x1d"); //#22296
        if ($k[--$j]) { //#22307
            $_.scode = $k[--$j]; //#22297
            $j--; //#22297
            $k[$j++] = true; //#22302
            for (var _1L = 0, _1M = 1; _1L < _1M; _1L++) { //#22302
                if ($_.scode.length != 3) { //#22300
                    $j--; //#22300
                    $k[$j++] = false; //#22300
                    break; //#22300
                } //#22300
                $forall($_.scode, function() { //#22301
                    var _1P = $k[--$j]; //#22301
                    if ((_1P < 48) || (_1P > 57)) { //#22301
                        $j--; //#22301
                        $k[$j++] = false; //#22301
                        return true; //#22301
                    } //#22301
                }); //#22301
            } //#22301
            if ($nt($k[--$j])) { //#22305
                $j--; //#22304
                $k[$j++] = 'bwipp.maxicodeBadServiceClass#22304'; //#22304
                $k[$j++] = "Service class must be three digits"; //#22304
                bwipp_raiseerror(); //#22304
            } //#22304
        } else { //#22307
            $j--; //#22307
            $k[$j++] = 'bwipp.maxicodeExpectedServiceClass#22307'; //#22307
            $k[$j++] = "Expected service class followed by group separator character"; //#22307
            bwipp_raiseerror(); //#22307
        } //#22307
        $_.barcode = $k[--$j]; //#22309
        var _1U = $s($_.barcode.length + $_.fid.length); //#22312
        $puti(_1U, 0, $_.fid); //#22313
        $puti(_1U, $_.fid.length, $_.barcode); //#22314
        $_.barcode = _1U; //#22315
        $_.barlen = $_.barcode.length; //#22316
        $k[$j++] = Infinity; //#22318
        var _1Z = $_.barcode; //#22318
        for (var _1a = 0, _1b = _1Z.length; _1a < _1b; _1a++) { //#22318
            $k[$j++] = $get(_1Z, _1a); //#22318
        } //#22318
        $aload($geti($_.msg, $_.msglen - $_.difflen, $_.difflen)); //#22318
        $_.msg = $a(); //#22318
        $_.msglen = $_.msg.length; //#22319
    } //#22319
    if (!bwipp_maxicode.__22417__) { //#22417
        $_ = Object.create($_); //#22417
        $_.eci = -1; //#22325
        $_.pad = -2; //#22325
        $_.ns = -3; //#22325
        $_.la = -4; //#22326
        $_.lb = -5; //#22326
        $_.sa = -6; //#22327
        $_.sb = -7; //#22327
        $_.sc = -8; //#22327
        $_.sd = -9; //#22327
        $_.se = -10; //#22327
        $_.sa2 = -11; //#22328
        $_.sa3 = -12; //#22328
        $_.lkc = -13; //#22329
        $_.lkd = -14; //#22329
        $_.lke = -15; //#22329
        $_.pd2 = -16; //#22330
        $_.pd3 = -17; //#22330
        $_.charmaps = $a([$a([13, "`", 192, 224, 0]), $a(["A", "a", 193, 225, 1]), $a(["B", "b", 194, 226, 2]), $a(["C", "c", 195, 227, 3]), $a(["D", "d", 196, 228, 4]), $a(["E", "e", 197, 229, 5]), $a(["F", "f", 198, 230, 6]), $a(["G", "g", 199, 231, 7]), $a(["H", "h", 200, 232, 8]), $a(["I", "i", 201, 233, 9]), $a(["J", "j", 202, 234, 10]), $a(["K", "k", 203, 235, 11]), $a(["L", "l", 204, 236, 12]), $a(["M", "m", 205, 237, 13]), $a(["N", "n", 206, 238, 14]), $a(["O", "o", 207, 239, 15]), $a(["P", "p", 208, 240, 16]), $a(["Q", "q", 209, 241, 17]), $a(["R", "r", 210, 242, 18]), $a(["S", "s", 211, 243, 19]), $a(["T", "t", 212, 244, 20]), $a(["U", "u", 213, 245, 21]), $a(["V", "v", 214, 246, 22]), $a(["W", "w", 215, 247, 23]), $a(["X", "x", 216, 248, 24]), $a(["Y", "y", 217, 249, 25]), $a(["Z", "z", 218, 250, 26]), $a([$_.eci, $_.eci, $_.eci, $_.eci, $_.eci]), $a([28, 28, 28, 28, $_.pad]), $a([29, 29, 29, 29, $_.pd2]), $a([30, 30, 30, 30, 27]), $a([$_.ns, $_.ns, $_.ns, $_.ns, $_.ns]), $a([" ", "{", 219, 251, 28]), $a([$_.pad, $_.pad, 220, 252, 29]), $a(["\"", "}", 221, 253, 30]), $a(["#", "~", 222, 254, 31]), $a(["$", 127, 223, 255, 159]), $a(["%", ";", 170, 161, 160]), $a(["&", "<", 172, 168, 162]), $a(["'", "=", 177, 171, 163]), $a([40, ">", 178, 175, 164]), $a([41, "?", 179, 176, 165]), $a(["*", "[", 181, 180, 166]), $a(["+", 92, 185, 183, 167]), $a([",", "]", 186, 184, 169]), $a(["-", "^", 188, 187, 173]), $a([".", "_", 189, 191, 174]), $a(["/", " ", 190, 138, 182]), $a(["0", ",", 128, 139, 149]), $a(["1", ".", 129, 140, 150]), $a(["2", "/", 130, 141, 151]), $a(["3", ":", 131, 142, 152]), $a(["4", "@", 132, 143, 153]), $a(["5", "!", 133, 144, 154]), $a(["6", "|", 134, 145, 155]), $a(["7", $_.pd2, 135, 146, 156]), $a(["8", $_.sa2, 136, 147, 157]), $a(["9", $_.sa3, 137, 148, 158]), $a([":", $_.pd3, $_.la, $_.la, $_.la]), $a([$_.sb, $_.sa, " ", " ", " "]), $a([$_.sc, $_.sc, $_.lkc, $_.sc, $_.sc]), $a([$_.sd, $_.sd, $_.sd, $_.lkd, $_.sd]), $a([$_.se, $_.se, $_.se, $_.se, $_.lke]), $a([$_.lb, $_.la, $_.lb, $_.lb, $_.lb])]); //#22399
        $_.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#22402
        for (var _3X = 0, _3W = $_.charmaps.length - 1; _3X <= _3W; _3X += 1) { //#22411
            $_.i = _3X; //#22404
            $_.encs = $get($_.charmaps, $_.i); //#22405
            for (var _3b = 0; _3b <= 4; _3b += 1) { //#22410
                $_.j = _3b; //#22407
                var _3e = $get($_.encs, $_.j); //#22408
                $k[$j++] = _3e; //#22408
                if ($eq($type(_3e), 'stringtype')) { //#22408
                    var _3h = $get($k[--$j], 0); //#22408
                    $k[$j++] = _3h; //#22408
                } //#22408
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#22409
            } //#22409
        } //#22409
        $_.seta = $get($_.charvals, 0); //#22412
        $_.setb = $get($_.charvals, 1); //#22413
        $_.setc = $get($_.charvals, 2); //#22414
        $_.setd = $get($_.charvals, 3); //#22415
        $_.sete = $get($_.charvals, 4); //#22416
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_maxicode.$ctx[id] = $_[id]); //#22416
        bwipp_maxicode.__22417__ = 1; //#22416
        $_ = Object.getPrototypeOf($_); //#22416
    } //#22416
    $k[$j++] = 'maxlen'; //#22419
    if ($_.mode == 5) { //#22419
        $k[$j++] = 77; //#22419
    } else { //#22419
        var _40 = ($_.mode <= 3) ? 84 : 93; //#22419
        $k[$j++] = _40; //#22419
    } //#22419
    var _41 = $k[--$j]; //#22419
    $_[$k[--$j]] = _41; //#22419
    if ($eq($_.encoding, "legacy")) { //#22610
        $k[$j++] = Infinity; //#22428
        for (var _45 = 0, _46 = $_.msglen + 1; _45 < _46; _45++) { //#22428
            $k[$j++] = 0; //#22428
        } //#22428
        $_.nseq = $a(); //#22428
        for (var _49 = $_.msglen - 1; _49 >= 0; _49 -= 1) { //#22436
            $_.i = _49; //#22430
            var _4C = $get($_.msg, $_.i); //#22431
            if ((_4C >= 48) && (_4C <= 57)) { //#22434
                $put($_.nseq, $_.i, $f($get($_.nseq, $_.i + 1) + 1)); //#22432
            } else { //#22434
                $put($_.nseq, $_.i, 0); //#22434
            } //#22434
        } //#22434
        $_.nseq = $geti($_.nseq, 0, $_.msglen); //#22437
        $_.prefixinset = function() {
            $k[$j++] = 0; //#22444
            for (;;) { //#22444
                var _4N = $k[--$j]; //#22442
                var _4O = $k[--$j]; //#22442
                $k[$j++] = _4O; //#22442
                $k[$j++] = _4N; //#22442
                if (_4N >= _4O.length) { //#22442
                    break; //#22442
                } //#22442
                var _4P = $k[--$j]; //#22443
                var _4Q = $k[--$j]; //#22443
                var _4S = $k[--$j]; //#22443
                var _4T = $get(_4S, $get(_4Q, _4P)) !== undefined; //#22443
                $k[$j++] = _4S; //#22443
                $k[$j++] = _4Q; //#22443
                $k[$j++] = _4P; //#22443
                if (_4T) { //#22443
                    var _4U = $k[--$j]; //#22443
                    $k[$j++] = $f(_4U + 1); //#22443
                } else { //#22443
                    break; //#22443
                } //#22443
            } //#22443
            var _4V = $k[--$j]; //#22445
            var _4W = $k[--$j]; //#22445
            $k[$j++] = _4V; //#22445
            $k[$j++] = _4W; //#22445
            $j--; //#22445
            var _4X = $k[--$j]; //#22445
            var _4Y = $k[--$j]; //#22445
            $k[$j++] = _4X; //#22445
            $k[$j++] = _4Y; //#22445
            $j--; //#22445
        }; //#22445
        $_.enc = function() {
            var _4Z = $k[--$j]; //#22449
            $put($_.out, $_.j, $get(_4Z, $k[--$j])); //#22449
            $_.j = $_.j + 1; //#22450
        }; //#22450
        $_.out = $a(144); //#22453
        $_.i = 0; //#22454
        $_.j = 0; //#22454
        $_.cset = "seta"; //#22454
        for (;;) { //#22606
            if ($_.i == $_.msglen) { //#22463
                if (($ne($_.cset, "seta") && $ne($_.cset, "setb")) && ($_.out.length < $_.maxlen)) { //#22461
                    $k[$j++] = $_.la; //#22459
                    $k[$j++] = $_[$_.cset]; //#22459
                    $_.enc(); //#22459
                    $_.cset = "seta"; //#22460
                } //#22460
                break; //#22462
            } //#22462
            for (;;) { //#22605
                if ($get($_.msg, $_.i) <= -1000000) { //#22492
                    $k[$j++] = $_.eci; //#22467
                    $k[$j++] = $_[$_.cset]; //#22467
                    $_.enc(); //#22467
                    var _4y = $f((-$get($_.msg, $_.i)) - 1000000); //#22469
                    $k[$j++] = _4y; //#22487
                    if (_4y <= 31) { //#22486
                        var _4z = $k[--$j]; //#22470
                        $k[$j++] = _4z & 63; //#22471
                        $astore($a(1)); //#22471
                    } else { //#22486
                        var _51 = $k[--$j]; //#22472
                        $k[$j++] = _51; //#22487
                        if (_51 <= 1023) { //#22486
                            var _52 = $k[--$j]; //#22473
                            $k[$j++] = ((_52 >>> 6) & 31) | 32; //#22475
                            $k[$j++] = _52 & 63; //#22475
                            $astore($a(2)); //#22475
                        } else { //#22486
                            var _54 = $k[--$j]; //#22476
                            $k[$j++] = _54; //#22487
                            if (_54 <= 32767) { //#22486
                                var _55 = $k[--$j]; //#22477
                                $k[$j++] = ((_55 >>> 12) & 47) | 48; //#22480
                                $k[$j++] = (_55 >>> 6) & 63; //#22480
                                $k[$j++] = _55 & 63; //#22480
                                $astore($a(3)); //#22480
                            } else { //#22486
                                var _57 = $k[--$j]; //#22482
                                $k[$j++] = ((_57 >>> 18) & 55) | 56; //#22486
                                $k[$j++] = (_57 >>> 12) & 63; //#22486
                                $k[$j++] = (_57 >>> 6) & 63; //#22486
                                $k[$j++] = _57 & 63; //#22486
                                $astore($a(4)); //#22486
                            } //#22486
                        } //#22486
                    } //#22486
                    var _59 = $k[--$j]; //#22488
                    $puti($_.out, $_.j, _59); //#22488
                    $_.j = _59.length + $_.j; //#22489
                    $_.i = $_.i + 1; //#22490
                    break; //#22491
                } //#22491
                if ($get($_.nseq, $_.i) >= 9) { //#22503
                    var _5J = $geti($_.msg, $_.i, 9); //#22496
                    $k[$j++] = 0; //#22496
                    for (var _5K = 0, _5L = _5J.length; _5K < _5L; _5K++) { //#22496
                        var _5N = $k[--$j]; //#22496
                        $k[$j++] = ($f(_5N + $f($get(_5J, _5K) - 48))) * 10; //#22496
                    } //#22496
                    var _5O = $k[--$j]; //#22496
                    $k[$j++] = ~~(_5O / 10); //#22497
                    for (var _5P = 0, _5Q = 4; _5P < _5Q; _5P++) { //#22497
                        var _5R = $k[--$j]; //#22497
                        $k[$j++] = _5R & 63; //#22497
                        $k[$j++] = _5R >>> 6; //#22497
                    } //#22497
                    $k[$j++] = $get($_[$_.cset], $_.ns); //#22498
                    for (var _5W = 0; _5W <= 10; _5W += 2) { //#22498
                        var _5X = $k[$j - 1 - _5W]; //#22498
                        $k[$j++] = _5X; //#22498
                    } //#22498
                    $astore($a(6)); //#22498
                    $r(7, 1); //#22498
                    for (var _5Z = 0, _5a = 6; _5Z < _5a; _5Z++) { //#22498
                        $j--; //#22498
                    } //#22498
                    $puti($_.out, $_.j, $k[--$j]); //#22499
                    $_.i = $_.i + 9; //#22500
                    $_.j = $_.j + 6; //#22501
                    break; //#22502
                } //#22502
                $_.char1 = $get($_.msg, $_.i); //#22506
                $k[$j++] = 'char2'; //#22507
                if (($_.i + 1) < $_.msglen) { //#22507
                    $k[$j++] = $get($_.msg, $_.i + 1); //#22507
                } else { //#22507
                    $k[$j++] = -99; //#22507
                } //#22507
                var _5o = $k[--$j]; //#22507
                $_[$k[--$j]] = _5o; //#22507
                $k[$j++] = 'char3'; //#22508
                if (($_.i + 2) < $_.msglen) { //#22508
                    $k[$j++] = $get($_.msg, $_.i + 2); //#22508
                } else { //#22508
                    $k[$j++] = -99; //#22508
                } //#22508
                var _5v = $k[--$j]; //#22508
                $_[$k[--$j]] = _5v; //#22508
                var _60 = $get($_[$_.cset], $_.char1) !== undefined; //#22511
                if (_60) { //#22515
                    $k[$j++] = $_.char1; //#22512
                    $k[$j++] = $_[$_.cset]; //#22512
                    $_.enc(); //#22512
                    $_.i = $_.i + 1; //#22513
                    break; //#22514
                } //#22514
                var _68 = $get($_.setb, $_.char1) !== undefined; //#22518
                if ($eq($_.cset, "seta") && _68) { //#22528
                    var _6B = $get($_.setb, $_.char2) !== undefined; //#22519
                    if (_6B) { //#22525
                        $k[$j++] = $_.lb; //#22520
                        $k[$j++] = $_.seta; //#22520
                        $_.enc(); //#22520
                        $_.cset = "setb"; //#22521
                    } else { //#22525
                        $k[$j++] = $_.sb; //#22523
                        $k[$j++] = $_.seta; //#22523
                        $_.enc(); //#22523
                        $k[$j++] = $_.char1; //#22524
                        $k[$j++] = $_.setb; //#22524
                        $_.enc(); //#22524
                        $_.i = $_.i + 1; //#22525
                    } //#22525
                    break; //#22527
                } //#22527
                var _6M = $get($_.seta, $_.char1) !== undefined; //#22531
                if ($eq($_.cset, "setb") && _6M) { //#22556
                    var _6N = $_.seta; //#22532
                    var _6O = $_.msg; //#22532
                    var _6P = $_.i; //#22532
                    var _6Q = $_.msglen; //#22532
                    var _6R = $_.i; //#22532
                    var _6S = _6Q - _6R; //#22532
                    var _6T = 4; //#22532
                    if (4 > (_6Q - _6R)) { //#22532
                        var _ = _6S; //#22532
                        _6S = _6T; //#22532
                        _6T = _; //#22532
                    } //#22532
                    $k[$j++] = 'p'; //#22532
                    $k[$j++] = _6N; //#22532
                    $k[$j++] = $geti(_6O, _6P, _6T); //#22532
                    $_.prefixinset(); //#22532
                    var _6V = $k[--$j]; //#22532
                    $_[$k[--$j]] = _6V; //#22532
                    if ($_.p == 1) { //#22537
                        $k[$j++] = $_.sa; //#22534
                        $k[$j++] = $_.setb; //#22534
                        $_.enc(); //#22534
                        $k[$j++] = $_.char1; //#22535
                        $k[$j++] = $_.seta; //#22535
                        $_.enc(); //#22535
                        $_.i = $_.i + 1; //#22536
                    } //#22536
                    if ($_.p == 2) { //#22543
                        $k[$j++] = $_.sa2; //#22539
                        $k[$j++] = $_.setb; //#22539
                        $_.enc(); //#22539
                        $k[$j++] = $_.char1; //#22540
                        $k[$j++] = $_.seta; //#22540
                        $_.enc(); //#22540
                        $k[$j++] = $_.char2; //#22541
                        $k[$j++] = $_.seta; //#22541
                        $_.enc(); //#22541
                        $_.i = $_.i + 2; //#22542
                    } //#22542
                    if ($_.p == 3) { //#22550
                        $k[$j++] = $_.sa3; //#22545
                        $k[$j++] = $_.setb; //#22545
                        $_.enc(); //#22545
                        $k[$j++] = $_.char1; //#22546
                        $k[$j++] = $_.seta; //#22546
                        $_.enc(); //#22546
                        $k[$j++] = $_.char2; //#22547
                        $k[$j++] = $_.seta; //#22547
                        $_.enc(); //#22547
                        $k[$j++] = $_.char3; //#22548
                        $k[$j++] = $_.seta; //#22548
                        $_.enc(); //#22548
                        $_.i = $_.i + 3; //#22549
                    } //#22549
                    if ($_.p >= 4) { //#22554
                        $k[$j++] = $_.la; //#22552
                        $k[$j++] = $_.setb; //#22552
                        $_.enc(); //#22552
                        $_.cset = "seta"; //#22553
                    } //#22553
                    break; //#22555
                } //#22555
                var _70 = $get($_.seta, $_.char1) !== undefined; //#22559
                if (_70) { //#22563
                    $k[$j++] = $_.la; //#22560
                    $k[$j++] = $_[$_.cset]; //#22560
                    $_.enc(); //#22560
                    $_.cset = "seta"; //#22561
                    break; //#22562
                } //#22562
                var _76 = $get($_.setb, $_.char1) !== undefined; //#22564
                if (_76) { //#22568
                    $k[$j++] = $_.lb; //#22565
                    $k[$j++] = $_[$_.cset]; //#22565
                    $_.enc(); //#22565
                    $_.cset = "setb"; //#22566
                    break; //#22567
                } //#22567
                var _7C = $get($_.setc, $_.char1) !== undefined; //#22571
                if (_7C) { //#22571
                    $_.setx = "setc"; //#22571
                    $_.sx = $_.sc; //#22571
                    $_.lkx = $_.lkc; //#22571
                } //#22571
                var _7H = $get($_.setd, $_.char1) !== undefined; //#22572
                if (_7H) { //#22572
                    $_.setx = "setd"; //#22572
                    $_.sx = $_.sd; //#22572
                    $_.lkx = $_.lkd; //#22572
                } //#22572
                var _7M = $get($_.sete, $_.char1) !== undefined; //#22573
                if (_7M) { //#22573
                    $_.setx = "sete"; //#22573
                    $_.sx = $_.se; //#22573
                    $_.lkx = $_.lke; //#22573
                } //#22573
                var _7Q = $_[$_.setx]; //#22576
                var _7R = $_.msg; //#22576
                var _7S = $_.i; //#22576
                var _7T = $_.msglen; //#22576
                var _7U = $_.i; //#22576
                var _7V = _7T - _7U; //#22576
                var _7W = 4; //#22576
                if (4 > (_7T - _7U)) { //#22576
                    var _ = _7V; //#22576
                    _7V = _7W; //#22576
                    _7W = _; //#22576
                } //#22576
                $k[$j++] = 'p'; //#22576
                $k[$j++] = _7Q; //#22576
                $k[$j++] = $geti(_7R, _7S, _7W); //#22576
                $_.prefixinset(); //#22576
                var _7Y = $k[--$j]; //#22576
                $_[$k[--$j]] = _7Y; //#22576
                if ($_.p == 1) { //#22581
                    $k[$j++] = $_.sx; //#22578
                    $k[$j++] = $_[$_.cset]; //#22578
                    $_.enc(); //#22578
                    $k[$j++] = $_.char1; //#22579
                    $k[$j++] = $_[$_.setx]; //#22579
                    $_.enc(); //#22579
                    $_.i = $_.i + 1; //#22580
                } //#22580
                if ($_.p == 2) { //#22588
                    $k[$j++] = $_.sx; //#22583
                    $k[$j++] = $_[$_.cset]; //#22583
                    $_.enc(); //#22583
                    $k[$j++] = $_.char1; //#22584
                    $k[$j++] = $_[$_.setx]; //#22584
                    $_.enc(); //#22584
                    $k[$j++] = $_.sx; //#22585
                    $k[$j++] = $_[$_.cset]; //#22585
                    $_.enc(); //#22585
                    $k[$j++] = $_.char2; //#22586
                    $k[$j++] = $_[$_.setx]; //#22586
                    $_.enc(); //#22586
                    $_.i = $_.i + 2; //#22587
                } //#22587
                if ($_.p == 3) { //#22597
                    $k[$j++] = $_.sx; //#22590
                    $k[$j++] = $_[$_.cset]; //#22590
                    $_.enc(); //#22590
                    $k[$j++] = $_.char1; //#22591
                    $k[$j++] = $_[$_.setx]; //#22591
                    $_.enc(); //#22591
                    $k[$j++] = $_.sx; //#22592
                    $k[$j++] = $_[$_.cset]; //#22592
                    $_.enc(); //#22592
                    $k[$j++] = $_.char2; //#22593
                    $k[$j++] = $_[$_.setx]; //#22593
                    $_.enc(); //#22593
                    $k[$j++] = $_.sx; //#22594
                    $k[$j++] = $_[$_.cset]; //#22594
                    $_.enc(); //#22594
                    $k[$j++] = $_.char3; //#22595
                    $k[$j++] = $_[$_.setx]; //#22595
                    $_.enc(); //#22595
                    $_.i = $_.i + 3; //#22596
                } //#22596
                if ($_.p >= 4) { //#22602
                    $k[$j++] = $_.sx; //#22599
                    $k[$j++] = $_[$_.cset]; //#22599
                    $_.enc(); //#22599
                    $k[$j++] = $_.lkx; //#22600
                    $k[$j++] = $_[$_.setx]; //#22600
                    $_.enc(); //#22600
                    $_.cset = $_.setx; //#22601
                } //#22601
                break; //#22604
            } //#22604
        } //#22604
        $_.encmsg = $geti($_.out, 0, $_.j); //#22607
        $_.padval = $get($_[$_.cset], $_.pad); //#22608
    } //#22608
    if ($eq($_.encoding, "new")) { //#22794
        $_.haveb = false; //#22615
        $_.havec = false; //#22615
        $_.haved = false; //#22615
        $_.havee = false; //#22615
        $_.havei = false; //#22616
        for (var _8Y = 0, _8X = $_.msglen - 1; _8Y <= _8X; _8Y += 1) { //#22628
            $_.c = $get($_.msg, _8Y); //#22618
            if ($_.c <= -1000000) { //#22625
                $_.havei = true; //#22620
            } else { //#22625
                if ((($_.c < 28) || ($_.c > 30)) && ($_.c != 32)) { //#22626
                    var _8h = $get($_.setb, $_.c) !== undefined; //#22622
                    if (_8h) { //#22622
                        $_.haveb = true; //#22622
                    } //#22622
                    var _8k = $get($_.setc, $_.c) !== undefined; //#22623
                    if (_8k) { //#22623
                        $_.havec = true; //#22623
                    } //#22623
                    var _8n = $get($_.setd, $_.c) !== undefined; //#22624
                    if (_8n) { //#22624
                        $_.haved = true; //#22624
                    } //#22624
                    var _8q = $get($_.sete, $_.c) !== undefined; //#22625
                    if (_8q) { //#22625
                        $_.havee = true; //#22625
                    } //#22625
                } //#22625
            } //#22625
        } //#22625
        $k[$j++] = Infinity; //#22632
        $k[$j++] = 0; //#22632
        if ($_.haveb) { //#22632
            $k[$j++] = 1; //#22632
        } //#22632
        if ($_.havee) { //#22632
            $k[$j++] = 4; //#22632
        } //#22632
        if ($_.havec) { //#22632
            $k[$j++] = 2; //#22632
        } //#22632
        if ($_.haved) { //#22632
            $k[$j++] = 3; //#22632
        } //#22632
        $_.priority = $a(); //#22632
        $_.priority_rest = $geti($_.priority, 1, $_.priority.length - 1); //#22633
        $_.latch_sequence = $a([$a([$a([]), $a([63]), $a([58]), $a([58]), $a([58])]), $a([$a([63]), $a([]), $a([63]), $a([63]), $a([63])]), $a([$a([60, 60]), $a([60, 60]), $a([]), $a([60, 60]), $a([60, 60])]), $a([$a([61, 61]), $a([61, 61]), $a([61, 61]), $a([]), $a([61, 61])]), $a([$a([62, 62]), $a([62, 62]), $a([62, 62]), $a([62, 62]), $a([])])]); //#22641
        $_.latch_length = $a([$a([0, 1, 1, 1, 1]), $a([1, 0, 1, 1, 1]), $a([2, 2, 0, 2, 2]), $a([2, 2, 2, 0, 2]), $a([2, 2, 2, 2, 0])]); //#22647
        $_.max_int = 2147483647; //#22649
        $k[$j++] = Infinity; //#22653
        for (var _9a = 0, _9b = 16; _9a < _9b; _9a++) { //#22653
            $k[$j++] = $a([0, 0, 0, 0, 0]); //#22653
        } //#22653
        $_.best_length = $a(); //#22653
        $k[$j++] = Infinity; //#22654
        for (var _9e = 0, _9f = 16; _9e < _9f; _9e++) { //#22654
            $k[$j++] = $a([0, 0, 0, 0, 0]); //#22654
        } //#22654
        $_.best_origin = $a(); //#22654
        $k[$j++] = Infinity; //#22657
        for (var _9j = 0, _9k = $_.msglen; _9j < _9k; _9j++) { //#22657
            $k[$j++] = Infinity; //#22657
            for (var _9l = 0, _9m = 5; _9l < _9m; _9l++) { //#22657
                $k[$j++] = 0; //#22657
            } //#22657
            var _9n = $a(); //#22657
            $k[$j++] = _9n; //#22657
        } //#22657
        $_.prior_code_set = $a(); //#22657
        $k[$j++] = Infinity; //#22658
        for (var _9q = 0, _9r = $_.msglen; _9q < _9r; _9q++) { //#22658
            $k[$j++] = Infinity; //#22658
            for (var _9s = 0, _9t = 5; _9s < _9t; _9s++) { //#22658
                $k[$j++] = 0; //#22658
            } //#22658
            var _9u = $a(); //#22658
            $k[$j++] = _9u; //#22658
        } //#22658
        $_.path_op = $a(); //#22658
        $_.out_eci = function() {
            var _9x = $f((-$_.c) - 1000000); //#22661
            $k[$j++] = _9x; //#22662
            if (_9x < 1024) { //#22662
                var _9z = ($k[--$j] < 32) ? 2 : 3; //#22661
                $k[$j++] = _9z; //#22661
            } else { //#22662
                var _A1 = ($k[--$j] < 32768) ? 4 : 5; //#22662
                $k[$j++] = _A1; //#22662
            } //#22662
        }; //#22662
        $_.enc_eci = function() {
            var _A3 = $f((-$_.c) - 1000000); //#22665
            $k[$j++] = _A3; //#22671
            if (_A3 >= 32) { //#22671
                var _A4 = $k[--$j]; //#22665
                $k[$j++] = _A4; //#22671
                if (_A4 < 1024) { //#22671
                    var _A5 = $k[--$j]; //#22666
                    $k[$j++] = (_A5 >>> 6) | 32; //#22666
                    $k[$j++] = _A5 & 63; //#22666
                } else { //#22671
                    var _A6 = $k[--$j]; //#22666
                    $k[$j++] = _A6; //#22671
                    if (_A6 < 32768) { //#22671
                        var _A7 = $k[--$j]; //#22667
                        $k[$j++] = (_A7 >>> 12) | 48; //#22668
                        $k[$j++] = (_A7 >>> 6) & 63; //#22668
                        $k[$j++] = _A7 & 63; //#22668
                    } else { //#22671
                        var _A8 = $k[--$j]; //#22669
                        $k[$j++] = (_A8 >>> 18) | 56; //#22671
                        $k[$j++] = (_A8 >>> 12) & 63; //#22671
                        $k[$j++] = (_A8 >>> 6) & 63; //#22671
                        $k[$j++] = _A8 & 63; //#22671
                    } //#22671
                } //#22671
            } //#22671
        }; //#22671
        $_.enc_ns = function() {
            var _AB = $geti($_.msg, $_.n, 9); //#22672
            $k[$j++] = 0; //#22672
            for (var _AC = 0, _AD = _AB.length; _AC < _AD; _AC++) { //#22672
                var _AF = $k[--$j]; //#22672
                $k[$j++] = $f($f($get(_AB, _AC) - 48) + (_AF * 10)); //#22672
            } //#22672
            var _AG = $k[--$j]; //#22673
            $k[$j++] = _AG >>> 24; //#22676
            $k[$j++] = (_AG >>> 18) & 63; //#22676
            $k[$j++] = (_AG >>> 12) & 63; //#22676
            $k[$j++] = (_AG >>> 6) & 63; //#22676
            $k[$j++] = _AG & 63; //#22676
        }; //#22676
        $_.enc_sha2 = function() {
            $k[$j++] = $get($_.seta, $_.c); //#22677
            $k[$j++] = $get($_.seta, $get($_.msg, $f($_.n + 1))); //#22677
        }; //#22677
        $_.enc_sha3 = function() {
            $k[$j++] = $get($_.seta, $_.c); //#22679
            $k[$j++] = $get($_.seta, $get($_.msg, $f($_.n + 1))); //#22679
            $k[$j++] = $get($_.seta, $get($_.msg, $f($_.n + 2))); //#22679
        }; //#22679
        $k[$j++] = Infinity; //#22682
        if ($_.havei) { //#22683
            var _Ae = new Map([
                ["can", function() {
                    $k[$j++] = $_.c <= -1000000; //#22683
                }],
                ["intake", 1],
                ["output", function() {
                    $_.out_eci(); //#22683
                }],
                ["sets", 31],
                ["enc", function() {
                    $k[$j++] = 27; //#22683
                    $_.enc_eci(); //#22683
                }]
            ]); //#22683
            $k[$j++] = _Ae; //#22683
        } //#22683
        var _Ag = new Map([
            ["can", function() {
                $k[$j++] = $_.digits >= 9; //#22684
            }],
            ["intake", 9],
            ["output", function() {
                $k[$j++] = 6; //#22684
            }],
            ["sets", 31],
            ["enc", function() {
                $k[$j++] = 31; //#22684
                $_.enc_ns(); //#22684
            }]
        ]); //#22684
        var _An = new Map([
            ["can", function() {
                var _Aj = $get($_.seta, $_.c) !== undefined; //#22685
                $k[$j++] = _Aj; //#22685
            }],
            ["intake", 1],
            ["output", function() {
                $k[$j++] = 1; //#22685
            }],
            ["sets", 1],
            ["enc", function() {
                $k[$j++] = $get($_.seta, $_.c); //#22685
            }]
        ]); //#22685
        $k[$j++] = _Ag; //#22686
        $k[$j++] = _An; //#22686
        if ($_.haveb) { //#22686
            var _Av = new Map([
                ["can", function() {
                    var _Ar = $get($_.setb, $_.c) !== undefined; //#22686
                    $k[$j++] = _Ar; //#22686
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 1; //#22686
                }],
                ["sets", 2],
                ["enc", function() {
                    $k[$j++] = $get($_.setb, $_.c); //#22686
                }]
            ]); //#22686
            $k[$j++] = _Av; //#22686
        } //#22686
        if ($_.havec) { //#22687
            var _B3 = new Map([
                ["can", function() {
                    var _Az = $get($_.setc, $_.c) !== undefined; //#22687
                    $k[$j++] = _Az; //#22687
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 1; //#22687
                }],
                ["sets", 4],
                ["enc", function() {
                    $k[$j++] = $get($_.setc, $_.c); //#22687
                }]
            ]); //#22687
            $k[$j++] = _B3; //#22687
        } //#22687
        if ($_.haved) { //#22688
            var _BB = new Map([
                ["can", function() {
                    var _B7 = $get($_.setd, $_.c) !== undefined; //#22688
                    $k[$j++] = _B7; //#22688
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 1; //#22688
                }],
                ["sets", 8],
                ["enc", function() {
                    $k[$j++] = $get($_.setd, $_.c); //#22688
                }]
            ]); //#22688
            $k[$j++] = _BB; //#22688
        } //#22688
        if ($_.havee) { //#22689
            var _BJ = new Map([
                ["can", function() {
                    var _BF = $get($_.sete, $_.c) !== undefined; //#22689
                    $k[$j++] = _BF; //#22689
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 1; //#22689
                }],
                ["sets", 16],
                ["enc", function() {
                    $k[$j++] = $get($_.sete, $_.c); //#22689
                }]
            ]); //#22689
            $k[$j++] = _BJ; //#22689
        } //#22689
        var _BO = new Map([
            ["can", function() {
                $k[$j++] = $_.num_a >= 1; //#22690
            }],
            ["intake", 1],
            ["output", function() {
                $k[$j++] = 2; //#22690
            }],
            ["sets", 2],
            ["enc", function() {
                $k[$j++] = 59; //#22690
                $k[$j++] = $get($_.seta, $_.c); //#22690
            }]
        ]); //#22690
        var _BQ = new Map([
            ["can", function() {
                $k[$j++] = $_.num_a >= 2; //#22691
            }],
            ["intake", 2],
            ["output", function() {
                $k[$j++] = 3; //#22691
            }],
            ["sets", 2],
            ["enc", function() {
                $k[$j++] = 56; //#22691
                $_.enc_sha2(); //#22691
            }]
        ]); //#22691
        var _BS = new Map([
            ["can", function() {
                $k[$j++] = $_.num_a >= 3; //#22692
            }],
            ["intake", 3],
            ["output", function() {
                $k[$j++] = 4; //#22692
            }],
            ["sets", 2],
            ["enc", function() {
                $k[$j++] = 57; //#22692
                $_.enc_sha3(); //#22692
            }]
        ]); //#22692
        $k[$j++] = _BO; //#22693
        $k[$j++] = _BQ; //#22693
        $k[$j++] = _BS; //#22693
        if ($_.haveb) { //#22693
            var _Ba = new Map([
                ["can", function() {
                    var _BW = $get($_.setb, $_.c) !== undefined; //#22693
                    $k[$j++] = _BW; //#22693
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 2; //#22693
                }],
                ["sets", 1],
                ["enc", function() {
                    $k[$j++] = 59; //#22693
                    $k[$j++] = $get($_.setb, $_.c); //#22693
                }]
            ]); //#22693
            $k[$j++] = _Ba; //#22693
        } //#22693
        if ($_.havec) { //#22694
            var _Bi = new Map([
                ["can", function() {
                    var _Be = $get($_.setc, $_.c) !== undefined; //#22694
                    $k[$j++] = _Be; //#22694
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 2; //#22694
                }],
                ["sets", 27],
                ["enc", function() {
                    $k[$j++] = 60; //#22694
                    $k[$j++] = $get($_.setc, $_.c); //#22694
                }]
            ]); //#22694
            $k[$j++] = _Bi; //#22694
        } //#22694
        if ($_.haved) { //#22695
            var _Bq = new Map([
                ["can", function() {
                    var _Bm = $get($_.setd, $_.c) !== undefined; //#22695
                    $k[$j++] = _Bm; //#22695
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 2; //#22695
                }],
                ["sets", 23],
                ["enc", function() {
                    $k[$j++] = 61; //#22695
                    $k[$j++] = $get($_.setd, $_.c); //#22695
                }]
            ]); //#22695
            $k[$j++] = _Bq; //#22695
        } //#22695
        if ($_.havee) { //#22696
            var _By = new Map([
                ["can", function() {
                    var _Bu = $get($_.sete, $_.c) !== undefined; //#22696
                    $k[$j++] = _Bu; //#22696
                }],
                ["intake", 1],
                ["output", function() {
                    $k[$j++] = 2; //#22696
                }],
                ["sets", 15],
                ["enc", function() {
                    $k[$j++] = 62; //#22696
                    $k[$j++] = $get($_.sete, $_.c); //#22696
                }]
            ]); //#22696
            $k[$j++] = _By; //#22696
        } //#22696
        $_.op_tab = $a(); //#22696
        var _C0 = $_.op_tab; //#22700
        $k[$j++] = 0; //#22700
        for (var _C1 = 0, _C2 = _C0.length; _C1 < _C2; _C1++) { //#22700
            var _C4 = $k[--$j]; //#22700
            $put($get(_C0, _C1), 'idx', _C4); //#22700
            $k[$j++] = $f(_C4 + 1); //#22700
        } //#22700
        $j--; //#22700
        $k[$j++] = Infinity; //#22703
        var _C5 = $a([1, 2, 4, 8, 16]); //#22703
        for (var _C6 = 0, _C7 = _C5.length; _C6 < _C7; _C6++) { //#22703
            $_.n = $get(_C5, _C6); //#22703
            $k[$j++] = Infinity; //#22703
            var _C9 = $_.op_tab; //#22703
            for (var _CA = 0, _CB = _C9.length; _CA < _CB; _CA++) { //#22703
                var _CC = $get(_C9, _CA); //#22703
                $k[$j++] = _CC; //#22703
                if ($an($get(_CC, 'sets'), $_.n) == 0) { //#22703
                    $j--; //#22703
                } //#22703
            } //#22703
            var _CF = $a(); //#22703
            $k[$j++] = _CF; //#22703
        } //#22703
        $_.code_set_operations = $a(); //#22703
        $_.get_best_length = function() {
            $_.latch_length_s = $get($_.latch_length, $_.state); //#22707
            $k[$j++] = $_.max_int; //#22723
            $forall($get($_.code_set_operations, $_.state), function() { //#22723
                $_.op = $k[--$j]; //#22710
                if ($get($_.op, 'can')() === true) {
                    return true;
                } //#22711
                if ($k[--$j]) { //#22722
                    $_.m = $f($_.n - $get($_.op, 'intake')) & 15; //#22712
                    $_.org = $get($get($_.best_origin, $_.m), $_.state); //#22713
                    $k[$j++] = $f($get($get($_.best_length, $_.m), $_.org) + $get($_.latch_length_s, $_.org)); //#22716
                    if ($get($_.op, 'output')() === true) {
                        return true;
                    } //#22716
                    var _Ck = $k[--$j]; //#22716
                    var _Cl = $k[--$j]; //#22716
                    var _Cm = $k[--$j]; //#22717
                    $k[$j++] = _Cm; //#22721
                    $k[$j++] = $f(_Cl + _Ck); //#22721
                    if (_Cm > $f(_Cl + _Ck)) { //#22721
                        var _Cn = $k[--$j]; //#22718
                        var _Co = $k[--$j]; //#22718
                        $put($_.path_op_0, $_.state, $get($_.op, 'idx')); //#22719
                        $put($_.prior_code_set_0, $_.state, $_.org); //#22720
                        $k[$j++] = _Cn; //#22720
                        $k[$j++] = _Co; //#22720
                    } //#22720
                    $j--; //#22721
                } //#22721
            }); //#22721
        }; //#22721
        $_.get_best_origin = function() {
            $_.latch_length_s = $get($_.latch_length, $_.state); //#22729
            $_.orglen = $f($get($_.best_length_0, 0) + $get($_.latch_length_s, 0)); //#22730
            var _D3 = $_.priority_rest; //#22731
            $k[$j++] = 0; //#22733
            for (var _D4 = 0, _D5 = _D3.length; _D4 < _D5; _D4++) { //#22733
                $_.p = $get(_D3, _D4); //#22732
                var _DD = $f($get($_.best_length_0, $_.p) + $get($_.latch_length_s, $_.p)); //#22732
                $k[$j++] = _DD; //#22732
                if (_DD < $_.orglen) { //#22732
                    $_.orglen = $k[--$j]; //#22732
                    $j--; //#22732
                    $k[$j++] = $_.p; //#22732
                } else { //#22732
                    $j--; //#22732
                } //#22732
            } //#22732
        }; //#22732
        $_.digits = 0; //#22736
        $_.num_a = 0; //#22737
        for (var _DJ = 0, _DI = $_.msglen - 1; _DJ <= _DI; _DJ += 1) { //#22757
            $_.n = _DJ; //#22741
            $_.c = $get($_.msg, $_.n); //#22742
            $k[$j++] = 'digits'; //#22745
            if (($_.c >= 48) && ($_.c < 58)) { //#22745
                $k[$j++] = $_.digits + 1; //#22745
            } else { //#22745
                $k[$j++] = 0; //#22745
            } //#22745
            var _DQ = $k[--$j]; //#22745
            $_[$k[--$j]] = _DQ; //#22745
            var _DU = $get($_.seta, $_.c) !== undefined; //#22746
            $k[$j++] = 'num_a'; //#22746
            if (_DU) { //#22746
                $k[$j++] = $_.num_a + 1; //#22746
            } else { //#22746
                $k[$j++] = 0; //#22746
            } //#22746
            var _DW = $k[--$j]; //#22746
            $_[$k[--$j]] = _DW; //#22746
            $_.path_op_0 = $get($_.path_op, $_.n); //#22749
            $_.prior_code_set_0 = $get($_.prior_code_set, $_.n); //#22750
            $_.best_length_0 = $get($_.best_length, $_.n & 15); //#22751
            $_.best_origin_0 = $get($_.best_origin, $_.n & 15); //#22752
            var _Dk = $_.priority; //#22755
            for (var _Dl = 0, _Dm = _Dk.length; _Dl < _Dm; _Dl++) { //#22755
                $_.state = $get(_Dk, _Dl); //#22755
                $k[$j++] = $_.best_length_0; //#22755
                $k[$j++] = $_.state; //#22755
                $_.get_best_length(); //#22755
                var _Dq = $k[--$j]; //#22755
                var _Dr = $k[--$j]; //#22755
                $put($k[--$j], _Dr, _Dq); //#22755
            } //#22755
            var _Dt = $_.priority; //#22756
            for (var _Du = 0, _Dv = _Dt.length; _Du < _Dv; _Du++) { //#22756
                $_.state = $get(_Dt, _Du); //#22756
                $k[$j++] = $_.best_origin_0; //#22756
                $k[$j++] = $_.state; //#22756
                $_.get_best_origin(); //#22756
                var _Dz = $k[--$j]; //#22756
                var _E0 = $k[--$j]; //#22756
                $put($k[--$j], _E0, _Dz); //#22756
            } //#22756
        } //#22756
        $_.n = $_.msglen; //#22759
        var _E4 = $_.priority; //#22762
        $k[$j++] = 0; //#22762
        $k[$j++] = $_.max_int; //#22762
        for (var _E5 = 0, _E6 = _E4.length; _E5 < _E6; _E5++) { //#22762
            var _E7 = $get(_E4, _E5); //#22762
            var _E9 = $get($_.best_length_0, _E7); //#22762
            var _EA = $k[--$j]; //#22762
            $k[$j++] = _EA; //#22762
            $k[$j++] = _E7; //#22762
            $k[$j++] = _E9; //#22762
            if ($lt(_E9, _EA)) { //#22762
                $r(4, 2); //#22762
            } //#22762
            $j -= 2; //#22762
        } //#22762
        $_.j = $k[--$j]; //#22763
        $_.state = $k[--$j]; //#22764
        $_.pad_code = $a([33, 33, 0, 0, 28]); //#22767
        $k[$j++] = 'final_code_set'; //#22768
        if ($get($_.pad_code, $_.state) == 0) { //#22768
            $k[$j++] = 0; //#22768
        } else { //#22768
            $k[$j++] = $_.state; //#22768
        } //#22768
        var _EI = $k[--$j]; //#22768
        $_[$k[--$j]] = _EI; //#22768
        if (($get($_.pad_code, $_.state) == 0) && $lt($_.j, $_.maxlen)) { //#22771
            var _EQ = $a($f($_.j + 1)); //#22771
            $put(_EQ, $_.j, 58); //#22771
            $k[$j++] = _EQ; //#22771
        } else { //#22771
            $k[$j++] = $a($_.j); //#22771
        } //#22771
        $_.padval = $get($_.pad_code, $_.final_code_set); //#22772
        $_.len = $_.j; //#22773
        for (;;) { //#22789
            if ($_.n <= 0) { //#22777
                break; //#22777
            } //#22777
            $_.pcs = $get($get($_.prior_code_set, $_.n - 1), $_.state); //#22778
            $_.op_idx = $get($get($_.path_op, $_.n - 1), $_.state); //#22779
            $_.op = $get($_.op_tab, $_.op_idx); //#22780
            $_.n = $f($_.n - $get($_.op, 'intake')); //#22781
            $_.c = $get($_.msg, $_.n); //#22782
            $_.enc = $get($_.op, 'enc'); //#22783
            $k[$j++] = Infinity; //#22784
            if ($_.enc() === true) {
                break;
            } //#22784
            $_.output = $a(); //#22784
            $_.latch = $get($get($_.latch_sequence, $_.state), $_.pcs); //#22785
            $_.len = $f($f($_.len - $_.latch.length) - $_.output.length); //#22786
            var _F4 = $k[--$j]; //#22787
            var _F5 = $_.len; //#22787
            var _F6 = $_.latch; //#22787
            $puti(_F4, _F5, _F6); //#22787
            $puti(_F4, $f(_F5 + _F6.length), $_.output); //#22787
            $_.state = $_.pcs; //#22788
            $k[$j++] = _F4; //#22788
        } //#22788
        $_.encmsg = $k[--$j]; //#22792
    } //#22792
    $k[$j++] = 'sami'; //#22797
    if ($_.sam != -1) { //#22797
        $k[$j++] = $a([$get($_.seta, $_.pad), (((~~($_.sam / 10)) - 1) * 8) + (($_.sam % 10) - 1)]); //#22797
    } else { //#22797
        $k[$j++] = $a([]); //#22797
    } //#22797
    var _FI = $k[--$j]; //#22797
    $_[$k[--$j]] = _FI; //#22797
    $k[$j++] = Infinity; //#22798
    $aload($_.sami); //#22798
    $aload($_.encmsg); //#22798
    $_.encmsg = $a(); //#22798
    if (($_.mode == 2) || ($_.mode == 3)) { //#22859
        if ($_.encmsg.length > 84) { //#22805
            $k[$j++] = 'bwipp.maxicodeMode23TooLong#22804'; //#22804
            $k[$j++] = "The secondary message is too long"; //#22804
            bwipp_raiseerror(); //#22804
        } //#22804
        var _FR = $strcpy($s(4), "0000"); //#22808
        var _FU = $cvrs($s(4), ~~$_.mode, 2); //#22808
        $puti(_FR, 4 - _FU.length, _FU); //#22808
        $_.mdb = _FR; //#22808
        var _FW = $strcpy($s(10), "0000000000"); //#22809
        var _FZ = $cvrs($s(10), $cvi($_.ccode), 2); //#22809
        $puti(_FW, 10 - _FZ.length, _FZ); //#22809
        $_.ccb = _FW; //#22809
        var _Fb = $strcpy($s(10), "0000000000"); //#22810
        var _Fe = $cvrs($s(10), $cvi($_.scode), 2); //#22810
        $puti(_Fb, 10 - _Fe.length, _Fe); //#22810
        $_.scb = _Fb; //#22810
        $_.pcb = $strcpy($s(36), "000000000000000000000000000000000000"); //#22811
        if ($_.mode == 2) { //#22826
            if ($eq($_.ccode, "840") && ($_.pcode.length == 5)) { //#22814
                var _Fl = $strcpy($s(9), "     0000"); //#22814
                $puti(_Fl, 0, $_.pcode); //#22814
                $_.pcode = _Fl; //#22814
            } //#22814
            var _Fq = $cvrs($s(6), $_.pcode.length, 2); //#22816
            $puti($_.pcb, 6 - _Fq.length, _Fq); //#22816
            var _Fu = $cvrs($s(30), $cvi($_.pcode), 2); //#22817
            $puti($_.pcb, 36 - _Fu.length, _Fu); //#22817
        } else { //#22826
            $k[$j++] = Infinity; //#22820
            var _Fw = $strcpy($s(6), "      "); //#22821
            $k[$j++] = _Fw; //#22821
            $k[$j++] = _Fw; //#22821
            $k[$j++] = 0; //#22821
            if ($_.pcode.length > 6) { //#22821
                $k[$j++] = $geti($_.pcode, 0, 6); //#22821
            } else { //#22821
                $k[$j++] = $_.pcode; //#22821
            } //#22821
            var _G1 = $k[--$j]; //#22821
            var _G2 = $k[--$j]; //#22821
            $puti($k[--$j], _G2, _G1); //#22821
            $forall($k[--$j], function() { //#22822
                var _G7 = $get($_.seta, $k[--$j]); //#22822
                $k[$j++] = _G7; //#22822
            }); //#22822
            $_.pccw = $a(); //#22822
            for (var _G9 = 0; _G9 <= 5; _G9 += 1) { //#22827
                $_.i = _G9; //#22825
                var _GF = $cvrs($s(6), $get($_.pccw, $_.i), 2); //#22826
                $puti($_.pcb, ((6 * $_.i) + 6) - _GF.length, _GF); //#22826
            } //#22826
        } //#22826
        $_.scm = $s(60); //#22831
        $puti($_.scm, 2, $_.mdb); //#22832
        $puti($_.scm, 38, $geti($_.pcb, 0, 4)); //#22833
        $puti($_.scm, 30, $geti($_.pcb, 4, 6)); //#22834
        $puti($_.scm, 24, $geti($_.pcb, 10, 6)); //#22835
        $puti($_.scm, 18, $geti($_.pcb, 16, 6)); //#22836
        $puti($_.scm, 12, $geti($_.pcb, 22, 6)); //#22837
        $puti($_.scm, 6, $geti($_.pcb, 28, 6)); //#22838
        $puti($_.scm, 0, $geti($_.pcb, 34, 2)); //#22839
        $puti($_.scm, 52, $geti($_.ccb, 0, 2)); //#22840
        $puti($_.scm, 42, $geti($_.ccb, 2, 6)); //#22841
        $puti($_.scm, 36, $geti($_.ccb, 8, 2)); //#22842
        $puti($_.scm, 54, $geti($_.scb, 0, 6)); //#22843
        $puti($_.scm, 48, $geti($_.scb, 6, 4)); //#22844
        $_.pri = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); //#22847
        for (var _Gv = 0; _Gv <= 59; _Gv += 1) { //#22853
            $_.i = _Gv; //#22849
            $_.ps = ~~($_.i / 6); //#22850
            $_.ep = (~~(Math.pow(2, 5 - ($_.i % 6)))) * ($get($_.scm, $_.i) - 48); //#22851
            $put($_.pri, $_.ps, $f($get($_.pri, $_.ps) + $_.ep)); //#22852
        } //#22852
        $k[$j++] = Infinity; //#22856
        for (var _H7 = 0, _H8 = 84; _H7 < _H8; _H7++) { //#22856
            $k[$j++] = $_.padval; //#22856
        } //#22856
        $_.sec = $a(); //#22856
        $puti($_.sec, 0, $_.encmsg); //#22857
    } //#22857
    if (((($_.mode == 4) || ($_.mode == 5)) || ($_.mode == 6)) || ($_.mode == -1)) { //#22880
        if ($_.mode == -1) { //#22867
            var _HJ = ($_.encmsg.length <= 77) ? 5 : 4; //#22866
            $_.mode = _HJ; //#22866
        } //#22866
        $k[$j++] = Infinity; //#22869
        var _HL = ($_.mode == 5) ? 78 : 94; //#22869
        for (var _HM = 0, _HN = _HL; _HM < _HN; _HM++) { //#22869
            $k[$j++] = $_.padval; //#22869
        } //#22869
        $_.cws = $a(); //#22869
        if ($_.encmsg.length > ($_.cws.length - 1)) { //#22872
            $k[$j++] = 'bwipp.maxicodeMode56TooLong#22871'; //#22871
            $k[$j++] = "The message is too long"; //#22871
            bwipp_raiseerror(); //#22871
        } //#22871
        $put($_.cws, 0, $_.mode); //#22873
        $puti($_.cws, 1, $_.encmsg); //#22874
        $_.pri = $geti($_.cws, 0, 10); //#22877
        $_.sec = $geti($_.cws, 10, $_.cws.length - 10); //#22878
    } //#22878
    if (!bwipp_maxicode.__22887__) { //#22887
        $_ = Object.create($_); //#22887
        $k[$j++] = Infinity; //#22884
        $k[$j++] = 1; //#22884
        for (var _Hb = 0, _Hc = 63; _Hb < _Hc; _Hb++) { //#22884
            var _Hd = $k[--$j]; //#22884
            var _He = _Hd * 2; //#22884
            $k[$j++] = _Hd; //#22884
            $k[$j++] = _He; //#22884
            if (_He >= 64) { //#22884
                var _Hf = $k[--$j]; //#22884
                $k[$j++] = _Hf ^ 67; //#22884
            } //#22884
        } //#22884
        $_.rsalog = $a(); //#22884
        $_.rslog = $a(64); //#22885
        for (var _Hi = 1; _Hi <= 63; _Hi += 1) { //#22886
            $put($_.rslog, $get($_.rsalog, _Hi), _Hi); //#22886
        } //#22886
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_maxicode.$ctx[id] = $_[id]); //#22886
        bwipp_maxicode.__22887__ = 1; //#22886
        $_ = Object.getPrototypeOf($_); //#22886
    } //#22886
    $_.rsprod = function() {
        var _Hn = $k[--$j]; //#22891
        var _Ho = $k[--$j]; //#22891
        $k[$j++] = _Ho; //#22895
        $k[$j++] = _Hn; //#22895
        if ((_Hn != 0) && (_Ho != 0)) { //#22894
            var _Hr = $get($_.rslog, $k[--$j]); //#22892
            var _Hw = $get($_.rsalog, $f(_Hr + $get($_.rslog, $k[--$j])) % 63); //#22892
            $k[$j++] = _Hw; //#22892
        } else { //#22894
            $j -= 2; //#22894
            $k[$j++] = 0; //#22894
        } //#22894
    }; //#22894
    $_.rscodes = function() {
        $_.rsnum = $k[--$j]; //#22901
        $_.cwb = $k[--$j]; //#22902
        $k[$j++] = Infinity; //#22905
        $k[$j++] = 1; //#22905
        for (var _I0 = 0, _I1 = $_.rsnum; _I0 < _I1; _I0++) { //#22905
            $k[$j++] = 0; //#22905
        } //#22905
        $_.coeffs = $a(); //#22905
        for (var _I5 = 1, _I4 = $_.rsnum; _I5 <= _I4; _I5 += 1) { //#22914
            $_.i = _I5; //#22907
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#22908
            for (var _IC = $_.i - 1; _IC >= 1; _IC -= 1) { //#22912
                $_.j = _IC; //#22910
                $k[$j++] = $_.coeffs; //#22911
                $k[$j++] = $_.j; //#22911
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#22911
                $k[$j++] = $get($_.coeffs, $_.j); //#22911
                $k[$j++] = $get($_.rsalog, $_.i); //#22911
                $_.rsprod(); //#22911
                var _IO = $k[--$j]; //#22911
                var _IP = $k[--$j]; //#22911
                var _IQ = $k[--$j]; //#22911
                $put($k[--$j], _IQ, $xo(_IP, _IO)); //#22911
            } //#22911
            $k[$j++] = $_.coeffs; //#22913
            $k[$j++] = 0; //#22913
            $k[$j++] = $get($_.coeffs, 0); //#22913
            $k[$j++] = $get($_.rsalog, $_.i); //#22913
            $_.rsprod(); //#22913
            var _IY = $k[--$j]; //#22913
            var _IZ = $k[--$j]; //#22913
            $put($k[--$j], _IZ, _IY); //#22913
        } //#22913
        $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#22915
        $k[$j++] = Infinity; //#22918
        for (var _If = 0, _Ig = $_.rsnum; _If < _Ig; _If++) { //#22918
            $k[$j++] = 0; //#22918
        } //#22918
        $_.ecb = $a(); //#22918
        for (var _Ik = 0, _Ij = $_.cwb.length - 1; _Ik <= _Ij; _Ik += 1) { //#22927
            $_.t = $xo($get($_.cwb, _Ik), $get($_.ecb, 0)); //#22920
            for (var _Iq = $_.ecb.length - 1; _Iq >= 0; _Iq -= 1) { //#22926
                $_.i = _Iq; //#22922
                $_.p = ($_.ecb.length - $_.i) - 1; //#22923
                $k[$j++] = $_.ecb; //#22924
                $k[$j++] = $_.p; //#22924
                $k[$j++] = $_.t; //#22924
                $k[$j++] = $get($_.coeffs, $_.i); //#22924
                $_.rsprod(); //#22924
                var _Iz = $k[--$j]; //#22924
                var _J0 = $k[--$j]; //#22924
                $put($k[--$j], _J0, _Iz); //#22924
                if ($_.i > 0) { //#22925
                    $put($_.ecb, $_.p, $xo($get($_.ecb, $_.p + 1), $get($_.ecb, $_.p))); //#22925
                } //#22925
            } //#22925
        } //#22925
        $k[$j++] = $_.ecb; //#22929
    }; //#22929
    $k[$j++] = Infinity; //#22934
    for (var _JE = 0, _JD = $_.sec.length - 1; _JE <= _JD; _JE += 2) { //#22934
        $k[$j++] = $get($_.sec, _JE); //#22934
    } //#22934
    $_.seco = $a(); //#22934
    $k[$j++] = Infinity; //#22935
    for (var _JK = 1, _JJ = $_.sec.length - 1; _JK <= _JJ; _JK += 2) { //#22935
        $k[$j++] = $get($_.sec, _JK); //#22935
    } //#22935
    $_.sece = $a(); //#22935
    var _JP = ($_.sec.length == 84) ? 20 : 28; //#22938
    $_.scodes = _JP; //#22938
    $k[$j++] = 'secochk'; //#22939
    $k[$j++] = $_.seco; //#22939
    $k[$j++] = $_.scodes; //#22939
    $_.rscodes(); //#22939
    var _JS = $k[--$j]; //#22939
    $_[$k[--$j]] = _JS; //#22939
    $k[$j++] = 'secechk'; //#22940
    $k[$j++] = $_.sece; //#22940
    $k[$j++] = $_.scodes; //#22940
    $_.rscodes(); //#22940
    var _JW = $k[--$j]; //#22940
    $_[$k[--$j]] = _JW; //#22940
    $k[$j++] = Infinity; //#22943
    for (var _Ja = 0, _JZ = $_.scodes - 1; _Ja <= _JZ; _Ja += 1) { //#22943
        $k[$j++] = $get($_.secochk, _Ja); //#22943
        $k[$j++] = $get($_.secechk, _Ja); //#22943
    } //#22943
    $_.secchk = $a(); //#22943
    $k[$j++] = Infinity; //#22946
    $aload($_.pri); //#22947
    $k[$j++] = $_.pri; //#22948
    $k[$j++] = 10; //#22948
    $_.rscodes(); //#22948
    $aload($k[--$j]); //#22948
    $aload($_.sec); //#22949
    $aload($_.secchk); //#22950
    $_.codewords = $a(); //#22950
    var _Jn = $get($_.options, 'debugcws') !== undefined; //#22953
    if (_Jn) { //#22953
        $k[$j++] = 'bwipp.debugcws#22953'; //#22953
        $k[$j++] = $_.codewords; //#22953
        bwipp_raiseerror(); //#22953
    } //#22953
    $k[$j++] = Infinity; //#22956
    for (var _Jp = 0, _Jq = 864; _Jp < _Jq; _Jp++) { //#22956
        $k[$j++] = 0; //#22956
    } //#22956
    $_.mods = $a(); //#22956
    for (var _Js = 0; _Js <= 143; _Js += 1) { //#22961
        $_.i = _Js; //#22958
        $k[$j++] = Infinity; //#22959
        var _Jx = $cvrs($s(6), $get($_.codewords, $_.i), 2); //#22959
        for (var _Jy = 0, _Jz = _Jx.length; _Jy < _Jz; _Jy++) { //#22959
            $k[$j++] = $get(_Jx, _Jy) - 48; //#22959
        } //#22959
        $_.cw = $a(); //#22959
        $puti($_.mods, (6 * $_.i) + (6 - $_.cw.length), $_.cw); //#22960
    } //#22960
    if (!bwipp_maxicode.__23011__) { //#23011
        $_ = Object.create($_); //#23011
        $_.modmap = $a([469, 529, 286, 316, 347, 346, 673, 672, 703, 702, 647, 676, 283, 282, 313, 312, 370, 610, 618, 379, 378, 409, 408, 439, 705, 704, 559, 589, 588, 619, 458, 518, 640, 701, 675, 674, 285, 284, 315, 314, 310, 340, 531, 289, 288, 319, 349, 348, 456, 486, 517, 516, 471, 470, 369, 368, 399, 398, 429, 428, 549, 548, 579, 578, 609, 608, 649, 648, 679, 678, 709, 708, 639, 638, 669, 668, 699, 698, 279, 278, 309, 308, 339, 338, 381, 380, 411, 410, 441, 440, 561, 560, 591, 590, 621, 620, 547, 546, 577, 576, 607, 606, 367, 366, 397, 396, 427, 426, 291, 290, 321, 320, 351, 350, 651, 650, 681, 680, 711, 710, 1, 0, 31, 30, 61, 60, 3, 2, 33, 32, 63, 62, 5, 4, 35, 34, 65, 64, 7, 6, 37, 36, 67, 66, 9, 8, 39, 38, 69, 68, 11, 10, 41, 40, 71, 70, 13, 12, 43, 42, 73, 72, 15, 14, 45, 44, 75, 74, 17, 16, 47, 46, 77, 76, 19, 18, 49, 48, 79, 78, 21, 20, 51, 50, 81, 80, 23, 22, 53, 52, 83, 82, 25, 24, 55, 54, 85, 84, 27, 26, 57, 56, 87, 86, 117, 116, 147, 146, 177, 176, 115, 114, 145, 144, 175, 174, 113, 112, 143, 142, 173, 172, 111, 110, 141, 140, 171, 170, 109, 108, 139, 138, 169, 168, 107, 106, 137, 136, 167, 166, 105, 104, 135, 134, 165, 164, 103, 102, 133, 132, 163, 162, 101, 100, 131, 130, 161, 160, 99, 98, 129, 128, 159, 158, 97, 96, 127, 126, 157, 156, 95, 94, 125, 124, 155, 154, 93, 92, 123, 122, 153, 152, 91, 90, 121, 120, 151, 150, 181, 180, 211, 210, 241, 240, 183, 182, 213, 212, 243, 242, 185, 184, 215, 214, 245, 244, 187, 186, 217, 216, 247, 246, 189, 188, 219, 218, 249, 248, 191, 190, 221, 220, 251, 250, 193, 192, 223, 222, 253, 252, 195, 194, 225, 224, 255, 254, 197, 196, 227, 226, 257, 256, 199, 198, 229, 228, 259, 258, 201, 200, 231, 230, 261, 260, 203, 202, 233, 232, 263, 262, 205, 204, 235, 234, 265, 264, 207, 206, 237, 236, 267, 266, 297, 296, 327, 326, 357, 356, 295, 294, 325, 324, 355, 354, 293, 292, 323, 322, 353, 352, 277, 276, 307, 306, 337, 336, 275, 274, 305, 304, 335, 334, 273, 272, 303, 302, 333, 332, 271, 270, 301, 300, 331, 330, 361, 360, 391, 390, 421, 420, 363, 362, 393, 392, 423, 422, 365, 364, 395, 394, 425, 424, 383, 382, 413, 412, 443, 442, 385, 384, 415, 414, 445, 444, 387, 386, 417, 416, 447, 446, 477, 476, 507, 506, 537, 536, 475, 474, 505, 504, 535, 534, 473, 472, 503, 502, 533, 532, 455, 454, 485, 484, 515, 514, 453, 452, 483, 482, 513, 512, 451, 450, 481, 480, 511, 510, 541, 540, 571, 570, 601, 600, 543, 542, 573, 572, 603, 602, 545, 544, 575, 574, 605, 604, 563, 562, 593, 592, 623, 622, 565, 564, 595, 594, 625, 624, 567, 566, 597, 596, 627, 626, 657, 656, 687, 686, 717, 716, 655, 654, 685, 684, 715, 714, 653, 652, 683, 682, 713, 712, 637, 636, 667, 666, 697, 696, 635, 634, 665, 664, 695, 694, 633, 632, 663, 662, 693, 692, 631, 630, 661, 660, 691, 690, 721, 720, 751, 750, 781, 780, 723, 722, 753, 752, 783, 782, 725, 724, 755, 754, 785, 784, 727, 726, 757, 756, 787, 786, 729, 728, 759, 758, 789, 788, 731, 730, 761, 760, 791, 790, 733, 732, 763, 762, 793, 792, 735, 734, 765, 764, 795, 794, 737, 736, 767, 766, 797, 796, 739, 738, 769, 768, 799, 798, 741, 740, 771, 770, 801, 800, 743, 742, 773, 772, 803, 802, 745, 744, 775, 774, 805, 804, 747, 746, 777, 776, 807, 806, 837, 836, 867, 866, 897, 896, 835, 834, 865, 864, 895, 894, 833, 832, 863, 862, 893, 892, 831, 830, 861, 860, 891, 890, 829, 828, 859, 858, 889, 888, 827, 826, 857, 856, 887, 886, 825, 824, 855, 854, 885, 884, 823, 822, 853, 852, 883, 882, 821, 820, 851, 850, 881, 880, 819, 818, 849, 848, 879, 878, 817, 816, 847, 846, 877, 876, 815, 814, 845, 844, 875, 874, 813, 812, 843, 842, 873, 872, 811, 810, 841, 840, 871, 870, 901, 900, 931, 930, 961, 960, 903, 902, 933, 932, 963, 962, 905, 904, 935, 934, 965, 964, 907, 906, 937, 936, 967, 966, 909, 908, 939, 938, 969, 968, 911, 910, 941, 940, 971, 970, 913, 912, 943, 942, 973, 972, 915, 914, 945, 944, 975, 974, 917, 916, 947, 946, 977, 976, 919, 918, 949, 948, 979, 978, 921, 920, 951, 950, 981, 980, 923, 922, 953, 952, 983, 982, 925, 924, 955, 954, 985, 984, 927, 926, 957, 956, 987, 986, 58, 89, 88, 118, 149, 148, 178, 209, 208, 238, 269, 268, 298, 329, 328, 358, 389, 388, 418, 449, 448, 478, 509, 508, 538, 569, 568, 598, 629, 628, 658, 689, 688, 718, 749, 748, 778, 809, 808, 838, 869, 868, 898, 929, 928, 958, 989, 988]); //#23010
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_maxicode.$ctx[id] = $_[id]); //#23010
        bwipp_maxicode.__23011__ = 1; //#23010
        $_ = Object.getPrototypeOf($_); //#23010
    } //#23010
    $_.pixs = $a(864); //#23014
    $_.j = 0; //#23015
    for (var _KB = 0, _KA = $_.mods.length - 1; _KB <= _KA; _KB += 1) { //#23022
        $_.i = _KB; //#23017
        if ($get($_.mods, $_.i) == 1) { //#23021
            $put($_.pixs, $_.j, $get($_.modmap, $_.i)); //#23019
            $_.j = $_.j + 1; //#23020
        } //#23020
    } //#23020
    $k[$j++] = Infinity; //#23023
    $aload($geti($_.pixs, 0, $_.j)); //#23023
    $k[$j++] = 28; //#23023
    $k[$j++] = 29; //#23023
    $k[$j++] = 280; //#23023
    $k[$j++] = 281; //#23023
    $k[$j++] = 311; //#23023
    $k[$j++] = 457; //#23023
    $k[$j++] = 488; //#23023
    $k[$j++] = 500; //#23023
    $k[$j++] = 530; //#23023
    $k[$j++] = 670; //#23023
    $k[$j++] = 700; //#23023
    $k[$j++] = 677; //#23023
    $k[$j++] = 707; //#23023
    $_.pixs = $a(); //#23023
    var _KR = new Map([
        ["ren", 'renmaximatrix'],
        ["pixs", $_.pixs],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#23033
    $k[$j++] = _KR; //#23036
    if (!$_.dontdraw) { //#23036
        bwipp_renmaximatrix(); //#23036
    } //#23036
    $_ = Object.getPrototypeOf($_); //#23038
    $_ = Object.getPrototypeOf($_); //#23040
} //bwipp_maxicode
function bwipp_azteccode() {
    $_ = Object.create($_); //#23071
    $_.dontdraw = false; //#23074
    $_.format = "full"; //#23075
    $_.readerinit = false; //#23076
    $_.layers = -1; //#23077
    $_.eclevel = 23; //#23078
    $_.ecaddchars = 3; //#23079
    $_.raw = false; //#23080
    $_.parse = false; //#23081
    $_.parsefnc = false; //#23082
    $k[$j++] = $_; //#23084
    bwipp_processoptions(); //#23084
    $_.options = $k[--$j]; //#23084
    $_.barcode = $k[--$j]; //#23085
    bwipp_loadctx(bwipp_azteccode); //#23087
    if ($eq($_.barcode, "")) { //#23091
        $k[$j++] = 'bwipp.aztecEmptyData#23090'; //#23090
        $k[$j++] = "The data must not be empty"; //#23090
        bwipp_raiseerror(); //#23090
    } //#23090
    if (($_.eclevel < 5) || ($_.eclevel > 95)) { //#23095
        $k[$j++] = 'bwipp.aztecInvalidEClevel#23094'; //#23094
        $k[$j++] = "The EC percentage must be from 5 to 95"; //#23094
        bwipp_raiseerror(); //#23094
    } //#23094
    if ($_.ecaddchars < 3) { //#23099
        $k[$j++] = 'bwipp.aztecInvalidECaddChars#23098'; //#23098
        $k[$j++] = "The number of additional EC codewords must be 3 or more"; //#23098
        bwipp_raiseerror(); //#23098
    } //#23098
    if ($ne($_.format, "full") && ($ne($_.format, "compact") && $ne($_.format, "rune"))) { //#23103
        $k[$j++] = 'bwipp.aztecInvalidFormat#23102'; //#23102
        $k[$j++] = "The format must be either full, compact or rune"; //#23102
        bwipp_raiseerror(); //#23102
    } //#23102
    if ($eq($_.format, "full")) { //#23112
        if ($_.readerinit && (($_.layers < 1) || ($_.layers > 22))) { //#23108
            $k[$j++] = 'bwipp.aztecFullInitInvalidLayers#23107'; //#23107
            $k[$j++] = "Full-range symbols for reader programming must specify from 1 to 22 layers"; //#23107
            bwipp_raiseerror(); //#23107
        } //#23107
        if (($_.layers != -1) && (($_.layers < 1) || ($_.layers > 32))) { //#23111
            $k[$j++] = 'bwipp.aztecFullInvalidLayers#23110'; //#23110
            $k[$j++] = "Layers for full-range symbols must be from 1 to 32"; //#23110
            bwipp_raiseerror(); //#23110
        } //#23110
    } //#23110
    if ($eq($_.format, "compact")) { //#23124
        if ($_.readerinit) { //#23120
            if (($_.layers != -1) && ($_.layers != 1)) { //#23118
                $k[$j++] = 'bwipp.aztecCompactInitInvalidLayers#23117'; //#23117
                $k[$j++] = "Compact symbols for reader programming must have 1 layer"; //#23117
                bwipp_raiseerror(); //#23117
            } //#23117
            $_.layers = 1; //#23119
        } //#23119
        if (($_.layers != -1) && (($_.layers < 1) || ($_.layers > 4))) { //#23123
            $k[$j++] = 'bwipp.aztecCompactInvalidLayers#23122'; //#23122
            $k[$j++] = "Layers for compact symbols must be from 1 to 4"; //#23122
            bwipp_raiseerror(); //#23122
        } //#23122
    } //#23122
    if ($eq($_.format, "rune")) { //#23144
        if ($_.layers != -1) { //#23129
            $k[$j++] = 'bwipp.aztecRuneInvalidLayers#23128'; //#23128
            $k[$j++] = "It is not valid to specify layers for runes"; //#23128
            bwipp_raiseerror(); //#23128
        } //#23128
        if ($_.readerinit) { //#23132
            $k[$j++] = 'bwipp.aztecRuneReaderInit#23131'; //#23131
            $k[$j++] = "Reader initialisation is not compactible with Aztec Runes"; //#23131
            bwipp_raiseerror(); //#23131
        } //#23131
        if ($_.barcode.length == 0) { //#23135
            $k[$j++] = 'bwipp.aztecRuneNotNumeric#23134'; //#23134
            $k[$j++] = "Aztec runes must be numeric"; //#23134
            bwipp_raiseerror(); //#23134
        } //#23134
        $forall($_.barcode, function() { //#23140
            var _S = $k[--$j]; //#23137
            if ((_S < 48) || (_S > 57)) { //#23139
                $k[$j++] = 'bwipp.aztecRuneNotNumeric#23138'; //#23138
                $k[$j++] = "Aztec runes must be numeric"; //#23138
                bwipp_raiseerror(); //#23138
            } //#23138
        }); //#23138
        var _U = $cvi($_.barcode); //#23141
        if ((_U < 0) || (_U > 255)) { //#23143
            $k[$j++] = 'bwipp.aztecRuneInvalid#23142'; //#23142
            $k[$j++] = "Aztec runes must be 0 to 255"; //#23142
            bwipp_raiseerror(); //#23142
        } //#23142
    } //#23142
    $_.fn1 = -1; //#23147
    var _Y = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1]
    ]); //#23152
    $_.fncvals = _Y; //#23153
    $k[$j++] = 'msg'; //#23154
    $k[$j++] = $_.barcode; //#23154
    $k[$j++] = $_.fncvals; //#23154
    bwipp_parseinput(); //#23154
    var _b = $k[--$j]; //#23154
    $_[$k[--$j]] = _b; //#23154
    $_.msglen = $_.msg.length; //#23155
    if (!bwipp_azteccode.__23255__) { //#23255
        $_ = Object.create($_); //#23255
        $_.U = 0; //#23159
        $_.L = 1; //#23159
        $_.M = 2; //#23159
        $_.P = 3; //#23159
        $_.D = 4; //#23159
        $_.B = 5; //#23159
        $_.lu = -2; //#23162
        $_.ll = -3; //#23162
        $_.lm = -4; //#23162
        $_.lp = -5; //#23163
        $_.ld = -6; //#23163
        $_.su = -7; //#23163
        $_.sp = -8; //#23164
        $_.sb = -9; //#23164
        $_.fl = -10; //#23164
        $_.p2 = -11; //#23165
        $_.p3 = -12; //#23165
        $_.p4 = -13; //#23165
        $_.p5 = -14; //#23165
        $_.charmaps = $a([$a([$_.sp, $_.sp, $_.sp, $_.fl, $_.sp]), $a([32, 32, 32, 13, 32]), $a(["A", "a", 1, $_.p2, "0"]), $a(["B", "b", 2, $_.p3, "1"]), $a(["C", "c", 3, $_.p4, "2"]), $a(["D", "d", 4, $_.p5, "3"]), $a(["E", "e", 5, "!", "4"]), $a(["F", "f", 6, "\"", "5"]), $a(["G", "g", 7, "#", "6"]), $a(["H", "h", 8, "$", "7"]), $a(["I", "i", 9, "%", "8"]), $a(["J", "j", 10, "&", "9"]), $a(["K", "k", 11, "'", ","]), $a(["L", "l", 12, 40, "."]), $a(["M", "m", 13, 41, $_.lu]), $a(["N", "n", 27, "*", $_.su]), $a(["O", "o", 28, "+", -99]), $a(["P", "p", 29, ",", -99]), $a(["Q", "q", 30, "-", -99]), $a(["R", "r", 31, ".", -99]), $a(["S", "s", "@", "/", -99]), $a(["T", "t", 92, ":", -99]), $a(["U", "u", "^", ";", -99]), $a(["V", "v", "_", "<", -99]), $a(["W", "w", "`", "=", -99]), $a(["X", "x", "|", ">", -99]), $a(["Y", "y", "~", "?", -99]), $a(["Z", "z", 127, "[", -99]), $a([$_.ll, $_.su, $_.ll, "]", -99]), $a([$_.lm, $_.lm, $_.lu, "{", -99]), $a([$_.ld, $_.ld, $_.lp, "}", -99]), $a([$_.sb, $_.sb, $_.sb, $_.lu, -99])]); //#23202
        $_.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#23205
        for (var _1c = 0, _1b = $_.charmaps.length - 1; _1c <= _1b; _1c += 1) { //#23214
            $_.i = _1c; //#23207
            $_.encs = $get($_.charmaps, $_.i); //#23208
            for (var _1g = 0; _1g <= 4; _1g += 1) { //#23213
                $_.j = _1g; //#23210
                var _1j = $get($_.encs, $_.j); //#23211
                $k[$j++] = _1j; //#23211
                if ($eq($type(_1j), 'stringtype')) { //#23211
                    var _1m = $get($k[--$j], 0); //#23211
                    $k[$j++] = _1m; //#23211
                } //#23211
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#23212
            } //#23212
        } //#23212
        var _1w = new Map([
            ["\x0d\x0a", $_.p2],
            [". ", $_.p3],
            [", ", $_.p4],
            [": ", $_.p5]
        ]); //#23221
        $_.pcomp = _1w; //#23222
        $_.e = 1000000; //#23224
        var _23 = $a([$a([0, 5, 5, 10, 5, 10]), $a([9, 0, 5, 10, 5, 10]), $a([5, 5, 0, 5, 10, 10]), $a([5, 10, 10, 0, 10, 15]), $a([4, 9, 9, 14, 0, 14]), $a([0, 0, 0, 0, 0, 0])]); //#23233
        $_.latlen = _23; //#23234
        $_.latseq = $a([$a([$a([]), $a([$_.ll]), $a([$_.lm]), $a([$_.lm, $_.lp]), $a([$_.ld]), $a([$_.sb])]), $a([$a([$_.ld, $_.lu]), $a([]), $a([$_.lm]), $a([$_.lm, $_.lp]), $a([$_.ld]), $a([$_.sb])]), $a([$a([$_.lu]), $a([$_.ll]), $a([]), $a([$_.lp]), $a([$_.lu, $_.ld]), $a([$_.sb])]), $a([$a([$_.lu]), $a([$_.lu, $_.ll]), $a([$_.lu, $_.lm]), $a([]), $a([$_.lu, $_.ld]), $a([$_.lu, $_.sb])]), $a([$a([$_.lu]), $a([$_.lu, $_.ll]), $a([$_.lu, $_.lm]), $a([$_.lu, $_.lm, $_.lp]), $a([]), $a([$_.lu, $_.sb])]), $a([$a([$_.lu]), $a([$_.ll]), $a([$_.lm]), $a([]), $a([]), $a([])])]); //#23244
        $_.shftlen = $a([$a([$_.e, $_.e, $_.e, 5, $_.e]), $a([5, $_.e, $_.e, 5, $_.e]), $a([$_.e, $_.e, $_.e, 5, $_.e]), $a([$_.e, $_.e, $_.e, $_.e, $_.e]), $a([4, $_.e, $_.e, 4, $_.e])]); //#23253
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#23253
        bwipp_azteccode.__23255__ = 1; //#23253
        $_ = Object.getPrototypeOf($_); //#23253
    } //#23253
    $_.msgbits = ""; //#23258
    if ($ne($_.format, "rune") && $_.raw) { //#23259
        $_.msgbits = $_.barcode; //#23259
    } //#23259
    if ($ne($_.format, "rune") && (!$_.raw)) { //#23555
        $_.charsize = function() {
            var _3v = $k[--$j]; //#23263
            $k[$j++] = _3v; //#23274
            if (_3v >= 0) { //#23272
                $j--; //#23265
                var _3y = $get($a([5, 5, 5, 5, 4, 8]), $k[--$j]); //#23265
                $k[$j++] = _3y; //#23265
            } else { //#23272
                var _3z = $k[--$j]; //#23267
                var _40 = $k[--$j]; //#23267
                $k[$j++] = _3z; //#23267
                $k[$j++] = _40; //#23267
                $j--; //#23267
                var _41 = $k[--$j]; //#23268
                $k[$j++] = _41; //#23273
                if (_41 == $_.fn1) { //#23272
                    $j--; //#23269
                    $k[$j++] = 8; //#23269
                } else { //#23272
                    var _44 = $f((-$k[--$j]) - 1000000); //#23271
                    $k[$j++] = _44; //#23271
                    if (_44 == 0) { //#23271
                        $j--; //#23271
                        $k[$j++] = 1; //#23271
                    } //#23271
                    var _45 = $k[--$j]; //#23272
                    $k[$j++] = (((~~(Math.log(_45) / Math.log(10))) + 1) * 4) + 8; //#23272
                } //#23272
            } //#23272
        }; //#23272
        $_.curlen = $a([0, $_.e, $_.e, $_.e, $_.e, $_.e]); //#23278
        $_.curseq = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([])]); //#23279
        $_.backto = $_.U; //#23281
        $_.lastchar = ""; //#23282
        $forall($_.msg, function() { //#23438
            $_.char = $k[--$j]; //#23287
            for (;;) { //#23313
                $_.imp = false; //#23291
                var _4S = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#23292
                for (var _4T = 0, _4U = _4S.length; _4T < _4U; _4T++) { //#23311
                    $_.x = $get(_4S, _4T); //#23293
                    var _4c = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#23294
                    for (var _4d = 0, _4e = _4c.length; _4d < _4e; _4d++) { //#23310
                        $_.y = $get(_4c, _4d); //#23295
                        if (($_.x != $_.B) || ($_.y == $_.backto)) { //#23309
                            $_.cost = $f($get($_.curlen, $_.x) + $get($get($_.latlen, $_.x), $_.y)); //#23297
                            if ($_.cost < $get($_.curlen, $_.y)) { //#23308
                                $put($_.curlen, $_.y, $_.cost); //#23299
                                $k[$j++] = $_.curseq; //#23302
                                $k[$j++] = $_.y; //#23302
                                $k[$j++] = Infinity; //#23300
                                $aload($get($_.curseq, $_.x)); //#23301
                                $aload($get($get($_.latseq, $_.x), $_.y)); //#23302
                                var _59 = $a(); //#23302
                                var _5A = $k[--$j]; //#23303
                                $put($k[--$j], _5A, _59); //#23303
                                if ($_.y == $_.B) { //#23306
                                    $k[$j++] = 'backto'; //#23305
                                    if (($_.x == $_.P) || ($_.x == $_.D)) { //#23305
                                        $k[$j++] = $_.U; //#23305
                                    } else { //#23305
                                        $k[$j++] = $_.x; //#23305
                                    } //#23305
                                    var _5K = $k[--$j]; //#23305
                                    $_[$k[--$j]] = _5K; //#23305
                                } //#23305
                                $_.imp = true; //#23307
                            } //#23307
                        } //#23307
                    } //#23307
                } //#23307
                if (!$_.imp) { //#23312
                    break; //#23312
                } //#23312
            } //#23312
            $_.nxtlen = $a([$_.e, $_.e, $_.e, $_.e, $_.e, $_.e]); //#23316
            $_.nxtseq = $a(6); //#23317
            var _5b = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#23319
            for (var _5c = 0, _5d = _5b.length; _5c < _5d; _5c++) { //#23358
                $_.x = $get(_5b, _5c); //#23320
                for (;;) { //#23356
                    if ($_.char >= 0) { //#23328
                        if ($_.x != $_.B) { //#23326
                            var _5m = $get($get($_.charvals, $_.x), $_.char) !== undefined; //#23326
                            if (!_5m) { //#23326
                                break; //#23326
                            } //#23326
                        } //#23326
                    } else { //#23328
                        if ($_.x != $_.P) { //#23328
                            break; //#23328
                        } //#23328
                    } //#23328
                    $k[$j++] = 'cost'; //#23332
                    $k[$j++] = $get($_.curlen, $_.x); //#23332
                    $k[$j++] = $_.x; //#23332
                    $k[$j++] = $_.char; //#23332
                    $_.charsize(); //#23332
                    var _5u = $k[--$j]; //#23332
                    var _5v = $k[--$j]; //#23332
                    $_[$k[--$j]] = $f(_5v + _5u); //#23332
                    if ($_.cost < $get($_.nxtlen, $_.x)) { //#23336
                        $put($_.nxtlen, $_.x, $_.cost); //#23334
                        $k[$j++] = $_.nxtseq; //#23335
                        $k[$j++] = $_.x; //#23335
                        $k[$j++] = Infinity; //#23335
                        $aload($get($_.curseq, $_.x)); //#23335
                        $k[$j++] = $_.char; //#23335
                        var _6A = $a(); //#23335
                        var _6B = $k[--$j]; //#23335
                        $put($k[--$j], _6B, _6A); //#23335
                    } //#23335
                    if ($_.x == $_.B) { //#23339
                        break; //#23339
                    } //#23339
                    var _6K = $a([$_.U, $_.L, $_.M, $_.P, $_.D]); //#23340
                    for (var _6L = 0, _6M = _6K.length; _6L < _6M; _6L++) { //#23353
                        $_.y = $get(_6K, _6L); //#23341
                        if ($ne($_.x, $_.y)) { //#23352
                            $k[$j++] = 'cost'; //#23343
                            $k[$j++] = $f($get($_.curlen, $_.y) + $get($get($_.shftlen, $_.y), $_.x)); //#23343
                            $k[$j++] = $_.x; //#23343
                            $k[$j++] = $_.char; //#23343
                            $_.charsize(); //#23343
                            var _6a = $k[--$j]; //#23343
                            var _6b = $k[--$j]; //#23343
                            $_[$k[--$j]] = $f(_6b + _6a); //#23343
                            if ($_.cost < $get($_.nxtlen, $_.y)) { //#23351
                                $put($_.nxtlen, $_.y, $_.cost); //#23345
                                $k[$j++] = $_.nxtseq; //#23349
                                $k[$j++] = $_.y; //#23349
                                $k[$j++] = Infinity; //#23346
                                $aload($get($_.curseq, $_.y)); //#23347
                                var _6r = ($_.x == $_.U) ? $_.su : $_.sp; //#23348
                                $k[$j++] = _6r; //#23349
                                $k[$j++] = $_.char; //#23349
                                var _6t = $a(); //#23349
                                var _6u = $k[--$j]; //#23350
                                $put($k[--$j], _6u, _6t); //#23350
                            } //#23350
                        } //#23350
                    } //#23350
                    break; //#23355
                } //#23355
            } //#23355
            if ($ne($_.lastchar, "") && ($_.char >= 0)) { //#23423
                var _6y = $s(2); //#23362
                $put(_6y, 0, $_.lastchar); //#23362
                $put(_6y, 1, $_.char); //#23362
                $_.pchars = _6y; //#23362
                var _73 = $get($_.pcomp, $_.pchars) !== undefined; //#23363
                if (_73) { //#23422
                    var _79 = $a([$_.U, $_.L, $_.M, $_.P, $_.D]); //#23364
                    for (var _7A = 0, _7B = _79.length; _7A < _7B; _7A++) { //#23421
                        $_.i = $get(_79, _7A); //#23365
                        $_.inP = true; //#23366
                        if ($_.i == $_.M) { //#23371
                            if ($_.lastchar == 13) { //#23368
                                $_.inP = false; //#23368
                            } //#23368
                        } else { //#23371
                            if ($_.i == $_.D) { //#23372
                                if (($_.lastchar == 44) || ($_.lastchar == 46)) { //#23371
                                    $_.inP = false; //#23371
                                } //#23371
                            } //#23371
                        } //#23371
                        if ($_.inP && $lt($get($_.curlen, $_.i), $get($_.nxtlen, $_.i))) { //#23420
                            $_.curseqi = $get($_.curseq, $_.i); //#23375
                            $_.lastld = false; //#23376
                            $_.lastsp = false; //#23377
                            $_.lastidx = -1; //#23378
                            for (var _7V = $_.curseqi.length - 1; _7V >= 0; _7V -= 1) { //#23403
                                $_.idx = _7V; //#23380
                                $_.ch = $get($_.curseqi, $_.idx); //#23381
                                if ($_.lastidx == -1) { //#23400
                                    if ($eq($_.ch, $_.lastchar)) { //#23388
                                        $_.lastidx = $_.idx; //#23384
                                        if ($_.idx > 0) { //#23387
                                            if ($get($_.curseqi, $_.idx - 1) == $_.sp) { //#23386
                                                $_.lastsp = true; //#23386
                                            } //#23386
                                        } //#23386
                                    } //#23386
                                } else { //#23400
                                    if ($_.ch == $_.sb) { //#23393
                                        $_.lastidx = -1; //#23391
                                        break; //#23392
                                    } //#23392
                                    if (($_.ch < 0) && ($_.ch >= $_.ld)) { //#23401
                                        if ($_.i == $_.P) { //#23398
                                            if ($_.ch == $_.ld) { //#23396
                                                $_.lastld = true; //#23396
                                            } //#23396
                                        } else { //#23398
                                            if ($_.ch != $_.lp) { //#23398
                                                $_.inP = $_.lastsp; //#23398
                                            } //#23398
                                        } //#23398
                                        break; //#23400
                                    } //#23400
                                } //#23400
                            } //#23400
                            if ($_.inP && ($_.lastidx >= 0)) { //#23419
                                $put($_.nxtlen, $_.i, $get($_.curlen, $_.i)); //#23405
                                if ($_.lastidx < ($_.curseqi.length - 1)) { //#23417
                                    if ($_.i == $_.P) { //#23414
                                        if ($_.lastld) { //#23408
                                            $put($_.nxtlen, $_.i, $f($get($_.nxtlen, $_.i) + 1)); //#23408
                                        } //#23408
                                        $k[$j++] = $_.nxtseq; //#23410
                                        $k[$j++] = $_.i; //#23410
                                        $k[$j++] = Infinity; //#23410
                                        $aload($_.curseqi); //#23410
                                        $r($_.curseqi.length - $_.lastidx, -1); //#23410
                                        $j--; //#23410
                                        $k[$j++] = $get($_.pcomp, $_.pchars); //#23410
                                        var _8J = $a(); //#23410
                                        var _8K = $k[--$j]; //#23410
                                        $put($k[--$j], _8K, _8J); //#23410
                                    } else { //#23414
                                        $k[$j++] = $_.nxtseq; //#23413
                                        $k[$j++] = $_.i; //#23413
                                        $k[$j++] = Infinity; //#23413
                                        $aload($_.curseqi); //#23413
                                        var _8P = $a(); //#23413
                                        var _8Q = $k[--$j]; //#23413
                                        $put($k[--$j], _8Q, _8P); //#23413
                                        $put($get($_.nxtseq, $_.i), $_.lastidx, $get($_.pcomp, $_.pchars)); //#23414
                                    } //#23414
                                } else { //#23417
                                    $k[$j++] = $_.nxtseq; //#23417
                                    $k[$j++] = $_.i; //#23417
                                    $k[$j++] = Infinity; //#23417
                                    $aload($_.curseqi); //#23417
                                    $j--; //#23417
                                    $k[$j++] = $get($_.pcomp, $_.pchars); //#23417
                                    var _8f = $a(); //#23417
                                    var _8g = $k[--$j]; //#23417
                                    $put($k[--$j], _8g, _8f); //#23417
                                } //#23417
                            } //#23417
                        } //#23417
                    } //#23417
                } //#23417
            } //#23417
            if ($ne($get($_.nxtseq, $_.B), null)) { //#23432
                $_.numbytes = 0; //#23427
                $forall($get($_.nxtseq, $_.B), function() { //#23430
                    if ($k[--$j] == $_.sb) { //#23429
                        $k[$j++] = 0; //#23429
                    } else { //#23429
                        $k[$j++] = $_.numbytes + 1; //#23429
                    } //#23429
                    $_.numbytes = $k[--$j]; //#23429
                }); //#23429
                if ($_.numbytes == 32) { //#23431
                    $put($_.nxtlen, $_.B, $f($get($_.nxtlen, $_.B) + 11)); //#23431
                } //#23431
            } //#23431
            $_.curlen = $_.nxtlen; //#23434
            $_.curseq = $_.nxtseq; //#23435
            $k[$j++] = 'lastchar'; //#23436
            if ($_.char >= 0) { //#23436
                $k[$j++] = $_.char; //#23436
            } else { //#23436
                $k[$j++] = ""; //#23436
            } //#23436
            var _92 = $k[--$j]; //#23436
            $_[$k[--$j]] = _92; //#23436
        }); //#23436
        $_.minseq = $_.e; //#23441
        var _9B = $a([$_.U, $_.L, $_.M, $_.P, $_.D, $_.B]); //#23442
        for (var _9C = 0, _9D = _9B.length; _9C < _9D; _9C++) { //#23448
            $_.i = $get(_9B, _9C); //#23443
            if ($get($_.curlen, $_.i) < $_.minseq) { //#23447
                $_.minseq = $get($_.curlen, $_.i); //#23445
                $_.seq = $get($_.curseq, $_.i); //#23446
            } //#23446
        } //#23446
        $_.tobin = function() {
            var _9Q = $s($k[--$j]); //#23452
            $k[$j++] = _9Q; //#23452
            for (var _9S = 0, _9R = _9Q.length - 1; _9S <= _9R; _9S += 1) { //#23452
                var _9T = $k[--$j]; //#23452
                $put(_9T, _9S, 48); //#23452
                $k[$j++] = _9T; //#23452
            } //#23452
            var _9U = $k[--$j]; //#23453
            $k[$j++] = _9U; //#23453
            $k[$j++] = _9U; //#23453
            $r(3, -1); //#23453
            var _9V = $k[--$j]; //#23453
            var _9W = $k[--$j]; //#23453
            var _9Y = $cvrs($s(_9W.length), _9V, 2); //#23453
            $puti(_9W, _9W.length - _9Y.length, _9Y); //#23453
        }; //#23453
        $_.encu = function() {
            var _9d = $get($get($_.charvals, $_.U), $k[--$j]); //#23456
            $k[$j++] = _9d; //#23456
            $k[$j++] = 5; //#23456
            $_.tobin(); //#23456
        }; //#23456
        $_.encl = function() {
            var _9i = $get($get($_.charvals, $_.L), $k[--$j]); //#23457
            $k[$j++] = _9i; //#23457
            $k[$j++] = 5; //#23457
            $_.tobin(); //#23457
        }; //#23457
        $_.encm = function() {
            var _9n = $get($get($_.charvals, $_.M), $k[--$j]); //#23458
            $k[$j++] = _9n; //#23458
            $k[$j++] = 5; //#23458
            $_.tobin(); //#23458
        }; //#23458
        $_.encd = function() {
            var _9s = $get($get($_.charvals, $_.D), $k[--$j]); //#23459
            $k[$j++] = _9s; //#23459
            $k[$j++] = 4; //#23459
            $_.tobin(); //#23459
        }; //#23459
        $_.encp = function() {
            var _9t = $k[--$j]; //#23462
            $k[$j++] = _9t; //#23479
            if (_9t == $_.fn1) { //#23478
                $j--; //#23463
                $k[$j++] = "00000000"; //#23463
            } else { //#23478
                var _9v = $k[--$j]; //#23465
                $k[$j++] = _9v; //#23479
                if (_9v <= -1000000) { //#23478
                    var _9x = $f((-$k[--$j]) - 1000000); //#23466
                    $k[$j++] = _9x; //#23466
                    $k[$j++] = _9x; //#23466
                    if (_9x == 0) { //#23466
                        $j--; //#23466
                        $k[$j++] = 1; //#23466
                    } //#23466
                    var _9z = ~~(Math.log($k[--$j]) / Math.log(10)); //#23468
                    var _A0 = $s(((_9z + 1) * 4) + 8); //#23468
                    $puti(_A0, 0, "00000"); //#23469
                    $k[$j++] = _9z; //#23470
                    $k[$j++] = _A0; //#23470
                    $k[$j++] = _A0; //#23470
                    $k[$j++] = _9z + 1; //#23470
                    $k[$j++] = 3; //#23470
                    $_.tobin(); //#23470
                    var _A1 = $k[--$j]; //#23470
                    $puti($k[--$j], 5, _A1); //#23470
                    $r(3, 1); //#23471
                    $k[$j++] = -1; //#23475
                    $k[$j++] = 0; //#23475
                    if ($j < 3) throw "--stack-underflow--"; //#23475
                    $j -= 3; //#23475
                    for (var _A6 = $k[$j], _A7 = $k[$j + 1], _A5 = $k[$j + 2]; _A7 < 0 ? _A6 >= _A5 : _A6 <= _A5; _A6 += _A7) { //#23475
                        var _A8 = $k[--$j]; //#23472
                        var _A9 = $k[--$j]; //#23473
                        $k[$j++] = _A9; //#23474
                        $k[$j++] = ~~(_A8 / 10); //#23474
                        $k[$j++] = _A9; //#23474
                        $k[$j++] = (_A6 * 4) + 8; //#23474
                        $k[$j++] = $f((_A8 % 10) + 2); //#23474
                        $k[$j++] = 4; //#23474
                        $_.tobin(); //#23474
                        var _AA = $k[--$j]; //#23474
                        var _AB = $k[--$j]; //#23474
                        $puti($k[--$j], _AB, _AA); //#23474
                    } //#23474
                    $j--; //#23476
                } else { //#23478
                    var _AH = $get($get($_.charvals, $_.P), $k[--$j]); //#23478
                    $k[$j++] = _AH; //#23478
                    $k[$j++] = 5; //#23478
                    $_.tobin(); //#23478
                } //#23478
            } //#23478
        }; //#23478
        $_.encfuncs = $a(['encu', 'encl', 'encm', 'encp', 'encd']); //#23482
        $_.addtomsgbits = function() {
            $_.v = $k[--$j]; //#23485
            $puti($_.msgbits, $_.j, $_.v); //#23486
            $_.j = $_.j + $_.v.length; //#23487
        }; //#23487
        $_.state = $_.U; //#23491
        $_.msgbits = $s($_.minseq); //#23492
        $_.i = 0; //#23493
        $_.j = 0; //#23493
        for (;;) { //#23552
            if ($_.i >= $_.seq.length) { //#23494
                break; //#23494
            } //#23494
            if ($_.state != $_.B) { //#23547
                $_.char = $get($_.seq, $_.i); //#23498
                $k[$j++] = $_.char; //#23501
                if ($_[$get($_.encfuncs, $_.state)]() === true) {
                    break;
                } //#23501
                $_.addtomsgbits(); //#23501
                $_.i = $_.i + 1; //#23502
                if (($_.char == $_.su) || ($_.char == $_.sp)) { //#23508
                    $k[$j++] = $get($_.seq, $_.i); //#23506
                    if ($_.char == $_.su) { //#23506
                        $_.encu(); //#23506
                    } else { //#23506
                        $_.encp(); //#23506
                    } //#23506
                    $_.addtomsgbits(); //#23506
                    $_.i = $_.i + 1; //#23507
                } //#23507
                if ($_.char == $_.lu) { //#23511
                    $_.state = $_.U; //#23511
                } //#23511
                if ($_.char == $_.ll) { //#23512
                    $_.state = $_.L; //#23512
                } //#23512
                if ($_.char == $_.lm) { //#23513
                    $_.state = $_.M; //#23513
                } //#23513
                if ($_.char == $_.lp) { //#23514
                    $_.state = $_.P; //#23514
                } //#23514
                if ($_.char == $_.ld) { //#23515
                    $_.state = $_.D; //#23515
                } //#23515
                if ($_.char == $_.sb) { //#23516
                    $_.state = $_.B; //#23516
                } //#23516
            } else { //#23547
                $_.numbytes = 0; //#23521
                for (;;) { //#23525
                    if (($_.i + $_.numbytes) >= $_.seq.length) { //#23522
                        break; //#23522
                    } //#23522
                    if ($get($_.seq, $_.i + $_.numbytes) < 0) { //#23523
                        break; //#23523
                    } //#23523
                    $_.numbytes = $_.numbytes + 1; //#23524
                } //#23524
                if ($_.numbytes <= 31) { //#23532
                    $k[$j++] = $_.numbytes; //#23529
                    $k[$j++] = 5; //#23529
                    $_.tobin(); //#23529
                    $_.addtomsgbits(); //#23529
                } else { //#23532
                    $k[$j++] = 0; //#23531
                    $k[$j++] = 5; //#23531
                    $_.tobin(); //#23531
                    $_.addtomsgbits(); //#23531
                    $k[$j++] = $_.numbytes - 31; //#23532
                    $k[$j++] = 11; //#23532
                    $_.tobin(); //#23532
                    $_.addtomsgbits(); //#23532
                } //#23532
                for (var _BJ = 0, _BK = $_.numbytes; _BJ < _BK; _BJ++) { //#23539
                    $k[$j++] = $get($_.seq, $_.i); //#23537
                    $k[$j++] = 8; //#23537
                    $_.tobin(); //#23537
                    $_.addtomsgbits(); //#23537
                    $_.i = $_.i + 1; //#23538
                } //#23538
                if ($_.i < $_.seq.length) { //#23548
                    $_.char = $get($_.seq, $_.i); //#23543
                    $_.i = $_.i + 1; //#23544
                    if ($_.char == $_.lu) { //#23545
                        $_.state = $_.U; //#23545
                    } //#23545
                    if ($_.char == $_.ll) { //#23546
                        $_.state = $_.L; //#23546
                    } //#23546
                    if ($_.char == $_.lm) { //#23547
                        $_.state = $_.M; //#23547
                    } //#23547
                } //#23547
            } //#23547
        } //#23547
        $_.msgbits = $geti($_.msgbits, 0, $_.j); //#23553
    } //#23553
    if (!bwipp_azteccode.__23574__) { //#23574
        $_ = Object.create($_); //#23574
        $_.metrics = $a([$a(["rune", 0, 0, 0, 6]), $a(["compact", 1, 1, 17, 6]), $a(["full", 1, 1, 21, 6]), $a(["compact", 2, 0, 40, 6]), $a(["full", 2, 1, 48, 6]), $a(["compact", 3, 0, 51, 8]), $a(["full", 3, 1, 60, 8]), $a(["compact", 4, 0, 76, 8]), $a(["full", 4, 1, 88, 8]), $a(["full", 5, 1, 120, 8]), $a(["full", 6, 1, 156, 8]), $a(["full", 7, 1, 196, 8]), $a(["full", 8, 1, 240, 8]), $a(["full", 9, 1, 230, 10]), $a(["full", 10, 1, 272, 10]), $a(["full", 11, 1, 316, 10]), $a(["full", 12, 1, 364, 10]), $a(["full", 13, 1, 416, 10]), $a(["full", 14, 1, 470, 10]), $a(["full", 15, 1, 528, 10]), $a(["full", 16, 1, 588, 10]), $a(["full", 17, 1, 652, 10]), $a(["full", 18, 1, 720, 10]), $a(["full", 19, 1, 790, 10]), $a(["full", 20, 1, 864, 10]), $a(["full", 21, 1, 940, 10]), $a(["full", 22, 1, 1020, 10]), $a(["full", 23, 0, 920, 12]), $a(["full", 24, 0, 992, 12]), $a(["full", 25, 0, 1066, 12]), $a(["full", 26, 0, 1144, 12]), $a(["full", 27, 0, 1224, 12]), $a(["full", 28, 0, 1306, 12]), $a(["full", 29, 0, 1392, 12]), $a(["full", 30, 0, 1480, 12]), $a(["full", 31, 0, 1570, 12]), $a(["full", 32, 0, 1664, 12])]); //#23573
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#23573
        bwipp_azteccode.__23574__ = 1; //#23573
        $_ = Object.getPrototypeOf($_); //#23573
    } //#23573
    var _CK = $_.metrics; //#23576
    for (var _CL = 0, _CM = _CK.length; _CL < _CM; _CL++) { //#23592
        $_.m = $get(_CK, _CL); //#23577
        $_.frmt = $get($_.m, 0); //#23578
        $_.mlyr = $get($_.m, 1); //#23579
        $_.icap = $get($_.m, 2); //#23580
        $_.ncws = $get($_.m, 3); //#23581
        $_.bpcw = $get($_.m, 4); //#23582
        $_.numecw = ~~(Math.ceil($f((($_.ncws * $_.eclevel) / 100) + $_.ecaddchars))); //#23583
        if ($_.msgbits.length == 0) { //#23584
            $_.numecw = 0; //#23584
        } //#23584
        $_.numdcw = $f($_.ncws - $_.numecw); //#23585
        $_.okay = true; //#23586
        if ($ne($_.format, $_.frmt)) { //#23587
            $_.okay = false; //#23587
        } //#23587
        if ($_.readerinit && ($_.icap != 1)) { //#23588
            $_.okay = false; //#23588
        } //#23588
        if (($_.layers != -1) && ($_.layers != $_.mlyr)) { //#23589
            $_.okay = false; //#23589
        } //#23589
        if ((~~Math.ceil($_.msgbits.length / $_.bpcw)) > $_.numdcw) { //#23590
            $_.okay = false; //#23590
        } //#23590
        if ($_.okay) { //#23591
            break; //#23591
        } //#23591
    } //#23591
    if (!$_.okay) { //#23596
        $k[$j++] = 'bwipp.aztecNoValidSymbol#23595'; //#23595
        $k[$j++] = "Maximum length exceeded"; //#23595
        bwipp_raiseerror(); //#23595
    } //#23595
    $_.layers = $_.mlyr; //#23598
    $_.allzero = function() {
        var _Cr = $k[--$j]; //#23601
        $k[$j++] = $eq(_Cr, $geti("000000000000", 0, _Cr.length)); //#23601
    }; //#23601
    $_.allones = function() {
        var _Ct = $k[--$j]; //#23602
        $k[$j++] = $eq(_Ct, $geti("111111111111", 0, _Ct.length)); //#23602
    }; //#23602
    $_.cws = $a($_.ncws); //#23603
    $_.m = 0; //#23604
    $_.c = 0; //#23604
    for (;;) { //#23631
        if ($_.msgbits.length <= $_.m) { //#23606
            break; //#23606
        } //#23606
        if (($_.msgbits.length - $_.m) >= $_.bpcw) { //#23620
            $_.cwb = $geti($_.msgbits, $_.m, $f($_.bpcw - 1)); //#23608
            $_.cwf = $geti($_.msgbits, $f($f($_.m + $_.bpcw) - 1), 1); //#23609
            $k[$j++] = $_.cwb; //#23610
            $_.allzero(); //#23610
            if ($k[--$j]) { //#23610
                $_.cwf = "1"; //#23610
                $_.m = $_.m - 1; //#23610
            } //#23610
            $k[$j++] = $_.cwb; //#23611
            $_.allones(); //#23611
            if ($k[--$j]) { //#23611
                $_.cwf = "0"; //#23611
                $_.m = $_.m - 1; //#23611
            } //#23611
            var _DG = $s(12); //#23613
            $puti(_DG, 0, $_.cwb); //#23613
            $puti(_DG, $f($_.bpcw - 1), $_.cwf); //#23614
            $_.cwb = $geti(_DG, 0, $_.bpcw); //#23616
        } else { //#23620
            $_.cwb = $geti($_.msgbits, $_.m, $_.msgbits.length - $_.m); //#23618
            var _DS = $strcpy($s(12), "111111111111"); //#23619
            $puti(_DS, 0, $_.cwb); //#23619
            $_.cwb = $geti(_DS, 0, $_.bpcw); //#23619
            $k[$j++] = $_.cwb; //#23620
            $_.allones(); //#23620
            if ($k[--$j]) { //#23620
                $puti($_.cwb, $_.cwb.length - 1, "0"); //#23620
            } //#23620
        } //#23620
        $_.cw = 0; //#23623
        for (var _Dc = 0, _Db = $f($_.bpcw - 1); _Dc <= _Db; _Dc += 1) { //#23627
            $_.i = _Dc; //#23625
            $_.cw = $f($_.cw + ((~~(Math.pow(2, $f($f($_.bpcw - $_.i) - 1)))) * $f($get($_.cwb, $_.i) - 48))); //#23626
        } //#23626
        $put($_.cws, $_.c, $_.cw); //#23628
        $_.m = $f($_.m + $_.bpcw); //#23629
        $_.c = $_.c + 1; //#23630
    } //#23630
    $_.cws = $geti($_.cws, 0, $_.c); //#23632
    var _Dt = $get($_.options, 'debugcws') !== undefined; //#23634
    if (_Dt) { //#23634
        $k[$j++] = 'bwipp.debugcws#23634'; //#23634
        $k[$j++] = $_.cws; //#23634
        bwipp_raiseerror(); //#23634
    } //#23634
    $_.rscodes = function() {
        $_.rspm = $k[--$j]; //#23639
        $_.rsgf = $k[--$j]; //#23640
        $_.rsnc = $k[--$j]; //#23641
        $_.rscws = $k[--$j]; //#23642
        $k[$j++] = Infinity; //#23645
        $k[$j++] = 1; //#23645
        for (var _E0 = 0, _E1 = $f($_.rsgf - 1); _E0 < _E1; _E0++) { //#23645
            var _E2 = $k[--$j]; //#23645
            var _E3 = _E2 * 2; //#23645
            $k[$j++] = _E2; //#23645
            $k[$j++] = _E3; //#23645
            if (_E3 >= $_.rsgf) { //#23645
                var _E6 = $k[--$j]; //#23645
                $k[$j++] = $xo(_E6, $_.rspm); //#23645
            } //#23645
        } //#23645
        $_.rsalog = $a(); //#23645
        $_.rslog = $a($_.rsgf); //#23646
        for (var _EC = 1, _EB = $f($_.rsgf - 1); _EC <= _EB; _EC += 1) { //#23647
            $put($_.rslog, $get($_.rsalog, _EC), _EC); //#23647
        } //#23647
        $_.rsprod = function() {
            var _EG = $k[--$j]; //#23651
            var _EH = $k[--$j]; //#23651
            $k[$j++] = _EH; //#23655
            $k[$j++] = _EG; //#23655
            if ((_EG != 0) && (_EH != 0)) { //#23654
                var _EK = $get($_.rslog, $k[--$j]); //#23652
                var _EQ = $get($_.rsalog, $f(_EK + $get($_.rslog, $k[--$j])) % $f($_.rsgf - 1)); //#23652
                $k[$j++] = _EQ; //#23652
            } else { //#23654
                $j -= 2; //#23654
                $k[$j++] = 0; //#23654
            } //#23654
        }; //#23654
        $k[$j++] = Infinity; //#23659
        $k[$j++] = 1; //#23659
        for (var _ES = 0, _ET = $_.rsnc; _ES < _ET; _ES++) { //#23659
            $k[$j++] = 0; //#23659
        } //#23659
        $_.coeffs = $a(); //#23659
        for (var _EX = 1, _EW = $_.rsnc; _EX <= _EW; _EX += 1) { //#23668
            $_.i = _EX; //#23661
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#23662
            for (var _Ee = $_.i - 1; _Ee >= 1; _Ee -= 1) { //#23666
                $_.j = _Ee; //#23664
                $k[$j++] = $_.coeffs; //#23665
                $k[$j++] = $_.j; //#23665
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#23665
                $k[$j++] = $get($_.coeffs, $_.j); //#23665
                $k[$j++] = $get($_.rsalog, $_.i); //#23665
                $_.rsprod(); //#23665
                var _Eq = $k[--$j]; //#23665
                var _Er = $k[--$j]; //#23665
                var _Es = $k[--$j]; //#23665
                $put($k[--$j], _Es, $xo(_Er, _Eq)); //#23665
            } //#23665
            $k[$j++] = $_.coeffs; //#23667
            $k[$j++] = 0; //#23667
            $k[$j++] = $get($_.coeffs, 0); //#23667
            $k[$j++] = $get($_.rsalog, $_.i); //#23667
            $_.rsprod(); //#23667
            var _F0 = $k[--$j]; //#23667
            var _F1 = $k[--$j]; //#23667
            $put($k[--$j], _F1, _F0); //#23667
        } //#23667
        $_.nd = $_.rscws.length; //#23671
        $k[$j++] = Infinity; //#23672
        $aload($_.rscws); //#23672
        for (var _F6 = 0, _F7 = $_.rsnc; _F6 < _F7; _F6++) { //#23672
            $k[$j++] = 0; //#23672
        } //#23672
        $k[$j++] = 0; //#23672
        $_.rscws = $a(); //#23672
        for (var _FB = 0, _FA = $_.nd - 1; _FB <= _FA; _FB += 1) { //#23679
            $_.k = $xo($get($_.rscws, _FB), $get($_.rscws, $_.nd)); //#23674
            for (var _FJ = 0, _FI = $f($_.rsnc - 1); _FJ <= _FI; _FJ += 1) { //#23678
                $_.j = _FJ; //#23676
                $k[$j++] = $_.rscws; //#23677
                $k[$j++] = $_.nd + $_.j; //#23677
                $k[$j++] = $get($_.rscws, ($_.nd + $_.j) + 1); //#23677
                $k[$j++] = $_.k; //#23677
                $k[$j++] = $get($_.coeffs, $f($f($_.rsnc - $_.j) - 1)); //#23677
                $_.rsprod(); //#23677
                var _FW = $k[--$j]; //#23677
                var _FX = $k[--$j]; //#23677
                var _FY = $k[--$j]; //#23677
                $put($k[--$j], _FY, $xo(_FX, _FW)); //#23677
            } //#23677
        } //#23677
        $k[$j++] = $geti($_.rscws, 0, $_.rscws.length - 1); //#23682
    }; //#23682
    if ($eq($_.format, "full")) { //#23697
        $_.mode = ($f($_.layers - 1) << 11) + ($_.cws.length - 1); //#23688
        if ($_.readerinit) { //#23689
            $_.mode = $_.mode | 1024; //#23689
        } //#23689
        $_.mode = $a([($_.mode & 61440) >>> 12, ($_.mode & 3840) >>> 8, ($_.mode & 240) >>> 4, $_.mode & 15]); //#23695
        $k[$j++] = 'mode'; //#23696
        $k[$j++] = $_.mode; //#23696
        $k[$j++] = 6; //#23696
        $k[$j++] = 16; //#23696
        $k[$j++] = 19; //#23696
        $_.rscodes(); //#23696
        var _Fo = $k[--$j]; //#23696
        $_[$k[--$j]] = _Fo; //#23696
    } //#23696
    if ($eq($_.format, "compact")) { //#23706
        $_.mode = ($f($_.layers - 1) << 6) + ($_.cws.length - 1); //#23699
        if ($_.readerinit) { //#23700
            $_.mode = $_.mode | 32; //#23700
        } //#23700
        $_.mode = $a([($_.mode & 240) >>> 4, $_.mode & 15]); //#23704
        $k[$j++] = 'mode'; //#23705
        $k[$j++] = $_.mode; //#23705
        $k[$j++] = 5; //#23705
        $k[$j++] = 16; //#23705
        $k[$j++] = 19; //#23705
        $_.rscodes(); //#23705
        var _Fz = $k[--$j]; //#23705
        $_[$k[--$j]] = _Fz; //#23705
    } //#23705
    if ($eq($_.format, "rune")) { //#23715
        $_.mode = $cvi($_.barcode); //#23708
        $_.mode = $a([($_.mode & 240) >>> 4, $_.mode & 15]); //#23712
        $k[$j++] = 'mode'; //#23713
        $k[$j++] = $_.mode; //#23713
        $k[$j++] = 5; //#23713
        $k[$j++] = 16; //#23713
        $k[$j++] = 19; //#23713
        $_.rscodes(); //#23713
        var _G7 = $k[--$j]; //#23713
        $_[$k[--$j]] = _G7; //#23713
        $k[$j++] = Infinity; //#23714
        var _G9 = $_.mode; //#23714
        for (var _GA = 0, _GB = _G9.length; _GA < _GB; _GA++) { //#23714
            $k[$j++] = $get(_G9, _GA) ^ 10; //#23714
        } //#23714
        $_.mode = $a(); //#23714
    } //#23714
    $_.modebits = $s($_.mode.length * 4); //#23716
    for (var _GI = 0, _GH = $_.modebits.length - 1; _GI <= _GH; _GI += 1) { //#23717
        $puti($_.modebits, _GI, "0"); //#23717
    } //#23717
    for (var _GM = 0, _GL = $_.mode.length - 1; _GM <= _GL; _GM += 1) { //#23721
        $_.i = _GM; //#23719
        var _GS = $cvrs($s(4), $get($_.mode, $_.i), 2); //#23720
        $puti($_.modebits, (4 - _GS.length) + (4 * $_.i), _GS); //#23720
    } //#23720
    if (!bwipp_azteccode.__23735__) { //#23735
        $_ = Object.create($_); //#23735
        $_.rsparams = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([]), $a([64, 67]), $a([]), $a([256, 301]), $a([]), $a([1024, 1033]), $a([]), $a([4096, 4201])]); //#23734
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#23734
        bwipp_azteccode.__23735__ = 1; //#23734
        $_ = Object.getPrototypeOf($_); //#23734
    } //#23734
    $k[$j++] = 'cws'; //#23736
    $k[$j++] = $_.cws; //#23736
    $k[$j++] = $f($_.ncws - $_.cws.length); //#23736
    $aload($get($_.rsparams, $_.bpcw)); //#23736
    $_.rscodes(); //#23736
    var _Gp = $k[--$j]; //#23736
    $_[$k[--$j]] = _Gp; //#23736
    if ($eq($_.format, "full")) { //#23740
        $_.databits = $s($f((($_.layers * $_.layers) * 16) + ($_.layers * 112))); //#23738
    } else { //#23740
        $_.databits = $s($f((($_.layers * $_.layers) * 16) + ($_.layers * 88))); //#23740
    } //#23740
    for (var _H2 = 0, _H1 = $_.databits.length - 1; _H2 <= _H1; _H2 += 1) { //#23742
        $puti($_.databits, _H2, "0"); //#23742
    } //#23742
    for (var _H6 = 0, _H5 = $f($_.ncws - 1); _H6 <= _H5; _H6 += 1) { //#23748
        $_.i = _H6; //#23744
        var _HD = $cvrs($s($_.bpcw), $get($_.cws, $_.i), 2); //#23745
        $puti($_.databits, $f(($f($f($_.bpcw - _HD.length) + ($_.bpcw * $_.i))) + ($f($_.databits.length - ($_.ncws * $_.bpcw)))), _HD); //#23747
    } //#23747
    $_.cmv = function() {
        var _HL = $k[--$j]; //#23751
        var _HM = $k[--$j]; //#23751
        $k[$j++] = $f(($f(_HM - (_HL * $_.size))) + $_.mid); //#23751
    }; //#23751
    $_.lmv = function() {
        $_.lbit = $k[--$j]; //#23755
        $_.llyr = $k[--$j]; //#23756
        $_.lwid = $f($_.fw + ($_.llyr * 4)); //#23757
        $_.ldir = ~~((~~($_.lbit / 2)) / $_.lwid); //#23758
        if ($_.ldir == 0) { //#23763
            $k[$j++] = $f(((-(~~($f($_.lwid - 1) / 2))) + 1) + ((~~($_.lbit / 2)) % $_.lwid)); //#23762
            $k[$j++] = $f(($f((~~(($_.fw - 1) / 2)) + ($_.llyr * 2))) + ($_.lbit % 2)); //#23762
            $_.cmv(); //#23762
        } //#23762
        if ($_.ldir == 1) { //#23768
            $k[$j++] = $f(($f((~~($_.fw / 2)) + ($_.llyr * 2))) + ($_.lbit % 2)); //#23767
            $k[$j++] = $f(((~~($f($_.lwid - 1) / 2)) - 1) - ((~~($_.lbit / 2)) % $_.lwid)); //#23767
            $_.cmv(); //#23767
        } //#23767
        if ($_.ldir == 2) { //#23773
            $k[$j++] = -($f(((-(~~($_.lwid / 2))) + 1) + ((~~($_.lbit / 2)) % $_.lwid))); //#23772
            $k[$j++] = -($f(($f((~~($_.fw / 2)) + ($_.llyr * 2))) + ($_.lbit % 2))); //#23772
            $_.cmv(); //#23772
        } //#23772
        if ($_.ldir == 3) { //#23778
            $k[$j++] = -($f(($f((~~(($_.fw - 1) / 2)) + ($_.llyr * 2))) + ($_.lbit % 2))); //#23777
            $k[$j++] = -($f(((~~($_.lwid / 2)) - 1) - ((~~($_.lbit / 2)) % $_.lwid))); //#23777
            $_.cmv(); //#23777
        } //#23777
    }; //#23777
    if ($eq($_.format, "full")) { //#23783
        $_.fw = 12; //#23783
    } else { //#23783
        $_.fw = 9; //#23783
    } //#23783
    $_.size = $f(($f($_.fw + ($_.layers * 4))) + 2); //#23784
    $k[$j++] = Infinity; //#23785
    for (var _I1 = 0, _I2 = $_.size * $_.size; _I1 < _I2; _I1++) { //#23785
        $k[$j++] = -1; //#23785
    } //#23785
    $_.pixs = $a(); //#23785
    $_.mid = $f(((~~($f($_.size - 1) / 2)) * $_.size) + (~~($f($_.size - 1) / 2))); //#23786
    $_.i = 0; //#23789
    for (var _I9 = 1, _I8 = $_.layers; _I9 <= _I8; _I9 += 1) { //#23797
        $_.layer = _I9; //#23791
        for (var _ID = 0, _IC = (($_.fw + ($_.layer * 4)) * 8) - 1; _ID <= _IC; _ID += 1) { //#23796
            $_.pos = _ID; //#23793
            $k[$j++] = $_.pixs; //#23794
            $k[$j++] = $_.layer; //#23794
            $k[$j++] = $_.pos; //#23794
            $_.lmv(); //#23794
            var _IL = $k[--$j]; //#23794
            $put($k[--$j], _IL, $get($_.databits, ($_.databits.length - $_.i) - 1) - 48); //#23794
            $_.i = $_.i + 1; //#23795
        } //#23795
    } //#23795
    if ($eq($_.format, "full")) { //#23824
        $_.fw = 13; //#23801
        $_.size = $f(($f(($f($_.fw + ($_.layers * 4))) + 2)) + ((~~($f(($f($_.layers + 10.5) / 7.5) - 1))) * 2)); //#23802
        $_.mid = ~~(($_.size * $_.size) / 2); //#23803
        $k[$j++] = Infinity; //#23804
        for (var _IW = 0, _IX = $_.size * $_.size; _IW < _IX; _IW++) { //#23804
            $k[$j++] = -2; //#23804
        } //#23804
        $_.npixs = $a(); //#23804
        for (var _Ib = 0, _Ia = ~~($_.size / 2); _Ib <= _Ia; _Ib += 16) { //#23814
            $_.i = _Ib; //#23806
            for (var _Ie = 0, _Id = $f($_.size - 1); _Ie <= _Id; _Ie += 1) { //#23813
                $_.j = _Ie; //#23808
                $k[$j++] = $_.npixs; //#23809
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#23809
                $k[$j++] = $_.i; //#23809
                $_.cmv(); //#23809
                var _In = $k[--$j]; //#23809
                $puti($k[--$j], _In, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#23809
                $k[$j++] = $_.npixs; //#23810
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#23810
                $k[$j++] = -$_.i; //#23810
                $_.cmv(); //#23810
                var _Ix = $k[--$j]; //#23810
                $puti($k[--$j], _Ix, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#23810
                $k[$j++] = $_.npixs; //#23811
                $k[$j++] = $_.i; //#23811
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#23811
                $_.cmv(); //#23811
                var _J7 = $k[--$j]; //#23811
                $puti($k[--$j], _J7, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#23811
                $k[$j++] = $_.npixs; //#23812
                $k[$j++] = -$_.i; //#23812
                $k[$j++] = (-(~~($_.size / 2))) + $_.j; //#23812
                $_.cmv(); //#23812
                var _JH = $k[--$j]; //#23812
                $puti($k[--$j], _JH, $a([((((~~($_.size / 2)) + $_.j) + $_.i) + 1) % 2])); //#23812
            } //#23812
        } //#23812
        $_.j = 0; //#23815
        for (var _JL = 0, _JK = $_.npixs.length - 1; _JL <= _JK; _JL += 1) { //#23822
            $_.i = _JL; //#23817
            if ($get($_.npixs, $_.i) == -2) { //#23821
                $put($_.npixs, $_.i, $get($_.pixs, $_.j)); //#23819
                $_.j = $_.j + 1; //#23820
            } //#23820
        } //#23820
        $_.pixs = $_.npixs; //#23823
    } //#23823
    $_.fw = ~~($_.fw / 2); //#23827
    for (var _Ja = -$_.fw, _JZ = $_.fw; _Ja <= _JZ; _Ja += 1) { //#23836
        $_.i = _Ja; //#23829
        for (var _Je = -$_.fw, _Jd = $_.fw; _Je <= _Jd; _Je += 1) { //#23835
            $_.j = _Je; //#23831
            $k[$j++] = $_.pixs; //#23832
            $k[$j++] = $_.i; //#23832
            $k[$j++] = $_.j; //#23832
            $_.cmv(); //#23832
            if (Math.abs($_.i) > Math.abs($_.j)) { //#23833
                $k[$j++] = Math.abs($_.i); //#23833
            } else { //#23833
                $k[$j++] = Math.abs($_.j); //#23833
            } //#23833
            var _Jm = $k[--$j]; //#23833
            var _Jn = $k[--$j]; //#23834
            $put($k[--$j], _Jn, $f(_Jm + 1) % 2); //#23834
        } //#23834
    } //#23834
    var _KP = $a([$a([-($_.fw + 1), $_.fw, 1]), $a([-($_.fw + 1), $_.fw + 1, 1]), $a([-$_.fw, $_.fw + 1, 1]), $a([$_.fw + 1, $_.fw + 1, 1]), $a([$_.fw + 1, $_.fw, 1]), $a([$_.fw + 1, -$_.fw, 1]), $a([$_.fw, $_.fw + 1, 0]), $a([$_.fw + 1, -($_.fw + 1), 0]), $a([$_.fw, -($_.fw + 1), 0]), $a([-$_.fw, -($_.fw + 1), 0]), $a([-($_.fw + 1), -($_.fw + 1), 0]), $a([-($_.fw + 1), -$_.fw, 0])]); //#23844
    for (var _KQ = 0, _KR = _KP.length; _KQ < _KR; _KQ++) { //#23845
        $k[$j++] = $_.pixs; //#23845
        $aload($get(_KP, _KQ)); //#23845
        $r(3, 1); //#23845
        $_.cmv(); //#23845
        var _KU = $k[--$j]; //#23845
        var _KV = $k[--$j]; //#23845
        $put($k[--$j], _KU, _KV); //#23845
    } //#23845
    if (!bwipp_azteccode.__23861__) { //#23861
        $_ = Object.create($_); //#23861
        $_.modemapfull = $a([$a([-5, 7]), $a([-4, 7]), $a([-3, 7]), $a([-2, 7]), $a([-1, 7]), $a([1, 7]), $a([2, 7]), $a([3, 7]), $a([4, 7]), $a([5, 7]), $a([7, 5]), $a([7, 4]), $a([7, 3]), $a([7, 2]), $a([7, 1]), $a([7, -1]), $a([7, -2]), $a([7, -3]), $a([7, -4]), $a([7, -5]), $a([5, -7]), $a([4, -7]), $a([3, -7]), $a([2, -7]), $a([1, -7]), $a([-1, -7]), $a([-2, -7]), $a([-3, -7]), $a([-4, -7]), $a([-5, -7]), $a([-7, -5]), $a([-7, -4]), $a([-7, -3]), $a([-7, -2]), $a([-7, -1]), $a([-7, 1]), $a([-7, 2]), $a([-7, 3]), $a([-7, 4]), $a([-7, 5])]); //#23854
        $_.modemapcompact = $a([$a([-3, 5]), $a([-2, 5]), $a([-1, 5]), $a([0, 5]), $a([1, 5]), $a([2, 5]), $a([3, 5]), $a([5, 3]), $a([5, 2]), $a([5, 1]), $a([5, 0]), $a([5, -1]), $a([5, -2]), $a([5, -3]), $a([3, -5]), $a([2, -5]), $a([1, -5]), $a([0, -5]), $a([-1, -5]), $a([-2, -5]), $a([-3, -5]), $a([-5, -3]), $a([-5, -2]), $a([-5, -1]), $a([-5, 0]), $a([-5, 1]), $a([-5, 2]), $a([-5, 3])]); //#23860
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_azteccode.$ctx[id] = $_[id]); //#23860
        bwipp_azteccode.__23861__ = 1; //#23860
        $_ = Object.getPrototypeOf($_); //#23860
    } //#23860
    $k[$j++] = 'modemap'; //#23862
    if ($eq($_.format, "full")) { //#23862
        $k[$j++] = $_.modemapfull; //#23862
    } else { //#23862
        $k[$j++] = $_.modemapcompact; //#23862
    } //#23862
    var _Lj = $k[--$j]; //#23862
    $_[$k[--$j]] = _Lj; //#23862
    for (var _Ln = 0, _Lm = $_.modemap.length - 1; _Ln <= _Lm; _Ln += 1) { //#23866
        $k[$j++] = _Ln; //#23864
        $k[$j++] = $_.pixs; //#23864
        $aload($get($_.modemap, _Ln)); //#23864
        $_.cmv(); //#23864
        var _Ls = $k[--$j]; //#23864
        var _Lt = $k[--$j]; //#23864
        $put(_Lt, _Ls, $get($_.modebits, $k[--$j]) - 48); //#23864
    } //#23865
    var _M2 = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.size],
        ["pixy", $_.size],
        ["height", ($_.size * 2) / 72],
        ["width", ($_.size * 2) / 72],
        ["opt", $_.options]
    ]); //#23875
    $k[$j++] = _M2; //#23878
    if (!$_.dontdraw) { //#23878
        bwipp_renmatrix(); //#23878
    } //#23878
    $_ = Object.getPrototypeOf($_); //#23880
    $_ = Object.getPrototypeOf($_); //#23882
} //bwipp_azteccode
function bwipp_azteccodecompact() {
    $_ = Object.create($_); //#23911
    $_.dontdraw = false; //#23914
    $k[$j++] = $_; //#23916
    bwipp_processoptions(); //#23916
    $_.options = $k[--$j]; //#23916
    $_.barcode = $k[--$j]; //#23917
    $put($_.options, "dontdraw", true); //#23920
    $put($_.options, "format", "compact"); //#23921
    $k[$j++] = 'args'; //#23923
    $k[$j++] = $_.barcode; //#23923
    $k[$j++] = $_.options; //#23923
    bwipp_azteccode(); //#23923
    var _6 = $k[--$j]; //#23923
    $_[$k[--$j]] = _6; //#23923
    $put($_.args, "opt", $_.options); //#23925
    $k[$j++] = $_.args; //#23928
    if (!$_.dontdraw) { //#23928
        bwipp_renmatrix(); //#23928
    } //#23928
    $_ = Object.getPrototypeOf($_); //#23930
} //bwipp_azteccodecompact
function bwipp_aztecrune() {
    $_ = Object.create($_); //#23959
    $_.dontdraw = false; //#23962
    $k[$j++] = $_; //#23964
    bwipp_processoptions(); //#23964
    $_.options = $k[--$j]; //#23964
    $_.barcode = $k[--$j]; //#23965
    $put($_.options, "dontdraw", true); //#23968
    $put($_.options, "format", "rune"); //#23969
    $k[$j++] = 'args'; //#23971
    $k[$j++] = $_.barcode; //#23971
    $k[$j++] = $_.options; //#23971
    bwipp_azteccode(); //#23971
    var _6 = $k[--$j]; //#23971
    $_[$k[--$j]] = _6; //#23971
    $put($_.args, "opt", $_.options); //#23973
    $k[$j++] = $_.args; //#23976
    if (!$_.dontdraw) { //#23976
        bwipp_renmatrix(); //#23976
    } //#23976
    $_ = Object.getPrototypeOf($_); //#23978
} //bwipp_aztecrune
function bwipp_codeone() {
    $_ = Object.create($_); //#24009
    $_.dontdraw = false; //#24012
    $_.version = "unset"; //#24013
    $_.parse = false; //#24014
    $_.parsefnc = false; //#24015
    $k[$j++] = $_; //#24017
    bwipp_processoptions(); //#24017
    $_.options = $k[--$j]; //#24017
    $_.barcode = $k[--$j]; //#24018
    var _2 = $a(["unset", "T-16", "T-32", "T-48", "S-10", "S-20", "S-30", "A", "B", "C", "D", "E", "F", "G", "H"]); //#24020
    $k[$j++] = false; //#24021
    for (var _3 = 0, _4 = _2.length; _3 < _4; _3++) { //#24021
        var _7 = $k[--$j]; //#24021
        $k[$j++] = _7 || $eq($get(_2, _3), $_.version); //#24021
    } //#24021
    if ($nt($k[--$j])) { //#24023
        $k[$j++] = 'bwipp.codeoneBadVersion#24022'; //#24022
        $k[$j++] = "version must be A to H, T-16, T-32, T-48, S-10, S-20 or S-30"; //#24022
        bwipp_raiseerror(); //#24022
    } //#24022
    bwipp_loadctx(bwipp_codeone); //#24025
    $_.stype = $eq($geti($_.version, 0, 1), "S"); //#24027
    $_.ttype = $eq($geti($_.version, 0, 1), "T"); //#24028
    if (!bwipp_codeone.__24186__) { //#24186
        $_ = Object.create($_); //#24186
        $_.stypevals = $a(["1", "1010", "1100100", "1111101000", "10011100010000", "11000011010100000", "11110100001001000000", "100110001001011010000000", "101111101011110000100000000", "111011100110101100101000000000", "1001010100000010111110010000000000", "1011101001000011101101110100000000000", "1110100011010100101001010001000000000000", "10010001100001001110011100101010000000000000", "10110101111001100010000011110100100000000000000", "11100011010111111010100100110001101000000000000000", "100011100001101111001001101111110000010000000000000000", "101100011010001010111100001011101100010100000000000000000"]); //#24050
        $_.stypemetrics = $a([$a(["S-10", 8, 11, 10, 4, 4, 1, 99, 99, 99]), $a(["S-20", 8, 21, 20, 8, 8, 1, 99, 99, 99]), $a(["S-30", 8, 31, 30, 12, 12, 1, 99, 99, 99])]); //#24058
        $_.nonstypemetrics = $a([$a(["A", 16, 18, 16, 10, 10, 1, 4, 99, 6]), $a(["B", 22, 22, 20, 19, 16, 1, 4, 99, 8]), $a(["C", 28, 32, 28, 44, 26, 1, 4, 22, 11]), $a(["D", 40, 42, 36, 91, 44, 1, 4, 16, 16]), $a(["E", 52, 54, 48, 182, 70, 1, 4, 22, 22]), $a(["F", 70, 76, 68, 370, 140, 2, 4, 22, 31]), $a(["G", 104, 98, 88, 732, 280, 4, 6, 21, 47]), $a(["H", 148, 134, 120, 1480, 560, 8, 6, 20, 69]), $a(["T-16", 16, 17, 16, 10, 10, 1, 99, 99, 99]), $a(["T-32", 16, 33, 32, 24, 16, 1, 99, 99, 99]), $a(["T-48", 16, 49, 48, 38, 22, 1, 99, 99, 99])]); //#24074
        $_.fnc1 = -1; //#24077
        $_.fnc3 = -2; //#24077
        $_.lC = -5; //#24078
        $_.lB = -6; //#24078
        $_.lX = -7; //#24078
        $_.lT = -8; //#24078
        $_.lD = -9; //#24078
        $_.unl = -10; //#24078
        $_.fnc2 = -11; //#24079
        $_.fnc4 = -12; //#24079
        $_.sft1 = -13; //#24079
        $_.sft2 = -14; //#24079
        $_.sft3 = -15; //#24079
        $_.eci = -16; //#24079
        $_.pad = -17; //#24079
        $_.fnc1lD = -18; //#24079
        $_.unlcw = 255; //#24080
        $k[$j++] = Infinity; //#24082
        for (var _U = 0; _U <= 128; _U += 1) { //#24083
            $k[$j++] = _U; //#24083
            $k[$j++] = _U + 1; //#24083
        } //#24083
        $k[$j++] = $_.pad; //#24088
        $k[$j++] = 129; //#24088
        for (var _W = 0; _W <= 99; _W += 1) { //#24088
            var _Y = $cvrs($s(2), _W, 10); //#24086
            var _a = $strcpy($s(2), "00"); //#24086
            $puti(_a, 2 - _Y.length, _Y); //#24086
            $k[$j++] = _a; //#24087
            $k[$j++] = _W + 130; //#24087
        } //#24087
        var _i = $a([$_.lC, $_.lB, $_.fnc1, $_.fnc2, $_.fnc3, $_.fnc4, $_.fnc1lD]); //#24089
        $k[$j++] = 229; //#24089
        for (var _j = 0, _k = _i.length; _j < _k; _j++) { //#24089
            var _n = $f($k[--$j] + 1); //#24089
            $k[$j++] = $get(_i, _j); //#24089
            $k[$j++] = _n; //#24089
            $k[$j++] = _n; //#24089
        } //#24089
        $j--; //#24089
        $k[$j++] = $_.lX; //#24091
        $k[$j++] = 238; //#24091
        $k[$j++] = $_.lT; //#24091
        $k[$j++] = 239; //#24091
        $_.Avals = $d(); //#24093
        $k[$j++] = Infinity; //#24094
        var _r = $_.Avals; //#24095
        for (var _w = _r.size, _v = _r.keys(), _u = 0; _u < _w; _u++) { //#24095
            var _s = _v.next().value; //#24095
            $k[$j++] = _s; //#24095
            $k[$j++] = _r.get(_s); //#24095
            $k[$j++] = Infinity; //#24095
            var _x = $k[--$j]; //#24095
            var _y = $k[--$j]; //#24095
            $k[$j++] = _x; //#24095
            $k[$j++] = _y; //#24095
            var _z = $a(); //#24095
            $k[$j++] = _z; //#24095
        } //#24095
        $_.Avals = $d(); //#24096
        $k[$j++] = Infinity; //#24098
        $k[$j++] = $_.sft1; //#24103
        $k[$j++] = 0; //#24103
        $k[$j++] = $_.sft2; //#24103
        $k[$j++] = 1; //#24103
        $k[$j++] = $_.sft3; //#24103
        $k[$j++] = 2; //#24103
        $k[$j++] = 32; //#24103
        $k[$j++] = 3; //#24103
        for (var _14 = 48; _14 <= 57; _14 += 1) { //#24103
            $k[$j++] = _14; //#24103
            $k[$j++] = _14 - 44; //#24103
        } //#24103
        for (var _15 = 65; _15 <= 90; _15 += 1) { //#24104
            $k[$j++] = _15; //#24104
            $k[$j++] = _15 - 51; //#24104
        } //#24104
        $_.CNvals = $d(); //#24105
        $k[$j++] = Infinity; //#24106
        for (var _17 = 0; _17 <= 31; _17 += 1) { //#24106
            $k[$j++] = _17; //#24106
            $k[$j++] = _17; //#24106
        } //#24106
        $_.C1vals = $d(); //#24106
        $k[$j++] = Infinity; //#24107
        for (var _19 = 33; _19 <= 47; _19 += 1) { //#24108
            $k[$j++] = _19; //#24108
            $k[$j++] = _19 - 33; //#24108
        } //#24108
        for (var _1A = 58; _1A <= 64; _1A += 1) { //#24109
            $k[$j++] = _1A; //#24109
            $k[$j++] = _1A - 43; //#24109
        } //#24109
        for (var _1B = 91; _1B <= 95; _1B += 1) { //#24110
            $k[$j++] = _1B; //#24110
            $k[$j++] = _1B - 69; //#24110
        } //#24110
        $k[$j++] = $_.fnc1; //#24115
        $k[$j++] = 27; //#24115
        $k[$j++] = $_.fnc2; //#24115
        $k[$j++] = 28; //#24115
        $k[$j++] = $_.fnc3; //#24115
        $k[$j++] = 29; //#24115
        $k[$j++] = $_.fnc4; //#24115
        $k[$j++] = 30; //#24115
        $k[$j++] = $_.pad; //#24115
        $k[$j++] = 31; //#24115
        $_.C2vals = $d(); //#24116
        $k[$j++] = Infinity; //#24117
        for (var _1I = 96; _1I <= 127; _1I += 1) { //#24117
            $k[$j++] = _1I; //#24117
            $k[$j++] = _1I - 96; //#24117
        } //#24117
        $_.C3vals = $d(); //#24117
        $k[$j++] = Infinity; //#24118
        var _1K = $_.CNvals; //#24119
        for (var _1P = _1K.size, _1O = _1K.keys(), _1N = 0; _1N < _1P; _1N++) { //#24119
            var _1L = _1O.next().value; //#24119
            $k[$j++] = _1L; //#24119
            $k[$j++] = _1K.get(_1L); //#24119
            $k[$j++] = Infinity; //#24119
            var _1Q = $k[--$j]; //#24119
            var _1R = $k[--$j]; //#24119
            $k[$j++] = _1Q; //#24119
            $k[$j++] = _1R; //#24119
            var _1S = $a(); //#24119
            $k[$j++] = _1S; //#24119
        } //#24119
        var _1T = $_.C1vals; //#24120
        for (var _1Y = _1T.size, _1X = _1T.keys(), _1W = 0; _1W < _1Y; _1W++) { //#24120
            var _1U = _1X.next().value; //#24120
            $k[$j++] = _1U; //#24120
            $k[$j++] = _1T.get(_1U); //#24120
            $k[$j++] = Infinity; //#24120
            var _1Z = $k[--$j]; //#24120
            var _1a = $k[--$j]; //#24120
            $k[$j++] = _1Z; //#24120
            $k[$j++] = $get($_.CNvals, $_.sft1); //#24120
            $k[$j++] = _1a; //#24120
            var _1e = $a(); //#24120
            $k[$j++] = _1e; //#24120
        } //#24120
        var _1f = $_.C2vals; //#24121
        for (var _1k = _1f.size, _1j = _1f.keys(), _1i = 0; _1i < _1k; _1i++) { //#24121
            var _1g = _1j.next().value; //#24121
            $k[$j++] = _1g; //#24121
            $k[$j++] = _1f.get(_1g); //#24121
            $k[$j++] = Infinity; //#24121
            var _1l = $k[--$j]; //#24121
            var _1m = $k[--$j]; //#24121
            $k[$j++] = _1l; //#24121
            $k[$j++] = $get($_.CNvals, $_.sft2); //#24121
            $k[$j++] = _1m; //#24121
            var _1q = $a(); //#24121
            $k[$j++] = _1q; //#24121
        } //#24121
        var _1r = $_.C3vals; //#24122
        for (var _1w = _1r.size, _1v = _1r.keys(), _1u = 0; _1u < _1w; _1u++) { //#24122
            var _1s = _1v.next().value; //#24122
            $k[$j++] = _1s; //#24122
            $k[$j++] = _1r.get(_1s); //#24122
            $k[$j++] = Infinity; //#24122
            var _1x = $k[--$j]; //#24122
            var _1y = $k[--$j]; //#24122
            $k[$j++] = _1x; //#24122
            $k[$j++] = $get($_.CNvals, $_.sft3); //#24122
            $k[$j++] = _1y; //#24122
            var _22 = $a(); //#24122
            $k[$j++] = _22; //#24122
        } //#24122
        $_.Cvals = $d(); //#24123
        $k[$j++] = Infinity; //#24125
        $k[$j++] = $_.sft1; //#24130
        $k[$j++] = 0; //#24130
        $k[$j++] = $_.sft2; //#24130
        $k[$j++] = 1; //#24130
        $k[$j++] = $_.sft3; //#24130
        $k[$j++] = 2; //#24130
        $k[$j++] = 32; //#24130
        $k[$j++] = 3; //#24130
        for (var _27 = 48; _27 <= 57; _27 += 1) { //#24130
            $k[$j++] = _27; //#24130
            $k[$j++] = _27 - 44; //#24130
        } //#24130
        for (var _28 = 97; _28 <= 122; _28 += 1) { //#24131
            $k[$j++] = _28; //#24131
            $k[$j++] = _28 - 83; //#24131
        } //#24131
        $_.TNvals = $d(); //#24132
        $k[$j++] = Infinity; //#24133
        for (var _2A = 0; _2A <= 31; _2A += 1) { //#24133
            $k[$j++] = _2A; //#24133
            $k[$j++] = _2A; //#24133
        } //#24133
        $_.T1vals = $d(); //#24133
        $k[$j++] = Infinity; //#24134
        for (var _2C = 33; _2C <= 47; _2C += 1) { //#24135
            $k[$j++] = _2C; //#24135
            $k[$j++] = _2C - 33; //#24135
        } //#24135
        for (var _2D = 58; _2D <= 64; _2D += 1) { //#24136
            $k[$j++] = _2D; //#24136
            $k[$j++] = _2D - 43; //#24136
        } //#24136
        for (var _2E = 91; _2E <= 95; _2E += 1) { //#24137
            $k[$j++] = _2E; //#24137
            $k[$j++] = _2E - 69; //#24137
        } //#24137
        $k[$j++] = $_.fnc1; //#24142
        $k[$j++] = 27; //#24142
        $k[$j++] = $_.fnc2; //#24142
        $k[$j++] = 28; //#24142
        $k[$j++] = $_.fnc3; //#24142
        $k[$j++] = 29; //#24142
        $k[$j++] = $_.fnc4; //#24142
        $k[$j++] = 30; //#24142
        $k[$j++] = $_.pad; //#24142
        $k[$j++] = 31; //#24142
        $_.T2vals = $d(); //#24143
        $k[$j++] = Infinity; //#24144
        $k[$j++] = 96; //#24146
        $k[$j++] = 0; //#24146
        for (var _2L = 65; _2L <= 90; _2L += 1) { //#24146
            $k[$j++] = _2L; //#24146
            $k[$j++] = _2L - 64; //#24146
        } //#24146
        for (var _2M = 123; _2M <= 127; _2M += 1) { //#24147
            $k[$j++] = _2M; //#24147
            $k[$j++] = _2M - 96; //#24147
        } //#24147
        $_.T3vals = $d(); //#24148
        $k[$j++] = Infinity; //#24149
        var _2O = $_.TNvals; //#24150
        for (var _2T = _2O.size, _2S = _2O.keys(), _2R = 0; _2R < _2T; _2R++) { //#24150
            var _2P = _2S.next().value; //#24150
            $k[$j++] = _2P; //#24150
            $k[$j++] = _2O.get(_2P); //#24150
            $k[$j++] = Infinity; //#24150
            var _2U = $k[--$j]; //#24150
            var _2V = $k[--$j]; //#24150
            $k[$j++] = _2U; //#24150
            $k[$j++] = _2V; //#24150
            var _2W = $a(); //#24150
            $k[$j++] = _2W; //#24150
        } //#24150
        var _2X = $_.T1vals; //#24151
        for (var _2c = _2X.size, _2b = _2X.keys(), _2a = 0; _2a < _2c; _2a++) { //#24151
            var _2Y = _2b.next().value; //#24151
            $k[$j++] = _2Y; //#24151
            $k[$j++] = _2X.get(_2Y); //#24151
            $k[$j++] = Infinity; //#24151
            var _2d = $k[--$j]; //#24151
            var _2e = $k[--$j]; //#24151
            $k[$j++] = _2d; //#24151
            $k[$j++] = $get($_.TNvals, $_.sft1); //#24151
            $k[$j++] = _2e; //#24151
            var _2i = $a(); //#24151
            $k[$j++] = _2i; //#24151
        } //#24151
        var _2j = $_.T2vals; //#24152
        for (var _2o = _2j.size, _2n = _2j.keys(), _2m = 0; _2m < _2o; _2m++) { //#24152
            var _2k = _2n.next().value; //#24152
            $k[$j++] = _2k; //#24152
            $k[$j++] = _2j.get(_2k); //#24152
            $k[$j++] = Infinity; //#24152
            var _2p = $k[--$j]; //#24152
            var _2q = $k[--$j]; //#24152
            $k[$j++] = _2p; //#24152
            $k[$j++] = $get($_.TNvals, $_.sft2); //#24152
            $k[$j++] = _2q; //#24152
            var _2u = $a(); //#24152
            $k[$j++] = _2u; //#24152
        } //#24152
        var _2v = $_.T3vals; //#24153
        for (var _30 = _2v.size, _2z = _2v.keys(), _2y = 0; _2y < _30; _2y++) { //#24153
            var _2w = _2z.next().value; //#24153
            $k[$j++] = _2w; //#24153
            $k[$j++] = _2v.get(_2w); //#24153
            $k[$j++] = Infinity; //#24153
            var _31 = $k[--$j]; //#24153
            var _32 = $k[--$j]; //#24153
            $k[$j++] = _31; //#24153
            $k[$j++] = $get($_.TNvals, $_.sft3); //#24153
            $k[$j++] = _32; //#24153
            var _36 = $a(); //#24153
            $k[$j++] = _36; //#24153
        } //#24153
        $_.Tvals = $d(); //#24154
        for (var _38 = 128; _38 <= 255; _38 += 1) { //#24162
            $_.i = _38; //#24158
            $k[$j++] = $_.Avals; //#24159
            $k[$j++] = $_.i; //#24159
            $k[$j++] = Infinity; //#24159
            $aload($get($_.Avals, $_.fnc4)); //#24159
            $aload($get($_.Avals, $_.i - 128)); //#24159
            var _3H = $a(); //#24159
            var _3I = $k[--$j]; //#24159
            $put($k[--$j], _3I, _3H); //#24159
            $k[$j++] = $_.Cvals; //#24160
            $k[$j++] = $_.i; //#24160
            $k[$j++] = Infinity; //#24160
            $aload($get($_.Cvals, $_.fnc4)); //#24160
            $aload($get($_.Cvals, $_.i - 128)); //#24160
            var _3S = $a(); //#24160
            var _3T = $k[--$j]; //#24160
            $put($k[--$j], _3T, _3S); //#24160
            $k[$j++] = $_.Tvals; //#24161
            $k[$j++] = $_.i; //#24161
            $k[$j++] = Infinity; //#24161
            $aload($get($_.Tvals, $_.fnc4)); //#24161
            $aload($get($_.Tvals, $_.i - 128)); //#24161
            var _3d = $a(); //#24161
            var _3e = $k[--$j]; //#24161
            $put($k[--$j], _3e, _3d); //#24161
        } //#24161
        $k[$j++] = Infinity; //#24164
        $k[$j++] = 13; //#24169
        $k[$j++] = 0; //#24169
        $k[$j++] = 42; //#24169
        $k[$j++] = 1; //#24169
        $k[$j++] = 62; //#24169
        $k[$j++] = 2; //#24169
        $k[$j++] = 32; //#24169
        $k[$j++] = 3; //#24169
        for (var _3g = 48; _3g <= 57; _3g += 1) { //#24169
            $k[$j++] = _3g; //#24169
            $k[$j++] = _3g - 44; //#24169
        } //#24169
        for (var _3h = 65; _3h <= 90; _3h += 1) { //#24170
            $k[$j++] = _3h; //#24170
            $k[$j++] = _3h - 51; //#24170
        } //#24170
        $_.Xvals = $d(); //#24171
        $k[$j++] = Infinity; //#24172
        var _3j = $_.Xvals; //#24173
        for (var _3o = _3j.size, _3n = _3j.keys(), _3m = 0; _3m < _3o; _3m++) { //#24173
            var _3k = _3n.next().value; //#24173
            $k[$j++] = _3k; //#24173
            $k[$j++] = _3j.get(_3k); //#24173
            $k[$j++] = Infinity; //#24173
            var _3p = $k[--$j]; //#24173
            var _3q = $k[--$j]; //#24173
            $k[$j++] = _3p; //#24173
            $k[$j++] = _3q; //#24173
            var _3r = $a(); //#24173
            $k[$j++] = _3r; //#24173
        } //#24173
        $_.Xvals = $d(); //#24174
        $k[$j++] = Infinity; //#24176
        for (var _3t = 0; _3t <= 255; _3t += 1) { //#24177
            $k[$j++] = _3t; //#24177
            $k[$j++] = _3t; //#24177
        } //#24177
        $_.Bvals = $d(); //#24178
        $k[$j++] = Infinity; //#24179
        var _3v = $_.Bvals; //#24180
        for (var _40 = _3v.size, _3z = _3v.keys(), _3y = 0; _3y < _40; _3y++) { //#24180
            var _3w = _3z.next().value; //#24180
            $k[$j++] = _3w; //#24180
            $k[$j++] = _3v.get(_3w); //#24180
            $k[$j++] = Infinity; //#24180
            var _41 = $k[--$j]; //#24180
            var _42 = $k[--$j]; //#24180
            $k[$j++] = _41; //#24180
            $k[$j++] = _42; //#24180
            var _43 = $a(); //#24180
            $k[$j++] = _43; //#24180
        } //#24180
        $_.Bvals = $d(); //#24181
        $_.encvals = $a([$_.Avals, $_.Cvals, $_.Tvals, $_.Xvals, -1, $_.Bvals]); //#24183
        $_.A = 0; //#24185
        $_.C = 1; //#24185
        $_.T = 2; //#24185
        $_.X = 3; //#24185
        $_.D = 4; //#24185
        $_.B = 5; //#24185
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codeone.$ctx[id] = $_[id]); //#24185
        bwipp_codeone.__24186__ = 1; //#24185
        $_ = Object.getPrototypeOf($_); //#24185
    } //#24185
    if ($_.stype) { //#24684
        $forall($_.barcode, function() { //#24194
            var _4E = $k[--$j]; //#24191
            if ((_4E < 48) || (_4E > 57)) { //#24193
                $k[$j++] = 'bwipp.codeoneStypeNonDigit#24192'; //#24192
                $k[$j++] = "S-Type symbols can only contain digits"; //#24192
                bwipp_raiseerror(); //#24192
            } //#24192
        }); //#24192
        $_.barlen = $_.barcode.length; //#24196
        if ($_.barlen > 18) { //#24199
            $k[$j++] = 'bwipp.codeoneStypeTooLong#24198'; //#24198
            $k[$j++] = "Maximum length exceeded"; //#24198
            bwipp_raiseerror(); //#24198
        } //#24198
        $_.normalize = function() {
            $_.base = $k[--$j]; //#24202
            $_.num = $k[--$j]; //#24203
            for (var _4K = $_.num.length - 1; _4K >= 1; _4K -= 1) { //#24208
                $_.i = _4K; //#24205
                var _4L = $_.num; //#24206
                var _4M = $_.i; //#24206
                $put(_4L, _4M - 1, $f($get(_4L, _4M - 1) + (~~($get($_.num, $_.i) / $_.base)))); //#24206
                $put($_.num, $_.i, $get($_.num, $_.i) % $_.base); //#24207
            } //#24207
            for (;;) { //#24214
                if ($lt($get($_.num, 0), $_.base)) { //#24210
                    break; //#24210
                } //#24210
                $k[$j++] = Infinity; //#24211
                $k[$j++] = 0; //#24211
                $aload($_.num); //#24211
                $_.num = $a(); //#24211
                $put($_.num, 0, $f($get($_.num, 0) + (~~($get($_.num, 1) / $_.base)))); //#24212
                $put($_.num, 1, $get($_.num, 1) % $_.base); //#24213
            } //#24213
            $k[$j++] = Infinity; //#24216
            $_.i = true; //#24216
            var _4n = $_.num; //#24216
            for (var _4o = 0, _4p = _4n.length; _4o < _4p; _4o++) { //#24216
                var _4q = $get(_4n, _4o); //#24216
                $k[$j++] = _4q; //#24216
                if ((_4q == 0) && $_.i) { //#24216
                    $j--; //#24216
                } else { //#24216
                    $_.i = false; //#24216
                } //#24216
            } //#24216
            $_.num = $a(); //#24216
            if ($_.num.length == 0) { //#24217
                $_.num = $a([0]); //#24217
            } //#24217
            $k[$j++] = $_.num; //#24218
        }; //#24218
        $_.bigadd = function() {
            var _4w = $k[--$j]; //#24222
            var _4x = $k[--$j]; //#24222
            $_.offset = Math.abs(_4w.length - _4x.length); //#24223
            if (_4w.length < _4x.length) { //#24224
                var _ = _4w; //#24224
                _4w = _4x; //#24224
                _4x = _; //#24224
            } //#24224
            $_.a = _4w; //#24225
            $_.b = _4x; //#24225
            for (var _50 = 0, _4z = $_.b.length - 1; _50 <= _4z; _50 += 1) { //#24228
                var _51 = $_.a; //#24227
                var _52 = $_.offset; //#24227
                $put(_51, _50 + _52, $f($get(_51, _50 + _52) + $get($_.b, _50))); //#24227
            } //#24227
            $k[$j++] = $_.a; //#24229
        }; //#24229
        $_.barlen = $_.barcode.length; //#24232
        $_.v = $a([1]); //#24235
        for (var _5B = 0, _5A = $_.barlen - 1; _5B <= _5A; _5B += 1) { //#24240
            $_.i = _5B; //#24237
            $k[$j++] = Infinity; //#24238
            $forall($get($_.stypevals, $_.i), function() { //#24238
                var _5F = $k[--$j]; //#24238
                $k[$j++] = $f(_5F - 48) * $f($get($_.barcode, ($_.barlen - $_.i) - 1) - 48); //#24238
            }); //#24238
            var _5K = $a(); //#24238
            $k[$j++] = _5K; //#24239
            $k[$j++] = $_.v; //#24239
            $_.bigadd(); //#24239
            $_.v = $k[--$j]; //#24239
        } //#24239
        $k[$j++] = 'v'; //#24241
        $k[$j++] = $_.v; //#24241
        $k[$j++] = 2; //#24241
        $_.normalize(); //#24241
        var _5O = $k[--$j]; //#24241
        $_[$k[--$j]] = _5O; //#24241
        $k[$j++] = Infinity; //#24244
        for (var _5R = 0, _5S = (5 - ($_.v.length % 5)) % 5; _5R < _5S; _5R++) { //#24244
            $k[$j++] = 0; //#24244
        } //#24244
        $aload($_.v); //#24244
        $_.v = $a(); //#24244
        $_.cws = $a(~~($_.v.length / 5)); //#24245
        for (var _5Z = 0, _5Y = $_.cws.length - 1; _5Z <= _5Y; _5Z += 1) { //#24251
            $_.i = _5Z; //#24247
            var _5c = $geti($_.v, $_.i * 5, 5); //#24248
            $k[$j++] = 0; //#24249
            for (var _5d = 0, _5e = _5c.length; _5d < _5e; _5d++) { //#24249
                var _5g = $k[--$j]; //#24249
                $k[$j++] = $f(_5g + $get(_5c, _5d)) * 2; //#24249
            } //#24249
            $put($_.cws, $_.i, ~~($k[--$j] / 2)); //#24250
        } //#24250
        $_.metrics = $_.stypemetrics; //#24253
    } else { //#24684
        var _5p = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["eci", true],
            ["FNC1", $_.fnc1],
            ["FNC3", $_.fnc3]
        ]); //#24263
        $_.fncvals = _5p; //#24264
        $k[$j++] = 'msg'; //#24265
        $k[$j++] = $_.barcode; //#24265
        $k[$j++] = $_.fncvals; //#24265
        bwipp_parseinput(); //#24265
        var _5s = $k[--$j]; //#24265
        $_[$k[--$j]] = _5s; //#24265
        $_.msglen = $_.msg.length; //#24266
        $_.eciesc = 92; //#24269
        var _5v = $_.msg; //#24270
        $k[$j++] = 'numecis'; //#24270
        $k[$j++] = 0; //#24270
        for (var _5w = 0, _5x = _5v.length; _5w < _5x; _5w++) { //#24270
            if ($get(_5v, _5w) <= -1000000) { //#24270
                var _5z = $k[--$j]; //#24270
                $k[$j++] = $f(_5z + 1); //#24270
            } //#24270
        } //#24270
        var _60 = $k[--$j]; //#24270
        $_[$k[--$j]] = _60; //#24270
        if ($_.numecis > 0) { //#24297
            $_.msgtmp = $a($f(($f(($_.msg.length * 2) + ($_.numecis * 6))) + 2)); //#24272
            $put($_.msgtmp, 0, $_.pad); //#24273
            $put($_.msgtmp, 1, $_.eciesc); //#24274
            $_.j = 2; //#24275
            for (var _6C = 0, _6B = $_.msg.length - 1; _6C <= _6B; _6C += 1) { //#24294
                var _6E = $get($_.msg, _6C); //#24277
                $k[$j++] = _6E; //#24293
                if (_6E <= -1000000) { //#24291
                    var _6I = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#24279
                    for (var _6J = 0, _6K = _6I.length; _6J < _6K; _6J++) { //#24279
                        $k[$j++] = $get(_6I, _6J); //#24279
                    } //#24279
                    $astore($a(6)); //#24279
                    $puti($_.msgtmp, $_.j + 1, $k[--$j]); //#24280
                    $put($_.msgtmp, $_.j, $_.eciesc); //#24281
                    $_.j = $_.j + 7; //#24282
                } else { //#24291
                    var _6U = $k[--$j]; //#24284
                    $k[$j++] = _6U; //#24292
                    if (_6U != $_.eciesc) { //#24291
                        $put($_.msgtmp, $_.j, $k[--$j]); //#24285
                        $_.j = $_.j + 1; //#24286
                    } else { //#24291
                        $j--; //#24288
                        $put($_.msgtmp, $_.j, $_.eciesc); //#24289
                        $put($_.msgtmp, $_.j + 1, $_.eciesc); //#24290
                        $_.j = $_.j + 2; //#24291
                    } //#24291
                } //#24291
            } //#24291
            $_.msg = $geti($_.msgtmp, 0, $_.j); //#24295
            $_.msglen = $_.msg.length; //#24296
        } //#24296
        $_.metrics = $_.nonstypemetrics; //#24299
        $_.fullcws = $a([]); //#24302
        var _6n = $_.metrics; //#24303
        for (var _6o = 0, _6p = _6n.length; _6o < _6p; _6o++) { //#24314
            $_.m = $get(_6n, _6o); //#24304
            $_.vers = $get($_.m, 0); //#24305
            $_.dcws = $get($_.m, 4); //#24306
            $_.okay = true; //#24307
            if ($eq($_.version, "unset")) { //#24311
                if ($_.vers.length != 1) { //#24309
                    $_.okay = false; //#24309
                } //#24309
            } else { //#24311
                if ($ne($_.version, $_.vers)) { //#24311
                    $_.okay = false; //#24311
                } //#24311
            } //#24311
            if ($_.okay) { //#24313
                $k[$j++] = Infinity; //#24313
                $aload($_.fullcws); //#24313
                $k[$j++] = $_.dcws; //#24313
                $_.fullcws = $a(); //#24313
            } //#24313
        } //#24313
        $k[$j++] = Infinity; //#24315
        for (var _73 = 0, _74 = 1480; _73 < _74; _73++) { //#24315
            $k[$j++] = 10000; //#24315
        } //#24315
        $_.numremcws = $a(); //#24315
        var _76 = $_.fullcws; //#24316
        for (var _77 = 0, _78 = _76.length; _77 < _78; _77++) { //#24316
            $put($_.numremcws, $f($get(_76, _77) - 1), 1); //#24316
        } //#24316
        for (var _7B = 1478; _7B >= 0; _7B -= 1) { //#24322
            $_.i = _7B; //#24318
            if ($get($_.numremcws, $_.i) != 1) { //#24321
                $put($_.numremcws, $_.i, $f($get($_.numremcws, $_.i + 1) + 1)); //#24320
            } //#24320
        } //#24320
        $k[$j++] = Infinity; //#24324
        for (var _7L = 0, _7M = $_.msglen; _7L < _7M; _7L++) { //#24324
            $k[$j++] = 0; //#24324
        } //#24324
        $k[$j++] = 0; //#24324
        $_.numD = $a(); //#24324
        $k[$j++] = Infinity; //#24325
        for (var _7P = 0, _7Q = $_.msglen; _7P < _7Q; _7P++) { //#24325
            $k[$j++] = 0; //#24325
        } //#24325
        $k[$j++] = 9999; //#24325
        $_.nextXterm = $a(); //#24325
        $k[$j++] = Infinity; //#24326
        for (var _7T = 0, _7U = $_.msglen; _7T < _7U; _7T++) { //#24326
            $k[$j++] = 0; //#24326
        } //#24326
        $k[$j++] = 9999; //#24326
        $_.nextNonX = $a(); //#24326
        for (var _7X = $_.msglen - 1; _7X >= 0; _7X -= 1) { //#24343
            $_.i = _7X; //#24328
            $_.barchar = $get($_.msg, $_.i); //#24329
            if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#24332
                $put($_.numD, $_.i, $f($get($_.numD, $_.i + 1) + 1)); //#24331
            } //#24331
            if ((($_.barchar == 13) || ($_.barchar == 42)) || ($_.barchar == 62)) { //#24336
                $put($_.nextXterm, $_.i, 0); //#24334
            } else { //#24336
                $put($_.nextXterm, $_.i, $f($get($_.nextXterm, $_.i + 1) + 1)); //#24336
            } //#24336
            var _7u = $get($_.Xvals, $_.barchar) !== undefined; //#24338
            if (!_7u) { //#24341
                $put($_.nextNonX, $_.i, 0); //#24339
            } else { //#24341
                $put($_.nextNonX, $_.i, $f($get($_.nextNonX, $_.i + 1) + 1)); //#24341
            } //#24341
        } //#24341
        $k[$j++] = Infinity; //#24344
        var _82 = $_.nextXterm; //#24344
        for (var _83 = 0, _84 = _82.length; _83 < _84; _83++) { //#24344
            var _85 = $get(_82, _83); //#24344
            $k[$j++] = _85; //#24344
            if (_85 > 10000) { //#24344
                $j--; //#24344
                $k[$j++] = 10000; //#24344
            } //#24344
        } //#24344
        $_.nextXterm = $a(); //#24344
        $k[$j++] = Infinity; //#24345
        var _87 = $_.nextNonX; //#24345
        for (var _88 = 0, _89 = _87.length; _88 < _89; _88++) { //#24345
            var _8A = $get(_87, _88); //#24345
            $k[$j++] = _8A; //#24345
            if (_8A > 10000) { //#24345
                $j--; //#24345
                $k[$j++] = 10000; //#24345
            } //#24345
        } //#24345
        $_.nextNonX = $a(); //#24345
        $_.isD = function() {
            $k[$j++] = ($_.char >= 48) && ($_.char <= 57); //#24347
        }; //#24347
        $_.isC = function() {
            var _8G = $get($_.CNvals, $_.char) !== undefined; //#24348
            $k[$j++] = _8G; //#24348
        }; //#24348
        $_.isT = function() {
            var _8J = $get($_.TNvals, $_.char) !== undefined; //#24349
            $k[$j++] = _8J; //#24349
        }; //#24349
        $_.isX = function() {
            var _8M = $get($_.Xvals, $_.char) !== undefined; //#24350
            $k[$j++] = _8M; //#24350
        }; //#24350
        $_.isEA = function() {
            $k[$j++] = $_.char > 127; //#24351
        }; //#24351
        $_.isFN = function() {
            $k[$j++] = $_.char < 0; //#24352
        }; //#24352
        $_.XtermFirst = function() {
            var _8P = $k[--$j]; //#24353
            $k[$j++] = $lt($get($_.nextXterm, _8P), $get($_.nextNonX, _8P)); //#24353
        }; //#24353
        $_.lookup = function() {
            $_.ac = 1; //#24356
            $_.cc = 2; //#24356
            $_.tc = 2; //#24356
            $_.xc = 2; //#24356
            $_.bc = 3; //#24356
            if ($_.mode == $_.A) { //#24357
                $_.ac = 0; //#24357
                $_.cc = 1; //#24357
                $_.tc = 1; //#24357
                $_.xc = 1; //#24357
                $_.bc = 2; //#24357
            } //#24357
            if ($_.mode == $_.C) { //#24358
                $_.cc = 0; //#24358
            } //#24358
            if ($_.mode == $_.T) { //#24359
                $_.tc = 0; //#24359
            } //#24359
            if ($_.mode == $_.X) { //#24360
                $_.xc = 0; //#24360
            } //#24360
            if ($_.mode == $_.B) { //#24361
                $_.bc = 0; //#24361
            } //#24361
            for (var _8e = 0, _8f = 1; _8e < _8f; _8e++) { //#24389
                $_.k = 0; //#24363
                for (;;) { //#24388
                    if (($_.i + $_.k) == $_.msglen) { //#24370
                        var _8n = $a([$_.ac, $_.cc, $_.tc, $_.xc]); //#24365
                        $k[$j++] = true; //#24365
                        for (var _8o = 0, _8p = _8n.length; _8o < _8p; _8o++) { //#24365
                            var _8s = $k[--$j]; //#24365
                            $k[$j++] = _8s && ($_.bc <= Math.ceil($get(_8n, _8o))); //#24365
                        } //#24365
                        if ($k[--$j]) { //#24365
                            $k[$j++] = $_.B; //#24365
                            break; //#24365
                        } //#24365
                        var _8z = $a([$_.cc, $_.tc, $_.xc, $_.bc]); //#24366
                        $k[$j++] = true; //#24366
                        for (var _90 = 0, _91 = _8z.length; _90 < _91; _90++) { //#24366
                            var _94 = $k[--$j]; //#24366
                            $k[$j++] = _94 && ($_.ac <= Math.ceil($get(_8z, _90))); //#24366
                        } //#24366
                        if ($k[--$j]) { //#24366
                            $k[$j++] = $_.A; //#24366
                            break; //#24366
                        } //#24366
                        var _99 = $a([$_.tc, $_.xc]); //#24367
                        $k[$j++] = true; //#24367
                        for (var _9A = 0, _9B = _99.length; _9A < _9B; _9A++) { //#24367
                            var _9E = $k[--$j]; //#24367
                            $k[$j++] = _9E && (Math.ceil($_.cc) <= Math.ceil($get(_99, _9A))); //#24367
                        } //#24367
                        if ($k[--$j]) { //#24367
                            $k[$j++] = $_.C; //#24367
                            break; //#24367
                        } //#24367
                        var _9I = $a([$_.xc]); //#24368
                        $k[$j++] = true; //#24368
                        for (var _9J = 0, _9K = _9I.length; _9J < _9K; _9J++) { //#24368
                            var _9N = $k[--$j]; //#24368
                            $k[$j++] = _9N && (Math.ceil($_.tc) <= Math.ceil($get(_9I, _9J))); //#24368
                        } //#24368
                        if ($k[--$j]) { //#24368
                            $k[$j++] = $_.T; //#24368
                            break; //#24368
                        } //#24368
                        $k[$j++] = $_.X; //#24369
                        break; //#24369
                    } //#24369
                    $_.char = $get($_.msg, $_.i + $_.k); //#24371
                    $k[$j++] = 'ac'; //#24372
                    $k[$j++] = $_.ac; //#24372
                    $_.isD(); //#24372
                    if ($k[--$j]) { //#24372
                        var _9X = $k[--$j]; //#24372
                        $k[$j++] = $f(_9X + (1 / 2)); //#24372
                    } else { //#24372
                        $_.isEA(); //#24372
                        if ($k[--$j]) { //#24372
                            var _9Z = $k[--$j]; //#24372
                            $k[$j++] = Math.ceil(_9Z) + 2; //#24372
                        } else { //#24372
                            var _9a = $k[--$j]; //#24372
                            $k[$j++] = Math.ceil(_9a) + 1; //#24372
                        } //#24372
                    } //#24372
                    var _9b = $k[--$j]; //#24372
                    $_[$k[--$j]] = _9b; //#24372
                    $k[$j++] = 'cc'; //#24373
                    $k[$j++] = $_.cc; //#24373
                    $_.isC(); //#24373
                    if ($k[--$j]) { //#24373
                        var _9f = $k[--$j]; //#24373
                        $k[$j++] = $f(_9f + 0.6666667); //#24373
                    } else { //#24373
                        $_.isEA(); //#24373
                        if ($k[--$j]) { //#24373
                            var _9h = $k[--$j]; //#24373
                            $k[$j++] = $f(_9h + 2.6666667); //#24373
                        } else { //#24373
                            var _9i = $k[--$j]; //#24373
                            $k[$j++] = $f(_9i + 1.3333334); //#24373
                        } //#24373
                    } //#24373
                    var _9j = $k[--$j]; //#24373
                    $_[$k[--$j]] = _9j; //#24373
                    $k[$j++] = 'tc'; //#24374
                    $k[$j++] = $_.tc; //#24374
                    $_.isT(); //#24374
                    if ($k[--$j]) { //#24374
                        var _9n = $k[--$j]; //#24374
                        $k[$j++] = $f(_9n + 0.6666667); //#24374
                    } else { //#24374
                        $_.isEA(); //#24374
                        if ($k[--$j]) { //#24374
                            var _9p = $k[--$j]; //#24374
                            $k[$j++] = $f(_9p + 2.6666667); //#24374
                        } else { //#24374
                            var _9q = $k[--$j]; //#24374
                            $k[$j++] = $f(_9q + 1.3333334); //#24374
                        } //#24374
                    } //#24374
                    var _9r = $k[--$j]; //#24374
                    $_[$k[--$j]] = _9r; //#24374
                    $k[$j++] = 'xc'; //#24375
                    $k[$j++] = $_.xc; //#24375
                    $_.isX(); //#24375
                    if ($k[--$j]) { //#24375
                        var _9v = $k[--$j]; //#24375
                        $k[$j++] = $f(_9v + 0.6666667); //#24375
                    } else { //#24375
                        $_.isEA(); //#24375
                        if ($k[--$j]) { //#24375
                            var _9x = $k[--$j]; //#24375
                            $k[$j++] = $f(_9x + 4.3333334); //#24375
                        } else { //#24375
                            var _9y = $k[--$j]; //#24375
                            $k[$j++] = $f(_9y + 3.3333334); //#24375
                        } //#24375
                    } //#24375
                    var _9z = $k[--$j]; //#24375
                    $_[$k[--$j]] = _9z; //#24375
                    $k[$j++] = 'bc'; //#24376
                    $k[$j++] = $_.bc; //#24376
                    $_.isFN(); //#24376
                    if ($k[--$j]) { //#24376
                        var _A3 = $k[--$j]; //#24376
                        $k[$j++] = $f(_A3 + 3); //#24376
                    } else { //#24376
                        var _A4 = $k[--$j]; //#24376
                        $k[$j++] = $f(_A4 + 1); //#24376
                    } //#24376
                    var _A5 = $k[--$j]; //#24376
                    $_[$k[--$j]] = _A5; //#24376
                    if ($_.k >= 3) { //#24386
                        var _AC = $a([$_.ac, $_.cc, $_.tc, $_.xc]); //#24378
                        $k[$j++] = true; //#24378
                        for (var _AD = 0, _AE = _AC.length; _AD < _AE; _AD++) { //#24378
                            var _AH = $k[--$j]; //#24378
                            $k[$j++] = _AH && (($_.bc + 1) <= Math.ceil($get(_AC, _AD))); //#24378
                        } //#24378
                        if ($k[--$j]) { //#24378
                            $k[$j++] = $_.B; //#24378
                            break; //#24378
                        } //#24378
                        var _AO = $a([$_.cc, $_.tc, $_.xc, $_.bc]); //#24379
                        $k[$j++] = true; //#24379
                        for (var _AP = 0, _AQ = _AO.length; _AP < _AQ; _AP++) { //#24379
                            var _AT = $k[--$j]; //#24379
                            $k[$j++] = _AT && (($_.ac + 1) <= Math.ceil($get(_AO, _AP))); //#24379
                        } //#24379
                        if ($k[--$j]) { //#24379
                            $k[$j++] = $_.A; //#24379
                            break; //#24379
                        } //#24379
                        var _Aa = $a([$_.ac, $_.cc, $_.xc, $_.bc]); //#24380
                        $k[$j++] = true; //#24380
                        for (var _Ab = 0, _Ac = _Aa.length; _Ab < _Ac; _Ab++) { //#24380
                            var _Af = $k[--$j]; //#24380
                            $k[$j++] = _Af && ((Math.ceil($_.tc) + 1) <= Math.ceil($get(_Aa, _Ab))); //#24380
                        } //#24380
                        if ($k[--$j]) { //#24380
                            $k[$j++] = $_.T; //#24380
                            break; //#24380
                        } //#24380
                        var _Ak = $a([$_.ac, $_.tc]); //#24381
                        $k[$j++] = true; //#24381
                        for (var _Al = 0, _Am = _Ak.length; _Al < _Am; _Al++) { //#24381
                            var _Ap = $k[--$j]; //#24381
                            $k[$j++] = _Ap && ((Math.ceil($_.cc) + 1) <= Math.ceil($get(_Ak, _Al))); //#24381
                        } //#24381
                        if ($k[--$j]) { //#24384
                            if (Math.ceil($_.cc) < Math.ceil($_.xc)) { //#24382
                                $k[$j++] = $_.C; //#24382
                                break; //#24382
                            } //#24382
                            if ($_.cc == $_.xc) { //#24383
                                $k[$j++] = ($_.i + $_.k) + 1; //#24383
                                $_.XtermFirst(); //#24383
                                if ($k[--$j]) { //#24383
                                    $k[$j++] = $_.X; //#24383
                                    break; //#24383
                                } else { //#24383
                                    $k[$j++] = $_.C; //#24383
                                    break; //#24383
                                } //#24383
                            } //#24383
                        } //#24383
                        var _B5 = $a([$_.ac, $_.cc, $_.tc, $_.bc]); //#24385
                        $k[$j++] = true; //#24385
                        for (var _B6 = 0, _B7 = _B5.length; _B6 < _B7; _B6++) { //#24385
                            var _BA = $k[--$j]; //#24385
                            $k[$j++] = _BA && ((Math.ceil($_.xc) + 1) <= Math.ceil($get(_B5, _B6))); //#24385
                        } //#24385
                        if ($k[--$j]) { //#24385
                            $k[$j++] = $_.X; //#24385
                            break; //#24385
                        } //#24385
                    } //#24385
                    $_.k = $_.k + 1; //#24387
                } //#24387
            } //#24387
        }; //#24387
        $_.addtocws = function() {
            var _BE = $k[--$j]; //#24393
            $k[$j++] = _BE; //#24395
            if ((_BE.length + $_.j) > 1480) { //#24395
                $j--; //#24394
                $k[$j++] = 'bwipp.codeoneTooLong#24394'; //#24394
                $k[$j++] = "Maximum length exceeded"; //#24394
                bwipp_raiseerror(); //#24394
            } //#24394
            var _BG = $k[--$j]; //#24396
            $puti($_.cws, $_.j, _BG); //#24396
            $_.j = _BG.length + $_.j; //#24397
        }; //#24397
        $_.tobin = function() {
            var _BL = $s($k[--$j]); //#24401
            $k[$j++] = _BL; //#24401
            for (var _BN = 0, _BM = _BL.length - 1; _BN <= _BM; _BN += 1) { //#24401
                var _BO = $k[--$j]; //#24401
                $put(_BO, _BN, 48); //#24401
                $k[$j++] = _BO; //#24401
            } //#24401
            var _BP = $k[--$j]; //#24402
            $k[$j++] = _BP; //#24402
            $k[$j++] = _BP; //#24402
            $r(3, -1); //#24402
            var _BQ = $k[--$j]; //#24402
            var _BR = $k[--$j]; //#24402
            var _BT = $cvrs($s(_BR.length), _BQ, 2); //#24402
            $puti(_BR, _BR.length - _BT.length, _BT); //#24402
            $k[$j++] = Infinity; //#24403
            var _BU = $k[--$j]; //#24403
            var _BV = $k[--$j]; //#24403
            $k[$j++] = _BU; //#24403
            $forall(_BV, function() { //#24403
                var _BW = $k[--$j]; //#24403
                $k[$j++] = $f(_BW - 48); //#24403
            }); //#24403
            var _BX = $a(); //#24403
            $k[$j++] = _BX; //#24403
        }; //#24403
        $_.encA = function() {
            for (var _BY = 0, _BZ = 1; _BY < _BZ; _BY++) { //#24448
                if ($get($_.numD, $_.i) >= 21) { //#24412
                    $_.Dbits = $a([1, 1, 1, 1]); //#24409
                    $_.mode = $_.D; //#24410
                    break; //#24411
                } //#24411
                var _Bh = $get($_.numD, $_.i); //#24413
                if ((_Bh >= 13) && ($f(_Bh + $_.i) == $_.msglen)) { //#24417
                    $_.Dbits = $a([1, 1, 1, 1]); //#24414
                    $_.mode = $_.D; //#24415
                    break; //#24416
                } //#24416
                if ($get($_.numD, $_.i) >= 2) { //#24422
                    var _Bp = $s(2); //#24419
                    $put(_Bp, 0, $get($_.msg, $_.i)); //#24419
                    $put(_Bp, 1, $get($_.msg, $_.i + 1)); //#24419
                    $k[$j++] = $get($_.Avals, _Bp); //#24419
                    $_.addtocws(); //#24419
                    $_.i = $_.i + 2; //#24420
                    break; //#24421
                } //#24421
                if ($get($_.msg, $_.i) == $_.fnc1) { //#24438
                    if ($get($_.numD, $_.i + 1) >= 15) { //#24430
                        $k[$j++] = $get($_.Avals, $_.fnc1lD); //#24425
                        $_.addtocws(); //#24425
                        $_.i = $_.i + 1; //#24426
                        $_.Dbits = $a([]); //#24427
                        $_.mode = $_.D; //#24428
                        break; //#24429
                    } //#24429
                    var _CE = $get($_.numD, $_.i + 1); //#24431
                    if ((_CE >= 7) && (($f($f(_CE + $_.i) + 1)) == $_.msglen)) { //#24437
                        $k[$j++] = $get($_.Avals, $_.fnc1lD); //#24432
                        $_.addtocws(); //#24432
                        $_.i = $_.i + 1; //#24433
                        $_.Dbits = $a([]); //#24434
                        $_.mode = $_.D; //#24435
                        break; //#24436
                    } //#24436
                } //#24436
                $k[$j++] = 'newmode'; //#24439
                $_.lookup(); //#24439
                var _CN = $k[--$j]; //#24439
                $_[$k[--$j]] = _CN; //#24439
                if ($_.newmode != $_.mode) { //#24444
                    $k[$j++] = $get($_.Avals, $get($a([-1, $_.lC, $_.lT, $_.lX, $_.lD, $_.lB]), $_.newmode)); //#24441
                    $_.addtocws(); //#24441
                    $_.mode = $_.newmode; //#24442
                    break; //#24443
                } //#24443
                $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#24445
                $_.addtocws(); //#24445
                $_.i = $_.i + 1; //#24446
                break; //#24447
            } //#24447
        }; //#24447
        $_.CTXvalstocws = function() {
            $_.in = $k[--$j]; //#24452
            $k[$j++] = Infinity; //#24453
            for (var _Cl = 0, _Ck = $_.in.length - 1; _Cl <= _Ck; _Cl += 3) { //#24457
                var _Cn = $geti($_.in, _Cl, 3); //#24455
                $k[$j++] = 0; //#24455
                for (var _Co = 0, _Cp = _Cn.length; _Co < _Cp; _Co++) { //#24455
                    var _Cr = $k[--$j]; //#24455
                    $k[$j++] = $f(_Cr + $get(_Cn, _Co)) * 40; //#24455
                } //#24455
                var _Ct = (~~($k[--$j] / 40)) + 1; //#24456
                $k[$j++] = ~~(_Ct / 256); //#24456
                $k[$j++] = _Ct % 256; //#24456
            } //#24456
            $astore($a($counttomark())); //#24458
            var _Cw = $k[--$j]; //#24458
            var _Cx = $k[--$j]; //#24458
            $k[$j++] = _Cw; //#24458
            $k[$j++] = _Cx; //#24458
            $j--; //#24458
        }; //#24458
        $_.encCTX = function() {
            $_.p = 0; //#24462
            $_.ctxvals = $a(2220); //#24463
            for (;;) { //#24560
                if ($_.i == $_.msglen) { //#24467
                    break; //#24467
                } //#24467
                if (($_.p % 3) == 0) { //#24555
                    if ($get($_.numD, $_.i) >= 12) { //#24474
                        $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#24470
                        $_.CTXvalstocws(); //#24470
                        $_.addtocws(); //#24470
                        $k[$j++] = $a([$_.unlcw]); //#24471
                        $_.addtocws(); //#24471
                        $_.mode = $_.A; //#24472
                        break; //#24473
                    } //#24473
                    var _DD = $get($_.numD, $_.i); //#24475
                    if ((_DD >= 8) && ($f(_DD + $_.i) == $_.msglen)) { //#24480
                        $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#24476
                        $_.CTXvalstocws(); //#24476
                        $_.addtocws(); //#24476
                        $k[$j++] = $a([$_.unlcw]); //#24477
                        $_.addtocws(); //#24477
                        $_.mode = $_.A; //#24478
                        break; //#24479
                    } //#24479
                    if ($_.mode == $_.X) { //#24502
                        var _DS = $get($_.Xvals, $get($_.msg, $_.i)) !== undefined; //#24482
                        if (!_DS) { //#24490
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#24483
                            $_.CTXvalstocws(); //#24483
                            $_.addtocws(); //#24483
                            if (($get($_.numremcws, $_.j) != 1) || ($get($_.msg, $_.i) > 127)) { //#24487
                                $k[$j++] = $a([$_.unlcw]); //#24486
                                $_.addtocws(); //#24486
                            } //#24486
                            $_.mode = $_.A; //#24488
                            break; //#24489
                        } //#24489
                        if (($_.i + 1) < $_.msglen) { //#24496
                            var _Dl = $get($_.Xvals, $get($_.msg, $_.i + 1)) !== undefined; //#24492
                            if (!_Dl) { //#24492
                                break; //#24492
                            } //#24492
                            if (($_.i + 2) < $_.msglen) { //#24495
                                var _Ds = $get($_.Xvals, $get($_.msg, $_.i + 2)) !== undefined; //#24494
                                if (!_Ds) { //#24494
                                    break; //#24494
                                } //#24494
                            } //#24494
                        } //#24494
                    } else { //#24502
                        $_.lookup(); //#24498
                        if ($k[--$j] != $_.mode) { //#24503
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#24499
                            $_.CTXvalstocws(); //#24499
                            $_.addtocws(); //#24499
                            $k[$j++] = $a([$_.unlcw]); //#24500
                            $_.addtocws(); //#24500
                            $_.mode = $_.A; //#24501
                            break; //#24502
                        } //#24502
                    } //#24502
                    if (($_.msglen - $_.i) <= 3) { //#24554
                        $_.remcws = $get($_.numremcws, $_.j + ((~~($_.p / 3)) * 2)); //#24506
                        $k[$j++] = Infinity; //#24507
                        var _EB = $geti($_.msg, $_.i, $_.msglen - $_.i); //#24508
                        for (var _EC = 0, _ED = _EB.length; _EC < _ED; _EC++) { //#24514
                            var _EE = $get(_EB, _EC); //#24514
                            var _EI = $get($get($_.encvals, $_.mode), _EE) !== undefined; //#24509
                            $k[$j++] = _EE; //#24513
                            if (_EI) { //#24512
                                $aload($get($get($_.encvals, $_.mode), $k[--$j])); //#24510
                            } else { //#24512
                                $j--; //#24512
                                $k[$j++] = -1; //#24512
                                $k[$j++] = -1; //#24512
                                $k[$j++] = -1; //#24512
                                $k[$j++] = -1; //#24512
                            } //#24512
                        } //#24512
                        $_.remvals = $a(); //#24512
                        if (($_.remcws == 2) && ($_.remvals.length == 3)) { //#24525
                            $k[$j++] = Infinity; //#24518
                            $aload($geti($_.ctxvals, 0, $_.p)); //#24519
                            $aload($_.remvals); //#24520
                            var _EV = $a(); //#24520
                            $k[$j++] = _EV; //#24521
                            $_.CTXvalstocws(); //#24521
                            $_.addtocws(); //#24521
                            $_.mode = $_.A; //#24522
                            $_.i = $_.msglen; //#24523
                            break; //#24524
                        } //#24524
                        if ((($_.remcws == 2) && ($_.remvals.length == 2)) && ($_.mode != $_.X)) { //#24536
                            $k[$j++] = Infinity; //#24528
                            $aload($geti($_.ctxvals, 0, $_.p)); //#24529
                            $aload($_.remvals); //#24530
                            $aload($get($get($_.encvals, $_.mode), $_.sft1)); //#24531
                            var _El = $a(); //#24531
                            $k[$j++] = _El; //#24532
                            $_.CTXvalstocws(); //#24532
                            $_.addtocws(); //#24532
                            $_.mode = $_.A; //#24533
                            $_.i = $_.msglen; //#24534
                            break; //#24535
                        } //#24535
                        if (($_.remcws == 2) && ($_.remvals.length == 1)) { //#24545
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#24539
                            $_.CTXvalstocws(); //#24539
                            $_.addtocws(); //#24539
                            $k[$j++] = $a([$_.unlcw]); //#24540
                            $_.addtocws(); //#24540
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#24541
                            $_.addtocws(); //#24541
                            $_.mode = $_.A; //#24542
                            $_.i = $_.msglen; //#24543
                            break; //#24544
                        } //#24544
                        if (($_.remcws == 1) && ($_.remvals.length == 1)) { //#24553
                            $k[$j++] = $geti($_.ctxvals, 0, $_.p); //#24548
                            $_.CTXvalstocws(); //#24548
                            $_.addtocws(); //#24548
                            $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#24549
                            $_.addtocws(); //#24549
                            $_.mode = $_.A; //#24550
                            $_.i = $_.msglen; //#24551
                            break; //#24552
                        } //#24552
                    } //#24552
                } //#24552
                var _FK = $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)); //#24556
                $puti($_.ctxvals, $_.p, _FK); //#24557
                $_.p = _FK.length + $_.p; //#24558
                $_.i = $_.i + 1; //#24559
            } //#24559
            if ($_.mode != $_.A) { //#24584
                for (;;) { //#24568
                    if (($_.p % 3) == 0) { //#24565
                        break; //#24565
                    } //#24565
                    $_.i = $_.i - 1; //#24566
                    $_.p = $_.p - $get($get($_.encvals, $_.mode), $get($_.msg, $_.i)).length; //#24567
                } //#24567
                $k[$j++] = Infinity; //#24569
                $aload($geti($_.ctxvals, 0, $_.p)); //#24570
                var _Fe = $a(); //#24570
                $k[$j++] = _Fe; //#24571
                $_.CTXvalstocws(); //#24571
                $_.addtocws(); //#24571
                $k[$j++] = $a([$_.unlcw]); //#24572
                $_.addtocws(); //#24572
                $_.mode = $_.A; //#24573
                if ($_.i != $_.msglen) { //#24583
                    if ($get($_.numD, $_.i) >= 2) { //#24581
                        var _Fn = $s(2); //#24577
                        $put(_Fn, 0, $get($_.msg, $_.i)); //#24577
                        $put(_Fn, 1, $get($_.msg, $_.i + 1)); //#24577
                        $k[$j++] = $get($_.Avals, _Fn); //#24577
                        $_.addtocws(); //#24577
                        $_.i = $_.i + 2; //#24578
                    } else { //#24581
                        $k[$j++] = $get($_.Avals, $get($_.msg, $_.i)); //#24580
                        $_.addtocws(); //#24580
                        $_.i = $_.i + 1; //#24581
                    } //#24581
                } //#24581
            } //#24581
        }; //#24581
        $_.encD = function() {
            for (;;) { //#24645
                if ($get($_.numD, $_.i) < 3) { //#24635
                    $_.Drem = (8 - ($_.Dbits.length % 8)) % 8; //#24594
                    $_.remcws = $get($_.numremcws, $_.j + (~~($_.Dbits.length / 8))); //#24595
                    if (((($f($get($_.numremcws, ($_.j + (~~($_.Dbits.length / 8))) - 1) - 1) == 0) && ($_.Drem == 0)) || (($_.remcws == 1) && ($_.Drem != 0))) && ($_.i == $_.msglen)) { //#24604
                        if (($_.Drem == 4) || ($_.Drem == 6)) { //#24601
                            $k[$j++] = Infinity; //#24601
                            $aload($_.Dbits); //#24601
                            $k[$j++] = 1; //#24601
                            $k[$j++] = 1; //#24601
                            $k[$j++] = 1; //#24601
                            $k[$j++] = 1; //#24601
                            $_.Dbits = $a(); //#24601
                        } //#24601
                        if (($_.Drem == 2) || ($_.Drem == 6)) { //#24602
                            $k[$j++] = Infinity; //#24602
                            $aload($_.Dbits); //#24602
                            $k[$j++] = 0; //#24602
                            $k[$j++] = 1; //#24602
                            $_.Dbits = $a(); //#24602
                        } //#24602
                        break; //#24603
                    } //#24603
                    if ((((($_.i == ($_.msglen - 1)) && ($get($_.numD, $_.i) == 1)) || (($_.i == ($_.msglen - 2)) && ($get($_.numD, $_.i) == 2))) && ($_.remcws == 1)) && ($_.Drem == 0)) { //#24609
                        break; //#24609
                    } //#24609
                    if (!(((($_.i == ($_.msglen - 1)) && ($get($_.numD, $_.i) == 1)) && ($_.remcws == 1)) && (($_.Drem == 4) || ($_.Drem == 6)))) { //#24616
                        $k[$j++] = Infinity; //#24614
                        $aload($_.Dbits); //#24614
                        $k[$j++] = 1; //#24614
                        $k[$j++] = 1; //#24614
                        $k[$j++] = 1; //#24614
                        $k[$j++] = 1; //#24614
                        $k[$j++] = 1; //#24614
                        $k[$j++] = 1; //#24614
                        $_.Dbits = $a(); //#24614
                        $_.Drem = (8 - ($_.Dbits.length % 8)) % 8; //#24615
                    } //#24615
                    if (($_.Drem == 4) || ($_.Drem == 6)) { //#24627
                        if ($get($_.numD, $_.i) >= 1) { //#24624
                            $k[$j++] = Infinity; //#24621
                            $aload($_.Dbits); //#24621
                            $k[$j++] = $f($f($get($_.msg, $_.i) - 48) + 1); //#24621
                            $k[$j++] = 4; //#24621
                            $_.tobin(); //#24621
                            $aload($k[--$j]); //#24621
                            $_.Dbits = $a(); //#24621
                            $_.i = $_.i + 1; //#24622
                        } else { //#24624
                            $k[$j++] = Infinity; //#24624
                            $aload($_.Dbits); //#24624
                            $k[$j++] = 1; //#24624
                            $k[$j++] = 1; //#24624
                            $k[$j++] = 1; //#24624
                            $k[$j++] = 1; //#24624
                            $_.Dbits = $a(); //#24624
                        } //#24624
                        $_.Drem = $_.Drem - 4; //#24626
                    } //#24626
                    if ($_.Drem == 2) { //#24631
                        $k[$j++] = Infinity; //#24629
                        $aload($_.Dbits); //#24629
                        $k[$j++] = 0; //#24629
                        $k[$j++] = 1; //#24629
                        $_.Dbits = $a(); //#24629
                        $_.Drem = 0; //#24630
                    } //#24630
                    break; //#24633
                } //#24633
                $k[$j++] = Infinity; //#24638
                $aload($_.Dbits); //#24639
                var _HA = $geti($_.msg, $_.i, 3); //#24640
                $k[$j++] = 0; //#24640
                for (var _HB = 0, _HC = _HA.length; _HB < _HC; _HB++) { //#24640
                    var _HE = $k[--$j]; //#24640
                    $k[$j++] = ($f(_HE + $f($get(_HA, _HB) - 48))) * 10; //#24640
                } //#24640
                var _HF = $k[--$j]; //#24640
                $k[$j++] = (~~(_HF / 10)) + 1; //#24641
                $k[$j++] = 10; //#24641
                $_.tobin(); //#24641
                $aload($k[--$j]); //#24641
                $_.Dbits = $a(); //#24641
                $_.i = $_.i + 3; //#24643
            } //#24643
            $k[$j++] = Infinity; //#24647
            for (var _HL = 0, _HK = $_.Dbits.length - 1; _HL <= _HK; _HL += 8) { //#24650
                var _HN = $geti($_.Dbits, _HL, 8); //#24649
                $k[$j++] = 0; //#24649
                for (var _HO = 0, _HP = _HN.length; _HO < _HP; _HO++) { //#24649
                    var _HR = $k[--$j]; //#24649
                    $k[$j++] = $f(_HR + $get(_HN, _HO)) * 2; //#24649
                } //#24649
                var _HS = $k[--$j]; //#24649
                $k[$j++] = ~~(_HS / 2); //#24649
            } //#24649
            $astore($a($counttomark())); //#24651
            var _HV = $k[--$j]; //#24651
            var _HW = $k[--$j]; //#24651
            $k[$j++] = _HV; //#24651
            $k[$j++] = _HW; //#24651
            $j--; //#24651
            $_.addtocws(); //#24651
            $_.mode = $_.A; //#24652
        }; //#24652
        $_.encB = function() {
            $_.p = 0; //#24657
            $_.bvals = $a(1480); //#24657
            for (;;) { //#24664
                if ($_.i == $_.msglen) { //#24658
                    break; //#24658
                } //#24658
                if ($get($_.msg, $_.i) < 0) { //#24659
                    break; //#24659
                } //#24659
                $_.lookup(); //#24660
                if ($k[--$j] != $_.mode) { //#24660
                    break; //#24660
                } //#24660
                $put($_.bvals, $_.p, $get($_.msg, $_.i)); //#24661
                $_.p = $_.p + 1; //#24662
                $_.i = $_.i + 1; //#24663
            } //#24663
            $_.remcws = $f($get($_.numremcws, $_.j + $_.p) - 1); //#24665
            $k[$j++] = Infinity; //#24666
            if (($_.remcws == 0) && ($_.i == $_.msglen)) { //#24670
                $k[$j++] = 0; //#24668
            } else { //#24670
                if ($_.p < 250) { //#24670
                    $k[$j++] = $_.p; //#24670
                } else { //#24670
                    $k[$j++] = (~~($_.p / 250)) + 249; //#24670
                    $k[$j++] = $_.p % 250; //#24670
                } //#24670
            } //#24670
            $aload($geti($_.bvals, 0, $_.p)); //#24672
            $_.bvals = $a(); //#24672
            $k[$j++] = $_.bvals; //#24674
            $_.addtocws(); //#24674
            $_.mode = $_.A; //#24675
        }; //#24675
        $_.cws = $a(1480); //#24679
        $_.mode = $_.A; //#24680
        $_.i = 0; //#24680
        $_.j = 0; //#24680
        for (;;) { //#24683
            if ($_.i >= $_.msglen) { //#24681
                break; //#24681
            } //#24681
            if ($_[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encD', 'encB']), $_.mode)]() === true) {
                break;
            } //#24682
        } //#24682
        $_.cws = $geti($_.cws, 0, $_.j); //#24684
    } //#24684
    var _IF = $_.metrics; //#24689
    for (var _IG = 0, _IH = _IF.length; _IG < _IH; _IG++) { //#24707
        $_.m = $get(_IF, _IG); //#24690
        $_.vers = $get($_.m, 0); //#24691
        $_.rows = $get($_.m, 1); //#24692
        $_.cols = $get($_.m, 2); //#24693
        $_.dcol = $get($_.m, 3); //#24694
        $_.dcws = $get($_.m, 4); //#24695
        $_.rscw = $get($_.m, 5); //#24696
        $_.rsbl = $get($_.m, 6); //#24697
        $_.riso = $get($_.m, 7); //#24698
        $_.risi = $get($_.m, 8); //#24699
        $_.risl = $get($_.m, 9); //#24700
        $_.dcpb = ~~($_.dcws / $_.rsbl); //#24701
        $_.ecpb = ~~($_.rscw / $_.rsbl); //#24702
        $_.okay = true; //#24703
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#24704
            $_.okay = false; //#24704
        } //#24704
        if ($_.cws.length > $_.dcws) { //#24705
            $_.okay = false; //#24705
        } //#24705
        if ($_.okay) { //#24706
            break; //#24706
        } //#24706
    } //#24706
    if (!$_.okay) { //#24711
        $k[$j++] = 'bwipp.codeoneNoValidSymbol#24710'; //#24710
        $k[$j++] = "Maximum length exceeded"; //#24710
        bwipp_raiseerror(); //#24710
    } //#24710
    if (!$_.stype) { //#24717
        $k[$j++] = Infinity; //#24715
        $aload($_.cws); //#24715
        for (var _Is = 0, _It = $f($_.dcws - $_.cws.length); _Is < _It; _Is++) { //#24715
            $k[$j++] = 129; //#24715
        } //#24715
        $_.cws = $a(); //#24715
    } else { //#24717
        $k[$j++] = Infinity; //#24717
        for (var _Ix = 0, _Iy = $f($_.dcws - $_.cws.length); _Ix < _Iy; _Ix++) { //#24717
            $k[$j++] = 0; //#24717
        } //#24717
        $aload($_.cws); //#24717
        $_.cws = $a(); //#24717
    } //#24717
    var _J2 = $get($_.options, 'debugcws') !== undefined; //#24720
    if (_J2) { //#24720
        $k[$j++] = 'bwipp.debugcws#24720'; //#24720
        $k[$j++] = $_.cws; //#24720
        bwipp_raiseerror(); //#24720
    } //#24720
    $_.cwbs = $a($_.rsbl); //#24723
    $_.ecbs = $a($_.rsbl); //#24724
    for (var _JA = 0, _J9 = $f($_.rsbl - 1); _JA <= _J9; _JA += 1) { //#24733
        $_.i = _JA; //#24726
        $_.cwb = $a($_.dcpb); //#24727
        for (var _JF = 0, _JE = $_.dcpb - 1; _JF <= _JE; _JF += 1) { //#24731
            $_.j = _JF; //#24729
            $put($_.cwb, $_.j, $get($_.cws, $f(($_.j * $_.rsbl) + $_.i))); //#24730
        } //#24730
        $put($_.cwbs, $_.i, $_.cwb); //#24732
    } //#24732
    var _JR = $_.stype ? 32 : 256; //#24736
    $_.gf = _JR; //#24736
    $_['gf-1'] = $_.gf - 1; //#24737
    var _JU = $_.stype ? 37 : 301; //#24738
    $_.pm = _JU; //#24738
    $k[$j++] = Infinity; //#24739
    $k[$j++] = 1; //#24739
    for (var _JW = 0, _JX = $_["gf-1"]; _JW < _JX; _JW++) { //#24739
        var _JY = $k[--$j]; //#24739
        var _JZ = _JY * 2; //#24739
        $k[$j++] = _JY; //#24739
        $k[$j++] = _JZ; //#24739
        if (_JZ >= $_.gf) { //#24739
            var _Jc = $k[--$j]; //#24739
            $k[$j++] = _Jc ^ $_.pm; //#24739
        } //#24739
    } //#24739
    $_.rsalog = $a(); //#24739
    $_.rslog = $a($_.gf); //#24740
    for (var _Ji = 1, _Jh = $_["gf-1"]; _Ji <= _Jh; _Ji += 1) { //#24741
        $put($_.rslog, $get($_.rsalog, _Ji), _Ji); //#24741
    } //#24741
    $_.rsprod = function() {
        var _Jm = $k[--$j]; //#24743
        var _Jn = $k[--$j]; //#24743
        $k[$j++] = _Jn; //#24747
        $k[$j++] = _Jm; //#24747
        if ((_Jm != 0) && (_Jn != 0)) { //#24746
            var _Jq = $get($_.rslog, $k[--$j]); //#24744
            var _Jw = $get($_.rsalog, $f(_Jq + $get($_.rslog, $k[--$j])) % $_["gf-1"]); //#24744
            $k[$j++] = _Jw; //#24744
        } else { //#24746
            $j -= 2; //#24746
            $k[$j++] = 0; //#24746
        } //#24746
    }; //#24746
    $k[$j++] = Infinity; //#24751
    $k[$j++] = 1; //#24751
    for (var _Jy = 0, _Jz = $_.ecpb; _Jy < _Jz; _Jy++) { //#24751
        $k[$j++] = 0; //#24751
    } //#24751
    $_.coeffs = $a(); //#24751
    for (var _K3 = 0, _K2 = $_.ecpb - 1; _K3 <= _K2; _K3 += 1) { //#24760
        $_.i = _K3; //#24753
        $put($_.coeffs, $_.i + 1, $get($_.coeffs, $_.i)); //#24754
        for (var _KA = $_.i; _KA >= 1; _KA -= 1) { //#24758
            $_.j = _KA; //#24756
            $k[$j++] = $_.coeffs; //#24757
            $k[$j++] = $_.j; //#24757
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#24757
            $k[$j++] = $get($_.coeffs, $_.j); //#24757
            $k[$j++] = $get($_.rsalog, $_.i); //#24757
            $_.rsprod(); //#24757
            var _KM = $k[--$j]; //#24757
            var _KN = $k[--$j]; //#24757
            var _KO = $k[--$j]; //#24757
            $put($k[--$j], _KO, $xo(_KN, _KM)); //#24757
        } //#24757
        $k[$j++] = $_.coeffs; //#24759
        $k[$j++] = 0; //#24759
        $k[$j++] = $get($_.coeffs, 0); //#24759
        $k[$j++] = $get($_.rsalog, $_.i); //#24759
        $_.rsprod(); //#24759
        var _KW = $k[--$j]; //#24759
        var _KX = $k[--$j]; //#24759
        $put($k[--$j], _KX, _KW); //#24759
    } //#24759
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#24761
    for (var _Ke = 0, _Kd = $_.cwbs.length - 1; _Ke <= _Kd; _Ke += 1) { //#24776
        $_.i = _Ke; //#24765
        $k[$j++] = Infinity; //#24766
        $aload($get($_.cwbs, $_.i)); //#24766
        for (var _Kj = 0, _Kk = $_.ecpb; _Kj < _Kk; _Kj++) { //#24766
            $k[$j++] = 0; //#24766
        } //#24766
        $_.rscws = $a(); //#24766
        for (var _Ko = 0, _Kn = $_.dcpb - 1; _Ko <= _Kn; _Ko += 1) { //#24774
            $_.m = _Ko; //#24768
            $_.k = $get($_.rscws, $_.m); //#24769
            for (var _Ku = 0, _Kt = $_.ecpb - 1; _Ku <= _Kt; _Ku += 1) { //#24773
                $_.j = _Ku; //#24771
                $k[$j++] = $_.rscws; //#24772
                $k[$j++] = ($_.m + $_.j) + 1; //#24772
                $k[$j++] = $get($_.coeffs, ($_.ecpb - $_.j) - 1); //#24772
                $k[$j++] = $_.k; //#24772
                $_.rsprod(); //#24772
                var _L7 = $k[--$j]; //#24772
                var _L8 = $k[--$j]; //#24772
                $put($k[--$j], _L8, $xo(_L7, $get($_.rscws, ($_.m + $_.j) + 1))); //#24772
            } //#24772
        } //#24772
        $put($_.ecbs, $_.i, $geti($_.rscws, $_.dcpb, $_.ecpb)); //#24775
    } //#24775
    $k[$j++] = Infinity; //#24779
    $aload($_.cws); //#24779
    for (var _LI = 0, _LJ = $_.rscw; _LI < _LJ; _LI++) { //#24779
        $k[$j++] = 0; //#24779
    } //#24779
    $_.cws = $a(); //#24779
    for (var _LN = 0, _LM = $f($_.rscw - 1); _LN <= _LM; _LN += 1) { //#24783
        $_.i = _LN; //#24781
        $put($_.cws, $f($_.dcws + $_.i), $get($get($_.ecbs, $_.i % $_.rsbl), ~~($_.i / $_.rsbl))); //#24782
    } //#24782
    var _Lb = $_.stype ? 5 : 8; //#24786
    $_.mmat = $a($f($_.dcws + $_.rscw) * _Lb); //#24786
    $_.r = 0; //#24787
    $_.c = 0; //#24787
    var _Le = $_.stype ? 2 : 1; //#24788
    for (var _Lh = 0, _Li = _Le, _Lg = $_.cws.length - 1; _Li < 0 ? _Lh >= _Lg : _Lh <= _Lg; _Lh += _Li) { //#24809
        $_.i = _Lh; //#24789
        if (!$_.stype) { //#24803
            var _Ll = $strcpy($s(8), "00000000"); //#24791
            var _Lq = $cvrs($s(8), $get($_.cws, $_.i), 2); //#24791
            $puti(_Ll, 8 - _Lq.length, _Lq); //#24792
            $k[$j++] = _Ll; //#24792
            $k[$j++] = Infinity; //#24792
            var _Lr = $k[--$j]; //#24792
            var _Ls = $k[--$j]; //#24792
            $k[$j++] = _Lr; //#24792
            $forall(_Ls, function() { //#24792
                var _Lt = $k[--$j]; //#24792
                $k[$j++] = $f(_Lt - 48); //#24792
            }); //#24792
            var _Lu = $a(); //#24792
            $_.top = $geti(_Lu, 0, 4); //#24793
            $_.bot = $geti(_Lu, 4, 4); //#24794
        } else { //#24803
            var _Ly = $strcpy($s(5), "00000"); //#24796
            var _M3 = $cvrs($s(5), $get($_.cws, $_.i), 2); //#24796
            $puti(_Ly, 5 - _M3.length, _M3); //#24797
            $k[$j++] = _Ly; //#24797
            $k[$j++] = Infinity; //#24797
            var _M4 = $k[--$j]; //#24797
            var _M5 = $k[--$j]; //#24797
            $k[$j++] = _M4; //#24797
            $forall(_M5, function() { //#24797
                var _M6 = $k[--$j]; //#24797
                $k[$j++] = $f(_M6 - 48); //#24797
            }); //#24797
            $_.c1 = $a(); //#24798
            var _M9 = $strcpy($s(5), "00000"); //#24799
            var _ME = $cvrs($s(5), $get($_.cws, $_.i + 1), 2); //#24799
            $puti(_M9, 5 - _ME.length, _ME); //#24800
            $k[$j++] = _M9; //#24800
            $k[$j++] = Infinity; //#24800
            var _MF = $k[--$j]; //#24800
            var _MG = $k[--$j]; //#24800
            $k[$j++] = _MF; //#24800
            $forall(_MG, function() { //#24800
                var _MH = $k[--$j]; //#24800
                $k[$j++] = $f(_MH - 48); //#24800
            }); //#24800
            $_.c2 = $a(); //#24801
            $k[$j++] = Infinity; //#24802
            $aload($geti($_.c1, 0, 3)); //#24802
            $aload($geti($_.c2, 0, 2)); //#24802
            $_.top = $a(); //#24802
            $k[$j++] = Infinity; //#24803
            $aload($geti($_.c1, 3, 2)); //#24803
            $aload($geti($_.c2, 2, 3)); //#24803
            $_.bot = $a(); //#24803
        } //#24803
        $puti($_.mmat, $f(($_.r * $_.dcol) + $_.c), $_.top); //#24805
        $puti($_.mmat, $f((($_.r + 1) * $_.dcol) + $_.c), $_.bot); //#24806
        $_.c = $_.c + $_.top.length; //#24807
        if ($_.c == $_.dcol) { //#24808
            $_.c = 0; //#24808
            $_.r = $_.r + 2; //#24808
        } //#24808
    } //#24808
    $_.mmv = function() {
        var _Mj = $k[--$j]; //#24812
        var _Mk = $k[--$j]; //#24812
        $k[$j++] = $f(_Mk + (_Mj * $_.cols)); //#24812
    }; //#24812
    $k[$j++] = Infinity; //#24813
    for (var _Mn = 0, _Mo = $_.rows * $_.cols; _Mn < _Mo; _Mn++) { //#24813
        $k[$j++] = -1; //#24813
    } //#24813
    $_.pixs = $a(); //#24813
    var _NK = $a([function() {
        for (var _Mr = 0, _Ms = $_.cols; _Mr < _Ms; _Mr++) { //#24817
            $k[$j++] = 0; //#24817
        } //#24817
    }, function() {
        for (var _Mu = 0, _Mv = $_.cols; _Mu < _Mv; _Mu++) { //#24818
            $k[$j++] = 1; //#24818
        } //#24818
    }, function() {
        $k[$j++] = 0; //#24819
        for (var _Mx = 0, _My = $f($_.cols - 2); _Mx < _My; _Mx++) { //#24819
            $k[$j++] = 1; //#24819
        } //#24819
        $k[$j++] = 0; //#24819
    }, function() {
        $k[$j++] = 0; //#24820
        $k[$j++] = 1; //#24820
        for (var _N0 = 0, _N1 = $f($_.cols - 4); _N0 < _N1; _N0++) { //#24820
            $k[$j++] = 0; //#24820
        } //#24820
        $k[$j++] = 1; //#24820
        $k[$j++] = 0; //#24820
    }, function() {
        for (var _N3 = 0, _N4 = ~~($f($_.cols - 1) / 2); _N3 < _N4; _N3++) { //#24821
            $k[$j++] = -1; //#24821
        } //#24821
        $k[$j++] = 1; //#24821
        for (var _N6 = 0, _N7 = ~~($f($_.cols - 1) / 2); _N6 < _N7; _N6++) { //#24821
            $k[$j++] = -1; //#24821
        } //#24821
    }, function() {
        for (var _N9 = 0, _NA = ~~($f($_.cols - 1) / 2); _N9 < _NA; _N9++) { //#24822
            $k[$j++] = -1; //#24822
        } //#24822
        $k[$j++] = 0; //#24822
        for (var _NC = 0, _ND = ~~($f($_.cols - 1) / 2); _NC < _ND; _NC++) { //#24822
            $k[$j++] = -1; //#24822
        } //#24822
    }, function() {
        $k[$j++] = 1; //#24823
        for (var _NF = 0, _NG = $f($_.cols - 2); _NF < _NG; _NF++) { //#24823
            $k[$j++] = 0; //#24823
        } //#24823
        $k[$j++] = 1; //#24823
    }, function() {
        $k[$j++] = 1; //#24824
        $k[$j++] = 0; //#24824
        for (var _NI = 0, _NJ = $f($_.cols - 4); _NI < _NJ; _NI++) { //#24824
            $k[$j++] = 1; //#24824
        } //#24824
        $k[$j++] = 0; //#24824
        $k[$j++] = 1; //#24824
    }]); //#24824
    $_.artifact = _NK; //#24825
    if (!bwipp_codeone.__24839__) { //#24839
        $_ = Object.create($_); //#24839
        var _NL = new Map([
            ["A", "121343"],
            ["B", "12134343"],
            ["C", "12121343"],
            ["D", "1213434343"],
            ["E", "1212134343"],
            ["F", "1212121343"],
            ["G", "121213434343"],
            ["H", "121212134343"],
            ["S", "56661278"],
            ["T", "5666666666127878"]
        ]); //#24837
        $_.cpatmap = _NL; //#24838
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codeone.$ctx[id] = $_[id]); //#24838
        bwipp_codeone.__24839__ = 1; //#24838
        $_ = Object.getPrototypeOf($_); //#24838
    } //#24838
    $_.cpat = $get($_.cpatmap, $geti($_.vers, 0, 1)); //#24840
    $k[$j++] = $_.pixs; //#24841
    $k[$j++] = 0; //#24841
    $k[$j++] = ~~($f($_.rows - $_.cpat.length) / 2); //#24841
    $_.mmv(); //#24841
    $k[$j++] = Infinity; //#24842
    $forall($_.cpat, function() { //#24842
        if ($get($_.artifact, $f($k[--$j] - 49))() === true) {
            return true;
        } //#24842
    }); //#24842
    var _NY = $a(); //#24842
    var _NZ = $k[--$j]; //#24842
    $puti($k[--$j], _NZ, _NY); //#24842
    for (var _Nd = 0, _Nc = $f($_.risl - 1); _Nd <= _Nc; _Nd += 1) { //#24857
        $_.i = _Nd; //#24846
        for (var _Ni = $_.riso, _Nj = $_.risi, _Nh = $f($_.cols - 1); _Nj < 0 ? _Ni >= _Nh : _Ni <= _Nh; _Ni += _Nj) { //#24856
            $_.j = _Ni; //#24848
            var _Nl = (($_.i % 12) == 0) ? 1 : 0; //#24849
            var _Nm = $a([1, _Nl]); //#24849
            $k[$j++] = _Nm; //#24850
            $k[$j++] = _Nm; //#24850
            $k[$j++] = $_.pixs; //#24850
            $k[$j++] = $_.j; //#24850
            $k[$j++] = $_.i; //#24850
            $_.mmv(); //#24850
            $r(3, -1); //#24851
            var _Nq = $k[--$j]; //#24851
            var _Nr = $k[--$j]; //#24851
            $puti($k[--$j], _Nr, _Nq); //#24851
            if ($_.i != $f($_.risl - 1)) { //#24855
                $k[$j++] = $_.pixs; //#24853
                $k[$j++] = $f($f($_.cols - $_.j) - 2); //#24853
                $k[$j++] = $f($f($_.rows - $_.i) - 1); //#24853
                $_.mmv(); //#24853
                $r(3, -1); //#24854
                var _O0 = $k[--$j]; //#24854
                var _O1 = $k[--$j]; //#24854
                $puti($k[--$j], _O1, _O0); //#24854
            } else { //#24855
                $j--; //#24855
            } //#24855
        } //#24855
    } //#24855
    if (!bwipp_codeone.__24877__) { //#24877
        $_ = Object.create($_); //#24877
        var _Og = new Map([
            ["A", $a([$a([12, 5])])],
            ["B", $a([$a([16, 7])])],
            ["C", $a([$a([26, 12])])],
            ["D", $a([])],
            ["E", $a([$a([26, 23])])],
            ["F", $a([$a([26, 32]), $a([70, 32]), $a([26, 34]), $a([70, 34])])],
            ["G", $a([$a([27, 48]), $a([69, 48])])],
            ["H", $a([$a([26, 70]), $a([66, 70]), $a([106, 70]), $a([26, 72]), $a([66, 72]), $a([106, 72])])],
            ["S-10", $a([])],
            ["S-20", $a([$a([10, 4])])],
            ["S-30", $a([$a([15, 4]), $a([15, 6])])],
            ["T-16", $a([$a([8, 10])])],
            ["T-32", $a([$a([16, 10]), $a([16, 12])])],
            ["T-48", $a([$a([24, 10]), $a([24, 12]), $a([24, 14])])]
        ]); //#24875
        $_.blackdotmap = _Og; //#24876
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_codeone.$ctx[id] = $_[id]); //#24876
        bwipp_codeone.__24877__ = 1; //#24876
        $_ = Object.getPrototypeOf($_); //#24876
    } //#24876
    $forall($get($_.blackdotmap, $_.vers), function() { //#24878
        var _Om = $k[--$j]; //#24878
        $k[$j++] = $_.pixs; //#24878
        $aload(_Om); //#24878
        $_.mmv(); //#24878
        var _On = $k[--$j]; //#24878
        $put($k[--$j], _On, 1); //#24878
    }); //#24878
    $_.j = 0; //#24881
    for (var _Or = 0, _Oq = $_.pixs.length - 1; _Or <= _Oq; _Or += 1) { //#24888
        $_.i = _Or; //#24883
        if ($get($_.pixs, $_.i) == -1) { //#24887
            $put($_.pixs, $_.i, $get($_.mmat, $_.j)); //#24885
            $_.j = $_.j + 1; //#24886
        } //#24886
    } //#24886
    $k[$j++] = Infinity; //#24891
    $k[$j++] = 'ren'; //#24903
    $k[$j++] = 'renmatrix'; //#24903
    $k[$j++] = 'pixs'; //#24903
    $k[$j++] = $_.pixs; //#24903
    $k[$j++] = 'pixx'; //#24903
    $k[$j++] = $_.cols; //#24903
    $k[$j++] = 'pixy'; //#24903
    $k[$j++] = $_.rows; //#24903
    $k[$j++] = 'height'; //#24903
    $k[$j++] = ($_.rows / 72) * 2; //#24903
    $k[$j++] = 'width'; //#24903
    $k[$j++] = ($_.cols / 72) * 2; //#24903
    if ($_.stype || $_.ttype) { //#24903
        $k[$j++] = 'borderleft'; //#24902
        $k[$j++] = 1; //#24902
        $k[$j++] = 'borderright'; //#24902
        $k[$j++] = 1; //#24902
        $k[$j++] = 'bordertop'; //#24902
        $k[$j++] = 0; //#24902
        $k[$j++] = 'borderbottom'; //#24902
        $k[$j++] = 1; //#24902
    } //#24902
    $k[$j++] = 'opt'; //#24904
    $k[$j++] = $_.options; //#24904
    var _P9 = $d(); //#24904
    $k[$j++] = _P9; //#24907
    if (!$_.dontdraw) { //#24907
        bwipp_renmatrix(); //#24907
    } //#24907
    $_ = Object.getPrototypeOf($_); //#24909
    $_ = Object.getPrototypeOf($_); //#24911
} //bwipp_codeone
function bwipp_hanxin() {
    $_ = Object.create($_); //#24942
    $_.dontdraw = false; //#24945
    $_.version = "unset"; //#24946
    $_.eclevel = "L2"; //#24947
    $_.parse = false; //#24948
    $_.parsefnc = false; //#24949
    $_.mask = -1; //#24950
    $k[$j++] = $_; //#24952
    bwipp_processoptions(); //#24952
    $_.options = $k[--$j]; //#24952
    $_.barcode = $k[--$j]; //#24953
    if ($eq($_.barcode, "")) { //#24957
        $k[$j++] = 'bwipp.hanxinEmptyData#24956'; //#24956
        $k[$j++] = "The data must not be empty"; //#24956
        bwipp_raiseerror(); //#24956
    } //#24956
    if ($ne($_.version, "unset")) { //#24969
        var _5 = $_.version.length; //#24960
        var _6 = (_5 >= 1) && (_5 <= 2); //#24960
        $k[$j++] = _6; //#24965
        if (_6) { //#24965
            $j--; //#24961
            var _7 = $_.version; //#24962
            $k[$j++] = true; //#24962
            for (var _8 = 0, _9 = _7.length; _8 < _9; _8++) { //#24962
                var _A = $get(_7, _8); //#24962
                if ((_A < 48) || (_A > 57)) { //#24962
                    $j--; //#24962
                    $k[$j++] = false; //#24962
                } //#24962
            } //#24962
            var _B = $k[--$j]; //#24962
            $k[$j++] = _B; //#24964
            if (_B) { //#24964
                $j--; //#24963
                var _D = $cvi($_.version); //#24963
                $k[$j++] = (_D >= 1) && (_D <= 84); //#24963
            } //#24963
        } //#24963
        if ($nt($k[--$j])) { //#24968
            $k[$j++] = 'bwipp.hanxinInvalidVersion#24967'; //#24967
            $k[$j++] = "Valid versions are 1 to 84"; //#24967
            bwipp_raiseerror(); //#24967
        } //#24967
    } //#24967
    var _G = $_.eclevel.length == 2; //#24971
    $k[$j++] = _G; //#24975
    if (_G) { //#24975
        $j--; //#24972
        $k[$j++] = $geti($_.eclevel, 0, 1); //#24974
        if ($eq("L", "L")) { //#24974
            $j--; //#24973
            var _L = $get($_.eclevel, 1) - 48; //#24973
            $k[$j++] = (_L >= 1) && (_L <= 4); //#24973
        } //#24973
    } //#24973
    if ($nt($k[--$j])) { //#24978
        $k[$j++] = 'bwipp.hanxinInvalidErrorCorrectionLevel#24977'; //#24977
        $k[$j++] = "Valid error correction levels are L1 to L4"; //#24977
        bwipp_raiseerror(); //#24977
    } //#24977
    if ($_.mask != -1) { //#24984
        if (($_.mask < 1) || ($_.mask > 4)) { //#24983
            $k[$j++] = 'bwipp.hanxinInvalidErrorCorrectionLevel#24982'; //#24982
            $k[$j++] = "The valid masks are 1 to 4"; //#24982
            bwipp_raiseerror(); //#24982
        } //#24982
    } //#24982
    bwipp_loadctx(bwipp_hanxin); //#24986
    var _S = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc]
    ]); //#24991
    $_.fncvals = _S; //#24993
    $k[$j++] = 'msg'; //#24994
    $k[$j++] = $_.barcode; //#24994
    $k[$j++] = $_.fncvals; //#24994
    bwipp_parseinput(); //#24994
    var _V = $k[--$j]; //#24994
    $_[$k[--$j]] = _V; //#24994
    $_.msglen = $_.msg.length; //#24995
    $_.tobin = function() {
        var _Z = $s($k[--$j]); //#24998
        $k[$j++] = _Z; //#24998
        for (var _b = 0, _a = _Z.length - 1; _b <= _a; _b += 1) { //#24998
            var _c = $k[--$j]; //#24998
            $put(_c, _b, 48); //#24998
            $k[$j++] = _c; //#24998
        } //#24998
        var _d = $k[--$j]; //#24999
        $k[$j++] = _d; //#24999
        $k[$j++] = _d; //#24999
        $r(3, -1); //#24999
        var _e = $k[--$j]; //#24999
        var _f = $k[--$j]; //#24999
        var _h = $cvrs($s(_f.length), _e, 2); //#24999
        $puti(_f, _f.length - _h.length, _h); //#25000
    }; //#25000
    $_.bits = $s((4 + 13) + ($_.msglen * 8)); //#25004
    $puti($_.bits, 0, "0011"); //#25005
    $k[$j++] = $_.bits; //#25006
    $k[$j++] = 4; //#25006
    $k[$j++] = $_.msglen; //#25006
    $k[$j++] = 13; //#25006
    $_.tobin(); //#25006
    var _n = $k[--$j]; //#25006
    var _o = $k[--$j]; //#25006
    $puti($k[--$j], _o, _n); //#25006
    for (var _s = 0, _r = $_.msglen - 1; _s <= _r; _s += 1) { //#25010
        $_.i = _s; //#25008
        $k[$j++] = $_.bits; //#25009
        $k[$j++] = 17 + ($_.i * 8); //#25009
        $k[$j++] = $get($_.msg, $_.i); //#25009
        $k[$j++] = 8; //#25009
        $_.tobin(); //#25009
        var _y = $k[--$j]; //#25009
        var _z = $k[--$j]; //#25009
        $puti($k[--$j], _z, _y); //#25009
    } //#25009
    if (!bwipp_hanxin.__25353__) { //#25353
        $_ = Object.create($_); //#25353
        var _25 = $a([0, -1, -1]); //#25036
        $_.metrics = $a([$a(["1", 23, -1, 0, 205, $a([1, 21, 4]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 17, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 13, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 9, 16]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["2", 25, -1, 0, 301, $a([1, 31, 6]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 25, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 19, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 15, 22]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["3", 27, -1, 0, 405, $a([1, 42, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 34, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["4", 29, 14, 1, 439, $a([1, 46, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 38, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 30, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 22, 32]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["5", 31, 16, 1, 555, $a([1, 57, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 49, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 37, 32]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 14, 20]), $a([1, 13, 22]), $a([0, -1, -1])]), $a(["6", 33, 16, 1, 675, $a([1, 70, 14]), _25, $a([0, -1, -1]), $a([1, 58, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 24, 20]), $a([1, 22, 18]), $a([0, -1, -1]), $a([1, 16, 24]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["7", 35, 17, 1, 805, $a([1, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 22]), $a([1, 28, 24]), $a([0, -1, -1]), $a([2, 14, 20]), $a([1, 12, 20]), $a([0, -1, -1])]), $a(["8", 37, 18, 1, 943, $a([1, 99, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 40, 18]), $a([1, 41, 18]), $a([0, -1, -1]), $a([1, 31, 26]), $a([1, 32, 28]), $a([0, -1, -1]), $a([2, 16, 24]), $a([1, 15, 22]), $a([0, -1, -1])]), $a(["9", 39, 19, 1, 1089, $a([1, 114, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 48, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 24, 20]), $a([1, 26, 22]), $a([0, -1, -1]), $a([2, 18, 28]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["10", 41, 20, 1, 1243, $a([1, 131, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 52, 22]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 27, 24]), $a([1, 29, 24]), $a([0, -1, -1]), $a([2, 21, 32]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["11", 43, 14, 2, 1289, $a([1, 135, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 56, 24]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 28, 24]), $a([1, 31, 26]), $a([0, -1, -1]), $a([2, 22, 32]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["12", 45, 15, 2, 1455, $a([1, 153, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 62, 26]), $a([1, 65, 28]), $a([0, -1, -1]), $a([2, 32, 28]), $a([1, 33, 28]), $a([0, -1, -1]), $a([3, 17, 26]), $a([1, 22, 30]), $a([0, -1, -1])]), $a(["13", 47, 16, 2, 1629, $a([1, 86, 16]), $a([1, 85, 16]), $a([0, -1, -1]), $a([1, 71, 30]), $a([1, 72, 30]), $a([0, -1, -1]), $a([2, 37, 32]), $a([1, 35, 30]), $a([0, -1, -1]), $a([3, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["14", 49, 16, 2, 1805, $a([1, 94, 18]), $a([1, 95, 18]), $a([0, -1, -1]), $a([2, 51, 22]), $a([1, 55, 24]), $a([0, -1, -1]), $a([3, 30, 26]), $a([1, 31, 26]), $a([0, -1, -1]), $a([4, 18, 28]), $a([1, 17, 24]), $a([0, -1, -1])]), $a(["15", 51, 17, 2, 1995, $a([1, 104, 20]), $a([1, 105, 20]), $a([0, -1, -1]), $a([2, 57, 24]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 33, 28]), $a([1, 36, 30]), $a([0, -1, -1]), $a([4, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["16", 53, 17, 2, 2187, $a([1, 115, 22]), $a([1, 114, 22]), $a([0, -1, -1]), $a([2, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 38, 32]), $a([1, 33, 30]), $a([0, -1, -1]), $a([5, 19, 28]), $a([1, 14, 24]), $a([0, -1, -1])]), $a(["17", 55, 18, 2, 2393, $a([1, 126, 24]), $a([1, 125, 24]), $a([0, -1, -1]), $a([2, 70, 30]), $a([1, 69, 30]), $a([0, -1, -1]), $a([4, 33, 28]), $a([1, 29, 26]), $a([0, -1, -1]), $a([5, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["18", 57, 19, 2, 2607, $a([1, 136, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([3, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([5, 35, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 18, 28]), $a([1, 21, 28]), $a([0, -1, -1])]), $a(["19", 59, 20, 2, 2829, $a([1, 148, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([3, 61, 26]), $a([1, 64, 28]), $a([0, -1, -1]), $a([7, 24, 20]), $a([1, 23, 22]), $a([0, -1, -1]), $a([6, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["20", 61, 20, 2, 3053, $a([3, 107, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([3, 65, 28]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 26, 22]), $a([1, 23, 22]), $a([0, -1, -1]), $a([7, 19, 28]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["21", 63, 21, 2, 3291, $a([3, 115, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 63, 28]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 25, 22]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 21, 22]), $a([0, -1, -1])]), $a(["22", 65, 16, 3, 3383, $a([2, 116, 22]), $a([1, 122, 24]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 32, 26]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 24, 30]), $a([0, -1, -1])]), $a(["23", 67, 17, 3, 3631, $a([3, 127, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([5, 51, 22]), $a([1, 62, 26]), $a([0, -1, -1]), $a([7, 30, 26]), $a([1, 35, 26]), $a([0, -1, -1]), $a([8, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["24", 69, 17, 3, 3887, $a([2, 135, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([5, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([7, 33, 28]), $a([1, 30, 28]), $a([0, -1, -1]), $a([11, 16, 24]), $a([1, 19, 26]), $a([0, -1, -1])]), $a(["25", 71, 18, 3, 4151, $a([3, 105, 20]), $a([1, 121, 22]), $a([0, -1, -1]), $a([5, 61, 26]), $a([1, 57, 26]), $a([0, -1, -1]), $a([9, 28, 24]), $a([1, 28, 22]), $a([0, -1, -1]), $a([10, 19, 28]), $a([1, 18, 30]), $a([0, -1, -1])]), $a(["26", 73, 18, 3, 4423, $a([2, 157, 30]), $a([1, 150, 28]), $a([0, -1, -1]), $a([5, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([8, 33, 28]), $a([1, 34, 30]), $a([0, -1, -1]), $a([10, 19, 28]), $a([2, 15, 26]), $a([0, -1, -1])]), $a(["27", 75, 19, 3, 4703, $a([3, 126, 24]), $a([1, 115, 22]), $a([0, -1, -1]), $a([7, 51, 22]), $a([1, 54, 22]), $a([0, -1, -1]), $a([8, 35, 30]), $a([1, 37, 30]), $a([0, -1, -1]), $a([15, 15, 22]), $a([1, 10, 22]), $a([0, -1, -1])]), $a(["28", 77, 19, 3, 4991, $a([4, 105, 20]), $a([1, 103, 20]), $a([0, -1, -1]), $a([7, 56, 24]), $a([1, 45, 18]), $a([0, -1, -1]), $a([10, 31, 26]), $a([1, 27, 26]), $a([0, -1, -1]), $a([10, 17, 26]), $a([3, 20, 28]), $a([1, 21, 28])]), $a(["29", 79, 20, 3, 5287, $a([3, 139, 26]), $a([1, 137, 28]), $a([0, -1, -1]), $a([6, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([9, 36, 30]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["30", 81, 20, 3, 5591, $a([6, 84, 16]), $a([1, 82, 16]), $a([0, -1, -1]), $a([6, 70, 30]), $a([1, 68, 30]), $a([0, -1, -1]), $a([7, 35, 30]), $a([3, 33, 28]), $a([1, 32, 28]), $a([13, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["31", 83, 21, 3, 5903, $a([5, 105, 20]), $a([1, 94, 18]), $a([0, -1, -1]), $a([6, 74, 32]), $a([1, 71, 30]), $a([0, -1, -1]), $a([11, 33, 28]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["32", 85, 17, 4, 6033, $a([4, 127, 24]), $a([1, 126, 24]), $a([0, -1, -1]), $a([7, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([12, 30, 24]), $a([1, 24, 28]), $a([1, 24, 30]), $a([15, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["33", 87, 17, 4, 6353, $a([7, 84, 16]), $a([1, 78, 16]), $a([0, -1, -1]), $a([7, 70, 30]), $a([1, 66, 28]), $a([0, -1, -1]), $a([12, 33, 28]), $a([1, 32, 30]), $a([0, -1, -1]), $a([14, 21, 32]), $a([1, 24, 28]), $a([0, -1, -1])]), $a(["34", 89, 18, 4, 6689, $a([5, 117, 22]), $a([1, 117, 24]), $a([0, -1, -1]), $a([8, 66, 28]), $a([1, 58, 26]), $a([0, -1, -1]), $a([11, 38, 32]), $a([1, 34, 32]), $a([0, -1, -1]), $a([15, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["35", 91, 18, 4, 7025, $a([4, 148, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([8, 68, 30]), $a([1, 70, 24]), $a([0, -1, -1]), $a([10, 36, 32]), $a([3, 38, 28]), $a([0, -1, -1]), $a([16, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["36", 93, 19, 4, 7377, $a([4, 126, 24]), $a([2, 135, 26]), $a([0, -1, -1]), $a([8, 70, 28]), $a([2, 43, 26]), $a([0, -1, -1]), $a([13, 32, 28]), $a([2, 41, 30]), $a([0, -1, -1]), $a([17, 19, 28]), $a([3, 15, 26]), $a([0, -1, -1])]), $a(["37", 95, 19, 4, 7729, $a([5, 136, 26]), $a([1, 132, 24]), $a([0, -1, -1]), $a([5, 67, 30]), $a([4, 68, 28]), $a([1, 69, 28]), $a([14, 35, 30]), $a([1, 32, 24]), $a([0, -1, -1]), $a([18, 18, 26]), $a([3, 16, 28]), $a([1, 14, 28])]), $a(["38", 97, 19, 4, 8089, $a([3, 142, 26]), $a([3, 141, 28]), $a([0, -1, -1]), $a([8, 70, 30]), $a([1, 73, 32]), $a([1, 74, 32]), $a([12, 34, 30]), $a([3, 34, 26]), $a([1, 35, 28]), $a([18, 21, 32]), $a([1, 27, 30]), $a([0, -1, -1])]), $a(["39", 99, 20, 4, 8465, $a([5, 116, 22]), $a([2, 103, 20]), $a([1, 102, 20]), $a([9, 74, 32]), $a([1, 74, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([2, 32, 32]), $a([1, 32, 30]), $a([19, 21, 32]), $a([1, 25, 26]), $a([0, -1, -1])]), $a(["40", 101, 20, 4, 8841, $a([7, 116, 22]), $a([1, 117, 22]), $a([0, -1, -1]), $a([11, 65, 28]), $a([1, 58, 24]), $a([0, -1, -1]), $a([15, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([20, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["41", 103, 17, 5, 9009, $a([6, 136, 26]), $a([1, 130, 24]), $a([0, -1, -1]), $a([11, 66, 28]), $a([1, 62, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([3, 34, 32]), $a([1, 30, 30]), $a([18, 20, 30]), $a([3, 20, 28]), $a([2, 15, 26])]), $a(["42", 105, 17, 5, 9401, $a([5, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([10, 75, 32]), $a([1, 73, 32]), $a([0, -1, -1]), $a([16, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([22, 19, 28]), $a([2, 16, 30]), $a([1, 19, 30])]), $a(["43", 107, 18, 5, 9799, $a([6, 147, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([11, 66, 28]), $a([2, 65, 30]), $a([0, -1, -1]), $a([18, 33, 28]), $a([2, 33, 30]), $a([0, -1, -1]), $a([22, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["44", 109, 18, 5, 10207, $a([6, 116, 22]), $a([3, 125, 24]), $a([0, -1, -1]), $a([11, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([13, 35, 28]), $a([6, 34, 32]), $a([1, 30, 30]), $a([23, 21, 32]), $a([1, 26, 30]), $a([0, -1, -1])]), $a(["45", 111, 18, 5, 10623, $a([7, 105, 20]), $a([4, 95, 18]), $a([0, -1, -1]), $a([12, 67, 28]), $a([1, 63, 30]), $a([1, 62, 32]), $a([21, 31, 26]), $a([2, 33, 32]), $a([0, -1, -1]), $a([23, 21, 32]), $a([2, 24, 30]), $a([0, -1, -1])]), $a(["46", 113, 19, 5, 11045, $a([10, 116, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([12, 74, 32]), $a([1, 78, 30]), $a([0, -1, -1]), $a([18, 37, 32]), $a([1, 39, 30]), $a([1, 41, 28]), $a([25, 21, 32]), $a([1, 27, 28]), $a([0, -1, -1])]), $a(["47", 115, 19, 5, 11477, $a([5, 126, 24]), $a([4, 115, 22]), $a([1, 114, 22]), $a([12, 67, 28]), $a([2, 66, 32]), $a([1, 68, 30]), $a([21, 35, 30]), $a([1, 39, 30]), $a([0, -1, -1]), $a([26, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["48", 117, 19, 5, 11917, $a([9, 126, 24]), $a([1, 117, 22]), $a([0, -1, -1]), $a([13, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([20, 35, 30]), $a([3, 35, 28]), $a([0, -1, -1]), $a([27, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["49", 119, 17, 6, 12111, $a([9, 126, 24]), $a([1, 137, 26]), $a([0, -1, -1]), $a([13, 71, 30]), $a([2, 68, 32]), $a([0, -1, -1]), $a([20, 37, 32]), $a([1, 39, 28]), $a([1, 38, 28]), $a([24, 20, 32]), $a([5, 25, 28]), $a([0, -1, -1])]), $a(["50", 121, 17, 6, 12559, $a([8, 147, 28]), $a([1, 141, 28]), $a([0, -1, -1]), $a([10, 73, 32]), $a([4, 74, 30]), $a([1, 73, 30]), $a([16, 36, 32]), $a([6, 39, 30]), $a([1, 37, 30]), $a([27, 21, 32]), $a([3, 20, 26]), $a([0, -1, -1])]), $a(["51", 123, 18, 6, 13025, $a([9, 137, 26]), $a([1, 135, 26]), $a([0, -1, -1]), $a([12, 70, 30]), $a([4, 75, 32]), $a([0, -1, -1]), $a([24, 35, 30]), $a([1, 40, 28]), $a([0, -1, -1]), $a([23, 20, 32]), $a([8, 24, 30]), $a([0, -1, -1])]), $a(["52", 125, 18, 6, 13489, $a([14, 95, 18]), $a([1, 86, 18]), $a([0, -1, -1]), $a([13, 73, 32]), $a([3, 77, 30]), $a([0, -1, -1]), $a([24, 35, 30]), $a([2, 35, 28]), $a([0, -1, -1]), $a([26, 21, 32]), $a([5, 21, 30]), $a([1, 23, 30])]), $a(["53", 127, 18, 6, 13961, $a([9, 147, 28]), $a([1, 142, 28]), $a([0, -1, -1]), $a([10, 73, 30]), $a([6, 70, 32]), $a([1, 71, 32]), $a([25, 35, 30]), $a([2, 34, 26]), $a([0, -1, -1]), $a([29, 21, 32]), $a([4, 22, 30]), $a([0, -1, -1])]), $a(["54", 129, 18, 6, 14441, $a([11, 126, 24]), $a([1, 131, 24]), $a([0, -1, -1]), $a([16, 74, 32]), $a([1, 79, 30]), $a([0, -1, -1]), $a([25, 38, 32]), $a([1, 25, 30]), $a([0, -1, -1]), $a([33, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["55", 131, 19, 6, 14939, $a([14, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([24, 37, 32]), $a([2, 40, 30]), $a([1, 41, 30]), $a([31, 21, 32]), $a([4, 24, 32]), $a([0, -1, -1])]), $a(["56", 133, 19, 6, 15435, $a([10, 147, 28]), $a([1, 151, 28]), $a([0, -1, -1]), $a([15, 71, 30]), $a([3, 71, 32]), $a([1, 73, 32]), $a([24, 37, 32]), $a([3, 38, 30]), $a([1, 39, 30]), $a([36, 19, 30]), $a([3, 29, 26]), $a([0, -1, -1])]), $a(["57", 135, 19, 6, 15939, $a([15, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 70, 30]), $a([1, 64, 28]), $a([0, -1, -1]), $a([27, 38, 32]), $a([2, 25, 26]), $a([0, -1, -1]), $a([38, 20, 30]), $a([2, 18, 28]), $a([0, -1, -1])]), $a(["58", 137, 17, 7, 16171, $a([14, 105, 20]), $a([1, 113, 22]), $a([1, 114, 22]), $a([17, 67, 30]), $a([3, 92, 32]), $a([0, -1, -1]), $a([30, 35, 30]), $a([1, 41, 30]), $a([0, -1, -1]), $a([36, 21, 32]), $a([1, 26, 30]), $a([1, 27, 30])]), $a(["59", 139, 17, 7, 16691, $a([11, 146, 28]), $a([1, 146, 26]), $a([0, -1, -1]), $a([20, 70, 30]), $a([1, 60, 26]), $a([0, -1, -1]), $a([29, 38, 32]), $a([1, 24, 32]), $a([0, -1, -1]), $a([40, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["60", 141, 18, 7, 17215, $a([3, 137, 26]), $a([1, 136, 26]), $a([10, 126, 24]), $a([22, 65, 28]), $a([1, 75, 30]), $a([0, -1, -1]), $a([30, 37, 32]), $a([1, 51, 30]), $a([0, -1, -1]), $a([42, 20, 30]), $a([1, 21, 30]), $a([0, -1, -1])]), $a(["61", 143, 18, 7, 17751, $a([12, 126, 24]), $a([2, 118, 22]), $a([1, 116, 22]), $a([19, 74, 32]), $a([1, 74, 30]), $a([1, 72, 28]), $a([30, 38, 32]), $a([2, 29, 30]), $a([0, -1, -1]), $a([39, 20, 32]), $a([2, 37, 26]), $a([1, 38, 26])]), $a(["62", 145, 18, 7, 18295, $a([12, 126, 24]), $a([3, 136, 26]), $a([0, -1, -1]), $a([21, 70, 30]), $a([2, 65, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 44, 32]), $a([0, -1, -1]), $a([42, 20, 30]), $a([2, 19, 28]), $a([2, 18, 28])]), $a(["63", 147, 18, 7, 18847, $a([12, 126, 24]), $a([3, 117, 22]), $a([1, 116, 22]), $a([25, 61, 26]), $a([2, 62, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 40, 32]), $a([1, 41, 32]), $a([45, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["64", 149, 19, 7, 19403, $a([15, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([25, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([18, 35, 30]), $a([17, 37, 32]), $a([1, 50, 32]), $a([42, 20, 30]), $a([6, 19, 28]), $a([1, 15, 28])]), $a(["65", 151, 19, 7, 19971, $a([19, 105, 20]), $a([1, 101, 20]), $a([0, -1, -1]), $a([33, 51, 22]), $a([1, 65, 22]), $a([0, -1, -1]), $a([40, 33, 28]), $a([1, 28, 28]), $a([0, -1, -1]), $a([49, 20, 30]), $a([1, 18, 28]), $a([0, -1, -1])]), $a(["66", 153, 17, 8, 20229, $a([18, 105, 20]), $a([2, 117, 22]), $a([0, -1, -1]), $a([26, 65, 28]), $a([1, 80, 30]), $a([0, -1, -1]), $a([35, 35, 30]), $a([3, 35, 28]), $a([1, 36, 28]), $a([52, 18, 28]), $a([2, 38, 30]), $a([0, -1, -1])]), $a(["67", 155, 17, 8, 20805, $a([26, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([26, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([45, 31, 26]), $a([1, 9, 26]), $a([0, -1, -1]), $a([52, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["68", 157, 17, 8, 21389, $a([16, 126, 24]), $a([1, 114, 22]), $a([1, 115, 22]), $a([23, 70, 30]), $a([3, 65, 28]), $a([1, 66, 28]), $a([40, 35, 30]), $a([1, 43, 30]), $a([0, -1, -1]), $a([46, 20, 30]), $a([7, 19, 28]), $a([1, 16, 28])]), $a(["69", 159, 18, 8, 21993, $a([19, 116, 22]), $a([1, 105, 22]), $a([0, -1, -1]), $a([20, 70, 30]), $a([7, 66, 28]), $a([1, 63, 28]), $a([40, 35, 30]), $a([1, 42, 32]), $a([1, 43, 32]), $a([54, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["70", 161, 18, 8, 22593, $a([17, 126, 24]), $a([2, 115, 22]), $a([0, -1, -1]), $a([24, 70, 30]), $a([4, 74, 32]), $a([0, -1, -1]), $a([48, 31, 26]), $a([2, 18, 26]), $a([0, -1, -1]), $a([54, 19, 28]), $a([6, 15, 26]), $a([1, 14, 26])]), $a(["71", 163, 18, 8, 23201, $a([29, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([29, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 34, 30]), $a([3, 36, 30]), $a([38, 33, 28]), $a([58, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["72", 165, 18, 8, 23817, $a([16, 147, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([31, 66, 28]), $a([1, 37, 26]), $a([0, -1, -1]), $a([48, 33, 28]), $a([1, 23, 26]), $a([0, -1, -1]), $a([53, 20, 30]), $a([6, 19, 28]), $a([1, 17, 28])]), $a(["73", 167, 19, 8, 24453, $a([20, 115, 22]), $a([2, 134, 24]), $a([0, -1, -1]), $a([29, 66, 28]), $a([2, 56, 26]), $a([2, 57, 26]), $a([45, 36, 30]), $a([2, 15, 28]), $a([0, -1, -1]), $a([59, 20, 30]), $a([2, 21, 32]), $a([0, -1, -1])]), $a(["74", 169, 19, 8, 25085, $a([17, 147, 28]), $a([1, 134, 26]), $a([0, -1, -1]), $a([26, 70, 30]), $a([5, 75, 32]), $a([0, -1, -1]), $a([47, 35, 30]), $a([1, 48, 32]), $a([0, -1, -1]), $a([64, 18, 28]), $a([2, 33, 30]), $a([1, 35, 30])]), $a(["75", 171, 17, 9, 25373, $a([22, 115, 22]), $a([1, 133, 24]), $a([0, -1, -1]), $a([33, 65, 28]), $a([1, 74, 28]), $a([0, -1, -1]), $a([43, 36, 30]), $a([5, 27, 28]), $a([1, 30, 28]), $a([57, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["76", 173, 17, 9, 26021, $a([18, 136, 26]), $a([2, 142, 26]), $a([0, -1, -1]), $a([33, 66, 28]), $a([2, 49, 26]), $a([0, -1, -1]), $a([48, 35, 30]), $a([2, 38, 28]), $a([0, -1, -1]), $a([64, 20, 30]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["77", 175, 17, 9, 26677, $a([19, 126, 24]), $a([2, 135, 26]), $a([1, 136, 26]), $a([32, 66, 28]), $a([2, 55, 26]), $a([2, 56, 26]), $a([49, 36, 30]), $a([2, 18, 32]), $a([0, -1, -1]), $a([65, 18, 28]), $a([5, 27, 30]), $a([1, 29, 30])]), $a(["78", 177, 18, 9, 27335, $a([20, 137, 26]), $a([1, 130, 26]), $a([0, -1, -1]), $a([30, 75, 32]), $a([2, 71, 32]), $a([0, -1, -1]), $a([46, 35, 30]), $a([6, 39, 32]), $a([0, -1, -1]), $a([3, 12, 30]), $a([70, 19, 28]), $a([0, -1, -1])]), $a(["79", 179, 18, 9, 28007, $a([20, 147, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([35, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([49, 35, 30]), $a([5, 35, 28]), $a([0, -1, -1]), $a([70, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["80", 181, 18, 9, 28687, $a([21, 136, 26]), $a([1, 155, 28]), $a([0, -1, -1]), $a([34, 70, 30]), $a([1, 64, 28]), $a([1, 65, 28]), $a([54, 35, 30]), $a([1, 45, 30]), $a([0, -1, -1]), $a([68, 20, 30]), $a([3, 18, 28]), $a([1, 19, 28])]), $a(["81", 183, 18, 9, 29375, $a([19, 126, 24]), $a([5, 115, 22]), $a([1, 114, 22]), $a([33, 70, 30]), $a([3, 65, 28]), $a([1, 64, 28]), $a([52, 35, 30]), $a([3, 41, 32]), $a([1, 40, 32]), $a([67, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["82", 185, 18, 9, 30071, $a([2, 150, 28]), $a([21, 136, 26]), $a([0, -1, -1]), $a([32, 70, 30]), $a([6, 65, 28]), $a([0, -1, -1]), $a([52, 38, 32]), $a([2, 27, 32]), $a([0, -1, -1]), $a([73, 20, 30]), $a([2, 22, 32]), $a([0, -1, -1])]), $a(["83", 187, 17, 10, 30387, $a([21, 126, 24]), $a([4, 136, 26]), $a([0, -1, -1]), $a([30, 74, 32]), $a([6, 73, 30]), $a([0, -1, -1]), $a([54, 35, 30]), $a([4, 40, 32]), $a([0, -1, -1]), $a([75, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["84", 189, 17, 10, 31091, $a([30, 105, 20]), $a([1, 114, 22]), $a([0, -1, -1]), $a([3, 45, 22]), $a([55, 47, 20]), $a([0, -1, -1]), $a([2, 26, 26]), $a([62, 33, 28]), $a([0, -1, -1]), $a([79, 18, 28]), $a([4, 33, 30]), $a([0, -1, -1])])]); //#25352
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hanxin.$ctx[id] = $_[id]); //#25352
        bwipp_hanxin.__25353__ = 1; //#25352
        $_ = Object.getPrototypeOf($_); //#25352
    } //#25352
    $_.eclval = $get($_.eclevel, 1) - 49; //#25355
    var _Ih = $_.metrics; //#25356
    for (var _Ii = 0, _Ij = _Ih.length; _Ii < _Ij; _Ii++) { //#25374
        $_.m = $get(_Ih, _Ii); //#25357
        $_.vers = $get($_.m, 0); //#25358
        $_.size = $get($_.m, 1); //#25359
        $_.alnk = $get($_.m, 2); //#25360
        $_.alnn = $get($_.m, 3); //#25361
        $_.alnr = $f($_.size - ($_.alnk * $_.alnn)); //#25362
        $_.nmod = $get($_.m, 4); //#25363
        $_.ncws = ~~($_.nmod / 8); //#25364
        $_.rbit = $_.nmod % 8; //#25365
        $_.ecbs = $geti($_.m, 5 + ($_.eclval * 3), 3); //#25366
        var _J3 = $_.ecbs; //#25367
        $k[$j++] = 'ecws'; //#25367
        $k[$j++] = 0; //#25367
        for (var _J4 = 0, _J5 = _J3.length; _J4 < _J5; _J4++) { //#25367
            var _J6 = $get(_J3, _J4); //#25367
            var _J9 = $k[--$j]; //#25367
            $k[$j++] = $f(_J9 + ($get(_J6, 0) * $get(_J6, 2))); //#25367
        } //#25367
        var _JA = $k[--$j]; //#25367
        $_[$k[--$j]] = _JA; //#25367
        $_.dcws = $f($_.ncws - $_.ecws); //#25368
        $_.dmod = $_.dcws * 8; //#25369
        $_.okay = true; //#25370
        if ($ne($_.version, "unset") && $ne($_.version, $_.vers)) { //#25371
            $_.okay = false; //#25371
        } //#25371
        if ($_.bits.length > $_.dmod) { //#25372
            $_.okay = false; //#25372
        } //#25372
        if ($_.okay) { //#25373
            break; //#25373
        } //#25373
    } //#25373
    if (!$_.okay) { //#25378
        $k[$j++] = 'bwipp.hanxinNoValidSymbol#25377'; //#25377
        $k[$j++] = "Maximum length exceeded or invalid content"; //#25377
        bwipp_raiseerror(); //#25377
    } //#25377
    $_.version = $_.vers; //#25380
    $_.msgbits = $_.bits; //#25381
    $_.e1nb = $get($get($_.ecbs, 0), 0); //#25382
    $_.e2nb = $get($get($_.ecbs, 1), 0); //#25382
    $_.e3nb = $get($get($_.ecbs, 2), 0); //#25382
    $_.e1dcws = $get($get($_.ecbs, 0), 1); //#25383
    $_.e2dcws = $get($get($_.ecbs, 1), 1); //#25383
    $_.e3dcws = $get($get($_.ecbs, 2), 1); //#25383
    $_.e1ecws = $get($get($_.ecbs, 0), 2); //#25384
    $_.e2ecws = $get($get($_.ecbs, 1), 2); //#25384
    $_.e3ecws = $get($get($_.ecbs, 2), 2); //#25384
    $_.pad = $s($_.dmod); //#25387
    for (var _Jt = 0, _Js = $_.pad.length - 1; _Jt <= _Js; _Jt += 1) { //#25388
        $put($_.pad, _Jt, 48); //#25388
    } //#25388
    $puti($_.pad, 0, $_.msgbits); //#25389
    $_.cws = $a($_.dcws); //#25392
    for (var _K1 = 0, _K0 = $_.cws.length - 1; _K1 <= _K0; _K1 += 1) { //#25402
        $_.c = _K1; //#25394
        $_.cwb = $geti($_.pad, $_.c * 8, 8); //#25395
        $_.cw = 0; //#25396
        for (var _K5 = 0; _K5 <= 7; _K5 += 1) { //#25400
            $_.i = _K5; //#25398
            $_.cw = $f($_.cw + ((~~(Math.pow(2, (8 - $_.i) - 1))) * $f($get($_.cwb, $_.i) - 48))); //#25399
        } //#25399
        $put($_.cws, $_.c, $_.cw); //#25401
    } //#25401
    $_.rscodes = function() {
        $_.rspm = $k[--$j]; //#25406
        $_.rsgf = $k[--$j]; //#25407
        $_.rsnc = $k[--$j]; //#25408
        $_.rscws = $k[--$j]; //#25409
        $k[$j++] = Infinity; //#25412
        $k[$j++] = 1; //#25412
        for (var _KJ = 0, _KK = $f($_.rsgf - 1); _KJ < _KK; _KJ++) { //#25412
            var _KL = $k[--$j]; //#25412
            var _KM = _KL * 2; //#25412
            $k[$j++] = _KL; //#25412
            $k[$j++] = _KM; //#25412
            if (_KM >= $_.rsgf) { //#25412
                var _KP = $k[--$j]; //#25412
                $k[$j++] = $xo(_KP, $_.rspm); //#25412
            } //#25412
        } //#25412
        $_.rsalog = $a(); //#25412
        $_.rslog = $a($_.rsgf); //#25413
        for (var _KV = 1, _KU = $f($_.rsgf - 1); _KV <= _KU; _KV += 1) { //#25414
            $put($_.rslog, $get($_.rsalog, _KV), _KV); //#25414
        } //#25414
        $_.rsprod = function() {
            var _KZ = $k[--$j]; //#25418
            var _Ka = $k[--$j]; //#25418
            $k[$j++] = _Ka; //#25422
            $k[$j++] = _KZ; //#25422
            if ((_KZ != 0) && (_Ka != 0)) { //#25421
                var _Kd = $get($_.rslog, $k[--$j]); //#25419
                var _Kj = $get($_.rsalog, $f(_Kd + $get($_.rslog, $k[--$j])) % $f($_.rsgf - 1)); //#25419
                $k[$j++] = _Kj; //#25419
            } else { //#25421
                $j -= 2; //#25421
                $k[$j++] = 0; //#25421
            } //#25421
        }; //#25421
        $k[$j++] = Infinity; //#25426
        $k[$j++] = 1; //#25426
        for (var _Kl = 0, _Km = $_.rsnc; _Kl < _Km; _Kl++) { //#25426
            $k[$j++] = 0; //#25426
        } //#25426
        $_.coeffs = $a(); //#25426
        for (var _Kq = 1, _Kp = $_.rsnc; _Kq <= _Kp; _Kq += 1) { //#25435
            $_.i = _Kq; //#25428
            $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#25429
            for (var _Kx = $_.i - 1; _Kx >= 1; _Kx -= 1) { //#25433
                $_.j = _Kx; //#25431
                $k[$j++] = $_.coeffs; //#25432
                $k[$j++] = $_.j; //#25432
                $k[$j++] = $get($_.coeffs, $_.j - 1); //#25432
                $k[$j++] = $get($_.coeffs, $_.j); //#25432
                $k[$j++] = $get($_.rsalog, $_.i); //#25432
                $_.rsprod(); //#25432
                var _L9 = $k[--$j]; //#25432
                var _LA = $k[--$j]; //#25432
                var _LB = $k[--$j]; //#25432
                $put($k[--$j], _LB, $xo(_LA, _L9)); //#25432
            } //#25432
            $k[$j++] = $_.coeffs; //#25434
            $k[$j++] = 0; //#25434
            $k[$j++] = $get($_.coeffs, 0); //#25434
            $k[$j++] = $get($_.rsalog, $_.i); //#25434
            $_.rsprod(); //#25434
            var _LJ = $k[--$j]; //#25434
            var _LK = $k[--$j]; //#25434
            $put($k[--$j], _LK, _LJ); //#25434
        } //#25434
        $_.nd = $_.rscws.length; //#25438
        $k[$j++] = Infinity; //#25439
        $aload($_.rscws); //#25439
        for (var _LP = 0, _LQ = $_.rsnc; _LP < _LQ; _LP++) { //#25439
            $k[$j++] = 0; //#25439
        } //#25439
        $k[$j++] = 0; //#25439
        $_.rscws = $a(); //#25439
        for (var _LU = 0, _LT = $_.nd - 1; _LU <= _LT; _LU += 1) { //#25446
            $_.k = $xo($get($_.rscws, _LU), $get($_.rscws, $_.nd)); //#25441
            for (var _Lc = 0, _Lb = $f($_.rsnc - 1); _Lc <= _Lb; _Lc += 1) { //#25445
                $_.j = _Lc; //#25443
                $k[$j++] = $_.rscws; //#25444
                $k[$j++] = $_.nd + $_.j; //#25444
                $k[$j++] = $get($_.rscws, ($_.nd + $_.j) + 1); //#25444
                $k[$j++] = $_.k; //#25444
                $k[$j++] = $get($_.coeffs, $f($f($_.rsnc - $_.j) - 1)); //#25444
                $_.rsprod(); //#25444
                var _Lp = $k[--$j]; //#25444
                var _Lq = $k[--$j]; //#25444
                var _Lr = $k[--$j]; //#25444
                $put($k[--$j], _Lr, $xo(_Lq, _Lp)); //#25444
            } //#25444
        } //#25444
        $k[$j++] = $geti($_.rscws, 0, $_.rscws.length - 1); //#25449
    }; //#25449
    $_.dcwsb = $a($f($f($_.e1nb + $_.e2nb) + $_.e3nb)); //#25454
    $_.ecwsb = $a($_.dcwsb.length); //#25455
    $_.in = 0; //#25456
    $_.out = 0; //#25456
    for (var _M3 = 0, _M4 = $_.e1nb; _M3 < _M4; _M3++) { //#25462
        $k[$j++] = $geti($_.cws, $_.in, $_.e1dcws); //#25458
        $k[$j++] = $_.e1ecws; //#25458
        $k[$j++] = 256; //#25458
        $k[$j++] = 355; //#25458
        $_.rscodes(); //#25458
        var _MA = $k[--$j]; //#25459
        $put($_.dcwsb, $_.out, $geti(_MA, 0, $_.e1dcws)); //#25459
        $put($_.ecwsb, $_.out, $geti(_MA, $_.e1dcws, $_.e1ecws)); //#25460
        $_.in = $f($_.in + $_.e1dcws); //#25461
        $_.out = $_.out + 1; //#25461
    } //#25461
    for (var _MO = 0, _MP = $_.e2nb; _MO < _MP; _MO++) { //#25468
        $k[$j++] = $geti($_.cws, $_.in, $_.e2dcws); //#25464
        $k[$j++] = $_.e2ecws; //#25464
        $k[$j++] = 256; //#25464
        $k[$j++] = 355; //#25464
        $_.rscodes(); //#25464
        var _MV = $k[--$j]; //#25465
        $put($_.dcwsb, $_.out, $geti(_MV, 0, $_.e2dcws)); //#25465
        $put($_.ecwsb, $_.out, $geti(_MV, $_.e2dcws, $_.e2ecws)); //#25466
        $_.in = $f($_.in + $_.e2dcws); //#25467
        $_.out = $_.out + 1; //#25467
    } //#25467
    for (var _Mj = 0, _Mk = $_.e3nb; _Mj < _Mk; _Mj++) { //#25474
        $k[$j++] = $geti($_.cws, $_.in, $_.e3dcws); //#25470
        $k[$j++] = $_.e3ecws; //#25470
        $k[$j++] = 256; //#25470
        $k[$j++] = 355; //#25470
        $_.rscodes(); //#25470
        var _Mq = $k[--$j]; //#25471
        $put($_.dcwsb, $_.out, $geti(_Mq, 0, $_.e3dcws)); //#25471
        $put($_.ecwsb, $_.out, $geti(_Mq, $_.e3dcws, $_.e3ecws)); //#25472
        $_.in = $f($_.in + $_.e3dcws); //#25473
        $_.out = $_.out + 1; //#25473
    } //#25473
    $_.cws = $a($_.ncws); //#25477
    $_.cw = 0; //#25478
    for (var _N7 = 0, _N6 = $_.dcwsb.length - 1; _N7 <= _N6; _N7 += 1) { //#25483
        $_.i = _N7; //#25480
        var _NA = $get($_.dcwsb, $_.i); //#25481
        $puti($_.cws, $_.cw, _NA); //#25481
        $_.cw = _NA.length + $_.cw; //#25481
        var _NG = $get($_.ecwsb, $_.i); //#25482
        $puti($_.cws, $_.cw, _NG); //#25482
        $_.cw = _NG.length + $_.cw; //#25482
    } //#25482
    $k[$j++] = Infinity; //#25486
    var _NK = $_.ncws; //#25487
    var _NL = 12; //#25487
    var _NM = _NK - 1; //#25487
    if ((_NK - 1) > 12) { //#25487
        var _ = _NL; //#25487
        _NL = _NM; //#25487
        _NM = _; //#25487
    } //#25487
    for (var _NO = 0, _NN = _NM; _NO <= _NN; _NO += 1) { //#25489
        for (var _NR = _NO, _NQ = $_.ncws - 1; _NR <= _NQ; _NR += 13) { //#25488
            $k[$j++] = _NR; //#25488
            if (_NR < $_.ncws) { //#25488
                var _NV = $get($_.cws, $k[--$j]); //#25488
                $k[$j++] = _NV; //#25488
            } else { //#25488
                $j--; //#25488
            } //#25488
        } //#25488
    } //#25488
    $_.cws = $a(); //#25488
    if ($_.rbit > 0) { //#25498
        $_.pad = $a($_.cws.length + 1); //#25494
        $puti($_.pad, 0, $_.cws); //#25495
        $put($_.pad, $_.pad.length - 1, 0); //#25496
        $_.cws = $_.pad; //#25497
    } //#25497
    var _Ng = $get($_.options, 'debugcws') !== undefined; //#25500
    if (_Ng) { //#25500
        $k[$j++] = 'bwipp.debugcws#25500'; //#25500
        $k[$j++] = $_.cws; //#25500
        bwipp_raiseerror(); //#25500
    } //#25500
    $k[$j++] = Infinity; //#25503
    for (var _Nk = 0, _Nl = $_.size * $_.size; _Nk < _Nl; _Nk++) { //#25503
        $k[$j++] = -1; //#25503
    } //#25503
    $_.pixs = $a(); //#25503
    $_.qmv = function() {
        var _No = $k[--$j]; //#25504
        var _Np = $k[--$j]; //#25504
        $k[$j++] = $f(_Np + (_No * $_.size)); //#25504
    }; //#25504
    if ($_.alnn != 0) { //#25563
        $_.trmv = function() {
            var _Ns = $k[--$j]; //#25508
            var _Nu = $k[--$j]; //#25508
            $k[$j++] = $f(($f(($f((_Ns * $_.size) + $_.size)) - 1)) - _Nu); //#25508
        }; //#25508
        $_.aplot = function() {
            $r(3, 1); //#25510
            var _Nv = $k[--$j]; //#25510
            var _Nw = $k[--$j]; //#25510
            var _Nx = $k[--$j]; //#25510
            $k[$j++] = _Nx; //#25510
            $k[$j++] = _Nw; //#25510
            $k[$j++] = _Nv; //#25510
            $k[$j++] = _Nx; //#25510
            $k[$j++] = _Nv; //#25510
            $k[$j++] = _Nw; //#25510
            $_.trmv(); //#25510
            var _Nz = $k[--$j]; //#25510
            $k[$j++] = $_.pixs; //#25510
            $k[$j++] = _Nz; //#25510
            $r(3, -1); //#25510
            var _O0 = $k[--$j]; //#25510
            var _O1 = $k[--$j]; //#25510
            $put($k[--$j], _O1, _O0); //#25510
            $_.trmv(); //#25511
            var _O4 = $k[--$j]; //#25511
            $k[$j++] = $_.pixs; //#25511
            $k[$j++] = _O4; //#25511
            $r(3, -1); //#25511
            var _O5 = $k[--$j]; //#25511
            var _O6 = $k[--$j]; //#25511
            $put($k[--$j], _O6, _O5); //#25511
        }; //#25511
        $_.i = 0; //#25513
        $_.stag = 0; //#25513
        for (;;) { //#25535
            if ($_.i >= $_.size) { //#25514
                break; //#25514
            } //#25514
            for (var _OC = 0, _OB = $f($_.size - 1); _OC <= _OB; _OC += 1) { //#25528
                $_.j = _OC; //#25516
                if ($f($_.j + $_.alnr) < $_.size) { //#25522
                    $k[$j++] = (((((~~($_.j / $_.alnk)) + $_.stag) % 2) == 0) && (!(($_.i == 0) && ($_.j < $_.alnk)))) || (($_.j % $_.alnk) == 0); //#25520
                } else { //#25522
                    $k[$j++] = ($f($_.alnn + $_.stag) % 2) == 0; //#25522
                } //#25522
                if ($k[--$j]) { //#25527
                    $k[$j++] = $_.j; //#25525
                    $k[$j++] = $_.i; //#25525
                    $k[$j++] = 1; //#25525
                    $_.aplot(); //#25525
                    var _OT = $_.j; //#25526
                    var _OU = $_.i; //#25526
                    $k[$j++] = _OT + 1; //#25526
                    $k[$j++] = _OU + 1; //#25526
                    if (((_OU + 1) < $_.size) && ((_OT + 1) < $_.size)) { //#25526
                        $k[$j++] = 0; //#25526
                        $_.aplot(); //#25526
                    } else { //#25526
                        $j -= 2; //#25526
                    } //#25526
                } //#25526
            } //#25526
            if ($f($_.i + $_.alnr) == $_.size) { //#25532
                $_.i = $f($f($_.i + $_.alnr) - 1); //#25530
            } else { //#25532
                $_.i = $f($_.i + $_.alnk); //#25532
            } //#25532
            $_.stag = 1 - $_.stag; //#25534
        } //#25534
        for (var _Oj = $_.alnk, _Ok = $_.alnk, _Oi = $f($_.size - 2); _Ok < 0 ? _Oj >= _Oi : _Oj <= _Oi; _Oj += _Ok) { //#25562
            $_.i = _Oj; //#25537
            if (((~~($_.i / $_.alnk)) % 2) != 0) { //#25549
                $k[$j++] = $_.pixs; //#25539
                $k[$j++] = 0; //#25539
                $k[$j++] = $_.i - 1; //#25539
                $_.trmv(); //#25539
                var _Op = $k[--$j]; //#25539
                $put($k[--$j], _Op, 0); //#25539
                $k[$j++] = $_.pixs; //#25540
                $k[$j++] = 0; //#25540
                $k[$j++] = $_.i + 1; //#25540
                $_.trmv(); //#25540
                var _Ot = $k[--$j]; //#25540
                $put($k[--$j], _Ot, 0); //#25540
                $k[$j++] = $_.pixs; //#25541
                $k[$j++] = 1; //#25541
                $k[$j++] = $_.i - 1; //#25541
                $_.trmv(); //#25541
                var _Ox = $k[--$j]; //#25541
                $put($k[--$j], _Ox, 0); //#25541
                $k[$j++] = $_.pixs; //#25542
                $k[$j++] = 1; //#25542
                $k[$j++] = $_.i; //#25542
                $_.trmv(); //#25542
                var _P1 = $k[--$j]; //#25542
                $put($k[--$j], _P1, 0); //#25542
                $k[$j++] = $_.pixs; //#25543
                $k[$j++] = 1; //#25543
                $k[$j++] = $_.i + 1; //#25543
                $_.trmv(); //#25543
                var _P5 = $k[--$j]; //#25543
                $put($k[--$j], _P5, 0); //#25543
                $k[$j++] = $_.pixs; //#25544
                $k[$j++] = $_.i - 1; //#25544
                $k[$j++] = 0; //#25544
                $_.trmv(); //#25544
                var _P9 = $k[--$j]; //#25544
                $put($k[--$j], _P9, 0); //#25544
                $k[$j++] = $_.pixs; //#25545
                $k[$j++] = $_.i + 1; //#25545
                $k[$j++] = 0; //#25545
                $_.trmv(); //#25545
                var _PD = $k[--$j]; //#25545
                $put($k[--$j], _PD, 0); //#25545
                $k[$j++] = $_.pixs; //#25546
                $k[$j++] = $_.i - 1; //#25546
                $k[$j++] = 1; //#25546
                $_.trmv(); //#25546
                var _PH = $k[--$j]; //#25546
                $put($k[--$j], _PH, 0); //#25546
                $k[$j++] = $_.pixs; //#25547
                $k[$j++] = $_.i; //#25547
                $k[$j++] = 1; //#25547
                $_.trmv(); //#25547
                var _PL = $k[--$j]; //#25547
                $put($k[--$j], _PL, 0); //#25547
                $k[$j++] = $_.pixs; //#25548
                $k[$j++] = $_.i + 1; //#25548
                $k[$j++] = 1; //#25548
                $_.trmv(); //#25548
                var _PP = $k[--$j]; //#25548
                $put($k[--$j], _PP, 0); //#25548
            } //#25548
            $k[$j++] = $_.pixs; //#25550
            $k[$j++] = $f($_.size - 1); //#25550
            $k[$j++] = $_.i - 1; //#25550
            $_.trmv(); //#25550
            var _PU = $k[--$j]; //#25550
            if ($get($k[--$j], _PU) != 1) { //#25561
                $k[$j++] = $_.pixs; //#25551
                $k[$j++] = $f($_.size - 1); //#25551
                $k[$j++] = $_.i - 1; //#25551
                $_.trmv(); //#25551
                var _Pa = $k[--$j]; //#25551
                $put($k[--$j], _Pa, 0); //#25551
                $k[$j++] = $_.pixs; //#25552
                $k[$j++] = $f($_.size - 2); //#25552
                $k[$j++] = $_.i - 1; //#25552
                $_.trmv(); //#25552
                var _Pf = $k[--$j]; //#25552
                $put($k[--$j], _Pf, 0); //#25552
                $k[$j++] = $_.pixs; //#25553
                $k[$j++] = $f($_.size - 2); //#25553
                $k[$j++] = $_.i; //#25553
                $_.trmv(); //#25553
                var _Pk = $k[--$j]; //#25553
                $put($k[--$j], _Pk, 0); //#25553
                $k[$j++] = $_.pixs; //#25554
                $k[$j++] = $f($_.size - 2); //#25554
                $k[$j++] = $_.i + 1; //#25554
                $_.trmv(); //#25554
                var _Pp = $k[--$j]; //#25554
                $put($k[--$j], _Pp, 0); //#25554
                $k[$j++] = $_.pixs; //#25555
                $k[$j++] = $f($_.size - 1); //#25555
                $k[$j++] = $_.i + 1; //#25555
                $_.trmv(); //#25555
                var _Pu = $k[--$j]; //#25555
                $put($k[--$j], _Pu, 0); //#25555
                $k[$j++] = $_.pixs; //#25556
                $k[$j++] = $_.i - 1; //#25556
                $k[$j++] = $f($_.size - 1); //#25556
                $_.trmv(); //#25556
                var _Pz = $k[--$j]; //#25556
                $put($k[--$j], _Pz, 0); //#25556
                $k[$j++] = $_.pixs; //#25557
                $k[$j++] = $_.i - 1; //#25557
                $k[$j++] = $f($_.size - 2); //#25557
                $_.trmv(); //#25557
                var _Q4 = $k[--$j]; //#25557
                $put($k[--$j], _Q4, 0); //#25557
                $k[$j++] = $_.pixs; //#25558
                $k[$j++] = $_.i; //#25558
                $k[$j++] = $f($_.size - 2); //#25558
                $_.trmv(); //#25558
                var _Q9 = $k[--$j]; //#25558
                $put($k[--$j], _Q9, 0); //#25558
                $k[$j++] = $_.pixs; //#25559
                $k[$j++] = $_.i + 1; //#25559
                $k[$j++] = $f($_.size - 2); //#25559
                $_.trmv(); //#25559
                var _QE = $k[--$j]; //#25559
                $put($k[--$j], _QE, 0); //#25559
                $k[$j++] = $_.pixs; //#25560
                $k[$j++] = $_.i + 1; //#25560
                $k[$j++] = $f($_.size - 1); //#25560
                $_.trmv(); //#25560
                var _QJ = $k[--$j]; //#25560
                $put($k[--$j], _QJ, 0); //#25560
            } //#25560
        } //#25560
    } //#25560
    if (!bwipp_hanxin.__25587__) { //#25587
        $_ = Object.create($_); //#25587
        $_.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 0, 0]), $a([1, 0, 1, 1, 1, 1, 1, 0]), $a([1, 0, 1, 0, 0, 0, 0, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#25576
        $_.fpat2 = $a([$a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([0, 0, 0, 0, 1, 0, 1, 0]), $a([1, 1, 1, 1, 1, 0, 1, 0]), $a([0, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#25586
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hanxin.$ctx[id] = $_[id]); //#25586
        bwipp_hanxin.__25587__ = 1; //#25586
        $_ = Object.getPrototypeOf($_); //#25586
    } //#25586
    for (var _Qg = 0, _Qf = $_.fpat.length - 1; _Qg <= _Qf; _Qg += 1) { //#25599
        $_.y = _Qg; //#25589
        for (var _Qk = 0, _Qj = $get($_.fpat, 0).length - 1; _Qk <= _Qj; _Qk += 1) { //#25598
            $_.x = _Qk; //#25591
            $_.fpb = $get($get($_.fpat, $_.y), $_.x); //#25592
            $_.fpb2 = $get($get($_.fpat2, $_.y), $_.x); //#25593
            $k[$j++] = $_.pixs; //#25594
            $k[$j++] = $_.x; //#25594
            $k[$j++] = $_.y; //#25594
            $_.qmv(); //#25594
            var _Qz = $k[--$j]; //#25594
            $put($k[--$j], _Qz, $_.fpb); //#25594
            $k[$j++] = $_.pixs; //#25595
            $k[$j++] = $f($f($_.size - $_.x) - 1); //#25595
            $k[$j++] = $_.y; //#25595
            $_.qmv(); //#25595
            var _R6 = $k[--$j]; //#25595
            $put($k[--$j], _R6, $_.fpb); //#25595
            $k[$j++] = $_.pixs; //#25596
            $k[$j++] = $f($f($_.size - $_.x) - 1); //#25596
            $k[$j++] = $f($f($_.size - $_.y) - 1); //#25596
            $_.qmv(); //#25596
            var _RE = $k[--$j]; //#25596
            $put($k[--$j], _RE, $_.fpb); //#25596
            $k[$j++] = $_.pixs; //#25597
            $k[$j++] = $_.x; //#25597
            $k[$j++] = $f($f($_.size - $_.y) - 1); //#25597
            $_.qmv(); //#25597
            var _RL = $k[--$j]; //#25597
            $put($k[--$j], _RL, $_.fpb2); //#25597
        } //#25597
    } //#25597
    $_.functionmap = $a([$a([$a([0, 8]), $a([$f($_.size - 1), $f($_.size - 9)])]), $a([$a([1, 8]), $a([$f($_.size - 2), $f($_.size - 9)])]), $a([$a([2, 8]), $a([$f($_.size - 3), $f($_.size - 9)])]), $a([$a([3, 8]), $a([$f($_.size - 4), $f($_.size - 9)])]), $a([$a([4, 8]), $a([$f($_.size - 5), $f($_.size - 9)])]), $a([$a([5, 8]), $a([$f($_.size - 6), $f($_.size - 9)])]), $a([$a([6, 8]), $a([$f($_.size - 7), $f($_.size - 9)])]), $a([$a([7, 8]), $a([$f($_.size - 8), $f($_.size - 9)])]), $a([$a([8, 8]), $a([$f($_.size - 9), $f($_.size - 9)])]), $a([$a([8, 7]), $a([$f($_.size - 9), $f($_.size - 8)])]), $a([$a([8, 6]), $a([$f($_.size - 9), $f($_.size - 7)])]), $a([$a([8, 5]), $a([$f($_.size - 9), $f($_.size - 6)])]), $a([$a([8, 4]), $a([$f($_.size - 9), $f($_.size - 5)])]), $a([$a([8, 3]), $a([$f($_.size - 9), $f($_.size - 4)])]), $a([$a([8, 2]), $a([$f($_.size - 9), $f($_.size - 3)])]), $a([$a([8, 1]), $a([$f($_.size - 9), $f($_.size - 2)])]), $a([$a([8, 0]), $a([$f($_.size - 9), $f($_.size - 1)])]), $a([$a([$f($_.size - 9), 0]), $a([8, $f($_.size - 1)])]), $a([$a([$f($_.size - 9), 1]), $a([8, $f($_.size - 2)])]), $a([$a([$f($_.size - 9), 2]), $a([8, $f($_.size - 3)])]), $a([$a([$f($_.size - 9), 3]), $a([8, $f($_.size - 4)])]), $a([$a([$f($_.size - 9), 4]), $a([8, $f($_.size - 5)])]), $a([$a([$f($_.size - 9), 5]), $a([8, $f($_.size - 6)])]), $a([$a([$f($_.size - 9), 6]), $a([8, $f($_.size - 7)])]), $a([$a([$f($_.size - 9), 7]), $a([8, $f($_.size - 8)])]), $a([$a([$f($_.size - 9), 8]), $a([8, $f($_.size - 9)])]), $a([$a([$f($_.size - 8), 8]), $a([7, $f($_.size - 9)])]), $a([$a([$f($_.size - 7), 8]), $a([6, $f($_.size - 9)])]), $a([$a([$f($_.size - 6), 8]), $a([5, $f($_.size - 9)])]), $a([$a([$f($_.size - 5), 8]), $a([4, $f($_.size - 9)])]), $a([$a([$f($_.size - 4), 8]), $a([3, $f($_.size - 9)])]), $a([$a([$f($_.size - 3), 8]), $a([2, $f($_.size - 9)])]), $a([$a([$f($_.size - 2), 8]), $a([1, $f($_.size - 9)])]), $a([$a([$f($_.size - 1), 8]), $a([0, $f($_.size - 9)])])]); //#25621
    var _U8 = $_.functionmap; //#25622
    for (var _U9 = 0, _UA = _U8.length; _U9 < _UA; _U9++) { //#25624
        $forall($get(_U8, _U9), function() { //#25623
            $aload($k[--$j]); //#25623
            $_.qmv(); //#25623
            $put($_.pixs, $k[--$j], 0); //#25623
        }); //#25623
    } //#25623
    var _UL = $a([function() {
        $j -= 2; //#25627
        $k[$j++] = 1; //#25627
    }, function() {
        var _UF = $k[--$j]; //#25628
        var _UG = $k[--$j]; //#25628
        $k[$j++] = $f(_UG + _UF) % 2; //#25628
    }, function() {
        var _UH = $k[--$j]; //#25629
        var _UI = $k[--$j]; //#25629
        $k[$j++] = ($f(($f(_UH + _UI) % 3) + (_UI % 3))) % 2; //#25629
    }, function() {
        var _UJ = $k[--$j]; //#25630
        var _UK = $k[--$j]; //#25630
        $k[$j++] = ($f((_UK % _UJ) + ($f((_UJ % _UK) + ($f((_UJ % 3) + (_UK % 3))))))) % 2; //#25631
    }]); //#25631
    $_.maskfuncs = _UL; //#25632
    if ($_.mask != -1) { //#25636
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask - 1)]); //#25634
        $_.bestmaskval = $_.mask - 1; //#25635
    } //#25635
    $_.masks = $a($_.maskfuncs.length); //#25637
    for (var _UW = 0, _UV = $_.masks.length - 1; _UW <= _UV; _UW += 1) { //#25651
        $_.m = _UW; //#25639
        $_.mask = $a($_.size * $_.size); //#25640
        for (var _Uc = 0, _Ub = $f($_.size - 1); _Uc <= _Ub; _Uc += 1) { //#25649
            $_.j = _Uc; //#25642
            for (var _Uf = 0, _Ue = $f($_.size - 1); _Uf <= _Ue; _Uf += 1) { //#25648
                $_.i = _Uf; //#25644
                $k[$j++] = $_.i + 1; //#25645
                $k[$j++] = $_.j + 1; //#25645
                if ($get($_.maskfuncs, $_.m)() === true) {
                    break;
                } //#25645
                var _Ul = $k[--$j]; //#25645
                $k[$j++] = _Ul == 0; //#25646
                $k[$j++] = $_.pixs; //#25646
                $k[$j++] = $_.i; //#25646
                $k[$j++] = $_.j; //#25646
                $_.qmv(); //#25646
                var _Up = $k[--$j]; //#25646
                var _Ur = $get($k[--$j], _Up); //#25646
                var _Us = $k[--$j]; //#25646
                var _Ut = (_Us && (_Ur == -1)) ? 1 : 0; //#25646
                $k[$j++] = _Ut; //#25647
                $k[$j++] = $_.mask; //#25647
                $k[$j++] = $_.i; //#25647
                $k[$j++] = $_.j; //#25647
                $_.qmv(); //#25647
                $r(3, -1); //#25647
                var _Ux = $k[--$j]; //#25647
                var _Uy = $k[--$j]; //#25647
                $put($k[--$j], _Uy, _Ux); //#25647
            } //#25647
        } //#25647
        $put($_.masks, $_.m, $_.mask); //#25650
    } //#25650
    $_.posx = 0; //#25654
    $_.posy = 0; //#25655
    $_.num = 0; //#25656
    for (;;) { //#25666
        if ($_.posy == $_.size) { //#25658
            break; //#25658
        } //#25658
        $k[$j++] = $_.pixs; //#25659
        $k[$j++] = $_.posx; //#25659
        $k[$j++] = $_.posy; //#25659
        $_.qmv(); //#25659
        var _V8 = $k[--$j]; //#25659
        if ($get($k[--$j], _V8) == -1) { //#25663
            var _VD = $get($_.cws, ~~($_.num / 8)); //#25660
            var _VF = -(7 - ($_.num % 8)); //#25660
            $k[$j++] = ((_VF < 0 ? _VD >>> -_VF : _VD << _VF)) & 1; //#25661
            $k[$j++] = $_.pixs; //#25661
            $k[$j++] = $_.posx; //#25661
            $k[$j++] = $_.posy; //#25661
            $_.qmv(); //#25661
            $r(3, -1); //#25661
            var _VJ = $k[--$j]; //#25661
            var _VK = $k[--$j]; //#25661
            $put($k[--$j], _VK, _VJ); //#25661
            $_.num = $_.num + 1; //#25662
        } //#25662
        $_.posx = $_.posx + 1; //#25664
        if ($_.posx == $_.size) { //#25665
            $_.posx = 0; //#25665
            $_.posy = $_.posy + 1; //#25665
        } //#25665
    } //#25665
    $_.evalfulln1n3 = function() {
        $_.scrle = $k[--$j]; //#25670
        $k[$j++] = 'scr1'; //#25672
        $k[$j++] = 0; //#25672
        $forall($_.scrle, function() { //#25672
            var _VT = $k[--$j]; //#25672
            $k[$j++] = _VT; //#25672
            if (_VT >= 3) { //#25672
                var _VU = $k[--$j]; //#25672
                var _VW = $f($k[--$j] + (_VU * 4)); //#25672
                $k[$j++] = _VW; //#25672
                $k[$j++] = _VW; //#25672
            } //#25672
            $j--; //#25672
        }); //#25672
        var _VX = $k[--$j]; //#25672
        $_[$k[--$j]] = _VX; //#25672
        $_.scr3 = 0; //#25673
        for (var _Vb = 5, _Va = $_.scrle.length - 1; _Vb <= _Va; _Vb += 2) { //#25689
            $_.j = _Vb; //#25676
            if (($get($_.scrle, $_.j) % 3) == 0) { //#25688
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#25678
                var _Vk = $geti($_.scrle, $_.j - 4, 4); //#25679
                for (var _Vl = 0, _Vm = _Vk.length; _Vl < _Vm; _Vl++) { //#25679
                    $k[$j++] = $get(_Vk, _Vl) == $_.fact; //#25679
                } //#25679
                var _Vp = $k[--$j]; //#25679
                var _Vq = $k[--$j]; //#25679
                var _Vr = $k[--$j]; //#25679
                if ($an($k[--$j], $an(_Vr, $an(_Vq, _Vp)))) { //#25687
                    if (($_.j == 5) || (($_.j + 2) >= $_.scrle.length)) { //#25684
                        $_.scr3 = $_.scr3 + 50; //#25681
                    } else { //#25684
                        if (($get($_.scrle, $_.j - 5) >= 3) || ($get($_.scrle, $_.j + 1) >= 3)) { //#25685
                            $_.scr3 = $_.scr3 + 50; //#25684
                        } //#25684
                    } //#25684
                } //#25684
            } //#25684
        } //#25684
        for (var _W6 = 1, _W5 = $_.scrle.length - 5; _W6 <= _W5; _W6 += 2) { //#25705
            $_.j = _W6; //#25692
            if (($get($_.scrle, $_.j) % 3) == 0) { //#25704
                $_.fact = ~~($get($_.scrle, $_.j) / 3); //#25694
                var _WF = $geti($_.scrle, $_.j + 1, 4); //#25695
                for (var _WG = 0, _WH = _WF.length; _WG < _WH; _WG++) { //#25695
                    $k[$j++] = $get(_WF, _WG) == $_.fact; //#25695
                } //#25695
                var _WK = $k[--$j]; //#25695
                var _WL = $k[--$j]; //#25695
                var _WM = $k[--$j]; //#25695
                if ($an($k[--$j], $an(_WM, $an(_WL, _WK)))) { //#25703
                    if (($_.j == 1) || (($_.j + 6) >= $_.scrle.length)) { //#25700
                        $_.scr3 = $_.scr3 + 50; //#25697
                    } else { //#25700
                        if (($get($_.scrle, $_.j - 1) >= 3) || ($get($_.scrle, $_.j + 5) >= 3)) { //#25701
                            $_.scr3 = $_.scr3 + 50; //#25700
                        } //#25700
                    } //#25700
                } //#25700
            } //#25700
        } //#25700
        $k[$j++] = $_.scr1; //#25706
        $k[$j++] = $_.scr3; //#25706
    }; //#25706
    $_.evalfull = function() {
        $_.sym = $k[--$j]; //#25711
        $_.n1 = 0; //#25713
        $_.n3 = 0; //#25713
        $_.rle = $a($f($_.size + 1)); //#25714
        $_.lastpairs = $a($_.size); //#25715
        $_.thispairs = $a($_.size); //#25716
        $_.sizeadd1 = $f($_.size + 1); //#25717
        for (var _Wl = 0, _Wk = $f($_.size - 1); _Wl <= _Wk; _Wl += 1) { //#25742
            $_.i = _Wl; //#25719
            $k[$j++] = Infinity; //#25722
            var _Wn = $_.size; //#25723
            $k[$j++] = 0; //#25725
            $k[$j++] = 0; //#25725
            for (var _Wp = $_.i, _Wq = _Wn, _Wo = $f((_Wn * _Wn) - 1); _Wq < 0 ? _Wp >= _Wo : _Wp <= _Wo; _Wp += _Wq) { //#25725
                var _Ws = $get($_.sym, _Wp); //#25724
                var _Wt = $k[--$j]; //#25724
                $k[$j++] = _Ws; //#25724
                if ($eq(_Wt, _Ws)) { //#25724
                    var _Wu = $k[--$j]; //#25724
                    var _Wv = $k[--$j]; //#25724
                    $k[$j++] = $f(_Wv + 1); //#25724
                    $k[$j++] = _Wu; //#25724
                } else { //#25724
                    var _Ww = $k[--$j]; //#25724
                    $k[$j++] = 1; //#25724
                    $k[$j++] = _Ww; //#25724
                } //#25724
            } //#25724
            $j--; //#25726
            var _Wy = $counttomark() + 2; //#25727
            $astore($geti($_.rle, 0, _Wy - 2)); //#25727
            $_.evalfulln1n3(); //#25728
            $_.n3 = $f($k[--$j] + $_.n3); //#25728
            $_.n1 = $f($k[--$j] + $_.n1); //#25728
            $j--; //#25729
            $_.symrow = $geti($_.sym, $_.i * $_.size, $_.size); //#25732
            $k[$j++] = Infinity; //#25733
            var _X9 = $_.symrow; //#25734
            $k[$j++] = 0; //#25736
            $k[$j++] = 0; //#25736
            for (var _XA = 0, _XB = _X9.length; _XA < _XB; _XA++) { //#25736
                var _XC = $get(_X9, _XA); //#25736
                var _XD = $k[--$j]; //#25735
                $k[$j++] = _XC; //#25735
                if ($eq(_XD, _XC)) { //#25735
                    var _XE = $k[--$j]; //#25735
                    var _XF = $k[--$j]; //#25735
                    $k[$j++] = $f(_XF + 1); //#25735
                    $k[$j++] = _XE; //#25735
                } else { //#25735
                    var _XG = $k[--$j]; //#25735
                    $k[$j++] = 1; //#25735
                    $k[$j++] = _XG; //#25735
                } //#25735
            } //#25735
            $j--; //#25737
            var _XI = $counttomark() + 2; //#25738
            $astore($geti($_.rle, 0, _XI - 2)); //#25738
            $_.evalfulln1n3(); //#25739
            $_.n3 = $f($k[--$j] + $_.n3); //#25739
            $_.n1 = $f($k[--$j] + $_.n1); //#25739
            $j--; //#25740
        } //#25740
        $k[$j++] = $f($_.n1 + $_.n3); //#25744
    }; //#25744
    $_.bestscore = 999999999; //#25748
    for (var _XS = 0, _XR = $_.masks.length - 1; _XS <= _XR; _XS += 1) { //#25766
        $_.m = _XS; //#25750
        $_.masksym = $a($_.size * $_.size); //#25751
        for (var _XZ = 0, _XY = $f(($_.size * $_.size) - 1); _XZ <= _XY; _XZ += 1) { //#25755
            $_.i = _XZ; //#25753
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#25754
        } //#25754
        if ($_.masks.length != 1) { //#25764
            $k[$j++] = $_.masksym; //#25757
            $_.evalfull(); //#25757
            $_.score = $k[--$j]; //#25757
            if ($_.score < $_.bestscore) { //#25762
                $_.bestsym = $_.masksym; //#25759
                $_.bestmaskval = $_.m; //#25760
                $_.bestscore = $_.score; //#25761
            } //#25761
        } else { //#25764
            $_.bestsym = $_.masksym; //#25764
        } //#25764
    } //#25764
    $_.pixs = $_.bestsym; //#25767
    $_.funval = (((((~~($f($_.size - 21) / 2)) + 20) * 4) + $_.eclval) * 4) + $_.bestmaskval; //#25770
    $k[$j++] = $a([($_.funval & 3840) >>> 8, ($_.funval & 240) >>> 4, $_.funval & 15]); //#25774
    $k[$j++] = 4; //#25774
    $k[$j++] = 16; //#25774
    $k[$j++] = 19; //#25774
    $_.rscodes(); //#25774
    $_.funvals = $k[--$j]; //#25774
    $k[$j++] = Infinity; //#25775
    $forall($_.funvals, function() { //#25778
        $k[$j++] = 4; //#25777
        $_.tobin(); //#25777
        $forall($k[--$j], function() { //#25777
            var _Y4 = $k[--$j]; //#25777
            $k[$j++] = $f(_Y4 - 48); //#25777
        }); //#25777
    }); //#25777
    $k[$j++] = 0; //#25779
    $k[$j++] = 1; //#25779
    $k[$j++] = 0; //#25779
    $k[$j++] = 1; //#25779
    $k[$j++] = 0; //#25779
    $k[$j++] = 1; //#25779
    $_.funbits = $a(); //#25779
    for (var _Y8 = 0, _Y7 = $_.functionmap.length - 1; _Y8 <= _Y7; _Y8 += 1) { //#25786
        $_.i = _Y8; //#25782
        $forall($get($_.functionmap, $_.i), function() { //#25785
            var _YD = $k[--$j]; //#25784
            $k[$j++] = $_.pixs; //#25784
            $aload(_YD); //#25784
            $_.qmv(); //#25784
            var _YH = $k[--$j]; //#25784
            $put($k[--$j], _YH, $get($_.funbits, $_.i)); //#25784
        }); //#25784
    } //#25784
    var _YP = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.size],
        ["pixy", $_.size],
        ["height", ($_.size * 2) / 72],
        ["width", ($_.size * 2) / 72],
        ["borderleft", 3],
        ["borderright", 3],
        ["bordertop", 3],
        ["borderbottom", 3],
        ["opt", $_.options]
    ]); //#25800
    $k[$j++] = _YP; //#25803
    if (!$_.dontdraw) { //#25803
        bwipp_renmatrix(); //#25803
    } //#25803
    $_ = Object.getPrototypeOf($_); //#25805
    $_ = Object.getPrototypeOf($_); //#25807
} //bwipp_hanxin
function bwipp_dotcode() {
    $_ = Object.create($_); //#25838
    $_.dontdraw = false; //#25841
    $_.rows = -1; //#25842
    $_.columns = -1; //#25843
    $_.ratio = -1; //#25844
    $_.parse = false; //#25845
    $_.parsefnc = false; //#25846
    $_.raw = false; //#25847
    $_.fast = false; //#25848
    $_.mask = -1; //#25849
    $k[$j++] = $_; //#25851
    bwipp_processoptions(); //#25851
    $_.options = $k[--$j]; //#25851
    $_.barcode = $k[--$j]; //#25852
    if ($_.rows != -1) { //#25858
        if ($_.rows < 5) { //#25857
            $k[$j++] = 'bwipp.dotcodeBadRows#25856'; //#25856
            $k[$j++] = "There must be at least 5 rows"; //#25856
            bwipp_raiseerror(); //#25856
        } //#25856
    } //#25856
    if ($_.columns != -1) { //#25864
        if ($_.columns < 5) { //#25863
            $k[$j++] = 'bwipp.dotcodeBadColumns#25862'; //#25862
            $k[$j++] = "There must be at least 5 columns"; //#25862
            bwipp_raiseerror(); //#25862
        } //#25862
    } //#25862
    if ((($_.rows != -1) && ($_.columns != -1)) && ((($_.rows + $_.columns) % 2) != 1)) { //#25868
        $k[$j++] = 'bwipp.dotcodeRowsColumnsBadParity#25867'; //#25867
        $k[$j++] = "Sum of rows and columns must be odd"; //#25867
        bwipp_raiseerror(); //#25867
    } //#25867
    if ((($_.ratio == -1) && ($_.rows == -1)) && ($_.columns == -1)) { //#25873
        $_.ratio = 3 / 2; //#25872
    } //#25872
    if ($_.ratio != -1) { //#25878
        if ($_.ratio <= 0) { //#25877
            $k[$j++] = 'bwipp.dotcodeRatio#25876'; //#25876
            $k[$j++] = "The ratio must be greater than 0"; //#25876
            bwipp_raiseerror(); //#25876
        } //#25876
    } //#25876
    if ($_.mask != -1) { //#25884
        if (($_.mask < 0) || ($_.mask > 3)) { //#25883
            $k[$j++] = 'bwipp.dotcodeBadMask#25882'; //#25882
            $k[$j++] = "Valid mask values are 0 to 3"; //#25882
            bwipp_raiseerror(); //#25882
        } //#25882
    } //#25882
    bwipp_loadctx(bwipp_dotcode); //#25886
    if (!bwipp_dotcode.__25899__) { //#25899
        $_ = Object.create($_); //#25899
        $_.laa = -1; //#25890
        $_.lab = -2; //#25890
        $_.lac = -3; //#25890
        $_.bin = -4; //#25890
        $_.sfa = -5; //#25891
        $_.sfb = -6; //#25891
        $_.sb2 = -7; //#25891
        $_.sb3 = -8; //#25891
        $_.sb4 = -9; //#25892
        $_.sb5 = -10; //#25892
        $_.sb6 = -11; //#25892
        $_.sfc = -12; //#25892
        $_.sc2 = -13; //#25893
        $_.sc3 = -14; //#25893
        $_.sc4 = -15; //#25893
        $_.sc5 = -16; //#25893
        $_.sc6 = -17; //#25894
        $_.sc7 = -18; //#25894
        $_.bsa = -19; //#25894
        $_.bsb = -20; //#25894
        $_.tma = -21; //#25895
        $_.tmb = -22; //#25895
        $_.tmc = -23; //#25895
        $_.tms = -24; //#25895
        $_.fn1 = -25; //#25896
        $_.fn2 = -26; //#25896
        $_.fn3 = -27; //#25896
        $_.crl = -28; //#25896
        $_.aim = -29; //#25897
        $_.m05 = -30; //#25897
        $_.m06 = -31; //#25897
        $_.m12 = -32; //#25897
        $_.mac = -33; //#25898
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#25898
        bwipp_dotcode.__25899__ = 1; //#25898
        $_ = Object.getPrototypeOf($_); //#25898
    } //#25898
    var _N = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["eci", true],
        ["FNC1", $_.fn1],
        ["FNC3", $_.fn3]
    ]); //#25908
    $_.fncvals = _N; //#25909
    $k[$j++] = 'msg'; //#25910
    $k[$j++] = $_.barcode; //#25910
    $k[$j++] = $_.fncvals; //#25910
    bwipp_parseinput(); //#25910
    var _Q = $k[--$j]; //#25910
    $_[$k[--$j]] = _Q; //#25910
    $_.msglen = $_.msg.length; //#25911
    var _T = $_.msg; //#25914
    $k[$j++] = 'numecis'; //#25914
    $k[$j++] = 0; //#25914
    for (var _U = 0, _V = _T.length; _U < _V; _U++) { //#25914
        if ($get(_T, _U) <= -1000000) { //#25914
            var _X = $k[--$j]; //#25914
            $k[$j++] = $f(_X + 1); //#25914
        } //#25914
    } //#25914
    var _Y = $k[--$j]; //#25914
    $_[$k[--$j]] = _Y; //#25914
    $_.msgtmp = $a($f($_.msg.length + ($_.numecis * 6))); //#25915
    $_.j = 0; //#25916
    for (var _f = 0, _e = $_.msg.length - 1; _f <= _e; _f += 1) { //#25927
        var _h = $get($_.msg, _f); //#25918
        $k[$j++] = _h; //#25926
        if (_h <= -1000000) { //#25925
            var _l = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#25919
            for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#25919
                $k[$j++] = $get(_l, _m); //#25919
            } //#25919
            $astore($a(6)); //#25919
            $puti($_.msgtmp, $_.j + 1, $k[--$j]); //#25920
            $put($_.msgtmp, $_.j, $_.fn2); //#25921
            $_.j = $_.j + 7; //#25922
        } else { //#25925
            $put($_.msgtmp, $_.j, $k[--$j]); //#25924
            $_.j = $_.j + 1; //#25925
        } //#25925
    } //#25925
    $_.msg = $_.msgtmp; //#25928
    $_.msglen = $_.msg.length; //#25929
    if (!bwipp_dotcode.__25998__) { //#25998
        $_ = Object.create($_); //#25998
        $_.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$_.sfb, $_.crl, "96"]), $a([$_.sb2, 9, "97"]), $a([$_.sb3, 28, "98"]), $a([$_.sb4, 29, "99"]), $a([$_.sb5, 30, $_.aim]), $a([$_.sb6, $_.sfa, $_.laa]), $a([$_.lab, $_.laa, $_.sfb]), $a([$_.sc2, $_.sc2, $_.sb2]), $a([$_.sc3, $_.sc3, $_.sb3]), $a([$_.sc4, $_.sc4, $_.sb4]), $a([$_.lac, $_.lac, $_.lab]), $a([$_.fn1, $_.fn1, $_.fn1]), $a([$_.fn2, $_.fn2, $_.fn2]), $a([$_.fn3, $_.fn3, $_.fn3]), $a([$_.bsa, $_.bsa, $_.bsa]), $a([$_.bsb, $_.bsb, $_.bsb]), $a([$_.bin, $_.bin, $_.bin])]); //#25973
        $_.charvals = $a([new Map, new Map, new Map]); //#25976
        for (var _3d = 0, _3c = $_.charmaps.length - 1; _3d <= _3c; _3d += 1) { //#25985
            $_.i = _3d; //#25978
            $_.encs = $get($_.charmaps, $_.i); //#25979
            for (var _3h = 0; _3h <= 2; _3h += 1) { //#25984
                $_.j = _3h; //#25981
                var _3k = $get($_.encs, $_.j); //#25982
                $k[$j++] = _3k; //#25982
                if ($eq($type(_3k), 'stringtype')) { //#25982
                    var _3n = $get($k[--$j], 0); //#25982
                    $k[$j++] = _3n; //#25982
                } //#25982
                $put($get($_.charvals, $_.j), $k[--$j], $_.i); //#25983
            } //#25983
        } //#25983
        $_.Avals = $get($_.charvals, 0); //#25986
        $_.Bvals = $get($_.charvals, 1); //#25987
        $put($_.Bvals, $_.m05, 97); //#25988
        $put($_.Bvals, $_.m06, 98); //#25989
        $put($_.Bvals, $_.m12, 99); //#25990
        $put($_.Bvals, $_.mac, 100); //#25991
        $_.Cvals = $get($_.charvals, 2); //#25992
        $k[$j++] = Infinity; //#25993
        var _4H = $a([$_.sc2, $_.sc3, $_.sc4, $_.sc5, $_.sc6, $_.sc7, $_.tma, $_.tmb, $_.tmc, $_.tms]); //#25994
        $k[$j++] = 102; //#25994
        for (var _4I = 0, _4J = _4H.length; _4I < _4J; _4I++) { //#25994
            var _4M = $f($k[--$j] + 1); //#25994
            $k[$j++] = $get(_4H, _4I); //#25994
            $k[$j++] = _4M; //#25994
            $k[$j++] = _4M; //#25994
        } //#25994
        $j--; //#25994
        $_.BINvals = $d(); //#25995
        $_.A = 0; //#25997
        $_.B = 1; //#25997
        $_.C = 2; //#25997
        $_.BIN = 3; //#25997
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#25997
        bwipp_dotcode.__25998__ = 1; //#25997
        $_ = Object.getPrototypeOf($_); //#25997
    } //#25997
    $k[$j++] = Infinity; //#26001
    for (var _4Q = 0, _4R = $_.msglen + 1; _4Q < _4R; _4Q++) { //#26001
        $k[$j++] = 0; //#26001
    } //#26001
    $_.nDigits = $a(); //#26001
    $k[$j++] = Infinity; //#26002
    for (var _4U = 0, _4V = $_.msglen + 1; _4U < _4V; _4U++) { //#26002
        $k[$j++] = false; //#26002
    } //#26002
    $_.SeventeenTen = $a(); //#26002
    $k[$j++] = Infinity; //#26003
    for (var _4Y = 0, _4Z = $_.msglen + 1; _4Y < _4Z; _4Y++) { //#26003
        $k[$j++] = false; //#26003
    } //#26003
    $_.ECI = $a(); //#26003
    $k[$j++] = Infinity; //#26004
    for (var _4c = 0, _4d = $_.msglen + 1; _4c < _4d; _4c++) { //#26004
        $k[$j++] = false; //#26004
    } //#26004
    $_.DatumA = $a(); //#26004
    $k[$j++] = Infinity; //#26005
    for (var _4g = 0, _4h = $_.msglen + 1; _4g < _4h; _4g++) { //#26005
        $k[$j++] = false; //#26005
    } //#26005
    $_.DatumB = $a(); //#26005
    $k[$j++] = Infinity; //#26006
    for (var _4k = 0, _4l = $_.msglen + 1; _4k < _4l; _4k++) { //#26006
        $k[$j++] = false; //#26006
    } //#26006
    $_.DatumC = $a(); //#26006
    $k[$j++] = Infinity; //#26007
    for (var _4o = 0, _4p = $_.msglen + 8; _4o < _4p; _4o++) { //#26007
        $k[$j++] = false; //#26007
    } //#26007
    $_.Binary = $a(); //#26007
    $k[$j++] = Infinity; //#26008
    for (var _4s = 0, _4t = $_.msglen + 1; _4s < _4t; _4s++) { //#26008
        $k[$j++] = 0; //#26008
    } //#26008
    $_.AheadC = $a(); //#26008
    $k[$j++] = Infinity; //#26009
    for (var _4w = 0, _4x = $_.msglen + 1; _4w < _4x; _4w++) { //#26009
        $k[$j++] = 0; //#26009
    } //#26009
    $_.TryC = $a(); //#26009
    $k[$j++] = Infinity; //#26010
    for (var _50 = 0, _51 = $_.msglen + 1; _50 < _51; _50++) { //#26010
        $k[$j++] = 0; //#26010
    } //#26010
    $_.AheadA = $a(); //#26010
    $k[$j++] = Infinity; //#26011
    for (var _54 = 0, _55 = $_.msglen + 1; _54 < _55; _54++) { //#26011
        $k[$j++] = 0; //#26011
    } //#26011
    $_.AheadB = $a(); //#26011
    $k[$j++] = Infinity; //#26012
    for (var _58 = 0, _59 = $_.msglen + 1; _58 < _59; _58++) { //#26012
        $k[$j++] = 0; //#26012
    } //#26012
    $_.UntilEndSeg = $a(); //#26012
    for (var _5C = $_.msglen - 1; _5C >= 0; _5C -= 1) { //#26067
        $_.i = _5C; //#26014
        $_.barchar = $get($_.msg, $_.i); //#26015
        if (($_.barchar >= 48) && ($_.barchar <= 57)) { //#26018
            $put($_.nDigits, $_.i, $f($get($_.nDigits, $_.i + 1) + 1)); //#26017
        } //#26017
        var _5P = $get($_.Avals, $_.barchar) !== undefined; //#26019
        if (_5P) { //#26019
            $put($_.DatumA, $_.i, true); //#26019
        } //#26019
        var _5U = $get($_.Bvals, $_.barchar) !== undefined; //#26020
        if (_5U) { //#26020
            $put($_.DatumB, $_.i, true); //#26020
        } //#26020
        $_.CRLF = false; //#26021
        if (($_.barchar == 13) && ($_.i < ($_.msglen - 1))) { //#26024
            if ($get($_.msg, $_.i + 1) == 10) { //#26023
                $_.CRLF = true; //#26023
            } //#26023
        } //#26023
        if ($_.CRLF) { //#26025
            $put($_.DatumB, $_.i, true); //#26025
        } //#26025
        if ($get($_.nDigits, $_.i) >= 2) { //#26026
            $put($_.DatumC, $_.i, true); //#26026
        } //#26026
        if ($_.barchar < 0) { //#26027
            $put($_.DatumC, $_.i, true); //#26027
        } //#26027
        if ($_.barchar >= 128) { //#26028
            $put($_.Binary, $_.i, true); //#26028
        } //#26028
        if ($get($_.nDigits, $_.i) >= 10) { //#26042
            $k[$j++] = Infinity; //#26030
            $aload($geti($_.msg, $_.i, 10)); //#26031
            for (var _5x = 0, _5y = 1; _5x < _5y; _5x++) { //#26039
                if ($k[--$j] != 48) { //#26033
                    $k[$j++] = false; //#26033
                    break; //#26033
                } //#26033
                if ($k[--$j] != 49) { //#26034
                    $k[$j++] = false; //#26034
                    break; //#26034
                } //#26034
                $j -= 6; //#26035
                if ($k[--$j] != 55) { //#26036
                    $k[$j++] = false; //#26036
                    break; //#26036
                } //#26036
                if ($k[--$j] != 49) { //#26037
                    $k[$j++] = false; //#26037
                    break; //#26037
                } //#26037
                $k[$j++] = true; //#26038
            } //#26038
            $k[$j++] = $_.SeventeenTen; //#26040
            $k[$j++] = $_.i; //#26040
            $r(3, -1); //#26040
            var _65 = $k[--$j]; //#26040
            var _66 = $k[--$j]; //#26040
            $put($k[--$j], _66, _65); //#26040
            $cleartomark(); //#26041
        } //#26041
        if (($get($_.nDigits, $_.i + 1) >= 6) && ($get($_.msg, $_.i) == $_.fn2)) { //#26045
            $put($_.ECI, $_.i, true); //#26044
        } //#26044
        if (($_.barchar < 0) && ($_.barchar != $_.fn3)) { //#26052
            $put($_.AheadC, $_.i, $f($get($_.AheadC, $_.i + 1) + 1)); //#26047
        } else { //#26052
            if ($get($_.nDigits, $_.i) <= 1) { //#26052
                $put($_.AheadC, $_.i, 0); //#26050
            } else { //#26052
                $put($_.AheadC, $_.i, $f($get($_.AheadC, $_.i + 2) + 1)); //#26052
            } //#26052
        } //#26052
        if (($get($_.nDigits, $_.i) > 0) && $gt($get($_.AheadC, $_.i), $get($_.AheadC, $_.i + 1))) { //#26057
            $put($_.TryC, $_.i, $get($_.AheadC, $_.i)); //#26056
        } //#26056
        if (($get($_.DatumA, $_.i) && ($get($_.TryC, $_.i) < 2)) && ($_.barchar != $_.fn3)) { //#26060
            $put($_.AheadA, $_.i, $f($get($_.AheadA, $_.i + 1) + 1)); //#26059
        } //#26059
        if (($get($_.DatumB, $_.i) && ($get($_.TryC, $_.i) < 2)) && ($_.barchar != $_.fn3)) { //#26063
            $k[$j++] = $_.AheadB; //#26062
            $k[$j++] = $_.i; //#26062
            $k[$j++] = $_.AheadB; //#26062
            $k[$j++] = $_.i + 1; //#26062
            if ($_.CRLF) { //#26062
                var _7D = $k[--$j]; //#26062
                $k[$j++] = $f(_7D + 1); //#26062
            } //#26062
            var _7E = $k[--$j]; //#26062
            var _7G = $get($k[--$j], _7E); //#26062
            var _7H = $k[--$j]; //#26062
            $put($k[--$j], _7H, $f(_7G + 1)); //#26062
        } //#26062
        if ($_.barchar != $_.fn3) { //#26066
            $put($_.UntilEndSeg, $_.i, $f($get($_.UntilEndSeg, $_.i + 1) + 1)); //#26065
        } //#26065
    } //#26065
    $_.addtocws = function() {
        var _7Q = $k[--$j]; //#26070
        $puti($_.cws, $_.j, _7Q); //#26070
        $_.j = _7Q.length + $_.j; //#26071
    }; //#26071
    $_.base259to103 = function() {
        $_.in = $k[--$j]; //#26076
        $_.inlen = $_.in.length; //#26077
        $k[$j++] = Infinity; //#26078
        for (var _7X = 0, _7Y = 5 - $_.inlen; _7X < _7Y; _7X++) { //#26078
            $k[$j++] = 0; //#26078
        } //#26078
        $aload($_.in); //#26078
        $_.in = $a(); //#26078
        $_.out = $a(6); //#26079
        $k[$j++] = Infinity; //#26080
        $aload($geti($_.in, 0, 2)); //#26080
        $_.msbs = $a(); //#26080
        $k[$j++] = Infinity; //#26081
        $aload($_.msbs); //#26082
        var _7g = $k[--$j]; //#26082
        var _7h = $k[--$j]; //#26082
        $k[$j++] = $f(_7g + (_7h * 259)); //#26083
        for (var _7i = 0, _7j = 2; _7i < _7j; _7i++) { //#26083
            var _7k = $k[--$j]; //#26083
            $k[$j++] = _7k % 103; //#26083
            $k[$j++] = ~~(_7k / 103); //#26083
        } //#26083
        $_.mscs = $a(); //#26083
        $k[$j++] = Infinity; //#26085
        $aload($geti($_.in, 2, 3)); //#26085
        $_.lsbs = $a(); //#26085
        $k[$j++] = Infinity; //#26086
        $aload($_.lsbs); //#26087
        var _7q = $k[--$j]; //#26087
        var _7r = $k[--$j]; //#26087
        var _7s = $k[--$j]; //#26087
        $k[$j++] = $f(($f(_7q + (_7r * 259))) + (_7s * 67081)); //#26088
        for (var _7t = 0, _7u = 3; _7t < _7u; _7t++) { //#26088
            var _7v = $k[--$j]; //#26088
            $k[$j++] = _7v % 103; //#26088
            $k[$j++] = ~~(_7v / 103); //#26088
        } //#26088
        $_.lscs = $a(); //#26088
        var _7y = $get($_.lscs, 0); //#26090
        var _80 = $get($_.mscs, 0); //#26090
        $put($_.out, 5, ($f(_7y + (_80 * 42))) % 103); //#26091
        var _83 = $get($_.lscs, 1); //#26092
        var _85 = $get($_.mscs, 0); //#26092
        var _87 = $get($_.mscs, 1); //#26092
        $put($_.out, 4, ($f(($f(($f((~~(($f(_7y + (_80 * 42))) / 103)) + _83)) + (_85 * 68))) + (_87 * 42))) % 103); //#26093
        var _8A = $get($_.lscs, 2); //#26094
        var _8C = $get($_.mscs, 0); //#26094
        var _8E = $get($_.mscs, 1); //#26094
        var _8G = $get($_.mscs, 2); //#26094
        $put($_.out, 3, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7y + (_80 * 42))) / 103)) + _83)) + (_85 * 68))) + (_87 * 42))) / 103)) + _8A)) + (_8C * 92))) + (_8E * 68))) + (_8G * 42))) % 103); //#26095
        var _8J = $get($_.lscs, 3); //#26096
        var _8L = $get($_.mscs, 0); //#26096
        var _8N = $get($_.mscs, 1); //#26096
        var _8P = $get($_.mscs, 2); //#26096
        $put($_.out, 2, ($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7y + (_80 * 42))) / 103)) + _83)) + (_85 * 68))) + (_87 * 42))) / 103)) + _8A)) + (_8C * 92))) + (_8E * 68))) + (_8G * 42))) / 103)) + _8J)) + (_8L * 15))) + (_8N * 92))) + (_8P * 68))) % 103); //#26097
        var _8S = $get($_.mscs, 1); //#26098
        var _8U = $get($_.mscs, 2); //#26098
        $put($_.out, 1, ($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7y + (_80 * 42))) / 103)) + _83)) + (_85 * 68))) + (_87 * 42))) / 103)) + _8A)) + (_8C * 92))) + (_8E * 68))) + (_8G * 42))) / 103)) + _8J)) + (_8L * 15))) + (_8N * 92))) + (_8P * 68))) / 103)) + (_8S * 15))) + (_8U * 92))) % 103); //#26099
        $put($_.out, 0, ($f((~~(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7y + (_80 * 42))) / 103)) + _83)) + (_85 * 68))) + (_87 * 42))) / 103)) + _8A)) + (_8C * 92))) + (_8E * 68))) + (_8G * 42))) / 103)) + _8J)) + (_8L * 15))) + (_8N * 92))) + (_8P * 68))) / 103)) + (_8S * 15))) + (_8U * 92))) / 103)) + ($get($_.mscs, 2) * 15))) % 103); //#26101
        $k[$j++] = $geti($_.out, (6 - $_.inlen) - 1, $_.inlen + 1); //#26102
    }; //#26102
    $_.finaliseBIN = function() {
        if ($_.bpos != 0) { //#26109
            $k[$j++] = $geti($_.bvals, 0, $_.bpos); //#26107
            $_.base259to103(); //#26107
            $aload($k[--$j]); //#26107
            $_.bpos = 0; //#26108
        } //#26108
    }; //#26108
    $_.addtobin = function() {
        $put($_.bvals, $_.bpos, $k[--$j]); //#26113
        $_.bpos = $_.bpos + 1; //#26114
        if ($_.bpos == 5) { //#26115
            $_.finaliseBIN(); //#26115
        } //#26115
    }; //#26115
    $_.ECIabc = function() {
        var _8p = $geti($_.msg, $_.i + 1, 6); //#26119
        $k[$j++] = 0; //#26119
        for (var _8q = 0, _8r = _8p.length; _8q < _8r; _8q++) { //#26119
            var _8t = $k[--$j]; //#26119
            $k[$j++] = ($f(_8t + $f($get(_8p, _8q) - 48))) * 10; //#26119
        } //#26119
        var _8v = ~~($k[--$j] / 10); //#26120
        $k[$j++] = _8v; //#26124
        if (_8v >= 40) { //#26124
            var _8x = $f($k[--$j] - 40); //#26122
            var _8y = _8x % 12769; //#26123
            $k[$j++] = (~~(_8x / 12769)) + 40; //#26123
            $k[$j++] = ~~(_8y / 113); //#26123
            $k[$j++] = _8y % 113; //#26123
        } //#26123
    }; //#26123
    $_.ECIbin = function() {
        $k[$j++] = Infinity; //#26128
        var _91 = $geti($_.msg, $_.i + 1, 6); //#26129
        $k[$j++] = 0; //#26129
        for (var _92 = 0, _93 = _91.length; _92 < _93; _92++) { //#26129
            var _95 = $k[--$j]; //#26129
            $k[$j++] = ($f(_95 + $f($get(_91, _92) - 48))) * 10; //#26129
        } //#26129
        var _97 = ~~($k[--$j] / 10); //#26130
        $k[$j++] = _97; //#26138
        if (_97 >= 65536) { //#26136
            var _98 = $k[--$j]; //#26131
            var _99 = _98 % 65536; //#26131
            $k[$j++] = 258; //#26131
            $k[$j++] = ~~(_98 / 65536); //#26131
            $k[$j++] = ~~(_99 / 256); //#26131
            $k[$j++] = _99 % 256; //#26131
        } else { //#26136
            var _9A = $k[--$j]; //#26133
            $k[$j++] = _9A; //#26137
            if (_9A >= 256) { //#26136
                var _9B = $k[--$j]; //#26134
                $k[$j++] = 257; //#26134
                $k[$j++] = ~~(_9B / 256); //#26134
                $k[$j++] = _9B % 256; //#26134
            } else { //#26136
                var _9C = $k[--$j]; //#26136
                $k[$j++] = 256; //#26136
                $k[$j++] = _9C; //#26136
            } //#26136
        } //#26136
        var _9D = $a(); //#26136
        for (var _9E = 0, _9F = _9D.length; _9E < _9F; _9E++) { //#26141
            $k[$j++] = $get(_9D, _9E); //#26140
            $_.addtobin(); //#26140
        } //#26140
    }; //#26140
    $_.encC = function() {
        for (var _9H = 0, _9I = 1; _9H < _9I; _9H++) { //#26265
            if ($_.i == $_.segstart) { //#26178
                for (var _9L = 0, _9M = 1; _9L < _9M; _9L++) { //#26163
                    if ($_.i > $f($_.segend - 7)) { //#26148
                        $k[$j++] = 0; //#26148
                        break; //#26148
                    } //#26148
                    if ($get($_.msg, $_.segstart) != 91) { //#26149
                        $k[$j++] = 0; //#26149
                        break; //#26149
                    } //#26149
                    if ($get($_.msg, $_.segstart + 1) != 41) { //#26150
                        $k[$j++] = 0; //#26150
                        break; //#26150
                    } //#26150
                    if ($get($_.msg, $_.segstart + 2) != 62) { //#26151
                        $k[$j++] = 0; //#26151
                        break; //#26151
                    } //#26151
                    if ($get($_.msg, $_.segstart + 3) != 30) { //#26152
                        $k[$j++] = 0; //#26152
                        break; //#26152
                    } //#26152
                    var _9d = $get($_.msg, $_.segstart + 4); //#26153
                    if ((_9d < 48) || (_9d > 57)) { //#26153
                        $k[$j++] = 0; //#26153
                        break; //#26153
                    } //#26153
                    var _9g = $get($_.msg, $_.segstart + 5); //#26154
                    if ((_9g < 48) || (_9g > 57)) { //#26154
                        $k[$j++] = 0; //#26154
                        break; //#26154
                    } //#26154
                    if ($get($_.msg, $f($_.segend - 1)) != 4) { //#26155
                        $k[$j++] = 0; //#26155
                        break; //#26155
                    } //#26155
                    var _9q = $f(($f($get($_.msg, $_.segstart + 4) - 48) * 10) + $f($get($_.msg, $_.segstart + 5) - 48)); //#26157
                    $k[$j++] = _9q; //#26157
                    if ((_9q != 5) && ((_9q != 6) && (_9q != 12))) { //#26157
                        $j--; //#26157
                        $k[$j++] = $_.mac; //#26157
                        break; //#26157
                    } //#26157
                    if ($get($_.msg, $_.segstart + 6) != 29) { //#26158
                        $j--; //#26158
                        $k[$j++] = 0; //#26158
                        break; //#26158
                    } //#26158
                    if ($get($_.msg, $f($_.segend - 2)) != 30) { //#26159
                        $j--; //#26159
                        $k[$j++] = 0; //#26159
                        break; //#26159
                    } //#26159
                    var _9y = $k[--$j]; //#26160
                    $k[$j++] = _9y; //#26160
                    if (_9y == 5) { //#26160
                        $j--; //#26160
                        $k[$j++] = $_.m05; //#26160
                        break; //#26160
                    } //#26160
                    if ($k[--$j] == 6) { //#26161
                        $k[$j++] = $_.m06; //#26161
                        break; //#26161
                    } //#26161
                    $k[$j++] = $_.m12; //#26162
                    break; //#26162
                } //#26162
                $_.inmac = $k[--$j]; //#26164
                if ($_.inmac != 0) { //#26177
                    $k[$j++] = $a([$get($_.Cvals, $_.lab)]); //#26166
                    $_.addtocws(); //#26166
                    $_.mode = $_.B; //#26167
                    $k[$j++] = $a([$get($_.Bvals, $_.inmac)]); //#26168
                    $_.addtocws(); //#26168
                    if ($_.inmac == $_.mac) { //#26174
                        $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.segstart + 4))]); //#26170
                        $_.addtocws(); //#26170
                        $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.segstart + 5))]); //#26171
                        $_.addtocws(); //#26171
                        $_.i = $_.i + 6; //#26172
                    } else { //#26174
                        $_.i = $_.i + 7; //#26174
                    } //#26174
                    break; //#26176
                } //#26176
            } //#26176
            if ($_.i == $_.segstart) { //#26189
                if ($get($_.nDigits, $_.i) >= 2) { //#26184
                    $k[$j++] = $a([$get($_.Cvals, $_.fn1)]); //#26183
                    $_.addtocws(); //#26183
                } //#26183
                if (($get($_.msg, $_.i) == $_.fn1) && ($get($_.nDigits, $_.i + 1) >= 2)) { //#26188
                    $_.i = $_.i + 1; //#26187
                } //#26187
            } //#26187
            if ($get($_.SeventeenTen, $_.i)) { //#26199
                $k[$j++] = $a([$get($_.Cvals, $_.aim), $f(($f($get($_.msg, $_.i + 2) - 48) * 10) + $f($get($_.msg, $_.i + 3) - 48)), $f(($f($get($_.msg, $_.i + 4) - 48) * 10) + $f($get($_.msg, $_.i + 5) - 48)), $f(($f($get($_.msg, $_.i + 6) - 48) * 10) + $f($get($_.msg, $_.i + 7) - 48))]); //#26196
                $_.addtocws(); //#26196
                $_.i = $_.i + 10; //#26197
                break; //#26198
            } //#26198
            if ($get($_.DatumC, $_.i)) { //#26221
                var _BG = $get($_.msg, $_.i); //#26201
                if ((_BG == $_.fn1) || ((_BG == $_.fn2) || (_BG == $_.fn3))) { //#26217
                    $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#26202
                    $_.addtocws(); //#26202
                    if ($get($_.ECI, $_.i)) { //#26207
                        $k[$j++] = Infinity; //#26204
                        $_.ECIabc(); //#26204
                        var _BT = $a(); //#26204
                        $k[$j++] = _BT; //#26204
                        $_.addtocws(); //#26204
                        $_.i = $_.i + 7; //#26205
                        break; //#26206
                    } //#26206
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.segstart != $_.i)) { //#26214
                        $_.i = $_.i + 1; //#26209
                        $_.inmac = 0; //#26210
                        $_.segstart = $_.i; //#26211
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#26212
                        break; //#26213
                    } //#26213
                    $_.i = $_.i + 1; //#26215
                    break; //#26216
                } //#26216
                $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#26218
                $_.addtocws(); //#26218
                $_.i = $_.i + 2; //#26219
                break; //#26220
            } //#26220
            if ($get($_.Binary, $_.i)) { //#26235
                if ($get($_.nDigits, $_.i + 1) > 0) { //#26231
                    if ($get($_.msg, $_.i) < 160) { //#26227
                        $k[$j++] = $a([$get($_.Cvals, $_.bsa), $get($_.Avals, $f($get($_.msg, $_.i) - 128))]); //#26225
                        $_.addtocws(); //#26225
                    } else { //#26227
                        $k[$j++] = $a([$get($_.Cvals, $_.bsb), $get($_.Bvals, $f($get($_.msg, $_.i) - 128))]); //#26227
                        $_.addtocws(); //#26227
                    } //#26227
                    $_.i = $_.i + 1; //#26229
                    break; //#26230
                } //#26230
                $k[$j++] = $a([$get($_.Cvals, $_.bin)]); //#26232
                $_.addtocws(); //#26232
                $_.mode = $_.BIN; //#26233
                break; //#26234
            } //#26234
            $_.m = $get($_.AheadA, $_.i); //#26236
            $_.n = $get($_.AheadB, $_.i); //#26236
            if ($gt($_.m, $_.n)) { //#26241
                $k[$j++] = $a([$get($_.Cvals, $_.laa)]); //#26238
                $_.addtocws(); //#26238
                $_.mode = $_.A; //#26239
                break; //#26240
            } //#26240
            if ($_.i == $_.segstart) { //#26248
                var _Ce = $get($_.msg, $_.i); //#26243
                if ((_Ce == 9) || ((_Ce == 28) || ((_Ce == 29) || (_Ce == 30)))) { //#26247
                    $k[$j++] = $a([$get($_.Cvals, $_.laa)]); //#26244
                    $_.addtocws(); //#26244
                    $_.mode = $_.A; //#26245
                    break; //#26246
                } //#26246
            } //#26246
            if ($_.n > 4) { //#26253
                $k[$j++] = $a([$get($_.Cvals, $_.lab)]); //#26250
                $_.addtocws(); //#26250
                $_.mode = $_.B; //#26251
                break; //#26252
            } //#26252
            $k[$j++] = $a([$get($_.Cvals, $get($a([$_.sfb, $_.sb2, $_.sb3, $_.sb4]), $f($_.n - 1)))]); //#26254
            $_.addtocws(); //#26254
            for (var _D1 = 0, _D2 = $_.n; _D1 < _D2; _D1++) { //#26263
                if ($get($_.msg, $_.i) == 13) { //#26261
                    $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#26257
                    $_.addtocws(); //#26257
                    $_.i = $_.i + 2; //#26258
                } else { //#26261
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#26260
                    $_.addtocws(); //#26260
                    $_.i = $_.i + 1; //#26261
                } //#26261
            } //#26261
            break; //#26264
        } //#26264
    }; //#26264
    $_.encB = function() {
        for (var _DI = 0, _DJ = 1; _DI < _DJ; _DI++) { //#26341
            $_.n = $get($_.TryC, $_.i); //#26270
            if ($_.n >= 2) { //#26288
                if ($_.n > 4) { //#26276
                    $k[$j++] = $a([$get($_.Bvals, $_.lac)]); //#26273
                    $_.addtocws(); //#26273
                    $_.mode = $_.C; //#26274
                    break; //#26275
                } //#26275
                $k[$j++] = $a([$get($_.Bvals, $get($a([$_.sfc, $_.sc2, $_.sc3, $_.sc4]), $f($_.n - 1)))]); //#26277
                $_.addtocws(); //#26277
                for (var _Df = 0, _Dg = $_.n; _Df < _Dg; _Df++) { //#26286
                    if ($get($_.msg, $_.i) < 0) { //#26284
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#26280
                        $_.addtocws(); //#26280
                        $_.i = $_.i + 1; //#26281
                    } else { //#26284
                        $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#26283
                        $_.addtocws(); //#26283
                        $_.i = $_.i + 2; //#26284
                    } //#26284
                } //#26284
                break; //#26287
            } //#26287
            if ($get($_.DatumB, $_.i)) { //#26318
                var _E4 = $get($_.msg, $_.i); //#26290
                if ((_E4 == $_.fn1) || ((_E4 == $_.fn2) || (_E4 == $_.fn3))) { //#26307
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#26291
                    $_.addtocws(); //#26291
                    if ($get($_.ECI, $_.i)) { //#26296
                        $k[$j++] = Infinity; //#26293
                        $_.ECIabc(); //#26293
                        var _EH = $a(); //#26293
                        $k[$j++] = _EH; //#26293
                        $_.addtocws(); //#26293
                        $_.i = $_.i + 7; //#26294
                        break; //#26295
                    } //#26295
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#26304
                        $_.i = $_.i + 1; //#26298
                        $_.mode = $_.C; //#26299
                        $_.inmac = 0; //#26300
                        $_.segstart = $_.i; //#26301
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#26302
                        break; //#26303
                    } //#26303
                    $_.i = $_.i + 1; //#26305
                    break; //#26306
                } //#26306
                if (($get($_.msg, $_.i) == 13) && ($_.i < ($_.msglen - 1))) { //#26314
                    if ($get($_.msg, $_.i + 1) == 10) { //#26313
                        $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#26310
                        $_.addtocws(); //#26310
                        $_.i = $_.i + 2; //#26311
                        break; //#26312
                    } //#26312
                } //#26312
                $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#26315
                $_.addtocws(); //#26315
                $_.i = $_.i + 1; //#26316
                break; //#26317
            } //#26317
            if ($get($_.Binary, $_.i)) { //#26332
                if ($get($_.DatumB, $_.i + 1)) { //#26328
                    if ($get($_.msg, $_.i) < 160) { //#26324
                        $k[$j++] = $a([$get($_.Bvals, $_.bsa), $get($_.Avals, $f($get($_.msg, $_.i) - 128))]); //#26322
                        $_.addtocws(); //#26322
                    } else { //#26324
                        $k[$j++] = $a([$get($_.Bvals, $_.bsb), $get($_.Bvals, $f($get($_.msg, $_.i) - 128))]); //#26324
                        $_.addtocws(); //#26324
                    } //#26324
                    $_.i = $_.i + 1; //#26326
                    break; //#26327
                } //#26327
                $k[$j++] = $a([$get($_.Bvals, $_.bin)]); //#26329
                $_.addtocws(); //#26329
                $_.mode = $_.BIN; //#26330
                break; //#26331
            } //#26331
            if ($get($_.AheadA, $_.i) == 1) { //#26337
                $k[$j++] = $a([$get($_.Bvals, $_.sfa), $get($_.Avals, $get($_.msg, $_.i))]); //#26334
                $_.addtocws(); //#26334
                $_.i = $_.i + 1; //#26335
                break; //#26336
            } //#26336
            $k[$j++] = $a([$get($_.Bvals, $_.laa)]); //#26338
            $_.addtocws(); //#26338
            $_.mode = $_.A; //#26339
            break; //#26340
        } //#26340
    }; //#26340
    $_.encA = function() {
        for (var _Fg = 0, _Fh = 1; _Fg < _Fh; _Fg++) { //#26419
            $_.n = $get($_.TryC, $_.i); //#26346
            if ($_.n >= 2) { //#26364
                if ($_.n > 4) { //#26352
                    $k[$j++] = $a([$get($_.Avals, $_.lac)]); //#26349
                    $_.addtocws(); //#26349
                    $_.mode = $_.C; //#26350
                    break; //#26351
                } //#26351
                $k[$j++] = $a([$get($_.Avals, $get($a([$_.sfc, $_.sc2, $_.sc3, $_.sc4]), $f($_.n - 1)))]); //#26353
                $_.addtocws(); //#26353
                for (var _G3 = 0, _G4 = $_.n; _G3 < _G4; _G3++) { //#26362
                    if ($get($_.msg, $_.i) < 0) { //#26360
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#26356
                        $_.addtocws(); //#26356
                        $_.i = $_.i + 1; //#26357
                    } else { //#26360
                        $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#26359
                        $_.addtocws(); //#26359
                        $_.i = $_.i + 2; //#26360
                    } //#26360
                } //#26360
                break; //#26363
            } //#26363
            if ($get($_.DatumA, $_.i)) { //#26387
                var _GS = $get($_.msg, $_.i); //#26366
                if ((_GS == $_.fn1) || ((_GS == $_.fn2) || (_GS == $_.fn3))) { //#26383
                    $k[$j++] = $a([$get($_.Avals, $get($_.msg, $_.i))]); //#26367
                    $_.addtocws(); //#26367
                    if ($get($_.ECI, $_.i)) { //#26372
                        $k[$j++] = Infinity; //#26369
                        $_.ECIabc(); //#26369
                        var _Gf = $a(); //#26369
                        $k[$j++] = _Gf; //#26369
                        $_.addtocws(); //#26369
                        $_.i = $_.i + 7; //#26370
                        break; //#26371
                    } //#26371
                    if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#26380
                        $_.i = $_.i + 1; //#26374
                        $_.mode = $_.C; //#26375
                        $_.inmac = 0; //#26376
                        $_.segstart = $_.i; //#26377
                        $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#26378
                        break; //#26379
                    } //#26379
                    $_.i = $_.i + 1; //#26381
                    break; //#26382
                } //#26382
                $k[$j++] = $a([$get($_.Avals, $get($_.msg, $_.i))]); //#26384
                $_.addtocws(); //#26384
                $_.i = $_.i + 1; //#26385
                break; //#26386
            } //#26386
            if ($get($_.Binary, $_.i)) { //#26401
                if ($get($_.DatumA, $_.i + 1)) { //#26397
                    if ($get($_.msg, $_.i) < 160) { //#26393
                        $k[$j++] = $a([$get($_.Avals, $_.bsa), $get($_.Avals, $f($get($_.msg, $_.i) - 128))]); //#26391
                        $_.addtocws(); //#26391
                    } else { //#26393
                        $k[$j++] = $a([$get($_.Avals, $_.bsb), $get($_.Bvals, $f($get($_.msg, $_.i) - 128))]); //#26393
                        $_.addtocws(); //#26393
                    } //#26393
                    $_.i = $_.i + 1; //#26395
                    break; //#26396
                } //#26396
                $k[$j++] = $a([$get($_.Avals, $_.bin)]); //#26398
                $_.addtocws(); //#26398
                $_.mode = $_.BIN; //#26399
                break; //#26400
            } //#26400
            $_.n = $get($_.AheadB, $_.i); //#26402
            if ($_.n > 6) { //#26407
                $k[$j++] = $a([$get($_.Avals, $_.lab)]); //#26404
                $_.addtocws(); //#26404
                $_.mode = $_.B; //#26405
                break; //#26406
            } //#26406
            $k[$j++] = $a([$get($_.Avals, $get($a([$_.sfb, $_.sb2, $_.sb3, $_.sb4, $_.sb5, $_.sb6]), $f($_.n - 1)))]); //#26408
            $_.addtocws(); //#26408
            for (var _Hv = 0, _Hw = $_.n; _Hv < _Hw; _Hv++) { //#26417
                if ($get($_.msg, $_.i) == 13) { //#26415
                    $k[$j++] = $a([$get($_.Bvals, $_.crl)]); //#26411
                    $_.addtocws(); //#26411
                    $_.i = $_.i + 2; //#26412
                } else { //#26415
                    $k[$j++] = $a([$get($_.Bvals, $get($_.msg, $_.i))]); //#26414
                    $_.addtocws(); //#26414
                    $_.i = $_.i + 1; //#26415
                } //#26415
            } //#26415
            break; //#26418
        } //#26418
    }; //#26418
    $_.encBIN = function() {
        for (var _IC = 0, _ID = 1; _IC < _ID; _IC++) { //#26481
            $_.n = $get($_.TryC, $_.i); //#26424
            if ($_.n >= 2) { //#26443
                $k[$j++] = Infinity; //#26426
                $_.finaliseBIN(); //#26426
                var _II = $a(); //#26426
                $k[$j++] = _II; //#26426
                $_.addtocws(); //#26426
                if ($_.n > 7) { //#26431
                    $k[$j++] = $a([$get($_.BINvals, $_.tmc)]); //#26428
                    $_.addtocws(); //#26428
                    $_.mode = $_.C; //#26429
                    break; //#26430
                } //#26430
                $k[$j++] = $a([$get($_.BINvals, $get($a([$_.sc2, $_.sc3, $_.sc4, $_.sc5, $_.sc6, $_.sc7]), $f($_.n - 2)))]); //#26432
                $_.addtocws(); //#26432
                for (var _Ic = 0, _Id = $_.n; _Ic < _Id; _Ic++) { //#26441
                    if ($get($_.msg, $_.i) < 0) { //#26439
                        $k[$j++] = $a([$get($_.Cvals, $get($_.msg, $_.i))]); //#26435
                        $_.addtocws(); //#26435
                        $_.i = $_.i + 1; //#26436
                    } else { //#26439
                        $k[$j++] = $a([$f(($f($get($_.msg, $_.i) - 48) * 10) + $f($get($_.msg, $_.i + 1) - 48))]); //#26438
                        $_.addtocws(); //#26438
                        $_.i = $_.i + 2; //#26439
                    } //#26439
                } //#26439
                break; //#26442
            } //#26442
            if (($get($_.ECI, $_.i) && $get($_.Binary, $_.i + 7))) { //#26449
                $k[$j++] = Infinity; //#26445
                $_.ECIbin(); //#26445
                var _J2 = $a(); //#26445
                $k[$j++] = _J2; //#26445
                $_.addtocws(); //#26445
                $_.i = $_.i + 7; //#26446
                if ($_.i == $_.msglen) { //#26447
                    $k[$j++] = Infinity; //#26447
                    $_.finaliseBIN(); //#26447
                    var _J6 = $a(); //#26447
                    $k[$j++] = _J6; //#26447
                    $_.addtocws(); //#26447
                } //#26447
                break; //#26448
            } //#26448
            if ($get($_.msg, $_.i) >= 0) { //#26459
                if ($or($or($or($or($get($_.Binary, $_.i), $get($_.Binary, $_.i + 1)), $get($_.Binary, $_.i + 2)), $get($_.Binary, $_.i + 3)), $an($get($_.ECI, $_.i + 1), $get($_.Binary, $_.i + 8)))) { //#26458
                    $k[$j++] = Infinity; //#26454
                    $k[$j++] = $get($_.msg, $_.i); //#26454
                    $_.addtobin(); //#26454
                    var _JV = $a(); //#26454
                    $k[$j++] = _JV; //#26454
                    $_.addtocws(); //#26454
                    $_.i = $_.i + 1; //#26455
                    if ($_.i == $_.msglen) { //#26456
                        $k[$j++] = Infinity; //#26456
                        $_.finaliseBIN(); //#26456
                        var _JZ = $a(); //#26456
                        $k[$j++] = _JZ; //#26456
                        $_.addtocws(); //#26456
                    } //#26456
                    break; //#26457
                } //#26457
            } //#26457
            $k[$j++] = Infinity; //#26460
            $_.finaliseBIN(); //#26460
            var _Ja = $a(); //#26460
            $k[$j++] = _Ja; //#26460
            $_.addtocws(); //#26460
            if ($_.i != ($_.msglen - 1)) { //#26479
                if (($get($_.msg, $_.i) == $_.fn3) && ($_.i != $_.segstart)) { //#26470
                    $k[$j++] = $a([$get($_.BINvals, $_.tms)]); //#26463
                    $_.addtocws(); //#26463
                    $_.i = $_.i + 1; //#26464
                    $_.mode = $_.C; //#26465
                    $_.inmac = 0; //#26466
                    $_.segstart = $_.i; //#26467
                    $_.segend = $f($_.i + $get($_.UntilEndSeg, $_.i)); //#26468
                    break; //#26469
                } //#26469
                if ($gt($get($_.AheadA, $_.i), $get($_.AheadB, $_.i))) { //#26476
                    $k[$j++] = $a([$get($_.BINvals, $_.tma)]); //#26472
                    $_.addtocws(); //#26472
                    $_.mode = $_.A; //#26473
                } else { //#26476
                    $k[$j++] = $a([$get($_.BINvals, $_.tmb)]); //#26475
                    $_.addtocws(); //#26475
                    $_.mode = $_.B; //#26476
                } //#26476
                break; //#26478
            } //#26478
            break; //#26480
        } //#26480
    }; //#26480
    $_.cws = $a(($_.msglen * 2) + 1); //#26484
    $_.mode = $_.C; //#26485
    $_.bvals = $a(5); //#26486
    $_.bpos = 0; //#26486
    $_.inmac = 0; //#26487
    $_.segstart = 0; //#26487
    $_.segend = $get($_.UntilEndSeg, 0); //#26487
    $_.i = 0; //#26488
    $_.j = 0; //#26488
    for (;;) { //#26501
        if ($_.i >= $_.msglen) { //#26489
            break; //#26489
        } //#26489
        if ($_.inmac != 0) { //#26499
            if (($_.inmac != $_.mac) && ($_.i == $f($_.segend - 2))) { //#26494
                $_.i = $_.i + 2; //#26492
                if ($_.i >= $_.msglen) { //#26493
                    break; //#26493
                } //#26493
            } //#26493
            if (($_.inmac == $_.mac) && ($_.i == $f($_.segend - 1))) { //#26498
                $_.i = $_.i + 1; //#26496
                if ($_.i >= $_.msglen) { //#26497
                    break; //#26497
                } //#26497
            } //#26497
        } //#26497
        if ($_[$get($a(['encA', 'encB', 'encC', 'encBIN']), $_.mode)]() === true) {
            break;
        } //#26500
    } //#26500
    $_.cws = $geti($_.cws, 0, $_.j); //#26502
    $_.nd = $_.cws.length; //#26505
    $_.minarea = (((($_.nd + 3) + (~~($_.nd / 2))) * 9) + 2) * 2; //#26506
    if ($_.ratio != -1) { //#26534
        $_.hgt = Math.sqrt($_.minarea / $_.ratio); //#26508
        $_.wid = Math.sqrt($_.minarea * $_.ratio); //#26509
        $_.h = ~~$_.hgt; //#26510
        $_.w = ~~$_.wid; //#26510
        if ((($_.h + $_.w) % 2) == 1) { //#26524
            if (($_.h * $_.w) < $_.minarea) { //#26512
                $_.h = $_.h + 1; //#26512
                $_.w = $_.w + 1; //#26512
            } //#26512
        } else { //#26524
            if (($_.hgt * $_.w) < ($_.wid * $_.h)) { //#26524
                $_.w = $_.w + 1; //#26515
                if (($_.h * $_.w) < $_.minarea) { //#26519
                    $_.w = $_.w - 1; //#26517
                    $_.h = $_.h + 1; //#26517
                    if (($_.h * $_.w) < $_.minarea) { //#26518
                        $_.w = $_.w + 2; //#26518
                    } //#26518
                } //#26518
            } else { //#26524
                $_.h = $_.h + 1; //#26521
                if (($_.h * $_.w) < $_.minarea) { //#26525
                    $_.h = $_.h - 1; //#26523
                    $_.w = $_.w + 1; //#26523
                    if (($_.h * $_.w) < $_.minarea) { //#26524
                        $_.h = $_.h + 2; //#26524
                    } //#26524
                } //#26524
            } //#26524
        } //#26524
        $_.rows = $_.h; //#26528
        $_.columns = $_.w; //#26528
    } else { //#26534
        if ($_.columns == -1) { //#26532
            var _LP = ~~((($_.minarea + $_.rows) - 1) / $_.rows); //#26531
            $k[$j++] = 'columns'; //#26531
            $k[$j++] = _LP; //#26531
            if (((_LP + $_.rows) % 2) == 0) { //#26531
                var _LR = $k[--$j]; //#26531
                $k[$j++] = $f(_LR + 1); //#26531
            } //#26531
            var _LS = $k[--$j]; //#26531
            $_[$k[--$j]] = _LS; //#26531
        } //#26531
        if ($_.rows == -1) { //#26535
            var _LY = ~~((($_.minarea + $_.columns) - 1) / $_.columns); //#26534
            $k[$j++] = 'rows'; //#26534
            $k[$j++] = _LY; //#26534
            if (((_LY + $_.columns) % 2) == 0) { //#26534
                var _La = $k[--$j]; //#26534
                $k[$j++] = $f(_La + 1); //#26534
            } //#26534
            var _Lb = $k[--$j]; //#26534
            $_[$k[--$j]] = _Lb; //#26534
        } //#26534
    } //#26534
    $_.ndots = ~~(($_.rows * $_.columns) / 2); //#26539
    for (;;) { //#26543
        var _Lg = $_.nd + 1; //#26541
        if ((((_Lg + ((~~(_Lg / 2)) + 3)) * 9) + 2) > $_.ndots) { //#26541
            break; //#26541
        } //#26541
        $_.nd = $_.nd + 1; //#26542
    } //#26542
    $_.nc = (~~($_.nd / 2)) + 3; //#26544
    $_.nw = $_.nd + $_.nc; //#26545
    $_.rembits = $_.ndots - (($_.nw * 9) + 2); //#26546
    if ($_.nd > $_.cws.length) { //#26553
        $k[$j++] = Infinity; //#26548
        $aload($_.cws); //#26549
        var _Lt = ($_.mode == $_.BIN) ? 109 : 106; //#26550
        $k[$j++] = _Lt; //#26551
        for (var _Lw = 0, _Lx = ($_.nd - $_.cws.length) - 1; _Lw < _Lx; _Lw++) { //#26551
            $k[$j++] = 106; //#26551
        } //#26551
        $_.cws = $a(); //#26551
    } //#26552
    var _M0 = $get($_.options, 'debugcws') !== undefined; //#26555
    if (_M0) { //#26555
        $k[$j++] = 'bwipp.debugcws#26555'; //#26555
        $k[$j++] = $_.cws; //#26555
        bwipp_raiseerror(); //#26555
    } //#26555
    if (($_.nw * 9) > ($_.ndots - 2)) { //#26560
        $k[$j++] = 'bwipp.dotcodeTooLong#26559'; //#26559
        $k[$j++] = "Maximum length exceeded"; //#26559
        bwipp_raiseerror(); //#26559
    } //#26559
    if (!bwipp_dotcode.__26589__) { //#26589
        $_ = Object.create($_); //#26589
        $_.encs = $a
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#26588
        bwipp_dotcode.__26589__ = 1; //#26588
        $_ = Object.getPrototypeOf($_); //#26588
    } //#26588
    if (($_.rows % 2) == 0) { //#26609
        $_.sixedges = $a([$a([$_.columns - 1, $_.rows - 2]), $a([0, $_.rows - 2]), $a([$_.columns - 2, $_.rows - 1]), $a([1, $_.rows - 1]), $a([$_.columns - 1, 0]), $a([0, 0])]); //#26600
    } else { //#26609
        $_.sixedges = $a([$a([$_.columns - 2, 0]), $a([$_.columns - 2, $_.rows - 1]), $a([$_.columns - 1, 1]), $a([$_.columns - 1, $_.rows - 2]), $a([0, 0]), $a([0, $_.rows - 1])]); //#26609
    } //#26609
    $_.dmv = function() {
        var _Ma = $k[--$j]; //#26612
        var _Mb = $k[--$j]; //#26612
        $k[$j++] = $f(_Mb + (_Ma * $_.columns)); //#26612
    }; //#26612
    $_.outline = $a($_.rows * $_.columns); //#26615
    for (var _Mh = 0, _Mg = $_.rows - 1; _Mh <= _Mg; _Mh += 1) { //#26622
        $_.y = _Mh; //#26617
        for (var _Mk = 0, _Mj = $_.columns - 1; _Mk <= _Mj; _Mk += 1) { //#26621
            $_.x = _Mk; //#26619
            $k[$j++] = $_.outline; //#26620
            $k[$j++] = $_.x; //#26620
            $k[$j++] = $_.y; //#26620
            $_.dmv(); //#26620
            var _Mq = $k[--$j]; //#26620
            $put($k[--$j], _Mq, (($_.x + $_.y) % 2) - 1); //#26620
        } //#26620
    } //#26620
    var _Ms = $_.sixedges; //#26623
    for (var _Mt = 0, _Mu = _Ms.length; _Mt < _Mu; _Mt++) { //#26625
        $k[$j++] = $_.outline; //#26624
        $aload($get(_Ms, _Mt)); //#26624
        $_.dmv(); //#26624
        var _Mx = $k[--$j]; //#26624
        $put($k[--$j], _Mx, 1); //#26624
    } //#26624
    $_.clearcol = function() {
        $_.x = $k[--$j]; //#26628
        $k[$j++] = true; //#26632
        for (var _N3 = $_.x & 1, _N2 = $_.rows - 1; _N3 <= _N2; _N3 += 2) { //#26632
            $k[$j++] = $_.x; //#26631
            $k[$j++] = _N3; //#26631
            $_.dmv(); //#26631
            if ($get($_.sym, $k[--$j]) == 1) { //#26631
                $j--; //#26631
                $k[$j++] = false; //#26631
                break; //#26631
            } //#26631
        } //#26631
    }; //#26631
    $_.clearrow = function() {
        $_.y = $k[--$j]; //#26636
        $k[$j++] = true; //#26640
        for (var _NC = $_.y & 1, _NB = $_.columns - 1; _NC <= _NB; _NC += 2) { //#26640
            $k[$j++] = _NC; //#26639
            $k[$j++] = $_.y; //#26639
            $_.dmv(); //#26639
            if ($get($_.sym, $k[--$j]) == 1) { //#26639
                $j--; //#26639
                $k[$j++] = false; //#26639
                break; //#26639
            } //#26639
        } //#26639
    }; //#26639
    $_.evalsymbol = function() {
        $_.sym = $k[--$j]; //#26645
        $_.worst = 9999999; //#26648
        var _NM = $a([$a(['x', 0]), $a(['x', 1]), $a(['y', 0]), $a(['y', 1])]); //#26649
        for (var _NN = 0, _NO = _NM.length; _NN < _NO; _NN++) { //#26667
            $aload($get(_NM, _NN)); //#26650
            $_.fl = $k[--$j]; //#26650
            $_.dir = $k[--$j]; //#26650
            $_.sum = 0; //#26651
            $_.first = -1; //#26651
            $_.last = -1; //#26651
            var _NT = $eq($_.dir, 'x') ? $_.columns : $_.rows; //#26652
            for (var _NV = 0, _NU = _NT - 1; _NV <= _NU; _NV += 1) { //#26663
                $_[$_.dir] = _NV; //#26653
                var _NX = $_.sym; //#26654
                var _NZ = $_[$_.dir]; //#26655
                var _Nb = $eq($_.dir, 'x') ? $_.rows : $_.columns; //#26656
                var _Ne = (_Nb - 1) * $_.fl; //#26657
                if ($eq($_.dir, 'y')) { //#26657
                    var _ = _Ne; //#26657
                    _Ne = _NZ; //#26657
                    _NZ = _; //#26657
                } //#26657
                $k[$j++] = _NX; //#26658
                $k[$j++] = _NZ; //#26658
                $k[$j++] = _Ne; //#26658
                $_.dmv(); //#26658
                var _Nf = $k[--$j]; //#26658
                if ($get($k[--$j], _Nf) == 1) { //#26662
                    if ($_.first == -1) { //#26659
                        $_.first = $_[$_.dir]; //#26659
                    } //#26659
                    $_.last = $_[$_.dir]; //#26660
                    $_.sum = $_.sum + 1; //#26661
                } //#26661
            } //#26661
            var _Ns = $eq($_.dir, 'x') ? $_.rows : $_.columns; //#26665
            var _Nt = ($f($f($_.sum + $_.last) - $_.first)) * _Ns; //#26666
            $k[$j++] = _Nt; //#26666
            if (_Nt < $_.worst) { //#26666
                $_.worst = $k[--$j]; //#26666
            } else { //#26666
                $j--; //#26666
            } //#26666
        } //#26666
        $_.pen = 0; //#26669
        if ((($_.rows % 2) == 1) || ($_.rows <= 12)) { //#26687
            $_.sum = 0; //#26675
            $_.p = 0; //#26675
            for (var _O0 = 1, _Nz = $_.columns - 2; _O0 <= _Nz; _O0 += 1) { //#26685
                $k[$j++] = _O0; //#26677
                $_.clearcol(); //#26677
                if ($k[--$j]) { //#26683
                    $_.sum = $_.sum + 1; //#26678
                    $k[$j++] = 'p'; //#26679
                    if ($_.sum == 1) { //#26679
                        $k[$j++] = $_.rows; //#26679
                    } else { //#26679
                        $k[$j++] = $_.p * $_.rows; //#26679
                    } //#26679
                    var _O7 = $k[--$j]; //#26679
                    $_[$k[--$j]] = _O7; //#26679
                } else { //#26683
                    $_.sum = 0; //#26681
                    $_.pen = $_.pen + $_.p; //#26682
                    $_.p = 0; //#26683
                } //#26683
            } //#26683
            $_.pen = $_.pen + $_.p; //#26686
        } //#26686
        if ((($_.rows % 2) == 0) || ($_.columns <= 12)) { //#26705
            $_.sum = 0; //#26693
            $_.p = 0; //#26693
            for (var _OH = 1, _OG = $_.rows - 2; _OH <= _OG; _OH += 1) { //#26703
                $k[$j++] = _OH; //#26695
                $_.clearrow(); //#26695
                if ($k[--$j]) { //#26701
                    $_.sum = $_.sum + 1; //#26696
                    $k[$j++] = 'p'; //#26697
                    if ($_.sum == 1) { //#26697
                        $k[$j++] = $_.columns; //#26697
                    } else { //#26697
                        $k[$j++] = $_.p * $_.columns; //#26697
                    } //#26697
                    var _OO = $k[--$j]; //#26697
                    $_[$k[--$j]] = _OO; //#26697
                } else { //#26701
                    $_.sum = 0; //#26699
                    $_.pen = $_.pen + $_.p; //#26700
                    $_.p = 0; //#26701
                } //#26701
            } //#26701
            $_.pen = $_.pen + $_.p; //#26704
        } //#26704
        $k[$j++] = Infinity; //#26708
        for (var _OV = 0, _OW = ($_.columns + 4) * 2; _OV < _OW; _OV++) { //#26709
            $k[$j++] = 0; //#26709
        } //#26709
        for (var _Oa = 0, _Ob = $_.columns, _OZ = $_.sym.length - 1; _Ob < 0 ? _Oa >= _OZ : _Oa <= _OZ; _Oa += _Ob) { //#26714
            $k[$j++] = 0; //#26712
            $k[$j++] = 0; //#26712
            $aload($geti($_.sym, _Oa, $_.columns)); //#26712
            $k[$j++] = 0; //#26713
            $k[$j++] = 0; //#26713
        } //#26713
        for (var _Og = 0, _Oh = ($_.columns + 4) * 2; _Og < _Oh; _Og++) { //#26715
            $k[$j++] = 0; //#26715
        } //#26715
        $_.symp = $a(); //#26715
        $_.columns = $_.columns + 4; //#26719
        $_.rows = $_.rows + 4; //#26720
        $_.sum = 0; //#26721
        for (var _On = 2, _Om = $_.rows - 3; _On <= _Om; _On += 1) { //#26739
            $_.y = _On; //#26723
            for (var _Or = ($_.y & 1) + 2, _Oq = $_.columns - 3; _Or <= _Oq; _Or += 2) { //#26738
                $_.x = _Or; //#26725
                for (var _Os = 0, _Ot = 1; _Os < _Ot; _Os++) { //#26737
                    $k[$j++] = $_.symp; //#26727
                    $k[$j++] = $_.x - 1; //#26727
                    $k[$j++] = $_.y - 1; //#26727
                    $_.dmv(); //#26727
                    var _Ox = $k[--$j]; //#26727
                    if ($get($k[--$j], _Ox) == 1) { //#26727
                        break; //#26727
                    } //#26727
                    $k[$j++] = $_.symp; //#26728
                    $k[$j++] = $_.x + 1; //#26728
                    $k[$j++] = $_.y - 1; //#26728
                    $_.dmv(); //#26728
                    var _P3 = $k[--$j]; //#26728
                    if ($get($k[--$j], _P3) == 1) { //#26728
                        break; //#26728
                    } //#26728
                    $k[$j++] = $_.symp; //#26729
                    $k[$j++] = $_.x - 1; //#26729
                    $k[$j++] = $_.y + 1; //#26729
                    $_.dmv(); //#26729
                    var _P9 = $k[--$j]; //#26729
                    if ($get($k[--$j], _P9) == 1) { //#26729
                        break; //#26729
                    } //#26729
                    $k[$j++] = $_.symp; //#26730
                    $k[$j++] = $_.x + 1; //#26730
                    $k[$j++] = $_.y + 1; //#26730
                    $_.dmv(); //#26730
                    var _PF = $k[--$j]; //#26730
                    if ($get($k[--$j], _PF) == 1) { //#26730
                        break; //#26730
                    } //#26730
                    $k[$j++] = $_.symp; //#26731
                    $k[$j++] = $_.x; //#26731
                    $k[$j++] = $_.y; //#26731
                    $_.dmv(); //#26731
                    var _PL = $k[--$j]; //#26731
                    if ($get($k[--$j], _PL) == 0) { //#26731
                        $_.sum = $_.sum + 1; //#26731
                        break; //#26731
                    } //#26731
                    $k[$j++] = $_.symp; //#26732
                    $k[$j++] = $_.x - 2; //#26732
                    $k[$j++] = $_.y; //#26732
                    $_.dmv(); //#26732
                    var _PS = $k[--$j]; //#26732
                    if ($get($k[--$j], _PS) == 1) { //#26732
                        break; //#26732
                    } //#26732
                    $k[$j++] = $_.symp; //#26733
                    $k[$j++] = $_.x; //#26733
                    $k[$j++] = $_.y - 2; //#26733
                    $_.dmv(); //#26733
                    var _PY = $k[--$j]; //#26733
                    if ($get($k[--$j], _PY) == 1) { //#26733
                        break; //#26733
                    } //#26733
                    $k[$j++] = $_.symp; //#26734
                    $k[$j++] = $_.x + 2; //#26734
                    $k[$j++] = $_.y; //#26734
                    $_.dmv(); //#26734
                    var _Pe = $k[--$j]; //#26734
                    if ($get($k[--$j], _Pe) == 1) { //#26734
                        break; //#26734
                    } //#26734
                    $k[$j++] = $_.symp; //#26735
                    $k[$j++] = $_.x; //#26735
                    $k[$j++] = $_.y + 2; //#26735
                    $_.dmv(); //#26735
                    var _Pk = $k[--$j]; //#26735
                    if ($get($k[--$j], _Pk) == 1) { //#26735
                        break; //#26735
                    } //#26735
                    $_.sum = $_.sum + 1; //#26736
                } //#26736
            } //#26736
        } //#26736
        $_.columns = $_.columns - 4; //#26740
        $_.rows = $_.rows - 4; //#26741
        if ($_.worst == 0) { //#26746
            $k[$j++] = -99999; //#26744
        } else { //#26746
            $k[$j++] = $f(($f($_.worst - ($_.sum * $_.sum))) - $_.pen); //#26746
        } //#26746
    }; //#26746
    if (!bwipp_dotcode.__26754__) { //#26754
        $_ = Object.create($_); //#26754
        $k[$j++] = Infinity; //#26753
        $k[$j++] = 1; //#26753
        for (var _Pv = 0, _Pw = 112; _Pv < _Pw; _Pv++) { //#26753
            var _Px = $k[--$j]; //#26753
            $k[$j++] = _Px; //#26753
            $k[$j++] = (_Px * 3) % 113; //#26753
        } //#26753
        $_.rsalog = $a(); //#26753
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_dotcode.$ctx[id] = $_[id]); //#26753
        bwipp_dotcode.__26754__ = 1; //#26753
        $_ = Object.getPrototypeOf($_); //#26753
    } //#26753
    $_.step = (~~($_.nw / 112)) + 1; //#26755
    $_.offset = function() {
        var _Q2 = $k[--$j]; //#26756
        $k[$j++] = $f((_Q2 * $_.step) + $_.start); //#26756
    }; //#26756
    $_.bestscore = -99999999; //#26764
    $k[$j++] = 'masks'; //#26769
    if ($_.mask != -1) { //#26768
        $k[$j++] = $a([$_.mask]); //#26766
    } else { //#26768
        if ($_.fast) { //#26768
            $k[$j++] = $a([3, 2, 1, 0]); //#26768
        } else { //#26768
            $k[$j++] = $a([0, 1, 2, 3]); //#26768
        } //#26768
    } //#26768
    var _QA = $k[--$j]; //#26769
    $_[$k[--$j]] = _QA; //#26769
    $_.litmasks = $a(4); //#26770
    $forall($_.masks, function() { //#26872
        $_.mask = $k[--$j]; //#26773
        $k[$j++] = Infinity; //#26776
        var _QJ = $_.cws; //#26778
        $k[$j++] = $_.mask; //#26778
        $k[$j++] = $get($a([0, 3, 7, 17]), $_.mask); //#26778
        $k[$j++] = 0; //#26778
        for (var _QK = 0, _QL = _QJ.length; _QK < _QL; _QK++) { //#26778
            var _QN = $k[--$j]; //#26778
            var _QO = $k[--$j]; //#26778
            $k[$j++] = $f($get(_QJ, _QK) + _QN) % 113; //#26778
            $k[$j++] = _QO; //#26778
            $k[$j++] = $f(_QN + _QO); //#26778
        } //#26778
        $j -= 2; //#26778
        for (var _QQ = 0, _QR = $_.nc; _QQ < _QR; _QQ++) { //#26779
            $k[$j++] = 0; //#26779
        } //#26779
        $_.rscws = $a(); //#26779
        for (var _QV = 0, _QU = $_.step - 1; _QV <= _QU; _QV += 1) { //#26803
            $_.start = _QV; //#26782
            $_.ND = ~~((((($_.nd + 1) - $_.start) + $_.step) - 1) / $_.step); //#26783
            $_.NW = ~~((((($_.nw + 1) - $_.start) + $_.step) - 1) / $_.step); //#26784
            $_.NC = $_.NW - $_.ND; //#26785
            $k[$j++] = Infinity; //#26786
            $k[$j++] = 1; //#26786
            for (var _Qh = 0, _Qi = $_.NC; _Qh < _Qi; _Qh++) { //#26786
                $k[$j++] = 0; //#26786
            } //#26786
            $_.coeffs = $a(); //#26786
            for (var _Qm = 1, _Ql = $_.NC; _Qm <= _Ql; _Qm += 1) { //#26793
                $_.i = _Qm; //#26788
                for (var _Qo = $_.NC; _Qo >= 1; _Qo -= 1) { //#26792
                    $_.j = _Qo; //#26790
                    $put($_.coeffs, $_.j, ($f($f($get($_.coeffs, $_.j) + 113) - (($get($_.rsalog, $_.i) * $get($_.coeffs, $_.j - 1)) % 113))) % 113); //#26791
                } //#26791
            } //#26791
            for (var _R2 = 0, _R1 = $_.ND - 1; _R2 <= _R1; _R2 += 1) { //#26801
                $k[$j++] = 't'; //#26795
                $k[$j++] = $_.rscws; //#26795
                $k[$j++] = _R2; //#26795
                $_.offset(); //#26795
                var _R4 = $k[--$j]; //#26795
                var _R6 = $get($k[--$j], _R4); //#26795
                $k[$j++] = _R6; //#26795
                $k[$j++] = $_.rscws; //#26795
                $k[$j++] = $_.ND; //#26795
                $_.offset(); //#26795
                var _R9 = $k[--$j]; //#26795
                var _RB = $get($k[--$j], _R9); //#26795
                var _RC = $k[--$j]; //#26795
                $_[$k[--$j]] = $f(_RC + _RB) % 113; //#26795
                for (var _RG = 0, _RF = $_.NC - 2; _RG <= _RF; _RG += 1) { //#26799
                    $_.j = _RG; //#26797
                    $k[$j++] = $_.rscws; //#26798
                    $k[$j++] = $_.ND + $_.j; //#26798
                    $_.offset(); //#26798
                    $k[$j++] = $_.rscws; //#26798
                    $k[$j++] = ($_.ND + $_.j) + 1; //#26798
                    $_.offset(); //#26798
                    var _RN = $k[--$j]; //#26798
                    var _RP = $get($k[--$j], _RN); //#26798
                    var _RU = $k[--$j]; //#26798
                    $put($k[--$j], _RU, ($f($f(_RP + 113) - (($_.t * $get($_.coeffs, $_.j + 1)) % 113))) % 113); //#26798
                } //#26798
                $k[$j++] = $_.rscws; //#26800
                $k[$j++] = ($_.ND + $_.NC) - 1; //#26800
                $_.offset(); //#26800
                var _Rd = $k[--$j]; //#26800
                $put($k[--$j], _Rd, ($f(113 - (($_.t * $get($_.coeffs, $_.NC)) % 113))) % 113); //#26800
            } //#26800
            for (var _Ri = $_.ND, _Rh = $_.NW - 1; _Ri <= _Rh; _Ri += 1) { //#26802
                $k[$j++] = _Ri; //#26802
                $k[$j++] = $_.rscws; //#26802
                $k[$j++] = _Ri; //#26802
                $_.offset(); //#26802
                $k[$j++] = 113; //#26802
                $k[$j++] = $_.rscws; //#26802
                $r(5, -1); //#26802
                $_.offset(); //#26802
                var _Rl = $k[--$j]; //#26802
                var _Rn = $get($k[--$j], _Rl); //#26802
                var _Ro = $k[--$j]; //#26802
                var _Rp = $k[--$j]; //#26802
                $put($k[--$j], _Rp, $f(_Ro - _Rn) % 113); //#26802
            } //#26802
        } //#26802
        $_.bits = $s($_.ndots); //#26806
        $puti($_.bits, 0, $get($a(["00", "01", "10", "11"]), $_.mask)); //#26807
        for (var _Rz = 1, _Ry = $_.nw; _Rz <= _Ry; _Rz += 1) { //#26811
            $_.i = _Rz; //#26809
            $puti($_.bits, (($_.i - 1) * 9) + 2, $get($_.encs, $get($_.rscws, $_.i))); //#26810
        } //#26810
        if ($_.rembits > 0) { //#26814
            $puti($_.bits, ($_.nw * 9) + 2, $geti("11111111111111111", 0, $_.rembits)); //#26813
        } //#26813
        var _SC = $_.outline; //#26817
        $_.pixs = $arrcpy($a(_SC.length), _SC); //#26817
        $_.posx = 0; //#26818
        $k[$j++] = 'posy'; //#26819
        if (($_.rows % 2) == 0) { //#26819
            $k[$j++] = 0; //#26819
        } else { //#26819
            $k[$j++] = $_.rows - 1; //#26819
        } //#26819
        var _SH = $k[--$j]; //#26819
        $_[$k[--$j]] = _SH; //#26819
        var _SL = $geti($_.bits, 0, $_.bits.length - 6); //#26820
        for (var _SM = 0, _SN = _SL.length; _SM < _SN; _SM++) { //#26838
            $k[$j++] = $get(_SL, _SM); //#26836
            for (;;) { //#26836
                $k[$j++] = $_.pixs; //#26822
                $k[$j++] = $_.posx; //#26822
                $k[$j++] = $_.posy; //#26822
                $_.dmv(); //#26822
                var _SS = $k[--$j]; //#26822
                if ($get($k[--$j], _SS) == -1) { //#26822
                    break; //#26822
                } //#26822
                if (($_.rows % 2) == 0) { //#26833
                    $_.posy = $_.posy + 1; //#26824
                    if ($_.posy == $_.rows) { //#26828
                        $_.posy = 0; //#26826
                        $_.posx = $_.posx + 1; //#26827
                    } //#26827
                } else { //#26833
                    $_.posx = $_.posx + 1; //#26830
                    if ($_.posx == $_.columns) { //#26834
                        $_.posx = 0; //#26832
                        $_.posy = $_.posy - 1; //#26833
                    } //#26833
                } //#26833
            } //#26833
            $k[$j++] = $_.pixs; //#26837
            $k[$j++] = $_.posx; //#26837
            $k[$j++] = $_.posy; //#26837
            $_.dmv(); //#26837
            $r(3, -1); //#26837
            var _Sh = $k[--$j]; //#26837
            var _Si = $k[--$j]; //#26837
            $put($k[--$j], _Si, $f(_Sh - 48)); //#26837
        } //#26837
        for (var _Sk = 0; _Sk <= 5; _Sk += 1) { //#26843
            $_.i = _Sk; //#26840
            $k[$j++] = $_.pixs; //#26841
            $aload($get($_.sixedges, $_.i)); //#26841
            $_.dmv(); //#26841
            var _St = $k[--$j]; //#26842
            $put($k[--$j], _St, $get($_.bits, ($_.bits.length - 6) + $_.i) - 48); //#26842
        } //#26842
        $k[$j++] = 'score'; //#26846
        $k[$j++] = $_.pixs; //#26846
        $_.evalsymbol(); //#26846
        var _Sw = $k[--$j]; //#26846
        $_[$k[--$j]] = _Sw; //#26846
        if ($_.score > $_.bestscore) { //#26851
            $_.bestsym = $_.pixs; //#26848
            $_.bestscore = $_.score; //#26849
            if ($_.fast && ($_.bestscore > (~~(($_.rows * $_.columns) / 2)))) { //#26850
                return true; //#26850
            } //#26850
        } //#26850
        var _T6 = $_.pixs; //#26854
        $_.litmask = $arrcpy($a(_T6.length), _T6); //#26854
        for (var _T9 = 0; _T9 <= 5; _T9 += 1) { //#26859
            $_.i = _T9; //#26856
            $k[$j++] = $_.litmask; //#26857
            $aload($get($_.sixedges, $_.i)); //#26857
            $_.dmv(); //#26857
            var _TE = $k[--$j]; //#26858
            $put($k[--$j], _TE, 1); //#26858
        } //#26858
        $put($_.litmasks, $_.mask, $_.litmask); //#26860
        if ($_.fast) { //#26870
            $k[$j++] = 'score'; //#26864
            $k[$j++] = $_.litmask; //#26864
            $_.evalsymbol(); //#26864
            var _TL = $k[--$j]; //#26864
            $_[$k[--$j]] = _TL; //#26864
            if ($gt($_.score, $_.bestscore)) { //#26869
                $_.bestsym = $_.litmask; //#26866
                $_.bestscore = $_.score; //#26867
                if ($_.bestscore > (~~(($_.rows * $_.columns) / 2))) { //#26868
                    return true; //#26868
                } //#26868
            } //#26868
        } //#26868
    }); //#26868
    $_.pixs = $_.bestsym; //#26873
    if ((!$_.fast) && ($_.bestscore <= (~~(($_.rows * $_.columns) / 2)))) { //#26887
        $_.bestscore = -99999999; //#26877
        $forall($_.masks, function() { //#26885
            $_.litmask = $get($_.litmasks, $k[--$j]); //#26879
            $k[$j++] = 'score'; //#26880
            $k[$j++] = $_.litmask; //#26880
            $_.evalsymbol(); //#26880
            var _Te = $k[--$j]; //#26880
            $_[$k[--$j]] = _Te; //#26880
            if ($_.score > $_.bestscore) { //#26884
                $_.bestsym = $_.litmask; //#26882
                $_.bestscore = $_.score; //#26883
            } //#26883
        }); //#26883
        $_.pixs = $_.bestsym; //#26886
    } //#26886
    var _Tr = new Map([
        ["ren", 'renmatrix'],
        ["dotty", true],
        ["pixs", $_.pixs],
        ["pixx", $_.columns],
        ["pixy", $_.rows],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.columns * 2) / 72],
        ["borderleft", 3],
        ["borderright", 3],
        ["bordertop", 3],
        ["borderbottom", 3],
        ["opt", $_.options]
    ]); //#26902
    $k[$j++] = _Tr; //#26905
    if (!$_.dontdraw) { //#26905
        bwipp_renmatrix(); //#26905
    } //#26905
    $_ = Object.getPrototypeOf($_); //#26907
    $_ = Object.getPrototypeOf($_); //#26909
} //bwipp_dotcode
function bwipp_ultracode() {
    $_ = Object.create($_); //#26940
    $_.dontdraw = false; //#26943
    $_.eclevel = "EC2"; //#26944
    $_.parse = false; //#26945
    $_.parsefnc = false; //#26946
    $_.start = 257; //#26947
    $_.link1 = 0; //#26948
    $_.raw = false; //#26949
    $_.rev = 2; //#26950
    $k[$j++] = $_; //#26952
    bwipp_processoptions(); //#26952
    $_.options = $k[--$j]; //#26952
    $_.barcode = $k[--$j]; //#26953
    var _2 = $_.rev; //#26955
    if ((_2 != 1) && (_2 != 2)) { //#26957
        $k[$j++] = 'bwipp.ultracodeInvalidRevision#26956'; //#26956
        $k[$j++] = "Valid revisions are 1 and 2"; //#26956
        bwipp_raiseerror(); //#26956
    } //#26956
    var _4 = $_.eclevel.length == 3; //#26959
    $k[$j++] = _4; //#26963
    if (_4) { //#26963
        $j--; //#26960
        $k[$j++] = $geti($_.eclevel, 0, 2); //#26962
        if ($eq("EC", "EC")) { //#26962
            $j--; //#26961
            var _9 = $get($_.eclevel, 2) - 48; //#26961
            var _B = ($_.rev == 2) ? 1 : 0; //#26961
            $k[$j++] = (_9 >= _B) && (_9 <= 5); //#26961
        } //#26961
    } //#26961
    if ($nt($k[--$j])) { //#26966
        $k[$j++] = 'bwipp.ultracodeInvalidErrorCorrectionLevel#26965'; //#26965
        $k[$j++] = "Valid error correction levels are EC1 to EC5, and EC0 for legacy revision 1"; //#26965
        bwipp_raiseerror(); //#26965
    } //#26965
    bwipp_loadctx(bwipp_ultracode); //#26968
    if ($_.raw) { //#27005
        $_.dcws = $a($_.barcode.length); //#26972
        $_.i = 0; //#26973
        $_.j = 0; //#26973
        for (;;) { //#26980
            if ($_.i == $_.barcode.length) { //#26975
                break; //#26975
            } //#26975
            $_.cw = $cvi($geti($_.barcode, $_.i + 1, 3)); //#26976
            $put($_.dcws, $_.j, $_.cw); //#26977
            $_.i = $_.i + 4; //#26978
            $_.j = $_.j + 1; //#26979
        } //#26979
        $_.dcws = $geti($_.dcws, 0, $_.j); //#26981
    } else { //#27005
        $_.fn1 = -1; //#26986
        $_.fn3 = -2; //#26986
        var _X = new Map([
            ["parse", $_.parse],
            ["parsefnc", $_.parsefnc],
            ["FNC1", $_.fn1],
            ["FNC3", $_.fn3]
        ]); //#26991
        $_.fncvals = _X; //#26992
        $k[$j++] = 'msg'; //#26993
        $k[$j++] = $_.barcode; //#26993
        $k[$j++] = $_.fncvals; //#26993
        bwipp_parseinput(); //#26993
        var _a = $k[--$j]; //#26993
        $_[$k[--$j]] = _a; //#26993
        $_.msglen = $_.msg.length; //#26994
        $_.scr = $a([]); //#26996
        $_.scp = $a([]); //#26997
        $k[$j++] = Infinity; //#26998
        $aload($_.scr); //#26999
        $aload($_.scp); //#27000
        $forall($_.msg, function() { //#27004
            var _i = $k[--$j]; //#27002
            $k[$j++] = _i; //#27002
            if (_i == $_.fn1) { //#27002
                $j--; //#27002
                $k[$j++] = 268; //#27002
            } //#27002
            var _k = $k[--$j]; //#27003
            $k[$j++] = _k; //#27003
            if (_k == $_.fn3) { //#27003
                $j--; //#27003
                $k[$j++] = 269; //#27003
            } //#27003
        }); //#27003
        $_.dcws = $a(); //#27003
    } //#27005
    var _o = $get($_.options, 'debugcws') !== undefined; //#27009
    if (_o) { //#27009
        $k[$j++] = 'bwipp.debugcws#27009'; //#27009
        $k[$j++] = $_.dcws; //#27009
        bwipp_raiseerror(); //#27009
    } //#27009
    $_.mcc = $_.dcws.length + 3; //#27011
    $_.eclval = $get($_.eclevel, 2) - 48; //#27013
    if ($_.eclval != 0) { //#27017
        $k[$j++] = 'qcc'; //#27015
        $k[$j++] = $get($a([0, 1, 2, 4, 6, 8]), $_.eclval); //#27015
        $k[$j++] = ~~($_.mcc / 25); //#27015
        if (($_.mcc % 25) != 0) { //#27015
            var _z = $k[--$j]; //#27015
            $k[$j++] = $f(_z + 1); //#27015
        } //#27015
        var _10 = $k[--$j]; //#27015
        var _11 = $k[--$j]; //#27015
        $_[$k[--$j]] = $f((_11 * _10) + 5); //#27015
    } else { //#27017
        $_.qcc = 3; //#27017
    } //#27017
    $_.acc = ($_.qcc - 3) + (78 * $_.link1); //#27019
    $_.tcc = $_.mcc + $_.qcc; //#27020
    if (!bwipp_ultracode.__27031__) { //#27031
        $_ = Object.create($_); //#27031
        $_.metrics = $a([$a([2, 7, 37, 5]), $a([3, 36, 84, 13]), $a([4, 85, 161, 22]), $a([5, 142, 282, 29])]); //#27030
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#27030
        bwipp_ultracode.__27031__ = 1; //#27030
        $_ = Object.getPrototypeOf($_); //#27030
    } //#27030
    var _1D = $_.metrics; //#27033
    for (var _1E = 0, _1F = _1D.length; _1E < _1F; _1E++) { //#27042
        $_.m = $get(_1D, _1E); //#27034
        $_.rows = $get($_.m, 0); //#27035
        $_.minc = $get($_.m, 1); //#27036
        $_.maxc = $get($_.m, 2); //#27037
        $_.mcol = $get($_.m, 3); //#27038
        $_.okay = true; //#27039
        if (($_.tcc < $_.minc) || ($_.tcc > $_.maxc)) { //#27040
            $_.okay = false; //#27040
        } //#27040
        if ($_.okay) { //#27041
            break; //#27041
        } //#27041
    } //#27041
    if (!$_.okay) { //#27046
        $k[$j++] = 'bwipp.ultracodeNoValidSymbol#27045'; //#27045
        $k[$j++] = "Maximum length exceeded or invalid content"; //#27045
        bwipp_raiseerror(); //#27045
    } //#27045
    for (var _1W = $_.mcol; _1W <= 61; _1W += 1) { //#27060
        $_.columns = _1W; //#27050
        $k[$j++] = $_.columns; //#27052
        if ($_.columns >= 15) { //#27052
            var _1Z = $k[--$j]; //#27052
            $k[$j++] = $f(_1Z - 1); //#27052
        } //#27052
        if ($_.columns >= 31) { //#27053
            var _1b = $k[--$j]; //#27053
            $k[$j++] = $f(_1b - 1); //#27053
        } //#27053
        if ($_.columns >= 47) { //#27054
            var _1d = $k[--$j]; //#27054
            $k[$j++] = $f(_1d - 1); //#27054
        } //#27054
        var _1h = $f(($f(($k[--$j] * $_.rows) - 3)) - $_.tcc); //#27055
        $k[$j++] = _1h; //#27058
        if (_1h >= 0) { //#27058
            $_.pads = $k[--$j]; //#27056
            break; //#27057
        } //#27057
        $j--; //#27059
    } //#27059
    $_.dcc = $f($_.columns - $_.mcol); //#27061
    $k[$j++] = Infinity; //#27064
    $k[$j++] = $_.start; //#27068
    $k[$j++] = $_.mcc; //#27068
    $k[$j++] = $_.acc; //#27068
    $aload($_.dcws); //#27068
    for (var _1q = 0, _1r = $_.qcc; _1q < _1r; _1q++) { //#27069
        $k[$j++] = 0; //#27069
    } //#27069
    $k[$j++] = 0; //#27070
    $_.rsseq = $a(); //#27070
    if (!bwipp_ultracode.__27078__) { //#27078
        $_ = Object.create($_); //#27078
        $k[$j++] = Infinity; //#27075
        $k[$j++] = 1; //#27075
        for (var _1t = 0, _1u = 282; _1t < _1u; _1t++) { //#27075
            var _1v = $k[--$j]; //#27075
            $k[$j++] = _1v; //#27075
            $k[$j++] = (_1v * 3) % 283; //#27075
        } //#27075
        $_.rsalog = $a(); //#27075
        $_.rslog = $a(283); //#27076
        for (var _1y = 1; _1y <= 282; _1y += 1) { //#27077
            $put($_.rslog, $get($_.rsalog, _1y), _1y); //#27077
        } //#27077
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#27077
        bwipp_ultracode.__27078__ = 1; //#27077
        $_ = Object.getPrototypeOf($_); //#27077
    } //#27077
    $_.rsprod = function() {
        var _23 = $k[--$j]; //#27082
        var _24 = $k[--$j]; //#27082
        $k[$j++] = _24; //#27086
        $k[$j++] = _23; //#27086
        if ((_23 != 0) && (_24 != 0)) { //#27085
            var _27 = $get($_.rslog, $k[--$j]); //#27083
            var _2C = $get($_.rsalog, $f(_27 + $get($_.rslog, $k[--$j])) % 282); //#27083
            $k[$j++] = _2C; //#27083
        } else { //#27085
            $j -= 2; //#27085
            $k[$j++] = 0; //#27085
        } //#27085
    }; //#27085
    $_.n = $_.mcc; //#27090
    $_.k = $_.qcc; //#27090
    $k[$j++] = Infinity; //#27091
    $k[$j++] = 1; //#27091
    for (var _2G = 0, _2H = $_.k; _2G < _2H; _2G++) { //#27091
        $k[$j++] = 0; //#27091
    } //#27091
    $_.coeffs = $a(); //#27091
    for (var _2L = 1, _2K = $_.k; _2L <= _2K; _2L += 1) { //#27100
        $_.i = _2L; //#27093
        $put($_.coeffs, $_.i, $get($_.coeffs, $_.i - 1)); //#27094
        for (var _2S = $_.i - 1; _2S >= 1; _2S -= 1) { //#27098
            $_.j = _2S; //#27096
            $k[$j++] = $_.coeffs; //#27097
            $k[$j++] = $_.j; //#27097
            $k[$j++] = $get($_.coeffs, $_.j - 1); //#27097
            $k[$j++] = $get($_.coeffs, $_.j); //#27097
            $k[$j++] = $get($_.rsalog, $_.i); //#27097
            $_.rsprod(); //#27097
            var _2e = $k[--$j]; //#27097
            var _2f = $k[--$j]; //#27097
            var _2g = $k[--$j]; //#27097
            $put($k[--$j], _2g, $f(_2f + _2e) % 283); //#27097
        } //#27097
        $k[$j++] = $_.coeffs; //#27099
        $k[$j++] = 0; //#27099
        $k[$j++] = $get($_.coeffs, 0); //#27099
        $k[$j++] = $get($_.rsalog, $_.i); //#27099
        $_.rsprod(); //#27099
        var _2o = $k[--$j]; //#27099
        var _2p = $k[--$j]; //#27099
        $put($k[--$j], _2p, _2o); //#27099
    } //#27099
    $_.coeffs = $geti($_.coeffs, 0, $_.coeffs.length - 1); //#27101
    for (var _2v = $_.coeffs.length - 1; _2v >= 0; _2v -= 2) { //#27102
        var _2w = $_.coeffs; //#27102
        $put(_2w, _2v, $f(283 - $get(_2w, _2v))); //#27102
    } //#27102
    for (var _30 = 0, _2z = $_.n - 1; _30 <= _2z; _30 += 1) { //#27111
        $_.t = $f($get($_.rsseq, _30) + $get($_.rsseq, $_.n)) % 283; //#27106
        for (var _38 = 0, _37 = $_.k - 1; _38 <= _37; _38 += 1) { //#27110
            $_.j = _38; //#27108
            $put($_.rsseq, $_.n + $_.j, ($f($get($_.rsseq, ($_.n + $_.j) + 1) + ($f(283 - (($_.t * $get($_.coeffs, ($_.k - $_.j) - 1)) % 283))))) % 283); //#27109
        } //#27109
    } //#27109
    for (var _3P = $_.n, _3O = $_.n + $_.k; _3P <= _3O; _3P += 1) { //#27112
        $put($_.rsseq, _3P, $f(283 - $get($_.rsseq, _3P)) % 283); //#27112
    } //#27112
    $_.ecws = $geti($_.rsseq, $_.n, $_.k); //#27113
    var _3Y = $get($_.options, 'debugecc') !== undefined; //#27115
    if (_3Y) { //#27115
        $k[$j++] = 'bwipp.debugecc#27115'; //#27115
        $k[$j++] = $_.ecws; //#27115
        bwipp_raiseerror(); //#27115
    } //#27115
    if (!bwipp_ultracode.__27174__) { //#27174
        $_ = Object.create($_); //#27174
        $_.tiles = $a([13135, 13136, 13153, 13156, 13163, 13165, 13513, 13515, 13516, 13531, 13535, 13536, 13561, 13563, 13565, 13613, 13615, 13616, 13631, 13635, 13636, 13651, 13653, 13656, 15135, 15136, 15153, 15163, 15165, 15313, 15315, 15316, 15351, 15353, 15356, 15361, 15363, 15365, 15613, 15615, 15616, 15631, 15635, 15636, 15651, 15653, 15656, 16135, 16136, 16153, 16156, 16165, 16313, 16315, 16316, 16351, 16353, 16356, 16361, 16363, 16365, 16513, 16515, 16516, 16531, 16535, 16536, 16561, 16563, 16565, 31315, 31316, 31351, 31356, 31361, 31365, 31513, 31515, 31516, 31531, 31535, 31536, 31561, 31563, 31565, 31613, 31615, 31631, 31635, 31636, 31651, 31653, 31656, 35131, 35135, 35136, 35151, 35153, 35156, 35161, 35163, 35165, 35315, 35316, 35351, 35356, 35361, 35365, 35613, 35615, 35616, 35631, 35635, 35636, 35651, 35653, 35656, 36131, 36135, 36136, 36151, 36153, 36156, 36163, 36165, 36315, 36316, 36351, 36356, 36361, 36365, 36513, 36515, 36516, 36531, 36535, 36536, 36561, 36563, 36565, 51313, 51315, 51316, 51351, 51353, 51356, 51361, 51363, 51365, 51513, 51516, 51531, 51536, 51561, 51563, 51613, 51615, 51616, 51631, 51635, 51636, 51651, 51653, 51656, 53131, 53135, 53136, 53151, 53153, 53156, 53161, 53163, 53165, 53513, 53516, 53531, 53536, 53561, 53563, 53613, 53615, 53616, 53631, 53635, 53636, 53651, 53653, 53656, 56131, 56135, 56136, 56151, 56153, 56156, 56161, 56163, 56165, 56313, 56315, 56316, 56351, 56353, 56356, 56361, 56363, 56365, 56513, 56516, 56531, 56536, 56561, 56563, 61313, 61315, 61316, 61351, 61353, 61356, 61361, 61363, 61365, 61513, 61515, 61516, 61531, 61535, 61536, 61561, 61563, 61565, 61615, 61631, 61635, 61651, 61653, 63131, 63135, 63136, 63151, 63153, 63156, 63161, 63163, 63165, 63513, 63515, 63516, 63531, 63535, 63536, 63561, 63563, 63565, 63613, 63615, 63631, 63635, 63651, 63653, 65131, 65135, 65136, 65151, 65153, 65156, 65161, 65163, 65165, 65313, 65315, 65316, 65351, 65353, 65356, 65361, 65363, 65365, 65613, 65615, 65631, 65635, 65651, 65653, 56565, 51515]); //#27148
        $_.dccurev1 = $a([51363, 51563, 51653, 53153, 53163, 53513, 53563, 53613, 53653, 56153, 56163, 56313, 56353, 56363, 56513, 56563, 51316, 51356, 51536, 51616, 53156, 53516, 53536, 53616, 53636, 53656, 56136, 56156, 56316, 56356, 56516, 56536]); //#27155
        $_.dcclrev1 = $a([61351, 61361, 61531, 61561, 61631, 61651, 63131, 63151, 63161, 63531, 63561, 63631, 65131, 65161, 65351, 65631, 31351, 31361, 31531, 31561, 31631, 31651, 35131, 35151, 35161, 35361, 35631, 35651, 36131, 36151, 36351, 36531]); //#27161
        $_.dccurev2 = $a([15316, 16316, 13516, 16516, 13616, 15616, 13136, 15136, 16136, 13536, 16536, 13636, 13156, 16156, 15356, 13656, 15313, 16313, 13513, 16513, 13613, 15613, 13153, 15153, 16153, 16353, 13653, 15653, 13163, 15163, 15363, 13563]); //#27167
        $_.dcclrev2 = $a([36315, 36515, 35615, 35135, 36135, 31535, 36535, 31635, 35635, 35165, 36165, 31365, 35365, 36365, 31565, 36565, 61315, 65315, 63515, 61615, 65135, 61535, 63535, 61635, 63635, 65635, 63165, 65165, 61365, 65365, 61565, 63565]); //#27173
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#27173
        bwipp_ultracode.__27174__ = 1; //#27173
        $_ = Object.getPrototypeOf($_); //#27173
    } //#27173
    $k[$j++] = 'dccu'; //#27176
    if ($_.rev == 1) { //#27176
        $k[$j++] = $_.dccurev1; //#27176
    } else { //#27176
        $k[$j++] = $_.dccurev2; //#27176
    } //#27176
    var _3j = $k[--$j]; //#27176
    $_[$k[--$j]] = _3j; //#27176
    $k[$j++] = 'dccl'; //#27177
    if ($_.rev == 1) { //#27177
        $k[$j++] = $_.dcclrev1; //#27177
    } else { //#27177
        $k[$j++] = $_.dcclrev2; //#27177
    } //#27177
    var _3o = $k[--$j]; //#27177
    $_[$k[--$j]] = _3o; //#27177
    $_.rows = $f(($_.rows * 6) + 1); //#27180
    $_.columns = $_.columns + 6; //#27181
    $k[$j++] = Infinity; //#27182
    for (var _3u = 0, _3v = $_.rows * $_.columns; _3u < _3v; _3u++) { //#27182
        $k[$j++] = -1; //#27182
    } //#27182
    $_.pixs = $a(); //#27182
    $_.qmv = function() {
        var _3y = $k[--$j]; //#27183
        var _3z = $k[--$j]; //#27183
        $k[$j++] = $f(_3z + (_3y * $_.columns)); //#27183
    }; //#27183
    for (var _42 = 0, _41 = $_.columns - 1; _42 <= _41; _42 += 1) { //#27192
        $_.i = _42; //#27185
        for (var _45 = 0, _44 = $f($_.rows - 1); _45 <= _44; _45 += 6) { //#27189
            $_.j = _45; //#27187
            if ($_.i >= 5) { //#27188
                $k[$j++] = $_.pixs; //#27188
                $k[$j++] = $_.i; //#27188
                $k[$j++] = $_.j; //#27188
                $_.qmv(); //#27188
                var _4B = $k[--$j]; //#27188
                $put($k[--$j], _4B, ($_.i % 2) * 9); //#27188
            } //#27188
        } //#27188
        $k[$j++] = $_.pixs; //#27190
        $k[$j++] = $_.i; //#27190
        $k[$j++] = 0; //#27190
        $_.qmv(); //#27190
        var _4F = $k[--$j]; //#27190
        $put($k[--$j], _4F, 9); //#27190
        $k[$j++] = $_.pixs; //#27191
        $k[$j++] = $_.i; //#27191
        $k[$j++] = $f($_.rows - 1); //#27191
        $_.qmv(); //#27191
        var _4K = $k[--$j]; //#27191
        $put($k[--$j], _4K, 9); //#27191
    } //#27191
    for (var _4O = 1, _4N = $f($_.rows - 2); _4O <= _4N; _4O += 1) { //#27205
        $_.i = _4O; //#27194
        for (var _4R = 3, _4Q = $_.columns - 1; _4R <= _4Q; _4R += 16) { //#27198
            $_.j = _4R; //#27196
            $k[$j++] = $_.pixs; //#27197
            $k[$j++] = $_.j; //#27197
            $k[$j++] = $_.i; //#27197
            $_.qmv(); //#27197
            var _4W = $k[--$j]; //#27197
            $put($k[--$j], _4W, (1 - ($_.i % 2)) * 9); //#27197
        } //#27197
        $k[$j++] = $_.pixs; //#27199
        $k[$j++] = 0; //#27199
        $k[$j++] = $_.i; //#27199
        $_.qmv(); //#27199
        var _4a = $k[--$j]; //#27199
        $put($k[--$j], _4a, 9); //#27199
        $k[$j++] = $_.pixs; //#27200
        $k[$j++] = 1; //#27200
        $k[$j++] = $_.i; //#27200
        $_.qmv(); //#27200
        var _4f = $k[--$j]; //#27200
        $put($k[--$j], _4f, (1 - ($_.i % 2)) * 9); //#27200
        $k[$j++] = $_.pixs; //#27201
        $k[$j++] = 2; //#27201
        $k[$j++] = $_.i; //#27201
        $_.qmv(); //#27201
        var _4j = $k[--$j]; //#27201
        $put($k[--$j], _4j, 0); //#27201
        $k[$j++] = $_.pixs; //#27202
        $k[$j++] = 3; //#27202
        $k[$j++] = $_.i; //#27202
        $_.qmv(); //#27202
        var _4n = $k[--$j]; //#27202
        $put($k[--$j], _4n, 9); //#27202
        $k[$j++] = $_.pixs; //#27203
        $k[$j++] = 4; //#27203
        $k[$j++] = $_.i; //#27203
        $_.qmv(); //#27203
        var _4r = $k[--$j]; //#27203
        $put($k[--$j], _4r, 0); //#27203
        $k[$j++] = $_.pixs; //#27204
        $k[$j++] = $_.columns - 1; //#27204
        $k[$j++] = $_.i; //#27204
        $_.qmv(); //#27204
        var _4w = $k[--$j]; //#27204
        $put($k[--$j], _4w, 9); //#27204
    } //#27204
    $_.i = (~~($_.rows / 2)) - 5; //#27208
    $k[$j++] = Infinity; //#27209
    var _53 = $cvrs($s(5), $get($_.dccu, $_.dcc), 10); //#27210
    for (var _54 = 0, _55 = _53.length; _54 < _55; _54++) { //#27210
        $k[$j++] = $get(_53, _54) - 48; //#27210
    } //#27210
    var _5B = $cvrs($s(5), $get($_.dccl, $_.dcc), 10); //#27212
    $k[$j++] = 0; //#27212
    for (var _5C = 0, _5D = _5B.length; _5C < _5D; _5C++) { //#27212
        $k[$j++] = $get(_5B, _5C) - 48; //#27212
    } //#27212
    var _5F = $a(); //#27212
    for (var _5G = 0, _5H = _5F.length; _5G < _5H; _5G++) { //#27216
        $k[$j++] = $get(_5F, _5G); //#27214
        $k[$j++] = $_.pixs; //#27214
        $k[$j++] = 2; //#27214
        $k[$j++] = $_.i; //#27214
        $_.qmv(); //#27214
        $r(3, -1); //#27214
        var _5L = $k[--$j]; //#27214
        var _5M = $k[--$j]; //#27214
        $put($k[--$j], _5M, _5L); //#27214
        $_.i = $_.i + 1; //#27215
    } //#27215
    $k[$j++] = Infinity; //#27219
    $k[$j++] = $_.start; //#27222
    $k[$j++] = $_.mcc; //#27222
    $aload($_.ecws); //#27222
    $k[$j++] = $_.tcc; //#27226
    $k[$j++] = 283; //#27226
    $k[$j++] = $_.acc; //#27226
    $aload($_.dcws); //#27226
    for (var _5W = 0, _5X = $_.pads; _5W < _5X; _5W++) { //#27227
        $k[$j++] = 284; //#27227
    } //#27227
    $k[$j++] = $_.qcc; //#27228
    $_.tileseq = $a(); //#27228
    $_.x = 5; //#27231
    $_.y = 1; //#27231
    var _5a = $_.tileseq; //#27232
    for (var _5b = 0, _5c = _5a.length; _5b < _5c; _5b++) { //#27245
        var _5h = $cvrs($s(5), $get($_.tiles, $get(_5a, _5b)), 10); //#27233
        for (var _5i = 0, _5j = _5h.length; _5i < _5j; _5i++) { //#27236
            $k[$j++] = $get(_5h, _5i); //#27234
            $k[$j++] = $_.pixs; //#27234
            $k[$j++] = $_.x; //#27234
            $k[$j++] = $_.y; //#27234
            $_.qmv(); //#27234
            $r(3, -1); //#27234
            var _5o = $k[--$j]; //#27234
            var _5p = $k[--$j]; //#27234
            $put($k[--$j], _5p, $f(_5o - 48)); //#27234
            $_.y = $_.y + 1; //#27235
        } //#27235
        if ($_.y != $f($_.rows - 1)) { //#27242
            $_.y = $_.y + 1; //#27238
        } else { //#27242
            $_.x = $_.x + 1; //#27240
            $_.y = 1; //#27240
            $k[$j++] = $_.pixs; //#27241
            $k[$j++] = $_.x; //#27241
            $k[$j++] = $_.y; //#27241
            $_.qmv(); //#27241
            var _5z = $k[--$j]; //#27241
            if ($get($k[--$j], _5z) != -1) { //#27243
                $_.x = $_.x + 1; //#27242
            } //#27242
        } //#27242
    } //#27242
    if (!bwipp_ultracode.__27256__) { //#27256
        $_ = Object.create($_); //#27256
        var _63 = new Map([
            [0, "FFFFFF"],
            [9, "000000"],
            [1, "00FFFF"],
            [3, "FF00FF"],
            [5, "FFFF00"],
            [6, "00FF00"]
        ]); //#27254
        $_.colormap = _63; //#27255
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_ultracode.$ctx[id] = $_[id]); //#27255
        bwipp_ultracode.__27256__ = 1; //#27255
        $_ = Object.getPrototypeOf($_); //#27255
    } //#27255
    var _6C = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.columns],
        ["pixy", $_.rows],
        ["height", ($_.rows / 72) * 2],
        ["width", ($_.columns / 72) * 2],
        ["colormap", $_.colormap],
        ["borderleft", 1],
        ["borderright", 1],
        ["bordertop", 1],
        ["borderbottom", 1],
        ["opt", $_.options]
    ]); //#27271
    $k[$j++] = _6C; //#27274
    if (!$_.dontdraw) { //#27274
        bwipp_renmatrix(); //#27274
    } //#27274
    $_ = Object.getPrototypeOf($_); //#27276
    $_ = Object.getPrototypeOf($_); //#27278
} //bwipp_ultracode
function bwipp_jabcode() {
    $_ = Object.create($_); //#27307
    $_.dontdraw = false; //#27310
    $_.rows = -1; //#27311
    $_.columns = -1; //#27312
    $_.slave = false; //#27313
    $_.colors = 16; //#27314
    $_.eclevel = 6; //#27315
    $_.raw = false; //#27316
    $_.parse = false; //#27317
    $_.parsefnc = false; //#27318
    $_.mask = -1; //#27319
    $k[$j++] = $_; //#27321
    bwipp_processoptions(); //#27321
    $_.options = $k[--$j]; //#27321
    $_.barcode = $k[--$j]; //#27322
    $_.databpm = ~~(Math.round(Math.log($_.colors) / Math.log(2))); //#27324
    var _3 = $_.colors; //#27325
    $k[$j++] = 'metabpm'; //#27325
    $k[$j++] = _3; //#27325
    if (_3 > 8) { //#27325
        $j--; //#27325
        $k[$j++] = 8; //#27325
    } //#27325
    var _4 = $k[--$j]; //#27325
    $_[$k[--$j]] = ~~(Math.round(Math.log(_4) / Math.log(2))); //#27325
    $_.fn1 = -1; //#27328
    var _9 = new Map([
        ["parse", $_.parse],
        ["parsefnc", $_.parsefnc],
        ["FNC1", $_.fn1]
    ]); //#27332
    $_.fncvals = _9; //#27333
    $k[$j++] = 'msg'; //#27334
    $k[$j++] = $_.barcode; //#27334
    $k[$j++] = $_.fncvals; //#27334
    bwipp_parseinput(); //#27334
    var _C = $k[--$j]; //#27334
    $_[$k[--$j]] = _C; //#27334
    $_.msglen = $_.msg.length; //#27335
    $_.addtobits = function() {
        var _F = $k[--$j]; //#27356
        $puti($_.bits, $_.j, _F); //#27356
        $_.j = _F.length + $_.j; //#27357
    }; //#27357
    $_.tofixedbits = function() {
        var _K = $strcpy($s(13), "0000000000000"); //#27361
        $k[$j++] = _K; //#27361
        $k[$j++] = _K; //#27361
        $r(4, -1); //#27361
        var _N = $cvrs($s(13), $k[--$j], 2); //#27361
        var _O = $k[--$j]; //#27362
        var _P = $k[--$j]; //#27362
        var _Q = $k[--$j]; //#27362
        $puti(_O, $f(_Q - _N.length), _N); //#27362
        $k[$j++] = $geti(_P, 0, _Q); //#27363
    }; //#27363
    var _T = ($_.msglen <= 15) ? 4 : 17; //#27367
    $_.bits = $s(((7 + _T) + ($_.msglen * 8)) + 12); //#27367
    $_.j = 0; //#27368
    $k[$j++] = 31; //#27369
    $k[$j++] = 5; //#27369
    $_.tofixedbits(); //#27369
    $_.addtobits(); //#27369
    $k[$j++] = "00"; //#27370
    $_.addtobits(); //#27370
    if ($_.msglen <= 15) { //#27375
        $k[$j++] = $_.msglen; //#27372
        $k[$j++] = 4; //#27372
        $_.tofixedbits(); //#27372
        $_.addtobits(); //#27372
    } else { //#27375
        $k[$j++] = "0000"; //#27374
        $_.addtobits(); //#27374
        $k[$j++] = $_.msglen - 16; //#27375
        $k[$j++] = 13; //#27375
        $_.tofixedbits(); //#27375
        $_.addtobits(); //#27375
    } //#27375
    for (var _b = 0, _a = $_.msglen - 1; _b <= _a; _b += 1) { //#27379
        $k[$j++] = $get($_.msg, _b); //#27378
        $k[$j++] = 8; //#27378
        $_.tofixedbits(); //#27378
        $_.addtobits(); //#27378
    } //#27378
    $k[$j++] = 28; //#27380
    $k[$j++] = 5; //#27380
    $_.tofixedbits(); //#27380
    $_.addtobits(); //#27380
    $k[$j++] = 31; //#27381
    $k[$j++] = 5; //#27381
    $_.tofixedbits(); //#27381
    $_.addtobits(); //#27381
    $k[$j++] = "11"; //#27382
    $_.addtobits(); //#27382
    $_.diffside = 21; //#27385
    $_.sameshape = false; //#27386
    $_.sameecc = false; //#27387
    $_.hasslaves = false; //#27388
    $_.metrics = function() {
        $_.mc = $k[--$j]; //#27392
        $_.mr = $k[--$j]; //#27392
        var _g = $_.mc; //#27393
        var _h = $_.mr; //#27393
        var _i = $_.mc; //#27394
        var _j = $_.mr; //#27394
        var _k = $_.colors; //#27396
        var _l = 64; //#27396
        if (64 > _k) { //#27396
            var _ = _k; //#27396
            _k = _l; //#27396
            _l = _; //#27396
        } //#27396
        var _n = $_.slave ? 7 : 17; //#27397
        $k[$j++] = _g * _h; //#27425
        $k[$j++] = ((((~~($f(_i - 25) / 16)) + 2) * ((~~($f(_j - 25) / 16)) + 2)) - 4) * 7; //#27425
        $k[$j++] = _l * 2; //#27425
        $k[$j++] = _n * 4; //#27425
        if (!$_.slave) { //#27424
            var _r = $eq($_.mr, $_.mc) ? 0 : 1; //#27401
            $_.metass = _r; //#27401
            var _s = $_.mr; //#27402
            var _t = $_.mc; //#27402
            if ($lt(_s, _t)) { //#27402
                var _ = _t; //#27402
                _t = _s; //#27402
                _s = _; //#27402
            } //#27402
            $_.metavf = $get($a([0, 1, 2, 2, 3, 3, 3, 3]), ~~($f(_s - 21) / 16)); //#27403
            $k[$j++] = 'metavlen'; //#27404
            if ($_.metass == 0) { //#27404
                $k[$j++] = $a([2, 2, 3, 4]); //#27404
            } else { //#27404
                $k[$j++] = $a([4, 6, 8, 10]); //#27404
            } //#27404
            var _11 = $get($k[--$j], $_.metavf); //#27404
            $_[$k[--$j]] = _11; //#27404
            $_.metaelen = $f(($_.metavf * 2) + 10); //#27405
            $k[$j++] = $f($f(7 + $_.metavlen) + $_.metaelen); //#27408
            if ($_.hasslaves) { //#27408
                var _17 = $k[--$j]; //#27408
                $k[$j++] = $f(_17 + 4); //#27408
            } //#27408
            var _1A = ~~(Math.ceil(($k[--$j] * 2) / $_.metabpm)); //#27411
            $_.nummetabits = $f((_1A * $_.metabpm) + 6); //#27411
            $k[$j++] = _1A + 6; //#27412
        } else { //#27424
            $k[$j++] = 3; //#27415
            if (!$_.sameshape) { //#27415
                var _1D = $k[--$j]; //#27415
                $k[$j++] = $f(_1D + 5); //#27415
            } //#27415
            if ($_.hasslaves) { //#27416
                var _1F = $k[--$j]; //#27416
                $k[$j++] = $f(_1F + 3); //#27416
            } //#27416
            if (!$_.sameecc) { //#27421
                var _1H = $_.mr; //#27418
                var _1I = $_.mc; //#27418
                if ($lt(_1H, _1I)) { //#27418
                    var _ = _1I; //#27418
                    _1I = _1H; //#27418
                    _1H = _; //#27418
                } //#27418
                var _1L = $k[--$j]; //#27420
                $k[$j++] = $f(_1L + $get($a([10, 12, 14, 14, 16, 16, 16, 16]), ~~($f(_1H - 21) / 16))); //#27420
            } //#27420
            var _1O = ~~(Math.ceil(($k[--$j] * 2) / $_.metabpm)); //#27424
            $_.nummetabits = _1O * $_.metabpm; //#27424
            $k[$j++] = _1O; //#27424
        } //#27424
        var _1Q = $k[--$j]; //#27427
        $_.nummetamodules = _1Q; //#27427
        var _1R = $k[--$j]; //#27428
        var _1S = $k[--$j]; //#27428
        var _1T = $k[--$j]; //#27428
        $_.numdatamodules = $f($k[--$j] - ($f(_1T + ($f(_1S + $f(_1R + _1Q)))))); //#27428
        $_.numdatabits = $_.numdatamodules * $_.databpm; //#27429
    }; //#27429
    $_.coderate = $get($a([0.67, 0.63, 0.57, 0.55, 0.5, 0.43, 0.34, 0.25, 0.2, 0.17, 0.14]), $_.eclevel); //#27433
    $_.grosslen = ~~Math.ceil($_.bits.length / $_.coderate); //#27434
    $_.snapsize = function() {
        var _1d = (~~Math.ceil($k[--$j])) - 18; //#27435
        $k[$j++] = _1d; //#27435
        if (_1d < 0) { //#27435
            $j--; //#27435
            $k[$j++] = 0; //#27435
        } //#27435
        var _1e = $k[--$j]; //#27435
        $k[$j++] = ((~~(_1e / 4)) * 4) + 21; //#27435
    }; //#27435
    if (($_.rows == -1) && ($_.columns == -1)) { //#27464
        $k[$j++] = 'size'; //#27438
        $k[$j++] = Math.sqrt($_.grosslen); //#27438
        $_.snapsize(); //#27438
        var _1i = $k[--$j]; //#27438
        $_[$k[--$j]] = _1i; //#27438
        for (;;) { //#27443
            $k[$j++] = $_.size; //#27440
            $k[$j++] = $_.size; //#27440
            $_.metrics(); //#27440
            if ($_.grosslen <= $_.numdatabits) { //#27441
                break; //#27441
            } //#27441
            $_.size = $f($_.size + 4); //#27442
        } //#27442
        $_.rows = $_.size; //#27444
        $_.columns = $_.size; //#27445
    } else { //#27464
        if (($_.columns == -1) && ($_.rows != -1)) { //#27454
            $k[$j++] = 'columns'; //#27448
            $k[$j++] = $_.grosslen / $_.rows; //#27448
            $_.snapsize(); //#27448
            var _1v = $k[--$j]; //#27448
            $_[$k[--$j]] = _1v; //#27448
            for (;;) { //#27453
                $k[$j++] = $_.rows; //#27450
                $k[$j++] = $_.columns; //#27450
                $_.metrics(); //#27450
                if ($_.grosslen <= $_.numdatabits) { //#27451
                    break; //#27451
                } //#27451
                $_.columns = $f($_.columns + 4); //#27452
            } //#27452
        } //#27452
        if (($_.rows == -1) && ($_.columns != -1)) { //#27462
            $k[$j++] = 'rows'; //#27456
            $k[$j++] = $_.grosslen / $_.columns; //#27456
            $_.snapsize(); //#27456
            var _26 = $k[--$j]; //#27456
            $_[$k[--$j]] = _26; //#27456
            for (;;) { //#27461
                $k[$j++] = $_.rows; //#27458
                $k[$j++] = $_.columns; //#27458
                $_.metrics(); //#27458
                if ($_.grosslen <= $_.numdatabits) { //#27459
                    break; //#27459
                } //#27459
                $_.rows = $f($_.rows + 4); //#27460
            } //#27460
        } //#27460
        if (($_.rows != -1) && ($_.columns != -1)) { //#27465
            $k[$j++] = $_.rows; //#27464
            $k[$j++] = $_.columns; //#27464
            $_.metrics(); //#27464
        } //#27464
    } //#27464
    $_.C = $_.numdatabits; //#27467
    $_.cols = $_.columns; //#27468
    if (($_.rows > 145) || ($_.cols > 145)) { //#27473
        $k[$j++] = 'bwipp.jabcodeNoValidSymbol#27472'; //#27472
        $k[$j++] = "Maximum length exceeded or invalid content"; //#27472
        bwipp_raiseerror(); //#27472
    } //#27472
    $_.min = $_.C; //#27476
    for (var _2M = 3; _2M <= 8; _2M += 1) { //#27488
        $_.i = _2M; //#27478
        for (var _2O = $_.i + 1; _2O <= 9; _2O += 1) { //#27487
            $_.j = _2O; //#27480
            $_.dist = (((~~($_.C / $_.j)) * $_.j) - ((~~($_.C / $_.j)) * $_.i)) - $_.bits.length; //#27481
            if (($_.dist < $_.min) && ($_.dist >= 0)) { //#27486
                $_.datawc = $_.i; //#27483
                $_.datawr = $_.j; //#27484
                $_.min = $_.dist; //#27485
            } //#27485
        } //#27485
    } //#27485
    $_.tmpbits = $s(((~~($_.C / $_.datawr)) * $_.datawr) - ((~~($_.C / $_.datawr)) * $_.datawc)); //#27491
    $puti($_.tmpbits, 0, $_.bits); //#27492
    for (var _2o = $_.bits.length, _2n = $_.tmpbits.length - 1; _2o <= _2n; _2o += 1) { //#27496
        var _2q = $get($_.tmpbits, _2o - 1); //#27494
        $k[$j++] = _2o; //#27494
        $k[$j++] = _2q; //#27494
        if ((_2q % 2) == 0) { //#27494
            var _2r = $k[--$j]; //#27494
            $k[$j++] = $f(_2r + 1); //#27494
        } else { //#27494
            var _2s = $k[--$j]; //#27494
            $k[$j++] = $f(_2s - 1); //#27494
        } //#27494
        $k[$j++] = $_.tmpbits; //#27495
        $r(3, 1); //#27495
        var _2u = $k[--$j]; //#27495
        var _2v = $k[--$j]; //#27495
        $put($k[--$j], _2v, _2u); //#27495
    } //#27495
    $_.bits = $_.tmpbits; //#27497
    $_.m0 = 22609 + 1; //#27501
    $_.m1 = 62509 - 65536; //#27501
    $_.m2 = 19605; //#27501
    $_.m3 = 32557; //#27501
    $_.lcg64_temper = function() {
        $_.p00 = $_.m0 * $_.s0; //#27507
        $_.p01 = $_.m0 * $_.s1; //#27507
        $_.p02 = $_.m0 * $_.s2; //#27507
        $_.p03 = $_.m0 * $_.s3; //#27507
        $_.p10 = $_.m1 * $_.s0; //#27508
        $_.p11 = $_.m1 * $_.s1; //#27508
        $_.p12 = $_.m1 * $_.s2; //#27508
        $_.p13 = $_.m1 * $_.s3; //#27508
        $_.p20 = $_.m2 * $_.s0; //#27509
        $_.p21 = $_.m2 * $_.s1; //#27509
        $_.p22 = $_.m2 * $_.s2; //#27509
        $_.p23 = $_.m2 * $_.s3; //#27509
        $_.p30 = $_.m3 * $_.s0; //#27510
        $_.p31 = $_.m3 * $_.s1; //#27510
        $_.p32 = $_.m3 * $_.s2; //#27510
        $_.p33 = $_.m3 * $_.s3; //#27510
        $_.s3 = ($_.p33 % 65536) + 1; //#27512
        $_.s2 = (($_.p32 % 65536) + (~~($_.p33 / 65536))) + ($_.p23 % 65536); //#27514
        $_.s1 = ((($_.p31 % 65536) + (~~($_.p32 / 65536))) + (($_.p22 % 65536) + (~~($_.p23 / 65536)))) + ($_.p13 % 65536); //#27517
        $_.s0 = (((($_.p30 % 65536) + (~~($_.p31 / 65536))) + (($_.p21 % 65536) + (~~($_.p22 / 65536)))) + (($_.p12 % 65536) + (~~($_.p13 / 65536)))) + ($_.p03 % 65536); //#27521
        $_.s3 = $_.s3 + 65536; //#27524
        $_.s2 = $_.s2 + 65535; //#27525
        $_.s1 = $_.s1 + 65535; //#27526
        $_.s0 = $_.s0 + 65535; //#27527
        $_.s2 = (~~($_.s3 / 65536)) + $_.s2; //#27530
        $_.s3 = $_.s3 % 65536; //#27530
        $_.s1 = (~~($_.s2 / 65536)) + $_.s1; //#27531
        $_.s2 = $_.s2 % 65536; //#27531
        $_.s0 = (~~($_.s1 / 65536)) + $_.s0; //#27532
        $_.s1 = $_.s1 % 65536; //#27532
        $_.s0 = $_.s0 % 65536; //#27533
        var _40 = (((($_.s0 - 32768) * 65536) + $_.s1) ^ 2147483648) & 4294967295; //#27538
        var _41 = _40 ^ (_40 >>> 11); //#27539
        var _42 = _41 ^ ((_41 << 7) & -1658038656); //#27540
        var _43 = (_42 ^ ((_42 << 15) & -272236544)) & 4294967295; //#27542
        $k[$j++] = _43 ^ (_43 >>> 18); //#27542
    }; //#27542
    $_.createMatrixA = function() {
        $k[$j++] = 'nb_pcb'; //#27548
        if ($_.wr < 4) { //#27548
            $k[$j++] = ~~($_.Pg_sub_block / 2); //#27548
        } else { //#27548
            $k[$j++] = (~~($_.Pg_sub_block / $_.wr)) * $_.wc; //#27548
        } //#27548
        var _49 = $k[--$j]; //#27548
        $_[$k[--$j]] = _49; //#27548
        $_.offset = ~~Math.ceil($_.Pg_sub_block / 32); //#27549
        $_.effwidth = $_.offset * 32; //#27550
        $_.matrixA = $a($_.offset * $_.nb_pcb); //#27551
        for (var _4J = 0, _4I = ($_.offset * $_.nb_pcb) - 1; _4J <= _4I; _4J += 1) { //#27552
            $put($_.matrixA, _4J, 0); //#27552
        } //#27552
        $_.permutation = $a($_.Pg_sub_block); //#27553
        for (var _4P = 0, _4O = $_.Pg_sub_block - 1; _4P <= _4O; _4P += 1) { //#27554
            $put($_.permutation, _4P, _4P); //#27554
        } //#27554
        for (var _4U = 0, _4T = (~~($_.Pg_sub_block / $_.wr)) - 1; _4U <= _4T; _4U += 1) { //#27563
            $_.i = _4U; //#27557
            for (var _4X = 0, _4W = $f($_.wr - 1); _4X <= _4W; _4X += 1) { //#27562
                $_.j = _4X; //#27559
                var _4Y = $_.matrixA; //#27560
                var _4Z = $_.i; //#27560
                var _4a = $_.effwidth; //#27560
                var _4b = $_.wr; //#27560
                var _4c = $_.j; //#27560
                var _4i = $f(31 - (($f(($_.i * $f($_.effwidth + $_.wr)) + $_.j)) % 32)); //#27561
                $put(_4Y, ~~(($f((_4Z * $f(_4a + _4b)) + _4c)) / 32), $get(_4Y, ~~(($f((_4Z * $f(_4a + _4b)) + _4c)) / 32)) | ((_4i < 0 ? 1 >>> -_4i : 1 << _4i))); //#27561
            } //#27561
        } //#27561
        $_.s0 = 0; //#27566
        $_.s1 = 0; //#27566
        $_.s2 = 11; //#27566
        $_.s3 = 64569; //#27566
        for (var _4l = 1, _4k = $f($_.wc - 1); _4l <= _4k; _4l += 1) { //#27589
            $_.i = _4l; //#27568
            $_.off_index = (~~($_.Pg_sub_block / $_.wr)) * $_.i; //#27569
            for (var _4r = 0, _4q = $_.Pg_sub_block - 1; _4r <= _4q; _4r += 1) { //#27588
                $_.j = _4r; //#27571
                $_.lcg64_temper(); //#27572
                var _4s = $k[--$j]; //#27573
                $k[$j++] = _4s; //#27573
                if (_4s < 0) { //#27573
                    var _4t = $k[--$j]; //#27573
                    $k[$j++] = $f((_4t ^ 2147483648) + 2147483648); //#27573
                } //#27573
                $_.pos = ~~(($k[--$j] / 4294967296) * ($_.Pg_sub_block - $_.j)); //#27575
                for (var _50 = 0, _4z = (~~($_.Pg_sub_block / $_.wr)) - 1; _50 <= _4z; _50 += 1) { //#27584
                    $_.k = _50; //#27577
                    var _51 = $_.matrixA; //#27578
                    var _52 = $_.off_index; //#27578
                    var _53 = $_.k; //#27578
                    var _54 = $_.offset; //#27578
                    var _55 = $_.j; //#27578
                    var _5D = $get($_.matrixA, (~~($get($_.permutation, $_.pos) / 32)) + ($_.k * $_.offset)); //#27580
                    var _5H = -($f(31 - ($get($_.permutation, $_.pos) % 32))); //#27581
                    var _5J = 31 - ($_.j % 32); //#27582
                    $put(_51, ((_52 + _53) * _54) + (~~(_55 / 32)), $get(_51, ((_52 + _53) * _54) + (~~(_55 / 32))) | ((_5J < 0 ? (((_5H < 0 ? _5D >>> -_5H : _5D << _5H)) & 1) >>> -_5J : (((_5H < 0 ? _5D >>> -_5H : _5D << _5H)) & 1) << _5J))); //#27583
                } //#27583
                var _5M = $_.permutation; //#27585
                var _5N = $_.Pg_sub_block; //#27585
                var _5O = $_.j; //#27585
                $put(_5M, (_5N - 1) - _5O, $get($_.permutation, $_.pos)); //#27587
                $put($_.permutation, $_.pos, $get(_5M, (_5N - 1) - _5O)); //#27587
            } //#27587
        } //#27587
    }; //#27587
    $_.createMetadataMatrixA = function() {
        $_.nb_pcb = ~~($_.Pg_sub_block / 2); //#27595
        $_.offset = ~~Math.ceil($_.Pg_sub_block / 32); //#27596
        $_.matrixA = $a($_.offset * $_.nb_pcb); //#27597
        for (var _5b = 0, _5a = ($_.offset * $_.nb_pcb) - 1; _5b <= _5a; _5b += 1) { //#27598
            $put($_.matrixA, _5b, 0); //#27598
        } //#27598
        $_.permutation = $a($_.Pg_sub_block); //#27599
        for (var _5h = 0, _5g = $_.Pg_sub_block - 1; _5h <= _5g; _5h += 1) { //#27600
            $put($_.permutation, _5h, _5h); //#27600
        } //#27600
        $_.s0 = 0; //#27603
        $_.s1 = 0; //#27603
        $_.s2 = 0; //#27603
        $_.s3 = 38545; //#27603
        $_.nb_once = ~~((~~($f((($_.nb_pcb / $_.wc) * $_.Pg_sub_block) + 3))) / $_.nb_pcb); //#27604
        for (var _5p = 0, _5o = $_.nb_pcb - 1; _5p <= _5o; _5p += 1) { //#27619
            $_.i = _5p; //#27606
            for (var _5s = 0, _5r = $_.nb_once - 1; _5s <= _5r; _5s += 1) { //#27618
                $_.j = _5s; //#27608
                $_.lcg64_temper(); //#27609
                var _5t = $k[--$j]; //#27610
                $k[$j++] = _5t; //#27610
                if (_5t < 0) { //#27610
                    var _5u = $k[--$j]; //#27610
                    $k[$j++] = $f((_5u ^ 2147483648) + 2147483648); //#27610
                } //#27610
                $_.pos = ~~(($k[--$j] / 4294967296) * ($_.Pg_sub_block - $_.j)); //#27612
                var _5y = $_.matrixA; //#27613
                var _5z = $_.i; //#27613
                var _60 = $_.offset; //#27613
                var _63 = $get($_.permutation, $_.pos); //#27613
                var _68 = $f(31 - ($get($_.permutation, $_.pos) % 32)); //#27614
                $put(_5y, (_5z * _60) + (~~(_63 / 32)), $get(_5y, (_5z * _60) + (~~(_63 / 32))) | ((_68 < 0 ? 1 >>> -_68 : 1 << _68))); //#27614
                var _6B = $_.permutation; //#27615
                var _6C = $_.Pg_sub_block; //#27615
                var _6D = $_.j; //#27615
                $put(_6B, (_6C - 1) - _6D, $get($_.permutation, $_.pos)); //#27617
                $put($_.permutation, $_.pos, $get(_6B, (_6C - 1) - _6D)); //#27617
            } //#27617
        } //#27617
    }; //#27617
    $_.GaussJordan = function() {
        $k[$j++] = 'nb_pcb'; //#27625
        if ($_.wr < 4) { //#27625
            $k[$j++] = ~~($_.Pg_sub_block / 2); //#27625
        } else { //#27625
            $k[$j++] = (~~($_.Pg_sub_block / $_.wr)) * $_.wc; //#27625
        } //#27625
        var _6N = $k[--$j]; //#27625
        $_[$k[--$j]] = _6N; //#27625
        $_.offset = ~~Math.ceil($_.Pg_sub_block / 32); //#27626
        var _6Q = $_.matrixA; //#27627
        $_.matrixH = $arrcpy($a(_6Q.length), _6Q); //#27627
        $k[$j++] = Infinity; //#27628
        for (var _6U = 0, _6V = $_.Pg_sub_block; _6U < _6V; _6U++) { //#27628
            $k[$j++] = 0; //#27628
        } //#27628
        $_.column_arrangement = $a(); //#27628
        $k[$j++] = Infinity; //#27629
        for (var _6Y = 0, _6Z = $_.Pg_sub_block; _6Y < _6Z; _6Y++) { //#27629
            $k[$j++] = false; //#27629
        } //#27629
        $_.processed_column = $a(); //#27629
        $k[$j++] = Infinity; //#27630
        for (var _6c = 0, _6d = $_.nb_pcb; _6c < _6d; _6c++) { //#27630
            $k[$j++] = 0; //#27630
        } //#27630
        $_.zero_lines_nb = $a(); //#27630
        $k[$j++] = Infinity; //#27631
        for (var _6g = 0, _6h = $_.Pg_sub_block * 2; _6g < _6h; _6g++) { //#27631
            $k[$j++] = 0; //#27631
        } //#27631
        $_.swap_col = $a(); //#27631
        $_.zero_lines = 0; //#27632
        $_.loop0 = 0; //#27634
        for (var _6l = 0, _6k = $_.nb_pcb - 1; _6l <= _6k; _6l += 1) { //#27672
            $_.i = _6l; //#27636
            $_.pivot_column = $_.Pg_sub_block + 1; //#27637
            for (var _6p = 0, _6o = $_.Pg_sub_block - 1; _6p <= _6o; _6p += 1) { //#27645
                $_.j = _6p; //#27639
                var _6u = $get($_.matrixH, ~~(((($_.offset * 32) * $_.i) + $_.j) / 32)); //#27640
                var _6y = -(31 - (((($_.offset * 32) * $_.i) + $_.j) % 32)); //#27641
                if ((((_6y < 0 ? _6u >>> -_6y : _6u << _6y)) & 1) == 1) { //#27644
                    $_.pivot_column = $_.j; //#27642
                    break; //#27643
                } //#27643
            } //#27643
            if ($_.pivot_column < $_.Pg_sub_block) { //#27670
                $put($_.processed_column, $_.pivot_column, true); //#27647
                $put($_.column_arrangement, $_.pivot_column, $_.i); //#27648
                if ($_.pivot_column >= $_.nb_pcb) { //#27652
                    $put($_.swap_col, $_.loop0 * 2, $_.pivot_column); //#27650
                    $_.loop0 = $_.loop0 + 1; //#27651
                } //#27651
                $_.off_index = ~~($_.pivot_column / 32); //#27653
                $_.off_index1 = $_.pivot_column % 32; //#27654
                for (var _7H = 0, _7G = $_.nb_pcb - 1; _7H <= _7G; _7H += 1) { //#27667
                    $_.j = _7H; //#27656
                    if ($_.i != $_.j) { //#27666
                        var _7O = $get($_.matrixH, $_.off_index + ($_.j * $_.offset)); //#27658
                        var _7Q = -(31 - $_.off_index1); //#27659
                        if ((((_7Q < 0 ? _7O >>> -_7Q : _7O << _7Q)) & 1) == 1) { //#27665
                            for (var _7T = 0, _7S = $_.offset - 1; _7T <= _7S; _7T += 1) { //#27664
                                $_.k = _7T; //#27661
                                var _7U = $_.matrixH; //#27662
                                var _7V = $_.offset; //#27662
                                var _7W = $_.j; //#27662
                                var _7X = $_.k; //#27662
                                $put(_7U, (_7V * _7W) + _7X, $xo($get(_7U, (_7V * _7W) + _7X), $get($_.matrixH, ($_.offset * $_.i) + $_.k))); //#27663
                            } //#27663
                        } //#27663
                    } //#27663
                } //#27663
            } else { //#27670
                $put($_.zero_lines_nb, $_.zero_lines, $_.i); //#27669
                $_.zero_lines = $_.zero_lines + 1; //#27670
            } //#27670
        } //#27670
        $_.matrix_rank = $_.nb_pcb - $_.zero_lines; //#27674
        $_.loop2 = 0; //#27675
        for (var _7n = $_.matrix_rank, _7m = $_.nb_pcb - 1; _7n <= _7m; _7n += 1) { //#27695
            $_.i = _7n; //#27677
            if ($get($_.column_arrangement, $_.i) > 0) { //#27694
                for (var _7t = 0, _7s = $_.nb_pcb - 1; _7t <= _7s; _7t += 1) { //#27693
                    $_.j = _7t; //#27680
                    if ($nt($get($_.processed_column, $_.j))) { //#27692
                        $put($_.column_arrangement, $_.j, $get($_.column_arrangement, $_.i)); //#27682
                        $put($_.column_arrangement, $_.i, 0); //#27683
                        $put($_.processed_column, $_.j, true); //#27684
                        $put($_.processed_column, $_.i, false); //#27685
                        $put($_.swap_col, $_.loop0 * 2, $_.i); //#27686
                        $put($_.swap_col, ($_.loop0 * 2) + 1, $_.j); //#27687
                        $put($_.column_arrangement, $_.i, $_.j); //#27688
                        $_.loop0 = $_.loop0 + 1; //#27689
                        $_.loop2 = $_.loop2 + 1; //#27690
                        break; //#27691
                    } //#27691
                } //#27691
            } //#27691
        } //#27691
        $_.loop1 = 0; //#27697
        for (var _8L = 0, _8K = $_.nb_pcb - 1; _8L <= _8K; _8L += 1) { //#27706
            $_.kl = _8L; //#27699
            if ($nt($get($_.processed_column, $_.kl)) && ($_.loop1 < ($_.loop0 - $_.loop2))) { //#27705
                $put($_.column_arrangement, $_.kl, $get($_.column_arrangement, $get($_.swap_col, $_.loop1 * 2))); //#27701
                $put($_.processed_column, $_.kl, true); //#27702
                $put($_.swap_col, ($_.loop1 * 2) + 1, $_.kl); //#27703
                $_.loop1 = $_.loop1 + 1; //#27704
            } //#27704
        } //#27704
        $_.loop1 = 0; //#27708
        for (var _8h = 0, _8g = $_.nb_pcb - 1; _8h <= _8g; _8h += 1) { //#27715
            $_.kl = _8h; //#27710
            if ($nt($get($_.processed_column, $_.kl))) { //#27714
                $put($_.column_arrangement, $_.kl, $get($_.zero_lines_nb, $_.loop1)); //#27712
                $_.loop1 = $_.loop1 + 1; //#27713
            } //#27713
        } //#27713
        for (var _8t = 0, _8s = $_.nb_pcb - 1; _8t <= _8s; _8t += 1) { //#27724
            $_.i = _8t; //#27718
            for (var _8w = 0, _8v = $_.offset - 1; _8w <= _8v; _8w += 1) { //#27723
                $_.j = _8w; //#27720
                $put($_.matrixA, ($_.i * $_.offset) + $_.j, $get($_.matrixH, $f(($get($_.column_arrangement, $_.i) * $_.offset) + $_.j))); //#27722
            } //#27722
        } //#27722
        $_.tmp = 0; //#27726
        for (var _9A = 0, _99 = $_.loop0 - 1; _9A <= _99; _9A += 1) { //#27748
            $_.i = _9A; //#27728
            for (var _9D = 0, _9C = $_.nb_pcb - 1; _9D <= _9C; _9D += 1) { //#27747
                $_.j = _9D; //#27730
                var _9K = $get($_.matrixA, (~~($get($_.swap_col, $_.i * 2) / 32)) + ($_.j * $_.offset)); //#27731
                var _9O = -($f(31 - ($get($_.swap_col, $_.i * 2) % 32))); //#27732
                $_.tmp = (((-(((_9O < 0 ? _9K >>> -_9O : _9K << _9O)) & 1)) ^ $_.tmp) & 1) ^ $_.tmp; //#27733
                var _9R = $_.matrixA; //#27734
                var _9U = $get($_.swap_col, $_.i * 2); //#27734
                var _9V = $_.j; //#27734
                var _9W = $_.offset; //#27734
                var _9e = $get($_.matrixA, (~~($get($_.swap_col, ($_.i * 2) + 1) / 32)) + ($_.j * $_.offset)); //#27736
                var _9i = -($f(31 - ($get($_.swap_col, ($_.i * 2) + 1) % 32))); //#27737
                var _9t = $f(31 - ($get($_.swap_col, $_.i * 2) % 32)); //#27739
                $put(_9R, (~~(_9U / 32)) + (_9V * _9W), $get(_9R, (~~(_9U / 32)) + (_9V * _9W)) ^ (((-(((_9i < 0 ? _9e >>> -_9i : _9e << _9i)) & 1)) ^ $get($_.matrixA, (~~($get($_.swap_col, $_.i * 2) / 32)) + ($_.j * $_.offset))) & ((_9t < 0 ? 1 >>> -_9t : 1 << _9t)))); //#27740
                var _9u = $_.matrixA; //#27741
                var _9x = $get($_.swap_col, ($_.i * 2) + 1); //#27741
                var _9y = $_.j; //#27741
                var _9z = $_.offset; //#27741
                var _AC = $f(31 - ($get($_.swap_col, ($_.i * 2) + 1) % 32)); //#27745
                $put(_9u, (~~(_9x / 32)) + (_9y * _9z), $get(_9u, (~~(_9x / 32)) + (_9y * _9z)) ^ (((-($_.tmp & 1)) ^ $get($_.matrixA, (~~($get($_.swap_col, ($_.i * 2) + 1) / 32)) + ($_.j * $_.offset))) & ((_AC < 0 ? 1 >>> -_AC : 1 << _AC)))); //#27746
            } //#27746
        } //#27746
    }; //#27746
    $_.createGeneratorMatrix = function() {
        $_.pn = $_.Pg_sub_block - $_.matrix_rank; //#27754
        $_.offset = ~~Math.ceil($_.pn / 32); //#27755
        $_.effwidth = $_.offset * 32; //#27756
        $_.offset_cap = ~~Math.ceil($_.Pg_sub_block / 32); //#27757
        $_.G = $a($_.offset * $_.Pg_sub_block); //#27758
        for (var _AO = 0, _AN = ($_.offset * $_.Pg_sub_block) - 1; _AO <= _AN; _AO += 1) { //#27761
            $put($_.G, _AO, 0); //#27760
        } //#27760
        for (var _AS = 0, _AR = $_.pn - 1; _AS <= _AR; _AS += 1) { //#27766
            $_.i = _AS; //#27763
            var _AT = $_.G; //#27764
            var _AU = $_.Pg_sub_block; //#27764
            var _AV = $_.pn; //#27764
            var _AW = $_.i; //#27764
            var _AX = $_.offset; //#27764
            var _AY = $_.i; //#27764
            var _Ab = 31 - ($_.i % 32); //#27765
            $put(_AT, (((_AU - _AV) + _AW) * _AX) + (~~(_AY / 32)), $get(_AT, (((_AU - _AV) + _AW) * _AX) + (~~(_AY / 32))) | ((_Ab < 0 ? 1 >>> -_Ab : 1 << _Ab))); //#27765
        } //#27765
        $_.matrix_index = $_.Pg_sub_block - $_.pn; //#27767
        $_.loop0 = 0; //#27768
        for (var _Ai = 0, _Ah = (($_.Pg_sub_block - $_.pn) * $_.effwidth) - 1; _Ai <= _Ah; _Ai += 1) { //#27785
            $_.i = _Ai; //#27770
            if ($_.matrix_index >= $_.Pg_sub_block) { //#27774
                $_.loop0 = $_.loop0 + 1; //#27772
                $_.matrix_index = $_.Pg_sub_block - $_.pn; //#27773
            } //#27773
            if (($_.i % $_.effwidth) < $_.pn) { //#27784
                var _Ar = $_.G; //#27776
                var _As = $_.i; //#27776
                var _Ay = $get($_.matrixA, (~~($_.matrix_index / 32)) + ($_.offset_cap * $_.loop0)); //#27778
                var _B0 = -(31 - ($_.matrix_index % 32)); //#27779
                var _B5 = 31 - ($_.i % 32); //#27781
                $put(_Ar, ~~(_As / 32), $get(_Ar, ~~(_As / 32)) ^ (((-(((_B0 < 0 ? _Ay >>> -_B0 : _Ay << _B0)) & 1)) ^ $get($_.G, ~~($_.i / 32))) & ((_B5 < 0 ? 1 >>> -_B5 : 1 << _B5)))); //#27782
                $_.matrix_index = $_.matrix_index + 1; //#27783
            } //#27783
        } //#27783
    }; //#27783
    $_.ldpc = function() {
        $_.wr = $k[--$j]; //#27791
        $_.wc = $k[--$j]; //#27792
        $k[$j++] = Infinity; //#27793
        var _B9 = $k[--$j]; //#27793
        var _BA = $k[--$j]; //#27793
        $k[$j++] = _B9; //#27793
        $forall(_BA, function() { //#27793
            var _BB = $k[--$j]; //#27793
            $k[$j++] = $f(_BB - 48); //#27793
        }); //#27793
        $_.data = $a(); //#27793
        $_.Pn = $_.data.length; //#27795
        if ($_.wr != -1) { //#27810
            $_.Pg = ~~((Math.ceil((Math.ceil(($_.Pn * $_.wr) / $f($_.wr - $_.wc))) / $_.wr)) * $_.wr); //#27797
            $_.nb_sub_blocks = (~~($_.Pg / 2700)) + 1; //#27798
            $_.Pg_sub_block = (~~((~~($_.Pg / $_.nb_sub_blocks)) / $_.wr)) * $_.wr; //#27799
            $_.Pn_sub_block = ~~(($_.Pg_sub_block * $f($_.wr - $_.wc)) / $_.wr); //#27800
            $_.nb_sub_blocks = ~~($_.Pg / $_.Pg_sub_block); //#27801
            $k[$j++] = 'encoding_iterations'; //#27802
            $k[$j++] = ~~($_.Pg / $_.Pg_sub_block); //#27802
            if (($_.Pn_sub_block * $_.nb_sub_blocks) < $_.Pn) { //#27802
                var _Bb = $k[--$j]; //#27802
                $k[$j++] = $f(_Bb - 1); //#27802
            } //#27802
            var _Bc = $k[--$j]; //#27802
            $_[$k[--$j]] = _Bc; //#27802
            $_.createMatrixA(); //#27803
        } else { //#27810
            $_.Pg = $_.Pn * 2; //#27805
            $_.nb_sub_blocks = 1; //#27806
            $_.Pg_sub_block = $_.Pg; //#27807
            $_.Pn_sub_block = $_.Pn; //#27808
            $_.encoding_iterations = 1; //#27809
            $_.createMetadataMatrixA(); //#27810
        } //#27810
        $_.GaussJordan(); //#27812
        $_.createGeneratorMatrix(); //#27813
        $_.ecc_encoded_data = $a($_.Pg); //#27815
        $_.offset = ~~(Math.ceil(($_.Pg_sub_block - $_.matrix_rank) / 32)); //#27817
        for (var _Bn = 0, _Bm = $_.encoding_iterations - 1; _Bn <= _Bm; _Bn += 1) { //#27833
            $_.iter = _Bn; //#27819
            for (var _Bq = 0, _Bp = $_.Pg_sub_block - 1; _Bq <= _Bp; _Bq += 1) { //#27832
                $_.i = _Bq; //#27821
                $_.temp = 0; //#27822
                $_.loop0 = 0; //#27823
                $_.offset_index = $_.offset * $_.i; //#27824
                for (var _By = $_.iter * $_.Pn_sub_block, _Bx = (($_.iter + 1) * $_.Pn_sub_block) - 1; _By <= _Bx; _By += 1) { //#27830
                    var _C4 = $get($_.G, $_.offset_index + (~~($_.loop0 / 32))); //#27827
                    var _C6 = -(31 - ($_.loop0 % 32)); //#27827
                    $_.temp = ($get($_.data, _By) & (((_C6 < 0 ? _C4 >>> -_C6 : _C4 << _C6)) & 1)) ^ $_.temp; //#27828
                    $_.loop0 = $_.loop0 + 1; //#27829
                } //#27829
                $put($_.ecc_encoded_data, $_.i + ($_.iter * $_.Pg_sub_block), $_.temp); //#27831
            } //#27831
        } //#27831
        if ($_.encoding_iterations != $_.nb_sub_blocks) { //#27857
            $_.start = $_.encoding_iterations * $_.Pn_sub_block; //#27836
            $_.last_index = $_.encoding_iterations * $_.Pg_sub_block; //#27837
            $_.Pg_sub_block = $_.Pg - ($_.encoding_iterations * $_.Pg_sub_block); //#27838
            $_.Pn_sub_block = ~~(($_.Pg_sub_block * $f($_.wr - $_.wc)) / $_.wr); //#27839
            $_.createMatrixA(); //#27840
            $_.GaussJordan(); //#27841
            $_.createGeneratorMatrix(); //#27842
            $_.offset = ~~(Math.ceil(($_.Pg_sub_block - $_.matrix_rank) / 32)); //#27843
            for (var _CV = 0, _CU = $_.Pg_sub_block - 1; _CV <= _CU; _CV += 1) { //#27856
                $_.i = _CV; //#27845
                $_.temp = 0; //#27846
                $_.loop0 = 0; //#27847
                $_.offset_index = $_.offset * $_.i; //#27848
                for (var _Cb = $_.start, _Ca = $_.Pn - 1; _Cb <= _Ca; _Cb += 1) { //#27854
                    var _Ch = $get($_.G, $_.offset_index + (~~($_.loop0 / 32))); //#27851
                    var _Cj = -(31 - ($_.loop0 % 32)); //#27851
                    $_.temp = ($get($_.data, _Cb) & (((_Cj < 0 ? _Ch >>> -_Cj : _Ch << _Cj)) & 1)) ^ $_.temp; //#27852
                    $_.loop0 = $_.loop0 + 1; //#27853
                } //#27853
                $put($_.ecc_encoded_data, $_.i + $_.last_index, $_.temp); //#27855
            } //#27855
        } //#27855
        $_.out = $s($_.Pg); //#27859
        for (var _Cu = 0, _Ct = $_.Pg - 1; _Cu <= _Ct; _Cu += 1) { //#27863
            $put($_.out, _Cu, $f($get($_.ecc_encoded_data, _Cu) + 48)); //#27862
        } //#27862
        $k[$j++] = $_.out; //#27864
    }; //#27864
    $k[$j++] = 'bits'; //#27869
    $k[$j++] = $_.bits; //#27869
    $k[$j++] = $_.datawc; //#27869
    $k[$j++] = $_.datawr; //#27869
    $_.ldpc(); //#27869
    var _D2 = $k[--$j]; //#27869
    $_[$k[--$j]] = _D2; //#27869
    $_.s0 = 0; //#27872
    $_.s1 = 0; //#27872
    $_.s2 = 3; //#27872
    $_.s3 = 30151; //#27872
    for (var _D5 = $_.bits.length - 1; _D5 >= 1; _D5 -= 1) { //#27882
        $_.l = _D5; //#27874
        $_.lcg64_temper(); //#27875
        var _D6 = $k[--$j]; //#27876
        $k[$j++] = _D6; //#27876
        if (_D6 < 0) { //#27876
            var _D7 = $k[--$j]; //#27876
            $k[$j++] = $f((_D7 ^ 2147483648) + 2147483648); //#27876
        } //#27876
        $_.r = ~~(($k[--$j] / 4294967296) * ($_.l + 1)); //#27878
        $put($_.bits, $_.l, $get($_.bits, $_.r)); //#27880
        $put($_.bits, $_.r, $get($_.bits, $_.l)); //#27881
    } //#27881
    $_.tmpbits = $s($_.C); //#27885
    $puti($_.tmpbits, 0, $_.bits); //#27886
    $_.j = $_.bits.length; //#27887
    for (var _DR = 0, _DS = ~~(($f($f($_.C - $_.j) + 1)) / 2); _DR < _DS; _DR++) { //#27892
        $put($_.tmpbits, $_.j, 48); //#27889
        if (($_.j + 1) < $_.C) { //#27890
            $put($_.tmpbits, $_.j + 1, 49); //#27890
        } //#27890
        $_.j = $_.j + 2; //#27891
    } //#27891
    $_.bits = $_.tmpbits; //#27893
    if ($_.colors == 4) { //#27958
        $_.bi = 0; //#27897
        $_.gi = 1; //#27897
        $_.mi = 2; //#27897
        $_.yi = 3; //#27897
        $_.ki = 4; //#27898
        $_.wi = 5; //#27898
        $k[$j++] = Infinity; //#27899
        $k[$j++] = $_.bi; //#27901
        $k[$j++] = "0000FF"; //#27901
        $k[$j++] = $_.gi; //#27901
        $k[$j++] = "00FF00"; //#27901
        $k[$j++] = $_.mi; //#27901
        $k[$j++] = "FF00FF"; //#27901
        $k[$j++] = $_.yi; //#27901
        $k[$j++] = "FFFF00"; //#27901
        $k[$j++] = $_.ki; //#27901
        $k[$j++] = "000000"; //#27901
        $k[$j++] = $_.wi; //#27901
        $k[$j++] = "FFFFFF"; //#27901
        $_.palette = $d(); //#27902
        $_.metacolorindex = $a([$_.bi, $_.gi, $_.mi, $_.yi]); //#27903
        $_.palettelayout = $a([$_.bi, $_.gi, $_.mi, $_.yi]); //#27904
    } else { //#27958
        var _Dz = new Map([
            [8, $a([2, 2, 2])],
            [16, $a([4, 2, 2])],
            [32, $a([4, 4, 2])],
            [64, $a([4, 4, 4])],
            [128, $a([8, 4, 4])],
            [256, $a([8, 8, 4])]
        ]); //#27913
        $_.rgbres = $get(_Dz, $_.colors); //#27914
        $k[$j++] = 'rvals'; //#27916
        $k[$j++] = $get($_.rgbres, 0); //#27916
        $k[$j++] = Infinity; //#27916
        var _E4 = $k[--$j]; //#27916
        var _E6 = $f($k[--$j] - 1); //#27916
        $k[$j++] = _E4; //#27916
        $k[$j++] = _E6; //#27916
        for (var _E8 = 0, _E7 = _E6; _E8 <= _E7; _E8 += 1) { //#27916
            var _E9 = $k[--$j]; //#27916
            $k[$j++] = ~~(Math.round(_E8 * (255 / _E9))); //#27916
            $k[$j++] = _E9; //#27916
        } //#27916
        $j--; //#27916
        var _EA = $a(); //#27916
        $_[$k[--$j]] = _EA; //#27916
        $k[$j++] = 'gvals'; //#27917
        $k[$j++] = $get($_.rgbres, 1); //#27917
        $k[$j++] = Infinity; //#27917
        var _EE = $k[--$j]; //#27917
        var _EG = $f($k[--$j] - 1); //#27917
        $k[$j++] = _EE; //#27917
        $k[$j++] = _EG; //#27917
        for (var _EI = 0, _EH = _EG; _EI <= _EH; _EI += 1) { //#27917
            var _EJ = $k[--$j]; //#27917
            $k[$j++] = ~~(Math.round(_EI * (255 / _EJ))); //#27917
            $k[$j++] = _EJ; //#27917
        } //#27917
        $j--; //#27917
        var _EK = $a(); //#27917
        $_[$k[--$j]] = _EK; //#27917
        $k[$j++] = 'bvals'; //#27918
        $k[$j++] = $get($_.rgbres, 2); //#27918
        $k[$j++] = Infinity; //#27918
        var _EO = $k[--$j]; //#27918
        var _EQ = $f($k[--$j] - 1); //#27918
        $k[$j++] = _EO; //#27918
        $k[$j++] = _EQ; //#27918
        for (var _ES = 0, _ER = _EQ; _ES <= _ER; _ES += 1) { //#27918
            var _ET = $k[--$j]; //#27918
            $k[$j++] = ~~(Math.round(_ES * (255 / _ET))); //#27918
            $k[$j++] = _ET; //#27918
        } //#27918
        $j--; //#27918
        var _EU = $a(); //#27918
        $_[$k[--$j]] = _EU; //#27918
        var _EW = $_.colors; //#27920
        $_.palette = new Map; //#27920
        var _EX = $_.colors; //#27921
        var _EY = 64; //#27921
        if (64 > _EX) { //#27921
            var _ = _EX; //#27921
            _EX = _EY; //#27921
            _EY = _; //#27921
        } //#27921
        $_.palettelayout = $a(_EY); //#27921
        $_.i = 0; //#27922
        $_.j = 8; //#27922
        $forall($_.rvals, function() { //#27956
            $_.r = $k[--$j]; //#27924
            $forall($_.gvals, function() { //#27955
                $_.g = $k[--$j]; //#27926
                $forall($_.bvals, function() { //#27954
                    $_.b = $k[--$j]; //#27928
                    var _Ek = $strcpy($s(6), "000000"); //#27930
                    var _Em = $cvrs($s(6), (($_.r << 16) | ($_.g << 8)) | $_.b, 16); //#27930
                    $puti(_Ek, 6 - _Em.length, _Em); //#27930
                    $k[$j++] = _Ek; //#27932
                    $k[$j++] = false; //#27932
                    if ($eq(_Ek, "000000")) { //#27932
                        $_.ki = $_.i; //#27932
                        $j--; //#27932
                        $k[$j++] = true; //#27932
                    } //#27932
                    var _Eo = $k[--$j]; //#27933
                    var _Ep = $k[--$j]; //#27933
                    $k[$j++] = _Ep; //#27933
                    $k[$j++] = _Eo; //#27933
                    if ($eq(_Ep, "0000FF")) { //#27933
                        $_.bi = $_.i; //#27933
                        $j--; //#27933
                        $k[$j++] = true; //#27933
                    } //#27933
                    var _Er = $k[--$j]; //#27934
                    var _Es = $k[--$j]; //#27934
                    $k[$j++] = _Es; //#27934
                    $k[$j++] = _Er; //#27934
                    if ($eq(_Es, "00FF00")) { //#27934
                        $_.gi = $_.i; //#27934
                        $j--; //#27934
                        $k[$j++] = true; //#27934
                    } //#27934
                    var _Eu = $k[--$j]; //#27935
                    var _Ev = $k[--$j]; //#27935
                    $k[$j++] = _Ev; //#27935
                    $k[$j++] = _Eu; //#27935
                    if ($eq(_Ev, "00FFFF")) { //#27935
                        $_.ci = $_.i; //#27935
                        $j--; //#27935
                        $k[$j++] = true; //#27935
                    } //#27935
                    var _Ex = $k[--$j]; //#27936
                    var _Ey = $k[--$j]; //#27936
                    $k[$j++] = _Ey; //#27936
                    $k[$j++] = _Ex; //#27936
                    if ($eq(_Ey, "FF0000")) { //#27936
                        $_.ri = $_.i; //#27936
                        $j--; //#27936
                        $k[$j++] = true; //#27936
                    } //#27936
                    var _F0 = $k[--$j]; //#27937
                    var _F1 = $k[--$j]; //#27937
                    $k[$j++] = _F1; //#27937
                    $k[$j++] = _F0; //#27937
                    if ($eq(_F1, "FF00FF")) { //#27937
                        $_.mi = $_.i; //#27937
                        $j--; //#27937
                        $k[$j++] = true; //#27937
                    } //#27937
                    var _F3 = $k[--$j]; //#27938
                    var _F4 = $k[--$j]; //#27938
                    $k[$j++] = _F4; //#27938
                    $k[$j++] = _F3; //#27938
                    if ($eq(_F4, "FFFF00")) { //#27938
                        $_.yi = $_.i; //#27938
                        $j--; //#27938
                        $k[$j++] = true; //#27938
                    } //#27938
                    var _F6 = $k[--$j]; //#27939
                    var _F7 = $k[--$j]; //#27939
                    $k[$j++] = _F7; //#27939
                    $k[$j++] = _F6; //#27939
                    if ($eq(_F7, "FFFFFF")) { //#27939
                        $_.wi = $_.i; //#27939
                        $j--; //#27939
                        $k[$j++] = true; //#27939
                    } //#27939
                    if ($nt($k[--$j])) { //#27951
                        if (($_.colors <= 64) || ((($_.colors == 128) && (((($_.r == 0) || ($_.r == 73)) || ($_.r == 182)) || ($_.r == 255))) || ((($_.colors == 256) && (((($_.r == 0) || ($_.r == 73)) || ($_.r == 182)) || ($_.r == 255))) && (((($_.g == 0) || ($_.g == 73)) || ($_.g == 182)) || ($_.g == 255))))) { //#27950
                            $put($_.palettelayout, $_.j, $_.i); //#27948
                            $_.j = $_.j + 1; //#27949
                        } //#27949
                    } //#27949
                    $put($_.palette, $_.i, $k[--$j]); //#27952
                    $_.i = $_.i + 1; //#27953
                }); //#27953
            }); //#27953
        }); //#27953
        $puti($_.palettelayout, 0, $a([$_.ki, $_.bi, $_.gi, $_.ci, $_.ri, $_.mi, $_.yi, $_.wi])); //#27957
        $_.metacolorindex = $a([$_.ki, $_.bi, $_.gi, $_.ci, $_.ri, $_.mi, $_.yi, $_.wi]); //#27958
    } //#27958
    $k[$j++] = Infinity; //#27962
    for (var _Fs = 0, _Ft = $_.rows * $_.cols; _Fs < _Ft; _Fs++) { //#27962
        $k[$j++] = -1; //#27962
    } //#27962
    $_.pixs = $a(); //#27962
    $_.jmv = function() {
        var _Fw = $k[--$j]; //#27963
        var _Fx = $k[--$j]; //#27963
        $k[$j++] = $f(_Fx + (_Fw * $_.cols)); //#27963
    }; //#27963
    if (!$_.slave) { //#27993
        $_.fpat = $a([$a([1, 1, 1, 0, 0]), $a([1, 2, 2, 0, 0]), $a([1, 2, 1, 2, 1]), $a([0, 0, 2, 2, 1]), $a([0, 0, 1, 1, 1])]); //#27973
        $_.fmap = $a([$a([-1, $_.bi, $_.yi]), $a([-1, $_.yi, $_.bi]), $a([-1, $_.gi, $_.mi]), $a([-1, $_.mi, $_.gi])]); //#27979
    } else { //#27993
        $_.fpat = $a([$a([0, 0, 0, 0, 0]), $a([0, 2, 2, 0, 0]), $a([0, 2, 1, 2, 0]), $a([0, 0, 2, 2, 0]), $a([0, 0, 0, 0, 0])]); //#27987
        $_.fmap = $a([$a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi]), $a([-1, $_.ki, $_.wi])]); //#27993
    } //#27993
    for (var _Gb = 0; _Gb <= 4; _Gb += 1) { //#28005
        $_.y = _Gb; //#27996
        for (var _Gc = 0; _Gc <= 4; _Gc += 1) { //#28004
            $_.x = _Gc; //#27998
            $_.fpb = $get($get($_.fpat, $_.y), $_.x); //#27999
            $k[$j++] = $_.pixs; //#28000
            $k[$j++] = $_.x + 1; //#28000
            $k[$j++] = $_.y + 1; //#28000
            $_.jmv(); //#28000
            var _Gp = $k[--$j]; //#28000
            $put($k[--$j], _Gp, $get($get($_.fmap, 0), $_.fpb)); //#28000
            $k[$j++] = $_.pixs; //#28001
            $k[$j++] = $_.x + 1; //#28001
            $k[$j++] = $f($f($_.rows - $_.y) - 2); //#28001
            $_.jmv(); //#28001
            var _Gz = $k[--$j]; //#28001
            $put($k[--$j], _Gz, $get($get($_.fmap, 1), $_.fpb)); //#28001
            $k[$j++] = $_.pixs; //#28002
            $k[$j++] = $f($f($_.x + $_.cols) - 6); //#28002
            $k[$j++] = $_.y + 1; //#28002
            $_.jmv(); //#28002
            var _H9 = $k[--$j]; //#28002
            $put($k[--$j], _H9, $get($get($_.fmap, 2), $_.fpb)); //#28002
            $k[$j++] = $_.pixs; //#28003
            $k[$j++] = $f($f($_.x + $_.cols) - 6); //#28003
            $k[$j++] = $f($f($_.rows - $_.y) - 2); //#28003
            $_.jmv(); //#28003
            var _HK = $k[--$j]; //#28003
            $put($k[--$j], _HK, $get($get($_.fmap, 3), $_.fpb)); //#28003
        } //#28003
    } //#28003
    $_.algnpat0 = $a([$a([$_.ki, $_.ki, -1]), $a([$_.ki, $_.wi, $_.ki]), $a([-1, $_.ki, $_.ki])]); //#28012
    $_.algnpat1 = $a([$a([-1, $_.ki, $_.ki]), $a([$_.ki, $_.wi, $_.ki]), $a([$_.ki, $_.ki, -1])]); //#28017
    $_.num = (~~Math.round($_.cols / 16)) - 1; //#28018
    $_.algnrpos = $a([3, 17]); //#28019
    if ($_.num > 0) { //#28022
        $k[$j++] = Infinity; //#28021
        for (var _Hn = 0, _Hm = $_.num; _Hn <= _Hm; _Hn += 1) { //#28021
            $k[$j++] = (~~(_Hn * ($f($_.cols - 7) / $_.num))) + 3; //#28021
        } //#28021
        $_.algnrpos = $a(); //#28021
    } //#28021
    $_.num = (~~Math.round($_.rows / 16)) - 1; //#28023
    $_.algncpos = $a([3, 17]); //#28024
    if ($_.num > 0) { //#28027
        $k[$j++] = Infinity; //#28026
        for (var _Hw = 0, _Hv = $_.num; _Hw <= _Hv; _Hw += 1) { //#28026
            $k[$j++] = (~~(_Hw * ($f($_.rows - 7) / $_.num))) + 3; //#28026
        } //#28026
        $_.algncpos = $a(); //#28026
    } //#28026
    $_.putalgnpat = function() {
        $_.pp = $k[--$j]; //#28029
        $_.py = $k[--$j]; //#28030
        $_.px = $k[--$j]; //#28031
        for (var _I3 = 0; _I3 <= 2; _I3 += 1) { //#28038
            $_.pb = _I3; //#28033
            for (var _I4 = 0; _I4 <= 2; _I4 += 1) { //#28037
                $_.pa = _I4; //#28035
                $k[$j++] = $_.pixs; //#28036
                $k[$j++] = $f($_.px + $_.pa); //#28036
                $k[$j++] = $f($_.py + $_.pb); //#28036
                $_.jmv(); //#28036
                var _IF = $k[--$j]; //#28036
                $put($k[--$j], _IF, $get($get($_.pp, $_.pb), $_.pa)); //#28036
            } //#28036
        } //#28036
    }; //#28036
    for (var _IJ = 0, _II = $_.algncpos.length - 1; _IJ <= _II; _IJ += 1) { //#28050
        $_.j = _IJ; //#28041
        $_.y = $get($_.algncpos, $_.j); //#28042
        for (var _IP = 0, _IO = $_.algnrpos.length - 1; _IP <= _IO; _IP += 1) { //#28049
            $_.i = _IP; //#28044
            $_.x = $get($_.algnrpos, $_.i); //#28045
            $k[$j++] = $_.pixs; //#28046
            $k[$j++] = $_.x; //#28046
            $k[$j++] = $_.y; //#28046
            $_.jmv(); //#28046
            var _IW = $k[--$j]; //#28046
            if ($get($k[--$j], _IW) == -1) { //#28048
                $k[$j++] = $f($_.x - 1); //#28047
                $k[$j++] = $f($_.y - 1); //#28047
                if ((($_.i + $_.j) % 2) == 0) { //#28047
                    $k[$j++] = $_.algnpat0; //#28047
                } else { //#28047
                    $k[$j++] = $_.algnpat1; //#28047
                } //#28047
                $_.putalgnpat(); //#28047
            } //#28047
        } //#28047
    } //#28047
    if (!$_.slave) { //#28102
        var _JO = $a([$a([6, 1]), $a([6, 2]), $a([6, 3]), $a([6, 4]), $a([6, 5]), $a([6, 6]), $a([5, 6]), $a([4, 6]), $a([3, 6]), $a([2, 6]), $a([1, 6]), $a([7, 1]), $a([7, 2]), $a([7, 3]), $a([7, 4]), $a([7, 5]), $a([7, 6]), $a([7, 7]), $a([6, 7]), $a([5, 7]), $a([4, 7]), $a([3, 7]), $a([2, 7]), $a([1, 7]), $a([8, 1]), $a([8, 2]), $a([8, 3]), $a([8, 4]), $a([8, 5]), $a([8, 6]), $a([8, 7]), $a([8, 8]), $a([7, 8]), $a([6, 8]), $a([5, 8]), $a([4, 8]), $a([3, 8]), $a([2, 8]), $a([1, 8]), $a([9, 1]), $a([9, 2]), $a([9, 3]), $a([9, 4]), $a([9, 5])]); //#28061
        for (var _JP = 0, _JQ = _JO.length; _JP < _JQ; _JP++) { //#28065
            $aload($get(_JO, _JP)); //#28063
            $_.y = $k[--$j]; //#28063
            $_.x = $k[--$j]; //#28063
            $k[$j++] = $a([$_.x, $_.y]); //#28064
            $k[$j++] = $a([-$_.x, $_.y]); //#28064
            $k[$j++] = $a([-$_.x, -$_.y]); //#28064
            $k[$j++] = $a([$_.x, -$_.y]); //#28064
        } //#28064
        $astore($a(176)); //#28066
        $_.metadatamap = $k[--$j]; //#28066
        $_.palettemap1 = $a([$a([4, 1]), $a([4, 2]), $a([5, 1]), $a([5, 2]), $a([2, 4]), $a([2, 5]), $a([1, 4]), $a([1, 5]), $a([-2, 1]), $a([-2, 2]), $a([-1, 1]), $a([-1, 2]), $a([-4, 4]), $a([-4, 5]), $a([-5, 4]), $a([-5, 5])]); //#28071
        $_.palettemap2 = $a([$a([-4, -5]), $a([-4, -4]), $a([-5, -5]), $a([-5, -4]), $a([-2, -2]), $a([-2, -1]), $a([-1, -2]), $a([-1, -1]), $a([2, -5]), $a([2, -4]), $a([1, -5]), $a([1, -4]), $a([4, -2]), $a([4, -1]), $a([5, -2]), $a([5, -1])]); //#28076
    } else { //#28102
        $k[$j++] = Infinity; //#28082
        for (var _KG = 1; _KG <= 19; _KG += 1) { //#28086
            $_.i = _KG; //#28084
            $k[$j++] = $a([0, $_.i]); //#28085
            $k[$j++] = $a([1, $_.i]); //#28085
        } //#28085
        for (var _KL = 5; _KL <= 12; _KL += 1) { //#28090
            $_.i = _KL; //#28088
            $k[$j++] = $a([2, $_.i]); //#28089
            $k[$j++] = $a([3, $_.i]); //#28089
        } //#28089
        $_.metadatamap = $a(); //#28089
        $k[$j++] = Infinity; //#28093
        for (var _KR = 5; _KR <= 12; _KR += 1) { //#28094
            $k[$j++] = _KR; //#28094
            $k[$j++] = Infinity; //#28094
            var _KS = $k[--$j]; //#28094
            var _KT = $k[--$j]; //#28094
            $k[$j++] = _KS; //#28094
            $k[$j++] = 4; //#28094
            $k[$j++] = _KT; //#28094
            var _KU = $a(); //#28094
            $k[$j++] = _KU; //#28094
        } //#28094
        for (var _KV = 12; _KV >= 5; _KV -= 1) { //#28095
            $k[$j++] = _KV; //#28095
            $k[$j++] = Infinity; //#28095
            var _KW = $k[--$j]; //#28095
            var _KX = $k[--$j]; //#28095
            $k[$j++] = _KW; //#28095
            $k[$j++] = 5; //#28095
            $k[$j++] = _KX; //#28095
            var _KY = $a(); //#28095
            $k[$j++] = _KY; //#28095
        } //#28095
        for (var _KZ = 5; _KZ <= 12; _KZ += 1) { //#28096
            $k[$j++] = _KZ; //#28096
            $k[$j++] = Infinity; //#28096
            var _Ka = $k[--$j]; //#28096
            var _Kb = $k[--$j]; //#28096
            $k[$j++] = _Ka; //#28096
            $k[$j++] = 6; //#28096
            $k[$j++] = _Kb; //#28096
            var _Kc = $a(); //#28096
            $k[$j++] = _Kc; //#28096
        } //#28096
        for (var _Kd = 12; _Kd >= 5; _Kd -= 1) { //#28097
            $k[$j++] = _Kd; //#28097
            $k[$j++] = Infinity; //#28097
            var _Ke = $k[--$j]; //#28097
            var _Kf = $k[--$j]; //#28097
            $k[$j++] = _Ke; //#28097
            $k[$j++] = 7; //#28097
            $k[$j++] = _Kf; //#28097
            var _Kg = $a(); //#28097
            $k[$j++] = _Kg; //#28097
        } //#28097
        $_.palettemap1 = $a(); //#28097
        $k[$j++] = Infinity; //#28100
        var _Ki = $_.palettemap1; //#28101
        for (var _Kj = 0, _Kk = _Ki.length; _Kj < _Kk; _Kj++) { //#28101
            $k[$j++] = $get(_Ki, _Kj); //#28101
            $k[$j++] = Infinity; //#28101
            var _Km = $k[--$j]; //#28101
            var _Kn = $k[--$j]; //#28101
            $k[$j++] = _Km; //#28101
            $aload(_Kn); //#28101
            var _Ko = $k[--$j]; //#28101
            var _Kp = $k[--$j]; //#28101
            $k[$j++] = -_Kp; //#28101
            $k[$j++] = -_Ko; //#28101
            var _Kq = $a(); //#28101
            $k[$j++] = _Kq; //#28101
        } //#28101
        $_.palettemap2 = $a(); //#28101
    } //#28102
    var _Ks = $_.metadatamap; //#28107
    for (var _Kt = 0, _Ku = _Ks.length; _Kt < _Ku; _Kt++) { //#28111
        var _Kv = $get(_Ks, _Kt); //#28111
        var _Kw = $get(_Kv, 0); //#28108
        $k[$j++] = _Kv; //#28108
        $k[$j++] = _Kw; //#28108
        if (_Kw < 0) { //#28108
            var _Ky = $k[--$j]; //#28108
            var _Kz = $k[--$j]; //#28108
            $put(_Kz, 0, $f($f(_Ky + $_.cols) - 1)); //#28108
            $k[$j++] = _Kz; //#28108
        } else { //#28108
            $j--; //#28108
        } //#28108
        var _L0 = $k[--$j]; //#28109
        var _L1 = $get(_L0, 1); //#28109
        $k[$j++] = _L0; //#28109
        $k[$j++] = _L1; //#28109
        if (_L1 < 0) { //#28109
            var _L3 = $k[--$j]; //#28109
            var _L4 = $k[--$j]; //#28109
            $put(_L4, 1, $f($f(_L3 + $_.rows) - 1)); //#28109
            $k[$j++] = _L4; //#28109
        } else { //#28109
            $j--; //#28109
        } //#28109
        $j--; //#28110
    } //#28110
    var _L5 = $_.palettemap1; //#28112
    for (var _L6 = 0, _L7 = _L5.length; _L6 < _L7; _L6++) { //#28116
        var _L8 = $get(_L5, _L6); //#28116
        var _L9 = $get(_L8, 0); //#28113
        $k[$j++] = _L8; //#28113
        $k[$j++] = _L9; //#28113
        if (_L9 < 0) { //#28113
            var _LB = $k[--$j]; //#28113
            var _LC = $k[--$j]; //#28113
            $put(_LC, 0, $f($f(_LB + $_.cols) - 1)); //#28113
            $k[$j++] = _LC; //#28113
        } else { //#28113
            $j--; //#28113
        } //#28113
        var _LD = $k[--$j]; //#28114
        var _LE = $get(_LD, 1); //#28114
        $k[$j++] = _LD; //#28114
        $k[$j++] = _LE; //#28114
        if (_LE < 0) { //#28114
            var _LG = $k[--$j]; //#28114
            var _LH = $k[--$j]; //#28114
            $put(_LH, 1, $f($f(_LG + $_.rows) - 1)); //#28114
            $k[$j++] = _LH; //#28114
        } else { //#28114
            $j--; //#28114
        } //#28114
        $j--; //#28115
    } //#28115
    var _LI = $_.palettemap2; //#28117
    for (var _LJ = 0, _LK = _LI.length; _LJ < _LK; _LJ++) { //#28121
        var _LL = $get(_LI, _LJ); //#28121
        var _LM = $get(_LL, 0); //#28118
        $k[$j++] = _LL; //#28118
        $k[$j++] = _LM; //#28118
        if (_LM < 0) { //#28118
            var _LO = $k[--$j]; //#28118
            var _LP = $k[--$j]; //#28118
            $put(_LP, 0, $f($f(_LO + $_.cols) - 1)); //#28118
            $k[$j++] = _LP; //#28118
        } else { //#28118
            $j--; //#28118
        } //#28118
        var _LQ = $k[--$j]; //#28119
        var _LR = $get(_LQ, 1); //#28119
        $k[$j++] = _LQ; //#28119
        $k[$j++] = _LR; //#28119
        if (_LR < 0) { //#28119
            var _LT = $k[--$j]; //#28119
            var _LU = $k[--$j]; //#28119
            $put(_LU, 1, $f($f(_LT + $_.rows) - 1)); //#28119
            $k[$j++] = _LU; //#28119
        } else { //#28119
            $j--; //#28119
        } //#28119
        $j--; //#28120
    } //#28120
    for (var _LX = 0, _LW = $f($_.nummetamodules - 1); _LX <= _LW; _LX += 1) { //#28126
        $k[$j++] = $_.pixs; //#28125
        $aload($get($_.metadatamap, _LX)); //#28125
        $_.jmv(); //#28125
        var _Lb = $k[--$j]; //#28125
        $put($k[--$j], _Lb, 0); //#28125
    } //#28125
    if (!$_.slave) { //#28139
        var _Le = $_.colors; //#28131
        var _Lf = 16; //#28131
        if (16 > _Le) { //#28131
            var _ = _Le; //#28131
            _Le = _Lf; //#28131
            _Lf = _; //#28131
        } //#28131
        for (var _Lh = 0, _Lg = _Lf - 1; _Lh <= _Lg; _Lh += 1) { //#28136
            $_.i = _Lh; //#28132
            var _Lk = $get($_.palettelayout, $_.i); //#28133
            $k[$j++] = _Lk; //#28134
            $k[$j++] = $_.pixs; //#28134
            $k[$j++] = _Lk; //#28134
            $aload($get($_.palettemap1, $_.i)); //#28134
            $_.jmv(); //#28134
            var _Lp = $k[--$j]; //#28134
            var _Lq = $k[--$j]; //#28134
            $put($k[--$j], _Lp, _Lq); //#28134
            var _Lt = $k[--$j]; //#28135
            $k[$j++] = $_.pixs; //#28135
            $k[$j++] = _Lt; //#28135
            $aload($get($_.palettemap2, $_.i)); //#28135
            $_.jmv(); //#28135
            var _Lx = $k[--$j]; //#28135
            var _Ly = $k[--$j]; //#28135
            $put($k[--$j], _Lx, _Ly); //#28135
        } //#28135
        $_.i = 16; //#28137
    } else { //#28139
        $_.i = 0; //#28139
    } //#28139
    $_.j = $_.nummetamodules; //#28143
    for (var _M4 = $_.i, _M3 = $_.palettelayout.length - 1; _M4 <= _M3; _M4 += 2) { //#28153
        $_.i = _M4; //#28145
        var _M7 = $get($_.palettelayout, $_.i); //#28146
        $k[$j++] = _M7; //#28147
        $k[$j++] = $_.pixs; //#28147
        $k[$j++] = _M7; //#28147
        $aload($get($_.metadatamap, $_.j)); //#28147
        $_.jmv(); //#28147
        var _MC = $k[--$j]; //#28147
        var _MD = $k[--$j]; //#28147
        $put($k[--$j], _MC, _MD); //#28147
        var _MG = $k[--$j]; //#28148
        $k[$j++] = $_.pixs; //#28148
        $k[$j++] = _MG; //#28148
        $aload($get($_.metadatamap, $f($_.j + 2))); //#28148
        $_.jmv(); //#28148
        var _MK = $k[--$j]; //#28148
        var _ML = $k[--$j]; //#28148
        $put($k[--$j], _MK, _ML); //#28148
        var _MP = $get($_.palettelayout, $_.i + 1); //#28149
        $k[$j++] = _MP; //#28150
        $k[$j++] = $_.pixs; //#28150
        $k[$j++] = _MP; //#28150
        $aload($get($_.metadatamap, $f($_.j + 1))); //#28150
        $_.jmv(); //#28150
        var _MU = $k[--$j]; //#28150
        var _MV = $k[--$j]; //#28150
        $put($k[--$j], _MU, _MV); //#28150
        var _MY = $k[--$j]; //#28151
        $k[$j++] = $_.pixs; //#28151
        $k[$j++] = _MY; //#28151
        $aload($get($_.metadatamap, $f($_.j + 3))); //#28151
        $_.jmv(); //#28151
        var _Mc = $k[--$j]; //#28151
        var _Md = $k[--$j]; //#28151
        $put($k[--$j], _Mc, _Md); //#28151
        $_.j = $f($_.j + 4); //#28152
    } //#28152
    var _N5 = $a([function() {
        var _Mg = $k[--$j]; //#28157
        var _Mh = $k[--$j]; //#28157
        $k[$j++] = $f(_Mh + _Mg) % $_.colors; //#28157
    }, function() {
        $j--; //#28158
        var _Mk = $k[--$j]; //#28158
        $k[$j++] = _Mk % $_.colors; //#28158
    }, function() {
        var _Ml = $k[--$j]; //#28159
        var _Mm = $k[--$j]; //#28159
        $k[$j++] = _Ml; //#28159
        $k[$j++] = _Mm; //#28159
        $j--; //#28159
        var _Mo = $k[--$j]; //#28159
        $k[$j++] = _Mo % $_.colors; //#28159
    }, function() {
        var _Mp = $k[--$j]; //#28160
        var _Mq = $k[--$j]; //#28160
        $k[$j++] = ((~~(_Mp / 3)) + (~~(_Mq / 2))) % $_.colors; //#28160
    }, function() {
        var _Ms = $k[--$j]; //#28161
        var _Mt = $k[--$j]; //#28161
        $k[$j++] = ((~~(_Ms / 2)) + (~~(_Mt / 3))) % $_.colors; //#28161
    }, function() {
        var _Mv = $k[--$j]; //#28162
        var _Mx = $f($k[--$j] + _Mv); //#28162
        $k[$j++] = ((~~(_Mx / 2)) + (~~(_Mx / 3))) % $_.colors; //#28162
    }, function() {
        var _Mz = $k[--$j]; //#28163
        var _N0 = $k[--$j]; //#28163
        $k[$j++] = ($f(((_Mz * (_N0 * _N0)) % 7) + ((($f(_Mz + (_N0 * _N0))) * 2) % 19))) % $_.colors; //#28163
    }, function() {
        var _N2 = $k[--$j]; //#28164
        var _N3 = $k[--$j]; //#28164
        $k[$j++] = ($f(((_N3 * (_N2 * _N2)) % 5) + (($f((_N2 * _N2) + (_N3 * 2))) % 13))) % $_.colors; //#28164
    }]); //#28164
    $_.maskfuncs = _N5; //#28165
    if ($_.mask != -1) { //#28169
        $_.maskfuncs = $a([$get($_.maskfuncs, $_.mask)]); //#28167
        $_.bestmaskval = $_.mask; //#28168
    } //#28168
    $_.masks = $a($_.maskfuncs.length); //#28170
    for (var _NG = 0, _NF = $_.masks.length - 1; _NG <= _NF; _NG += 1) { //#28183
        $_.m = _NG; //#28172
        $_.mask = $a($_.rows * $_.cols); //#28173
        for (var _NM = 0, _NL = $f($_.rows - 1); _NM <= _NL; _NM += 1) { //#28181
            $_.j = _NM; //#28175
            for (var _NP = 0, _NO = $f($_.cols - 1); _NP <= _NO; _NP += 1) { //#28180
                $_.i = _NP; //#28177
                $k[$j++] = $_.pixs; //#28178
                $k[$j++] = $_.i; //#28178
                $k[$j++] = $_.j; //#28178
                $_.jmv(); //#28178
                var _NT = $k[--$j]; //#28178
                if ($get($k[--$j], _NT) == -1) { //#28178
                    $k[$j++] = $_.i; //#28178
                    $k[$j++] = $_.j; //#28178
                    if ($get($_.maskfuncs, $_.m)() === true) {
                        break;
                    } //#28178
                } else { //#28178
                    $k[$j++] = 0; //#28178
                } //#28178
                $k[$j++] = $_.mask; //#28179
                $k[$j++] = $_.i; //#28179
                $k[$j++] = $_.j; //#28179
                $_.jmv(); //#28179
                $r(3, -1); //#28179
                var _Ne = $k[--$j]; //#28179
                var _Nf = $k[--$j]; //#28179
                $put($k[--$j], _Nf, _Ne); //#28179
            } //#28179
        } //#28179
        $put($_.masks, $_.m, $_.mask); //#28182
    } //#28182
    $_.posx = 0; //#28186
    $_.posy = 0; //#28186
    $_.i = 0; //#28187
    for (;;) { //#28197
        if ($_.posx == $_.cols) { //#28189
            break; //#28189
        } //#28189
        $k[$j++] = $_.pixs; //#28190
        $k[$j++] = $_.posx; //#28190
        $k[$j++] = $_.posy; //#28190
        $_.jmv(); //#28190
        var _Np = $k[--$j]; //#28190
        if ($get($k[--$j], _Np) == -1) { //#28194
            var _Nv = $geti($_.bits, $_.i, $_.databpm); //#28191
            $k[$j++] = 0; //#28191
            for (var _Nw = 0, _Nx = _Nv.length; _Nw < _Nx; _Nw++) { //#28191
                var _Nz = $k[--$j]; //#28191
                $k[$j++] = ($f(_Nz + $f($get(_Nv, _Nw) - 48))) * 2; //#28191
            } //#28191
            var _O0 = $k[--$j]; //#28191
            $k[$j++] = ~~(_O0 / 2); //#28192
            $k[$j++] = $_.pixs; //#28192
            $k[$j++] = $_.posx; //#28192
            $k[$j++] = $_.posy; //#28192
            $_.jmv(); //#28192
            $r(3, -1); //#28192
            var _O4 = $k[--$j]; //#28192
            var _O5 = $k[--$j]; //#28192
            $put($k[--$j], _O5, _O4); //#28192
            $_.i = $_.i + $_.databpm; //#28193
        } //#28193
        $_.posy = $_.posy + 1; //#28195
        if ($_.posy == $_.rows) { //#28196
            $_.posy = 0; //#28196
            $_.posx = $_.posx + 1; //#28196
        } //#28196
    } //#28196
    $_.evalrle = function() {
        $_.scrle = $k[--$j]; //#28201
        $_.scr1 = 0; //#28202
        $_.scr3 = 0; //#28202
        for (var _OG = 0, _OF = $_.scrle.length - 2; _OG <= _OF; _OG += 2) { //#28224
            $_.j = _OG; //#28204
            if ($get($_.scrle, $_.j + 1) != -1) { //#28223
                var _OM = $get($_.scrle, $_.j); //#28207
                $k[$j++] = _OM; //#28207
                if (_OM >= 5) { //#28207
                    $_.scr1 = $f($f($k[--$j] - 2) + $_.scr1); //#28207
                } else { //#28207
                    $j--; //#28207
                } //#28207
                if (($_.j >= 4) && ($_.j <= ($_.scrle.length - 5))) { //#28222
                    var _OU = $geti($_.scrle, $_.j - 4, 10); //#28210
                    $k[$j++] = _OU; //#28211
                    for (var _OV = 0, _OW = _OU.length; _OV < _OW; _OV++) { //#28211
                        $k[$j++] = $get(_OU, _OV) == 1; //#28211
                    } //#28211
                    $j--; //#28211
                    for (var _OY = 0, _OZ = 4; _OY < _OZ; _OY++) { //#28211
                        var _Oa = $k[--$j]; //#28211
                        var _Ob = $k[--$j]; //#28211
                        $k[$j++] = _Oa; //#28211
                        $k[$j++] = _Ob; //#28211
                        $j--; //#28211
                        var _Oc = $k[--$j]; //#28211
                        var _Od = $k[--$j]; //#28211
                        $k[$j++] = $an(_Od, _Oc); //#28211
                    } //#28211
                    if ($k[--$j]) { //#28221
                        $k[$j++] = Infinity; //#28212
                        var _Of = $k[--$j]; //#28212
                        var _Og = $k[--$j]; //#28212
                        $k[$j++] = _Of; //#28212
                        $aload(_Og); //#28212
                        var _Oh = $k[--$j]; //#28213
                        var _Oi = $k[--$j]; //#28213
                        var _Oj = $k[--$j]; //#28213
                        var _Ok = $k[--$j]; //#28213
                        var _Ol = $k[--$j]; //#28213
                        var _Om = $k[--$j]; //#28213
                        var _On = $k[--$j]; //#28213
                        var _Oo = $k[--$j]; //#28213
                        var _Op = $k[--$j]; //#28213
                        $k[$j++] = _Op; //#28219
                        $k[$j++] = _Oo; //#28219
                        $k[$j++] = _On; //#28219
                        $k[$j++] = _Om; //#28219
                        $k[$j++] = _Ol; //#28219
                        $k[$j++] = _Ok; //#28219
                        $k[$j++] = _Oj; //#28219
                        $k[$j++] = _Oi; //#28219
                        $k[$j++] = _Oh; //#28219
                        if (($eq(_Op, _Ol) && $eq(_Op, _Oh)) && $eq(_On, _Oj)) { //#28219
                            var _Oq = $k[--$j]; //#28215
                            var _Or = $k[--$j]; //#28215
                            var _Os = $k[--$j]; //#28215
                            $_.c4 = _Os; //#28215
                            $_.c5 = _Oq; //#28215
                            $k[$j++] = _Os; //#28218
                            $k[$j++] = _Or; //#28218
                            if ((($_.c4 == $_.bi) && ($_.c5 == $_.yi)) || ((($_.c4 == $_.yi) && ($_.c5 == $_.bi)) || ((($_.c4 == $_.gi) && ($_.c5 == $_.mi)) || (($_.c4 == $_.mi) && ($_.c5 == $_.gi))))) { //#28218
                                $_.scr3 = $_.scr3 + 100; //#28218
                            } //#28218
                        } //#28218
                        $cleartomark(); //#28220
                    } else { //#28221
                        $j--; //#28221
                    } //#28221
                } //#28221
            } //#28221
        } //#28221
        $k[$j++] = $_.scr1; //#28225
        $k[$j++] = $_.scr3; //#28225
    }; //#28225
    $_.evalmask = function() {
        $_.sym = $k[--$j]; //#28229
        $_.n1 = 0; //#28231
        $_.n2 = 0; //#28231
        $_.n3 = 0; //#28231
        var _PD = $_.rows; //#28232
        var _PE = $_.cols; //#28232
        if (_PD < _PE) { //#28232
            var _ = _PE; //#28232
            _PE = _PD; //#28232
            _PD = _; //#28232
        } //#28232
        $_.rle = $a($f((_PD * 2) + 2)); //#28232
        $_.lastpairs = $a($_.cols); //#28233
        $_.thispairs = $a($_.cols); //#28234
        for (var _PM = 0, _PL = $f($_.cols - 1); _PM <= _PL; _PM += 1) { //#28246
            $_.i = _PM; //#28238
            $k[$j++] = Infinity; //#28239
            $k[$j++] = 0; //#28242
            $k[$j++] = -1; //#28242
            for (var _PS = $_.i, _PT = $_.cols, _PR = $f(($_.rows * $_.cols) - 1); _PT < 0 ? _PS >= _PR : _PS <= _PR; _PS += _PT) { //#28242
                var _PV = $get($_.sym, _PS); //#28241
                var _PW = $k[--$j]; //#28241
                $k[$j++] = _PW; //#28241
                $k[$j++] = _PV; //#28241
                if ($eq(_PW, _PV)) { //#28241
                    $j--; //#28241
                    var _PX = $k[--$j]; //#28241
                    var _PY = $k[--$j]; //#28241
                    $k[$j++] = $f(_PY + 1); //#28241
                    $k[$j++] = _PX; //#28241
                } else { //#28241
                    var _PZ = $k[--$j]; //#28241
                    $k[$j++] = 1; //#28241
                    $k[$j++] = _PZ; //#28241
                } //#28241
            } //#28241
            var _Pb = $counttomark() + 2; //#28243
            $astore($geti($_.rle, 0, _Pb - 2)); //#28243
            $_.evalrle(); //#28244
            $_.n3 = $f($k[--$j] + $_.n3); //#28244
            $_.n1 = $f($k[--$j] + $_.n1); //#28244
            $j--; //#28245
        } //#28245
        for (var _Pj = 0, _Pi = $f($_.rows - 1); _Pj <= _Pi; _Pj += 1) { //#28273
            $_.i = _Pj; //#28249
            $_.symrow = $geti($_.sym, $_.i * $_.cols, $_.cols); //#28252
            $k[$j++] = Infinity; //#28253
            var _Pp = $_.symrow; //#28254
            $k[$j++] = 0; //#28256
            $k[$j++] = -1; //#28256
            for (var _Pq = 0, _Pr = _Pp.length; _Pq < _Pr; _Pq++) { //#28256
                var _Ps = $get(_Pp, _Pq); //#28256
                var _Pt = $k[--$j]; //#28255
                $k[$j++] = _Pt; //#28255
                $k[$j++] = _Ps; //#28255
                if ($eq(_Pt, _Ps)) { //#28255
                    $j--; //#28255
                    var _Pu = $k[--$j]; //#28255
                    var _Pv = $k[--$j]; //#28255
                    $k[$j++] = $f(_Pv + 1); //#28255
                    $k[$j++] = _Pu; //#28255
                } else { //#28255
                    var _Pw = $k[--$j]; //#28255
                    $k[$j++] = 1; //#28255
                    $k[$j++] = _Pw; //#28255
                } //#28255
            } //#28255
            var _Py = $counttomark() + 2; //#28257
            $astore($geti($_.rle, 0, _Py - 2)); //#28257
            $_.evalrle(); //#28258
            $_.n3 = $f($k[--$j] + $_.n3); //#28258
            $_.n1 = $f($k[--$j] + $_.n1); //#28258
            $j--; //#28259
            var _Q4 = $_.thispairs; //#28262
            $_.thispairs = $_.lastpairs; //#28262
            $_.lastpairs = _Q4; //#28262
            var _Q6 = $_.symrow; //#28263
            $k[$j++] = -1; //#28263
            for (var _Q7 = 0, _Q8 = _Q6.length; _Q7 < _Q8; _Q7++) { //#28263
                var _Q9 = $get(_Q6, _Q7); //#28263
                var _QA = $k[--$j]; //#28263
                $k[$j++] = _Q9; //#28263
                $k[$j++] = _QA; //#28263
                if ($ne(_Q9, _QA)) { //#28263
                    $j--; //#28263
                    var _QB = $k[--$j]; //#28263
                    $k[$j++] = -1; //#28263
                    $k[$j++] = _QB; //#28263
                } //#28263
            } //#28263
            $j--; //#28264
            $astore($_.thispairs); //#28265
            $j--; //#28265
            if ($_.i > 0) { //#28272
                $k[$j++] = Infinity; //#28267
                $aload($_.lastpairs); //#28268
                $aload($_.thispairs); //#28268
                $k[$j++] = $_.n2; //#28269
                for (var _QI = 0, _QJ = $_.cols; _QI < _QJ; _QI++) { //#28269
                    var _QK = $k[--$j]; //#28269
                    var _QL = $k[--$j]; //#28269
                    $k[$j++] = _QK; //#28269
                    $k[$j++] = _QL; //#28269
                    if (_QL != -1) { //#28269
                        var _QN = $k[$j - 1 - $f($_.cols + 1)]; //#28269
                        if ($eq($k[--$j], _QN)) { //#28269
                            var _QP = $k[--$j]; //#28269
                            $k[$j++] = $f(_QP + 3); //#28269
                        } //#28269
                    } else { //#28269
                        $j--; //#28269
                    } //#28269
                } //#28269
                $_.n2 = $k[--$j]; //#28270
                $cleartomark(); //#28271
            } //#28271
        } //#28271
        $k[$j++] = $f($f($_.n1 + $_.n2) + $_.n3); //#28275
    }; //#28275
    $_.bestscore = 999999999; //#28279
    for (var _QW = 0, _QV = $_.masks.length - 1; _QW <= _QV; _QW += 1) { //#28297
        $_.m = _QW; //#28281
        $_.masksym = $a($_.rows * $_.cols); //#28282
        for (var _Qd = 0, _Qc = $f(($_.rows * $_.cols) - 1); _Qd <= _Qc; _Qd += 1) { //#28286
            $_.i = _Qd; //#28284
            $put($_.masksym, $_.i, $xo($get($_.pixs, $_.i), $get($get($_.masks, $_.m), $_.i))); //#28285
        } //#28285
        if ($_.masks.length != 1) { //#28295
            $k[$j++] = $_.masksym; //#28288
            $_.evalmask(); //#28288
            $_.score = $k[--$j]; //#28288
            if ($_.score < $_.bestscore) { //#28293
                $_.bestsym = $_.masksym; //#28290
                $_.bestmaskval = $_.m; //#28291
                $_.bestscore = $_.score; //#28292
            } //#28292
        } else { //#28295
            $_.bestsym = $_.masksym; //#28295
        } //#28295
    } //#28295
    $_.pixs = $_.bestsym; //#28298
    $_.metamask = $_.bestmaskval; //#28299
    $_.addtometapart = function() {
        var _Qz = $k[--$j]; //#28303
        $puti($_.metapart, $_.p, _Qz); //#28303
        $_.p = _Qz.length + $_.p; //#28304
    }; //#28304
    $_.addtometabits = function() {
        var _R3 = $k[--$j]; //#28308
        $puti($_.metabits, $_.q, _R3); //#28308
        $_.q = _R3.length + $_.q; //#28309
    }; //#28309
    $_.metapart = $s(40); //#28312
    $_.metabits = $s($_.nummetabits); //#28313
    $_.p = 0; //#28314
    $_.q = 0; //#28314
    if (!$_.slave) { //#28369
        $k[$j++] = (~~(Math.round(Math.log($_.colors) / Math.log(2)))) - 1; //#28319
        $k[$j++] = 3; //#28319
        $_.tofixedbits(); //#28319
        $_.addtometapart(); //#28319
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#28320
        $k[$j++] = 2; //#28320
        $k[$j++] = -1; //#28320
        $_.ldpc(); //#28320
        $_.addtometabits(); //#28320
        $_.p = 0; //#28320
        $k[$j++] = $_.metass; //#28323
        $k[$j++] = 1; //#28323
        $_.tofixedbits(); //#28323
        $_.addtometapart(); //#28323
        $k[$j++] = $_.metavf; //#28324
        $k[$j++] = 2; //#28324
        $_.tofixedbits(); //#28324
        $_.addtometapart(); //#28324
        $k[$j++] = $_.metamask; //#28325
        $k[$j++] = 3; //#28325
        $_.tofixedbits(); //#28325
        $_.addtometapart(); //#28325
        if ($_.hasslaves) { //#28326
            $k[$j++] = "1"; //#28326
        } else { //#28326
            $k[$j++] = "0"; //#28326
        } //#28326
        $_.addtometapart(); //#28326
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#28327
        $k[$j++] = 2; //#28327
        $k[$j++] = -1; //#28327
        $_.ldpc(); //#28327
        $_.addtometabits(); //#28327
        $_.p = 0; //#28327
        if ($_.metass == 0) { //#28337
            $k[$j++] = $f(($f((~~($f($_.cols - 17) / 4)) - $get($a([0, 4, 8, 16]), $_.metavf))) - 1); //#28332
            $k[$j++] = $_.metavlen; //#28332
            $_.tofixedbits(); //#28332
            $_.addtometapart(); //#28332
        } else { //#28337
            $k[$j++] = (~~($f($_.cols - 17) / 4)) - 1; //#28335
            $k[$j++] = ~~($_.metavlen / 2); //#28335
            $_.tofixedbits(); //#28335
            $_.addtometapart(); //#28335
            $k[$j++] = (~~($f($_.rows - 17) / 4)) - 1; //#28337
            $k[$j++] = ~~($_.metavlen / 2); //#28337
            $_.tofixedbits(); //#28337
            $_.addtometapart(); //#28337
        } //#28337
        $k[$j++] = $_.datawc - 3; //#28339
        $k[$j++] = ~~($_.metaelen / 2); //#28339
        $_.tofixedbits(); //#28339
        $_.addtometapart(); //#28339
        $k[$j++] = $_.datawr - 4; //#28340
        $k[$j++] = ~~($_.metaelen / 2); //#28340
        $_.tofixedbits(); //#28340
        $_.addtometapart(); //#28340
        if ($_.hasslaves) { //#28343
            $k[$j++] = 0; //#28342
            $k[$j++] = 4; //#28342
            $_.tofixedbits(); //#28342
            $_.addtometapart(); //#28342
        } //#28342
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#28344
        $k[$j++] = 2; //#28344
        $k[$j++] = -1; //#28344
        $_.ldpc(); //#28344
        $_.addtometabits(); //#28344
        $_.p = 0; //#28344
    } else { //#28369
        var _Rf = $_.sameshape ? 0 : 1; //#28349
        $k[$j++] = _Rf; //#28349
        $k[$j++] = 1; //#28349
        $_.tofixedbits(); //#28349
        $_.addtometapart(); //#28349
        var _Rh = $_.sameecc ? 0 : 1; //#28350
        $k[$j++] = _Rh; //#28350
        $k[$j++] = 1; //#28350
        $_.tofixedbits(); //#28350
        $_.addtometapart(); //#28350
        var _Rj = $_.hasslaves ? 1 : 0; //#28351
        $k[$j++] = _Rj; //#28351
        $k[$j++] = 1; //#28351
        $_.tofixedbits(); //#28351
        $_.addtometapart(); //#28351
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#28352
        $k[$j++] = 2; //#28352
        $k[$j++] = -1; //#28352
        $_.ldpc(); //#28352
        $_.addtometabits(); //#28352
        $_.p = 0; //#28352
        if (!$_.sameshape) { //#28358
            $k[$j++] = (~~(($_.diffside - 17) / 4)) - 1; //#28357
            $k[$j++] = 5; //#28357
            $_.tofixedbits(); //#28357
            $_.addtometapart(); //#28357
        } //#28357
        if ($_.hasslaves) { //#28361
            $k[$j++] = 0; //#28360
            $k[$j++] = 3; //#28360
            $_.tofixedbits(); //#28360
            $_.addtometapart(); //#28360
        } //#28360
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#28362
        $k[$j++] = 2; //#28362
        $k[$j++] = -1; //#28362
        $_.ldpc(); //#28362
        $_.addtometabits(); //#28362
        $_.p = 0; //#28362
        if (!$_.sameecc) { //#28368
            $k[$j++] = $_.datawc - 3; //#28366
            $k[$j++] = ~~($_.metaelen / 2); //#28366
            $_.tofixedbits(); //#28366
            $_.addtometapart(); //#28366
            $k[$j++] = $_.datawr - 4; //#28367
            $k[$j++] = ~~($_.metaelen / 2); //#28367
            $_.tofixedbits(); //#28367
            $_.addtometapart(); //#28367
        } //#28367
        $k[$j++] = $geti($_.metapart, 0, $_.p); //#28369
        $k[$j++] = 2; //#28369
        $k[$j++] = -1; //#28369
        $_.ldpc(); //#28369
        $_.addtometabits(); //#28369
        $_.p = 0; //#28369
    } //#28369
    for (var _S4 = $_.q, _S3 = $f($_.nummetabits - 1); _S4 <= _S3; _S4 += 1) { //#28374
        $put($_.metabits, _S4, 48); //#28373
    } //#28373
    $_.i = 0; //#28377
    $_.j = 0; //#28377
    if (!$_.slave) { //#28385
        var _S9 = $geti($_.metabits, $_.i, 6); //#28379
        for (var _SA = 0, _SB = _S9.length; _SA < _SB; _SA++) { //#28383
            $k[$j++] = $get(_S9, _SA); //#28380
            if ($_.colors == 4) { //#28380
                $k[$j++] = $a([$_.bi, $_.yi]); //#28380
            } else { //#28380
                $k[$j++] = $a([$_.ki, $_.wi]); //#28380
            } //#28380
            var _SK = $k[--$j]; //#28380
            var _SM = $get(_SK, $f($k[--$j] - 48)); //#28380
            $k[$j++] = _SM; //#28381
            $k[$j++] = $_.pixs; //#28381
            $aload($get($_.metadatamap, $_.j)); //#28381
            $_.jmv(); //#28381
            $r(3, -1); //#28381
            var _SR = $k[--$j]; //#28381
            var _SS = $k[--$j]; //#28381
            $put($k[--$j], _SS, _SR); //#28381
            $_.j = $_.j + 1; //#28382
        } //#28382
        $_.i = $_.i + 6; //#28384
    } //#28384
    for (var _SZ = 0, _Sa = ~~($f($_.nummetabits - $_.i) / $_.metabpm); _SZ < _Sa; _SZ++) { //#28392
        var _Se = $geti($_.metabits, $_.i, $_.metabpm); //#28387
        $k[$j++] = 0; //#28387
        for (var _Sf = 0, _Sg = _Se.length; _Sf < _Sg; _Sf++) { //#28387
            var _Si = $k[--$j]; //#28387
            $k[$j++] = ($f(_Si + $f($get(_Se, _Sf) - 48))) * 2; //#28387
        } //#28387
        var _Sl = $get($_.metacolorindex, ~~($k[--$j] / 2)); //#28388
        $k[$j++] = _Sl; //#28389
        $k[$j++] = $_.pixs; //#28389
        $aload($get($_.metadatamap, $_.j)); //#28389
        $_.jmv(); //#28389
        $r(3, -1); //#28389
        var _Sq = $k[--$j]; //#28389
        var _Sr = $k[--$j]; //#28389
        $put($k[--$j], _Sr, _Sq); //#28389
        $_.i = $f($_.i + $_.metabpm); //#28390
        $_.j = $_.j + 1; //#28391
    } //#28391
    var _T3 = new Map([
        ["ren", 'renmatrix'],
        ["pixs", $_.pixs],
        ["pixx", $_.cols],
        ["pixy", $_.rows],
        ["colormap", $_.palette],
        ["height", ($_.rows * 2) / 72],
        ["width", ($_.cols * 2) / 72],
        ["borderleft", 0],
        ["borderright", 0],
        ["bordertop", 0],
        ["borderbottom", 0],
        ["opt", $_.options]
    ]); //#28406
    $k[$j++] = _T3; //#28409
    if (!$_.dontdraw) { //#28409
        bwipp_renmatrix(); //#28409
    } //#28409
    $_ = Object.getPrototypeOf($_); //#28411
} //bwipp_jabcode
function bwipp_gs1_cc() {
    $_ = Object.create($_); //#28444
    $_.parse = false; //#28447
    $_.dontlint = false; //#28448
    $_.lintreqs = false; //#28449
    $_.dontdraw = false; //#28450
    $_.ccversion = "a"; //#28451
    $_.cccolumns = -1; //#28452
    $_.lintype = ""; //#28453
    $_.linwidth = -1; //#28454
    $k[$j++] = $_; //#28456
    bwipp_processoptions(); //#28456
    $_.options = $k[--$j]; //#28456
    $_.barcode = $k[--$j]; //#28457
    bwipp_loadctx(bwipp_gs1_cc); //#28459
    if (($ne($_.ccversion, "a") && $ne($_.ccversion, "b")) && $ne($_.ccversion, "c")) { //#28463
        $k[$j++] = 'bwipp.gs1ccBadCCversion#28462'; //#28462
        $k[$j++] = "ccversion must be a, b or c"; //#28462
        bwipp_raiseerror(); //#28462
    } //#28462
    if ($_.cccolumns > 30) { //#28467
        $k[$j++] = 'bwipp.gs1ccColumnsTooBig#28466'; //#28466
        $k[$j++] = "The maximum number of composite component columns is 30"; //#28466
        bwipp_raiseerror(); //#28466
    } //#28466
    if (!bwipp_gs1_cc.__28484__) { //#28484
        $_ = Object.create($_); //#28484
        var _6 = new Map([
            ["ean13", 4],
            ["upca", 4],
            ["ean8", 3],
            ["upce", 2],
            ["gs1-128", 4],
            ["databaromni", 4],
            ["databarstacked", 2],
            ["databarstackedomni", 2],
            ["databartruncated", 4],
            ["databarlimited", 3],
            ["databarexpanded", 4],
            ["databarexpandedstacked", 4]
        ]); //#28482
        $_.lintypecccolumns = _6; //#28483
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#28483
        bwipp_gs1_cc.__28484__ = 1; //#28483
        $_ = Object.getPrototypeOf($_); //#28483
    } //#28483
    if ($ne($_.lintype, "")) { //#28490
        var _B = $get($_.lintypecccolumns, $_.lintype) !== undefined; //#28487
        if (!_B) { //#28489
            $k[$j++] = 'bwipp.gs1ccBadLinType#28488'; //#28488
            $k[$j++] = "The lintype is not recognised"; //#28488
            bwipp_raiseerror(); //#28488
        } //#28488
    } //#28488
    if ($_.cccolumns == -1) { //#28506
        if ($eq($_.lintype, "gs1-128") && $eq($_.ccversion, "c")) { //#28503
            if ($_.linwidth < 0) { //#28497
                $k[$j++] = 'bwipp.gs1ccMissingLinWidth#28496'; //#28496
                $k[$j++] = "linwidth must be set for a GS1-128 with a CC-C composite component"; //#28496
                bwipp_raiseerror(); //#28496
            } //#28496
            if ($_.linwidth < 68) { //#28500
                $k[$j++] = 'bwipp.gs1ccMinimumLinWidth#28499'; //#28499
                $k[$j++] = "Minimum linwidth for a GS1-128 with a CC-C composite component is 68"; //#28499
                bwipp_raiseerror(); //#28499
            } //#28499
            if ($_.linwidth == 68) { //#28501
                $k[$j++] = 1; //#28501
            } else { //#28501
                $k[$j++] = ~~(($_.linwidth - 52) / 17); //#28501
            } //#28501
        } else { //#28503
            if ($ne($_.lintype, "")) { //#28503
                $k[$j++] = $get($_.lintypecccolumns, $_.lintype); //#28503
            } else { //#28503
                $k[$j++] = 2; //#28503
            } //#28503
        } //#28503
        $_.cccolumns = $k[--$j]; //#28505
    } //#28505
    $k[$j++] = $_.barcode; //#28508
    $k[$j++] = 'ai'; //#28508
    bwipp_gs1process(); //#28508
    $_.fncs = $k[--$j]; //#28509
    $_.vals = $k[--$j]; //#28510
    $_.ais = $k[--$j]; //#28511
    $_.isupper = function() {
        var _S = $k[--$j]; //#28514
        $k[$j++] = (_S >= 65) && (_S <= 90); //#28514
    }; //#28514
    $_.isnum0 = function() {
        var _T = $k[--$j]; //#28515
        $k[$j++] = (_T >= 48) && (_T <= 57); //#28515
    }; //#28515
    $_.isnum1 = function() {
        var _U = $k[--$j]; //#28516
        $k[$j++] = (_U >= 49) && (_U <= 57); //#28516
    }; //#28516
    for (;;) { //#28562
        if ($_.ais.length >= 1) { //#28524
            if (($eq($get($_.ais, 0), "10") || $eq($get($_.ais, 0), "11")) || $eq($get($_.ais, 0), "17")) { //#28523
                $k[$j++] = -1; //#28522
                $k[$j++] = "10"; //#28522
                break; //#28522
            } //#28522
        } //#28522
        if ($_.ais.length >= 1) { //#28557
            if ($eq($get($_.ais, 0), "90")) { //#28556
                $_.v = $get($_.vals, 0); //#28529
                if ($_.v.length >= 1) { //#28534
                    $k[$j++] = $get($_.v, 0); //#28531
                    $_.isupper(); //#28531
                    if ($k[--$j]) { //#28533
                        $k[$j++] = 0; //#28532
                        $k[$j++] = "11"; //#28532
                        break; //#28532
                    } //#28532
                } //#28532
                if ($_.v.length >= 2) { //#28540
                    $k[$j++] = $get($_.v, 0); //#28536
                    $_.isnum1(); //#28536
                    $k[$j++] = $get($_.v, 1); //#28537
                    $_.isupper(); //#28537
                    var _q = $k[--$j]; //#28537
                    var _r = $k[--$j]; //#28537
                    if ((_r && _q)) { //#28539
                        $k[$j++] = 1; //#28538
                        $k[$j++] = "11"; //#28538
                        break; //#28538
                    } //#28538
                } //#28538
                if ($_.v.length >= 3) { //#28547
                    $k[$j++] = $get($_.v, 0); //#28542
                    $_.isnum1(); //#28542
                    $k[$j++] = $get($_.v, 1); //#28543
                    $_.isnum0(); //#28543
                    var _x = $k[--$j]; //#28543
                    var _y = $k[--$j]; //#28543
                    $k[$j++] = $an(_y, _x); //#28544
                    $k[$j++] = $get($_.v, 2); //#28544
                    $_.isupper(); //#28544
                    var _11 = $k[--$j]; //#28544
                    var _12 = $k[--$j]; //#28544
                    if ((_12 && _11)) { //#28546
                        $k[$j++] = 2; //#28545
                        $k[$j++] = "11"; //#28545
                        break; //#28545
                    } //#28545
                } //#28545
                if ($_.v.length >= 4) { //#28555
                    $k[$j++] = $get($_.v, 0); //#28549
                    $_.isnum1(); //#28549
                    $k[$j++] = $get($_.v, 1); //#28550
                    $_.isnum0(); //#28550
                    var _18 = $k[--$j]; //#28550
                    var _19 = $k[--$j]; //#28550
                    $k[$j++] = $an(_19, _18); //#28551
                    $k[$j++] = $get($_.v, 2); //#28551
                    $_.isnum0(); //#28551
                    var _1C = $k[--$j]; //#28551
                    var _1D = $k[--$j]; //#28551
                    $k[$j++] = $an(_1D, _1C); //#28552
                    $k[$j++] = $get($_.v, 3); //#28552
                    $_.isupper(); //#28552
                    var _1G = $k[--$j]; //#28552
                    var _1H = $k[--$j]; //#28552
                    if ((_1H && _1G)) { //#28554
                        $k[$j++] = 3; //#28553
                        $k[$j++] = "11"; //#28553
                        break; //#28553
                    } //#28553
                } //#28553
            } //#28553
        } //#28553
        $k[$j++] = -1; //#28560
        $k[$j++] = "0"; //#28560
        break; //#28560
    } //#28560
    $_.method = $k[--$j]; //#28563
    $_.npre = $k[--$j]; //#28564
    $_.tobin = function() {
        var _1L = $s($k[--$j]); //#28567
        $k[$j++] = _1L; //#28567
        for (var _1N = 0, _1M = _1L.length - 1; _1N <= _1M; _1N += 1) { //#28567
            var _1O = $k[--$j]; //#28567
            $put(_1O, _1N, 48); //#28567
            $k[$j++] = _1O; //#28567
        } //#28567
        var _1P = $k[--$j]; //#28568
        $k[$j++] = _1P; //#28568
        $k[$j++] = _1P; //#28568
        $r(3, -1); //#28568
        var _1Q = $k[--$j]; //#28568
        var _1R = $k[--$j]; //#28568
        var _1T = $cvrs($s(_1R.length), _1Q, 2); //#28568
        $puti(_1R, _1R.length - _1T.length, _1T); //#28568
    }; //#28568
    if (!bwipp_gs1_cc.__28619__) { //#28619
        $_ = Object.create($_); //#28619
        $_.fnc1 = -1; //#28573
        $_.lnumeric = -2; //#28573
        $_.lalphanumeric = -3; //#28573
        $_.liso646 = -4; //#28573
        $k[$j++] = Infinity; //#28575
        for (var _1U = 65; _1U <= 90; _1U += 1) { //#28576
            $k[$j++] = _1U; //#28576
            $k[$j++] = _1U - 65; //#28576
            $k[$j++] = 5; //#28576
            $_.tobin(); //#28576
        } //#28576
        for (var _1V = 48; _1V <= 57; _1V += 1) { //#28577
            $k[$j++] = _1V; //#28577
            $k[$j++] = _1V + 4; //#28577
            $k[$j++] = 6; //#28577
            $_.tobin(); //#28577
        } //#28577
        $k[$j++] = $_.fnc1; //#28578
        $k[$j++] = "11111"; //#28578
        $_.alpha = $d(); //#28579
        $k[$j++] = Infinity; //#28581
        for (var _1Y = 0; _1Y <= 119; _1Y += 1) { //#28590
            var _1a = $strcpy($s(2), "00"); //#28583
            var _1c = $cvrs($s(2), _1Y, 11); //#28583
            $puti(_1a, 2 - _1c.length, _1c); //#28584
            $k[$j++] = _1Y; //#28585
            $k[$j++] = _1a; //#28585
            if ($get(_1a, 0) == 65) { //#28585
                var _1e = $k[--$j]; //#28585
                $put(_1e, 0, 94); //#28585
                $k[$j++] = _1e; //#28585
            } //#28585
            var _1f = $k[--$j]; //#28586
            $k[$j++] = _1f; //#28586
            if ($get(_1f, 1) == 65) { //#28586
                var _1h = $k[--$j]; //#28586
                $put(_1h, 1, 94); //#28586
                $k[$j++] = _1h; //#28586
            } //#28586
            var _1i = $k[--$j]; //#28587
            var _1l = $strcpy($s(7), "0000000"); //#28588
            var _1n = $cvrs($s(7), $f($k[--$j] + 8), 2); //#28588
            $puti(_1l, 7 - _1n.length, _1n); //#28589
            $k[$j++] = _1i; //#28589
            $k[$j++] = _1l; //#28589
        } //#28589
        $k[$j++] = $_.lalphanumeric; //#28591
        $k[$j++] = "0000"; //#28591
        $_.numeric = $d(); //#28592
        $k[$j++] = Infinity; //#28594
        for (var _1q = 48; _1q <= 57; _1q += 1) { //#28595
            $k[$j++] = _1q; //#28595
            $k[$j++] = _1q - 43; //#28595
            $k[$j++] = 5; //#28595
            $_.tobin(); //#28595
        } //#28595
        $k[$j++] = $_.fnc1; //#28597
        $k[$j++] = "01111"; //#28597
        for (var _1s = 65; _1s <= 90; _1s += 1) { //#28597
            $k[$j++] = _1s; //#28597
            $k[$j++] = _1s - 33; //#28597
            $k[$j++] = 6; //#28597
            $_.tobin(); //#28597
        } //#28597
        $k[$j++] = 42; //#28599
        $k[$j++] = "111010"; //#28599
        for (var _1t = 44; _1t <= 47; _1t += 1) { //#28599
            $k[$j++] = _1t; //#28599
            $k[$j++] = _1t + 15; //#28599
            $k[$j++] = 6; //#28599
            $_.tobin(); //#28599
        } //#28599
        $k[$j++] = $_.lnumeric; //#28601
        $k[$j++] = "000"; //#28601
        $k[$j++] = $_.liso646; //#28601
        $k[$j++] = "00100"; //#28601
        $_.alphanumeric = $d(); //#28602
        $k[$j++] = Infinity; //#28604
        for (var _1x = 48; _1x <= 57; _1x += 1) { //#28605
            $k[$j++] = _1x; //#28605
            $k[$j++] = _1x - 43; //#28605
            $k[$j++] = 5; //#28605
            $_.tobin(); //#28605
        } //#28605
        $k[$j++] = $_.fnc1; //#28607
        $k[$j++] = "01111"; //#28607
        for (var _1z = 65; _1z <= 90; _1z += 1) { //#28607
            $k[$j++] = _1z; //#28607
            $k[$j++] = _1z - 1; //#28607
            $k[$j++] = 7; //#28607
            $_.tobin(); //#28607
        } //#28607
        for (var _20 = 97; _20 <= 122; _20 += 1) { //#28608
            $k[$j++] = _20; //#28608
            $k[$j++] = _20 - 7; //#28608
            $k[$j++] = 7; //#28608
            $_.tobin(); //#28608
        } //#28608
        $k[$j++] = 33; //#28611
        $k[$j++] = "11101000"; //#28611
        $k[$j++] = 34; //#28611
        $k[$j++] = "11101001"; //#28611
        for (var _21 = 37; _21 <= 47; _21 += 1) { //#28611
            $k[$j++] = _21; //#28611
            $k[$j++] = _21 + 197; //#28611
            $k[$j++] = 8; //#28611
            $_.tobin(); //#28611
        } //#28611
        for (var _22 = 58; _22 <= 63; _22 += 1) { //#28612
            $k[$j++] = _22; //#28612
            $k[$j++] = _22 + 187; //#28612
            $k[$j++] = 8; //#28612
            $_.tobin(); //#28612
        } //#28612
        $k[$j++] = 95; //#28616
        $k[$j++] = "11111011"; //#28616
        $k[$j++] = 32; //#28616
        $k[$j++] = "11111100"; //#28616
        $k[$j++] = $_.lnumeric; //#28616
        $k[$j++] = "000"; //#28616
        $k[$j++] = $_.lalphanumeric; //#28616
        $k[$j++] = "00100"; //#28616
        $_.iso646 = $d(); //#28617
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#28617
        bwipp_gs1_cc.__28619__ = 1; //#28617
        $_ = Object.getPrototypeOf($_); //#28617
    } //#28617
    if ($eq($_.method, "10")) { //#28654
        if ($eq($get($_.ais, 0), "11") || $eq($get($_.ais, 0), "17")) { //#28637
            var _2D = $get($_.vals, 0); //#28623
            var _2I = $strcpy($s(16), "0000000000000000"); //#28627
            var _2K = $cvrs($s(16), ($cvi($geti(_2D, 0, 2)) * 384) + ((($cvi($geti(_2D, 2, 2)) - 1) * 32) + $cvi($geti(_2D, 4, 2))), 2); //#28627
            $puti(_2I, 16 - _2K.length, _2K); //#28628
            $k[$j++] = _2I; //#28631
            $k[$j++] = Infinity; //#28629
            $k[$j++] = 1; //#28630
            $k[$j++] = 0; //#28630
            $r(4, -1); //#28630
            $forall($k[--$j], function() { //#28630
                var _2M = $k[--$j]; //#28630
                $k[$j++] = $f(_2M - 48); //#28630
            }); //#28630
            var _2P = $eq($get($_.ais, 0), "11") ? 0 : 1; //#28631
            $k[$j++] = _2P; //#28631
            $_.cdf = $a(); //#28632
            $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#28633
            $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#28634
            $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#28635
        } else { //#28637
            $_.cdf = $a([1, 0, 1, 1]); //#28637
        } //#28637
        if ($_.ais.length != 0) { //#28651
            if ($eq($get($_.ais, 0), "10")) { //#28647
                $k[$j++] = Infinity; //#28641
                $forall($get($_.vals, 0)); //#28641
                $_.gpf = $a(); //#28641
                if ($_.ais.length > 1) { //#28642
                    $k[$j++] = Infinity; //#28642
                    $aload($_.gpf); //#28642
                    $k[$j++] = $_.fnc1; //#28642
                    $_.gpf = $a(); //#28642
                } //#28642
                $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#28643
                $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#28644
                $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#28645
            } else { //#28647
                $_.gpf = $a([$_.fnc1]); //#28647
            } //#28647
        } else { //#28651
            $k[$j++] = Infinity; //#28650
            $aload($_.cdf); //#28650
            $k[$j++] = 0; //#28650
            $k[$j++] = 0; //#28650
            $k[$j++] = 0; //#28650
            $k[$j++] = 0; //#28650
            $k[$j++] = 0; //#28650
            $k[$j++] = 1; //#28650
            $k[$j++] = 1; //#28650
            $k[$j++] = 1; //#28650
            $k[$j++] = 1; //#28650
            $_.cdf = $a(); //#28650
            $_.gpf = $a([]); //#28651
        } //#28651
        $_.mode = "numeric"; //#28653
    } //#28653
    if ($eq($_.method, "11")) { //#28748
        $_.cdf = $a([1, 1]); //#28657
        $_.ai90 = $get($_.vals, 0); //#28658
        if ($f($_.npre + 1) != $_.ai90.length) { //#28662
            $k[$j++] = $geti($_.ai90, $f($_.npre + 1), $f($f($_.ai90.length - $_.npre) - 1)); //#28660
        } else { //#28662
            $k[$j++] = ""; //#28662
        } //#28662
        $_.ai90rem = $k[--$j]; //#28664
        $k[$j++] = 'nalpha'; //#28665
        $k[$j++] = 0; //#28665
        $forall($_.ai90rem, function() { //#28665
            var _3C = $k[--$j]; //#28665
            if ((_3C >= 65) && (_3C <= 90)) { //#28665
                var _3D = $k[--$j]; //#28665
                $k[$j++] = $f(_3D + 1); //#28665
            } //#28665
        }); //#28665
        var _3E = $k[--$j]; //#28665
        $_[$k[--$j]] = _3E; //#28665
        $k[$j++] = 'nnums'; //#28666
        $k[$j++] = 0; //#28666
        $forall($_.ai90rem, function() { //#28666
            var _3H = $k[--$j]; //#28666
            if ((_3H >= 48) && (_3H <= 57)) { //#28666
                var _3I = $k[--$j]; //#28666
                $k[$j++] = $f(_3I + 1); //#28666
            } //#28666
        }); //#28666
        var _3J = $k[--$j]; //#28666
        $_[$k[--$j]] = _3J; //#28666
        $k[$j++] = 'mode'; //#28667
        if ($gt($_.nalpha, $_.nnums)) { //#28667
            $k[$j++] = "alpha"; //#28667
        } else { //#28667
            if ($_.nalpha == 0) { //#28667
                $k[$j++] = "numeric"; //#28667
            } else { //#28667
                $k[$j++] = "alphanumeric"; //#28667
            } //#28667
        } //#28667
        var _3O = $k[--$j]; //#28667
        $_[$k[--$j]] = _3O; //#28667
        if ($f($_.nalpha + $_.nnums) != $_.ai90rem.length) { //#28668
            $_.mode = "alphanumeric"; //#28668
        } //#28668
        $k[$j++] = Infinity; //#28669
        $aload($_.cdf); //#28670
        if ($eq($_.mode, "alphanumeric")) { //#28671
            $k[$j++] = 0; //#28671
        } //#28671
        if ($eq($_.mode, "numeric")) { //#28672
            $k[$j++] = 1; //#28672
            $k[$j++] = 0; //#28672
        } //#28672
        if ($eq($_.mode, "alpha")) { //#28673
            $k[$j++] = 1; //#28673
            $k[$j++] = 1; //#28673
        } //#28673
        $_.cdf = $a(); //#28673
        $k[$j++] = 'ais1'; //#28675
        if ($_.ais.length > 1) { //#28675
            $k[$j++] = $get($_.ais, 1); //#28675
        } else { //#28675
            $k[$j++] = -1; //#28675
        } //#28675
        var _3b = $k[--$j]; //#28675
        $_[$k[--$j]] = _3b; //#28675
        $k[$j++] = 'vals1'; //#28676
        if ($_.vals.length > 1) { //#28676
            $k[$j++] = $get($_.vals, 1); //#28676
        } else { //#28676
            $k[$j++] = -1; //#28676
        } //#28676
        var _3g = $k[--$j]; //#28676
        $_[$k[--$j]] = _3g; //#28676
        if ($eq($_.ais1, "21") || $eq($_.ais1, "8004")) { //#28680
            $k[$j++] = Infinity; //#28678
            $aload($_.cdf); //#28678
            if ($eq($_.ais1, "21")) { //#28678
                $k[$j++] = 1; //#28678
                $k[$j++] = 0; //#28678
            } else { //#28678
                $k[$j++] = 1; //#28678
                $k[$j++] = 1; //#28678
            } //#28678
            $_.cdf = $a(); //#28678
        } else { //#28680
            $k[$j++] = Infinity; //#28680
            $aload($_.cdf); //#28680
            $k[$j++] = 0; //#28680
            $_.cdf = $a(); //#28680
        } //#28680
        $k[$j++] = 'nval'; //#28682
        if ($_.npre != 0) { //#28682
            $k[$j++] = $cvi($geti($_.ai90, 0, $_.npre)); //#28682
        } else { //#28682
            $k[$j++] = 0; //#28682
        } //#28682
        var _3t = $k[--$j]; //#28682
        $_[$k[--$j]] = _3t; //#28682
        $search("BDHIJKLNPQRSTVXZ", $geti($_.ai90, $_.npre, 1)); //#28683
        if ($k[--$j]) { //#28687
            var _3z = $k[--$j]; //#28684
            var _40 = $k[--$j]; //#28684
            $k[$j++] = _3z.length; //#28684
            $k[$j++] = _40; //#28684
            $j--; //#28684
            var _41 = $k[--$j]; //#28684
            var _42 = $k[--$j]; //#28684
            $k[$j++] = _41; //#28684
            $k[$j++] = _42; //#28684
            $j--; //#28684
            $_.aval = $k[--$j]; //#28685
        } else { //#28687
            $j--; //#28687
            $_.aval = -1; //#28687
        } //#28687
        if (($_.nval < 31) && ($_.aval != -1)) { //#28713
            var _47 = $strcpy($s(5), "00000"); //#28690
            var _4A = $cvrs($s(5), $_.nval, 2); //#28690
            $puti(_47, 5 - _4A.length, _4A); //#28691
            $k[$j++] = _47; //#28692
            $k[$j++] = Infinity; //#28692
            var _4B = $k[--$j]; //#28692
            var _4C = $k[--$j]; //#28692
            $k[$j++] = _4B; //#28692
            $forall(_4C, function() { //#28692
                var _4D = $k[--$j]; //#28692
                $k[$j++] = $f(_4D - 48); //#28692
            }); //#28692
            $_.nbits = $a(); //#28692
            var _4G = $strcpy($s(4), "0000"); //#28693
            var _4J = $cvrs($s(4), $_.aval, 2); //#28693
            $puti(_4G, 4 - _4J.length, _4J); //#28694
            $k[$j++] = _4G; //#28695
            $k[$j++] = Infinity; //#28695
            var _4K = $k[--$j]; //#28695
            var _4L = $k[--$j]; //#28695
            $k[$j++] = _4K; //#28695
            $forall(_4L, function() { //#28695
                var _4M = $k[--$j]; //#28695
                $k[$j++] = $f(_4M - 48); //#28695
            }); //#28695
            $_.abits = $a(); //#28695
            $k[$j++] = Infinity; //#28696
            $aload($_.cdf); //#28697
            $aload($_.nbits); //#28698
            $aload($_.abits); //#28699
            $_.cdf = $a(); //#28699
        } else { //#28713
            var _4T = $strcpy($s(10), "0000000000"); //#28702
            var _4W = $cvrs($s(10), $_.nval, 2); //#28702
            $puti(_4T, 10 - _4W.length, _4W); //#28703
            $k[$j++] = _4T; //#28704
            $k[$j++] = Infinity; //#28704
            var _4X = $k[--$j]; //#28704
            var _4Y = $k[--$j]; //#28704
            $k[$j++] = _4X; //#28704
            $forall(_4Y, function() { //#28704
                var _4Z = $k[--$j]; //#28704
                $k[$j++] = $f(_4Z - 48); //#28704
            }); //#28704
            $_.nbits = $a(); //#28704
            var _4c = $strcpy($s(5), "00000"); //#28705
            var _4h = $cvrs($s(5), $f($get($_.ai90, $_.npre) - 65), 2); //#28705
            $puti(_4c, 5 - _4h.length, _4h); //#28706
            $k[$j++] = _4c; //#28707
            $k[$j++] = Infinity; //#28707
            var _4i = $k[--$j]; //#28707
            var _4j = $k[--$j]; //#28707
            $k[$j++] = _4i; //#28707
            $forall(_4j, function() { //#28707
                var _4k = $k[--$j]; //#28707
                $k[$j++] = $f(_4k - 48); //#28707
            }); //#28707
            $_.abits = $a(); //#28707
            $k[$j++] = Infinity; //#28708
            $aload($_.cdf); //#28709
            $k[$j++] = 1; //#28711
            $k[$j++] = 1; //#28711
            $k[$j++] = 1; //#28711
            $k[$j++] = 1; //#28711
            $k[$j++] = 1; //#28711
            $aload($_.nbits); //#28711
            $aload($_.abits); //#28712
            $_.cdf = $a(); //#28712
        } //#28713
        if ($ne($_.mode, "alpha")) { //#28731
            $k[$j++] = Infinity; //#28716
            $forall($_.ai90rem); //#28716
            if ($_.ais.length > 1) { //#28716
                $k[$j++] = $_.fnc1; //#28716
            } //#28716
            $_.gpf = $a(); //#28716
        } else { //#28731
            $k[$j++] = Infinity; //#28718
            $forall($_.ai90rem); //#28718
            if ($_.ais.length > 1) { //#28718
                $k[$j++] = $_.fnc1; //#28718
            } //#28718
            $_.in = $a(); //#28718
            $_.out = $a($_.in.length * 6); //#28719
            $_.j = 0; //#28720
            for (var _53 = 0, _52 = $_.in.length - 1; _53 <= _52; _53 += 1) { //#28725
                var _57 = $get($_.alpha, $get($_.in, _53)); //#28722
                $k[$j++] = _57; //#28723
                $k[$j++] = _57; //#28723
                $k[$j++] = Infinity; //#28723
                var _58 = $k[--$j]; //#28723
                var _59 = $k[--$j]; //#28723
                $k[$j++] = _58; //#28723
                $forall(_59, function() { //#28723
                    var _5A = $k[--$j]; //#28723
                    $k[$j++] = $f(_5A - 48); //#28723
                }); //#28723
                $puti($_.out, $_.j, $a()); //#28723
                $_.j = $k[--$j].length + $_.j; //#28724
            } //#28724
            $k[$j++] = Infinity; //#28726
            $aload($_.cdf); //#28727
            $aload($geti($_.out, 0, $_.j)); //#28728
            $_.cdf = $a(); //#28728
            $_.gpf = $a([]); //#28730
            if ($_.ais.length > 1) { //#28731
                $_.mode = "numeric"; //#28731
            } //#28731
        } //#28731
        $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#28733
        $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#28734
        $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#28735
        if ($_.ais.length != 0) { //#28747
            if ($eq($_.ais1, "21") || $eq($_.ais1, "8004")) { //#28746
                $k[$j++] = Infinity; //#28738
                $aload($_.gpf); //#28739
                $forall($_.vals1); //#28740
                $_.gpf = $a(); //#28740
                $_.ais = $geti($_.ais, 1, $_.ais.length - 1); //#28742
                $_.vals = $geti($_.vals, 1, $_.vals.length - 1); //#28743
                $_.fncs = $geti($_.fncs, 1, $_.fncs.length - 1); //#28744
                if ($_.ais.length != 0) { //#28745
                    $k[$j++] = Infinity; //#28745
                    $aload($_.gpf); //#28745
                    $k[$j++] = $_.fnc1; //#28745
                    $_.gpf = $a(); //#28745
                } //#28745
            } //#28745
        } //#28745
    } //#28745
    if ($eq($_.method, "0")) { //#28754
        $_.cdf = $a([0]); //#28751
        $_.gpf = $a([]); //#28752
        $_.mode = "numeric"; //#28753
    } //#28753
    for (var _5u = 0, _5t = $_.ais.length - 1; _5u <= _5t; _5u += 1) { //#28772
        $_.i = _5u; //#28758
        $_.ai = $get($_.ais, $_.i); //#28759
        $_.val = $get($_.vals, $_.i); //#28760
        var _64 = $a(($_.gpf.length + $_.ai.length) + $_.val.length); //#28761
        $puti(_64, 0, $_.gpf); //#28762
        $k[$j++] = _64; //#28763
        $k[$j++] = _64; //#28763
        $k[$j++] = $_.gpf.length; //#28763
        $k[$j++] = $_.ai; //#28763
        $k[$j++] = Infinity; //#28763
        var _68 = $k[--$j]; //#28763
        var _69 = $k[--$j]; //#28763
        $k[$j++] = _68; //#28763
        $forall(_69); //#28763
        var _6A = $a(); //#28763
        var _6B = $k[--$j]; //#28763
        $puti($k[--$j], _6B, _6A); //#28763
        var _6D = $k[--$j]; //#28764
        $k[$j++] = _6D; //#28764
        $k[$j++] = _6D; //#28764
        $k[$j++] = $_.gpf.length + $_.ai.length; //#28764
        $k[$j++] = $_.val; //#28764
        $k[$j++] = Infinity; //#28764
        var _6H = $k[--$j]; //#28764
        var _6I = $k[--$j]; //#28764
        $k[$j++] = _6H; //#28764
        $forall(_6I); //#28764
        var _6J = $a(); //#28764
        var _6K = $k[--$j]; //#28764
        $puti($k[--$j], _6K, _6J); //#28764
        $_.gpf = $k[--$j]; //#28765
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#28771
            var _6T = $a($_.gpf.length + 1); //#28767
            $puti(_6T, 0, $_.gpf); //#28768
            $put(_6T, $_.gpf.length, $_.fnc1); //#28769
            $_.gpf = _6T; //#28770
        } //#28770
    } //#28770
    if (!bwipp_gs1_cc.__28788__) { //#28788
        $_ = Object.create($_); //#28788
        var _6f = new Map([
            ["a", $a([$a([167, 138, 118, 108, 88, 78, 59]), $a([167, 138, 118, 98, 78]), $a([197, 167, 138, 108, 78])])],
            ["b", $a([$a([336, 296, 256, 208, 160, 104, 56]), $a([768, 648, 536, 416, 304, 208, 152, 112, 72, 32]), $a([1184, 1016, 840, 672, 496, 352, 264, 208, 152, 96, 56])])]
        ]); //#28785
        $_.bitcapsmaps = _6f; //#28787
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#28787
        bwipp_gs1_cc.__28788__ = 1; //#28787
        $_ = Object.getPrototypeOf($_); //#28787
    } //#28787
    $_.rembits = function() {
        $_.used = $k[--$j]; //#28791
        if ($ne($_.ccversion, "c")) { //#28814
            $_.bitcaps = $get($get($_.bitcapsmaps, $_.ccversion), $f($_.cccolumns - 2)); //#28793
            $k[$j++] = -1; //#28794
            $forall($_.bitcaps, function() { //#28794
                var _6p = $k[--$j]; //#28794
                $k[$j++] = _6p; //#28794
                if ($ge(_6p, $_.used)) { //#28794
                    var _6r = $k[--$j]; //#28794
                    var _6s = $k[--$j]; //#28794
                    $k[$j++] = _6r; //#28794
                    $k[$j++] = _6s; //#28794
                } //#28794
                $j--; //#28794
            }); //#28794
            var _6t = $k[--$j]; //#28795
            $k[$j++] = _6t; //#28795
            if (_6t != -1) { //#28795
                var _6v = $k[--$j]; //#28795
                $k[$j++] = $f(_6v - $_.used); //#28795
            } //#28795
        } else { //#28814
            var _6w = new Map([
                ["c", -1]
            ]); //#28797
            var _6y = $get(_6w, $_.ccversion); //#28797
            var _70 = ~~Math.ceil($_.used / 8); //#28798
            $_.m = ((~~(_70 / 6)) * 5) + (_70 % 6); //#28798
            if ($_.m <= 40) { //#28799
                $k[$j++] = 8; //#28799
            } //#28799
            if (($_.m >= 41) && ($_.m <= 160)) { //#28800
                $k[$j++] = 16; //#28800
            } //#28800
            if (($_.m >= 161) && ($_.m <= 320)) { //#28801
                $k[$j++] = 32; //#28801
            } //#28801
            if (($_.m >= 321) && ($_.m <= 833)) { //#28802
                $k[$j++] = 64; //#28802
            } //#28802
            if ($_.m >= 834) { //#28803
                $k[$j++] = 32; //#28803
            } //#28803
            $_.eccws = $k[--$j]; //#28804
            $_.m = $f($f($_.m + $_.eccws) + 3); //#28805
            if ($_.cccolumns > 30) { //#28806
                $_.cccolumns = 30; //#28806
            } //#28806
            for (;;) { //#28810
                if (((~~Math.ceil($_.m / $_.cccolumns)) <= 30) || ($_.cccolumns >= 30)) { //#28808
                    break; //#28808
                } //#28808
                $_.cccolumns = $_.cccolumns + 1; //#28809
            } //#28809
            $_.r = ~~Math.ceil($_.m / $_.cccolumns); //#28811
            if ($_.r < 3) { //#28812
                $_.r = 3; //#28812
            } //#28812
            var _7N = $f(($f(($_.cccolumns * $_.r) - $_.eccws)) - 3); //#28813
            $_.tgt = ($f(((~~(_7N / 5)) * 6) + (_7N % 5))) * 8; //#28813
            if ($_.used <= 8304) { //#28814
                $k[$j++] = $f($_.tgt - $_.used); //#28814
            } else { //#28814
                $k[$j++] = -1; //#28814
            } //#28814
        } //#28814
        var _7R = $k[--$j]; //#28816
        $k[$j++] = _7R; //#28829
        if (_7R == -1) { //#28829
            $j--; //#28817
            if ($eq($_.ccversion, "a")) { //#28825
                $_.ccversion = "b"; //#28819
            } else { //#28825
                if ($eq($_.ccversion, "b") && $eq($_.lintype, "gs1-128")) { //#28825
                    $_.ccversion = "c"; //#28822
                    $_.cccolumns = ~~(($_.linwidth - 52) / 17); //#28823
                } else { //#28825
                    $_.ccversion = -1; //#28825
                } //#28825
            } //#28825
            $k[$j++] = $_.used; //#28828
            $_.rembits(); //#28828
        } //#28828
    }; //#28828
    $_.encode = function() {
        var _7X = $k[--$j]; //#28833
        $k[$j++] = _7X; //#28833
        if ($ne(_7X, 'raw')) { //#28833
            var _7Y = $k[--$j]; //#28833
            var _7a = $get(_7Y, $k[--$j]); //#28833
            $k[$j++] = _7a; //#28833
        } else { //#28833
            $j--; //#28833
        } //#28833
        $k[$j++] = Infinity; //#28834
        var _7b = $k[--$j]; //#28834
        var _7c = $k[--$j]; //#28834
        $k[$j++] = _7b; //#28834
        $forall(_7c, function() { //#28834
            var _7d = $k[--$j]; //#28834
            $k[$j++] = $f(_7d - 48); //#28834
        }); //#28834
        var _7e = $a(); //#28834
        $puti($_.gpfenc, $_.j, _7e); //#28836
        $_.j = _7e.length + $_.j; //#28837
    }; //#28837
    $k[$j++] = Infinity; //#28841
    for (var _7j = 0, _7k = $_.gpf.length; _7j < _7k; _7j++) { //#28841
        $k[$j++] = 0; //#28841
    } //#28841
    $k[$j++] = 0; //#28841
    $k[$j++] = -1; //#28841
    $_.numericruns = $a(); //#28841
    $k[$j++] = Infinity; //#28842
    for (var _7n = 0, _7o = $_.gpf.length; _7n < _7o; _7n++) { //#28842
        $k[$j++] = 0; //#28842
    } //#28842
    $k[$j++] = 0; //#28842
    $_.alphanumericruns = $a(); //#28842
    $k[$j++] = Infinity; //#28843
    for (var _7r = 0, _7s = $_.gpf.length; _7r < _7s; _7r++) { //#28843
        $k[$j++] = 0; //#28843
    } //#28843
    $k[$j++] = 9999; //#28843
    $_.nextiso646only = $a(); //#28843
    for (var _7v = $_.gpf.length - 1; _7v >= 0; _7v -= 1) { //#28865
        $_.i = _7v; //#28845
        var _80 = $strcpy($s(2), "00"); //#28847
        var _83 = $get($_.gpf, $_.i); //#28848
        $k[$j++] = $get($_.gpf, $_.i); //#28848
        $k[$j++] = _80; //#28848
        $k[$j++] = _80; //#28848
        $k[$j++] = 0; //#28848
        $k[$j++] = _83; //#28848
        if (_83 == $_.fnc1) { //#28848
            $j--; //#28848
            $k[$j++] = 94; //#28848
        } //#28848
        var _85 = $k[--$j]; //#28848
        var _86 = $k[--$j]; //#28848
        $put($k[--$j], _86, _85); //#28848
        if ($_.i < ($_.gpf.length - 1)) { //#28849
            var _8A = $k[--$j]; //#28849
            var _8D = $get($_.gpf, $_.i + 1); //#28849
            $k[$j++] = _8A; //#28849
            $k[$j++] = _8A; //#28849
            $k[$j++] = 1; //#28849
            $k[$j++] = _8D; //#28849
            if (_8D == $_.fnc1) { //#28849
                $j--; //#28849
                $k[$j++] = 94; //#28849
            } //#28849
            var _8F = $k[--$j]; //#28849
            var _8G = $k[--$j]; //#28849
            $put($k[--$j], _8G, _8F); //#28849
        } //#28849
        var _8K = $get($_.numeric, $k[--$j]) !== undefined; //#28850
        if (_8K) { //#28853
            $put($_.numericruns, $_.i, $f($get($_.numericruns, $_.i + 2) + 2)); //#28851
        } else { //#28853
            $put($_.numericruns, $_.i, 0); //#28853
        } //#28853
        var _8S = $k[--$j]; //#28855
        var _8U = $get($_.alphanumeric, _8S) !== undefined; //#28855
        $k[$j++] = _8S; //#28859
        if (_8U) { //#28858
            $put($_.alphanumericruns, $_.i, $f($get($_.alphanumericruns, $_.i + 1) + 1)); //#28856
        } else { //#28858
            $put($_.alphanumericruns, $_.i, 0); //#28858
        } //#28858
        var _8c = $k[--$j]; //#28860
        var _8e = $get($_.iso646, _8c) !== undefined; //#28860
        var _8g = $get($_.alphanumeric, _8c) !== undefined; //#28860
        if (_8e && (!_8g)) { //#28863
            $put($_.nextiso646only, $_.i, 0); //#28861
        } else { //#28863
            $put($_.nextiso646only, $_.i, $f($get($_.nextiso646only, $_.i + 1) + 1)); //#28863
        } //#28863
    } //#28863
    $_.gpfenc = $a(8304); //#28868
    $_.i = 0; //#28869
    $_.j = 0; //#28869
    for (;;) { //#28959
        if ($_.i == $_.gpf.length) { //#28871
            break; //#28871
        } //#28871
        for (;;) { //#28958
            if ($eq($_.mode, "numeric")) { //#28907
                if ($_.i <= ($_.gpf.length - 2)) { //#28904
                    var _8u = $s(2); //#28876
                    var _8x = $get($_.gpf, $_.i); //#28877
                    $k[$j++] = _8u; //#28877
                    $k[$j++] = _8u; //#28877
                    $k[$j++] = 0; //#28877
                    $k[$j++] = _8x; //#28877
                    if (_8x == $_.fnc1) { //#28877
                        $j--; //#28877
                        $k[$j++] = 94; //#28877
                    } //#28877
                    var _8z = $k[--$j]; //#28877
                    var _90 = $k[--$j]; //#28877
                    $put($k[--$j], _90, _8z); //#28877
                    var _92 = $k[--$j]; //#28878
                    var _95 = $get($_.gpf, $_.i + 1); //#28878
                    $k[$j++] = _92; //#28878
                    $k[$j++] = _92; //#28878
                    $k[$j++] = 1; //#28878
                    $k[$j++] = _95; //#28878
                    if (_95 == $_.fnc1) { //#28878
                        $j--; //#28878
                        $k[$j++] = 94; //#28878
                    } //#28878
                    var _97 = $k[--$j]; //#28878
                    var _98 = $k[--$j]; //#28878
                    $put($k[--$j], _98, _97); //#28878
                    var _9A = $k[--$j]; //#28879
                    var _9C = $get($_.numeric, _9A) !== undefined; //#28879
                    $k[$j++] = _9A; //#28883
                    if (_9C) { //#28883
                        $k[$j++] = $_.numeric; //#28880
                        $_.encode(); //#28880
                        $_.i = $_.i + 2; //#28881
                        break; //#28882
                    } //#28882
                    $j--; //#28884
                    $k[$j++] = $_.lalphanumeric; //#28885
                    $k[$j++] = $_.numeric; //#28885
                    $_.encode(); //#28885
                    $_.mode = "alphanumeric"; //#28886
                    break; //#28887
                } else { //#28904
                    var _9J = $get($_.gpf, $_.i); //#28889
                    if ((_9J < 48) || (_9J > 57)) { //#28893
                        $k[$j++] = $_.lalphanumeric; //#28890
                        $k[$j++] = $_.numeric; //#28890
                        $_.encode(); //#28890
                        $_.mode = "alphanumeric"; //#28891
                        break; //#28892
                    } //#28892
                    $k[$j++] = 'rem'; //#28894
                    $k[$j++] = $_.cdf.length + $_.j; //#28894
                    $_.rembits(); //#28894
                    var _9O = $k[--$j]; //#28894
                    $_[$k[--$j]] = _9O; //#28894
                    if (($_.rem >= 4) && ($_.rem <= 6)) { //#28904
                        var _9V = $geti($strcpy($s(6), "000000"), 0, $_.rem); //#28896
                        var _9a = $cvrs($s(4), $f($get($_.gpf, $_.i) - 47), 2); //#28897
                        $puti(_9V, 4 - _9a.length, _9a); //#28898
                        $k[$j++] = _9V; //#28898
                        $k[$j++] = 'raw'; //#28898
                        $_.encode(); //#28898
                        $_.i = $_.i + 1; //#28899
                        break; //#28900
                    } else { //#28904
                        var _9c = $s(2); //#28902
                        $put(_9c, 0, $get($_.gpf, $_.i)); //#28902
                        $put(_9c, 1, 94); //#28902
                        $k[$j++] = _9c; //#28902
                        $k[$j++] = $_.numeric; //#28902
                        $_.encode(); //#28902
                        $_.i = $_.i + 1; //#28903
                        break; //#28904
                    } //#28904
                } //#28904
            } //#28904
            if ($eq($_.mode, "alphanumeric")) { //#28934
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#28915
                    $k[$j++] = $_.fnc1; //#28911
                    $k[$j++] = $_.alphanumeric; //#28911
                    $_.encode(); //#28911
                    $_.mode = "numeric"; //#28912
                    $_.i = $_.i + 1; //#28913
                    break; //#28914
                } //#28914
                var _9s = $get($_.gpf, $_.i); //#28916
                var _9u = $get($_.iso646, _9s) !== undefined; //#28916
                var _9w = $get($_.alphanumeric, _9s) !== undefined; //#28916
                if (_9u && (!_9w)) { //#28920
                    $k[$j++] = $_.liso646; //#28917
                    $k[$j++] = $_.alphanumeric; //#28917
                    $_.encode(); //#28917
                    $_.mode = "iso646"; //#28918
                    break; //#28919
                } //#28919
                if ($get($_.numericruns, $_.i) >= 6) { //#28925
                    $k[$j++] = $_.lnumeric; //#28922
                    $k[$j++] = $_.alphanumeric; //#28922
                    $_.encode(); //#28922
                    $_.mode = "numeric"; //#28923
                    break; //#28924
                } //#28924
                var _A6 = $get($_.numericruns, $_.i); //#28926
                if ((_A6 >= 4) && ($f(_A6 + $_.i) == $_.gpf.length)) { //#28930
                    $k[$j++] = $_.lnumeric; //#28927
                    $k[$j++] = $_.alphanumeric; //#28927
                    $_.encode(); //#28927
                    $_.mode = "numeric"; //#28928
                    break; //#28929
                } //#28929
                $k[$j++] = $get($_.gpf, $_.i); //#28931
                $k[$j++] = $_.alphanumeric; //#28931
                $_.encode(); //#28931
                $_.i = $_.i + 1; //#28932
                break; //#28933
            } //#28933
            if ($eq($_.mode, "iso646")) { //#28956
                if ($get($_.gpf, $_.i) == $_.fnc1) { //#28942
                    $k[$j++] = $_.fnc1; //#28938
                    $k[$j++] = $_.iso646; //#28938
                    $_.encode(); //#28938
                    $_.mode = "numeric"; //#28939
                    $_.i = $_.i + 1; //#28940
                    break; //#28941
                } //#28941
                if (($get($_.numericruns, $_.i) >= 4) && ($get($_.nextiso646only, $_.i) >= 10)) { //#28947
                    $k[$j++] = $_.lnumeric; //#28944
                    $k[$j++] = $_.iso646; //#28944
                    $_.encode(); //#28944
                    $_.mode = "numeric"; //#28945
                    break; //#28946
                } //#28946
                if (($get($_.alphanumericruns, $_.i) >= 5) && ($get($_.nextiso646only, $_.i) >= 10)) { //#28952
                    $k[$j++] = $_.lalphanumeric; //#28949
                    $k[$j++] = $_.iso646; //#28949
                    $_.encode(); //#28949
                    $_.mode = "alphanumeric"; //#28950
                    break; //#28951
                } //#28951
                $k[$j++] = $get($_.gpf, $_.i); //#28953
                $k[$j++] = $_.iso646; //#28953
                $_.encode(); //#28953
                $_.i = $_.i + 1; //#28954
                break; //#28955
            } //#28955
        } //#28955
    } //#28955
    $_.gpf = $geti($_.gpfenc, 0, $_.j); //#28960
    $k[$j++] = 'pad'; //#28963
    $k[$j++] = $_.cdf.length + $_.gpf.length; //#28963
    $_.rembits(); //#28963
    var _Ap = $a($k[--$j]); //#28963
    $_[$k[--$j]] = _Ap; //#28963
    if ($_.pad.length > 0) { //#28975
        for (var _Au = 0, _At = $_.pad.length - 1; _Au <= _At; _Au += 5) { //#28968
            $_.i = _Au; //#28966
            var _Av = $_.pad; //#28967
            var _Aw = $_.i; //#28967
            var _Ax = $a([0, 0, 1, 0, 0]); //#28967
            var _Ay = $_.pad; //#28967
            var _Az = $_.i; //#28967
            var _B0 = 5; //#28967
            var _B1 = _Ay.length - _Az; //#28967
            if ((_Ay.length - _Az) > 5) { //#28967
                var _ = _B0; //#28967
                _B0 = _B1; //#28967
                _B1 = _; //#28967
            } //#28967
            $puti(_Av, _Aw, $geti(_Ax, 0, _B1)); //#28967
        } //#28967
        if ($eq($_.mode, "numeric")) { //#28971
            $k[$j++] = Infinity; //#28970
            $k[$j++] = 0; //#28970
            $k[$j++] = 0; //#28970
            $k[$j++] = 0; //#28970
            $k[$j++] = 0; //#28970
            $aload($_.pad); //#28970
            $_.pad = $geti($a(), 0, $_.pad.length); //#28970
        } //#28970
        if ($eq($_.mode, "alpha")) { //#28974
            $k[$j++] = Infinity; //#28973
            $k[$j++] = 1; //#28973
            $k[$j++] = 1; //#28973
            $k[$j++] = 1; //#28973
            $k[$j++] = 1; //#28973
            $k[$j++] = 1; //#28973
            $k[$j++] = 0; //#28973
            $k[$j++] = 0; //#28973
            $k[$j++] = 0; //#28973
            $k[$j++] = 0; //#28973
            $aload($_.pad); //#28973
            $_.pad = $geti($a(), 0, $_.pad.length); //#28973
        } //#28973
    } //#28973
    $k[$j++] = Infinity; //#28978
    $aload($_.cdf); //#28979
    $aload($_.gpf); //#28980
    $aload($_.pad); //#28981
    $_.bits = $a(); //#28981
    if (!bwipp_gs1_cc.__28999__) { //#28999
        $_ = Object.create($_); //#28999
        $k[$j++] = Infinity; //#28985
        $k[$j++] = $a([0, 0, 0, 0, 0, 0, 1]); //#28987
        for (var _BI = 0, _BJ = 68; _BI < _BJ; _BI++) { //#28987
            $k[$j++] = $a(7); //#28987
        } //#28987
        $_.pwr928 = $a(); //#28987
        for (var _BM = 1; _BM <= 68; _BM += 1) { //#28998
            $_.j = _BM; //#28990
            $_.v = 0; //#28991
            for (var _BN = 6; _BN >= 1; _BN -= 1) { //#28996
                $_.i = _BN; //#28993
                $_.v = $f(($get($get($_.pwr928, $_.j - 1), $_.i) * 2) + (~~($_.v / 928))); //#28994
                $put($get($_.pwr928, $_.j), $_.i, $_.v % 928); //#28995
            } //#28995
            $put($get($_.pwr928, $_.j), 0, $f(($get($get($_.pwr928, $_.j - 1), 0) * 2) + (~~($_.v / 928)))); //#28997
        } //#28997
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_gs1_cc.$ctx[id] = $_[id]); //#28997
        bwipp_gs1_cc.__28999__ = 1; //#28997
        $_ = Object.getPrototypeOf($_); //#28997
    } //#28997
    if ($_.ccversion == "a") { //#29041
        $k[$j++] = Infinity; //#29002
        for (var _Bj = 0, _Bk = 28; _Bj < _Bk; _Bj++) { //#29002
            $k[$j++] = 0; //#29002
        } //#29002
        $_.cws = $a(); //#29002
        $_.b = 0; //#29003
        $_.c = 0; //#29003
        for (;;) { //#29027
            if ($_.b == $_.bits.length) { //#29005
                break; //#29005
            } //#29005
            var _Bo = $_.bits; //#29006
            var _Bp = $_.b; //#29006
            var _Bq = $_.bits; //#29006
            var _Br = $_.b; //#29006
            var _Bs = _Bq.length - _Br; //#29006
            var _Bt = 69; //#29006
            if (69 > (_Bq.length - _Br)) { //#29006
                var _ = _Bs; //#29006
                _Bs = _Bt; //#29006
                _Bt = _; //#29006
            } //#29006
            $_.bs = $geti(_Bo, _Bp, _Bt); //#29006
            $_.bsl = $_.bs.length; //#29007
            $_.cs = $geti($_.cws, $_.c, (~~($_.bsl / 10)) + 1); //#29008
            $_.csl = $_.cs.length; //#29009
            for (var _C3 = 0, _C2 = $_.bsl - 1; _C3 <= _C2; _C3 += 1) { //#29019
                $_.i = _C3; //#29011
                for (var _C6 = 0, _C5 = $_.csl - 1; _C6 <= _C5; _C6 += 1) { //#29018
                    $_.j = _C6; //#29013
                    var _C7 = $_.cs; //#29014
                    var _C8 = $_.j; //#29014
                    $put(_C7, _C8, $f($get(_C7, _C8) + ($get($get($_.pwr928, $_.i), ($_.j + 7) - $_.csl) * $get($_.bs, ($_.bsl - $_.i) - 1)))); //#29017
                } //#29017
            } //#29017
            for (var _CL = $_.csl - 1; _CL >= 1; _CL -= 1) { //#29024
                $_.i = _CL; //#29021
                var _CM = $_.cs; //#29022
                var _CN = $_.i; //#29022
                $put(_CM, _CN - 1, $f($get(_CM, _CN - 1) + (~~($get($_.cs, $_.i) / 928)))); //#29022
                var _CS = $_.cs; //#29023
                var _CT = $_.i; //#29023
                $put(_CS, _CT, $get(_CS, _CT) % 928); //#29023
            } //#29023
            $_.b = $_.b + $_.bsl; //#29025
            $_.c = $_.c + $_.csl; //#29026
        } //#29026
        $_.cws = $geti($_.cws, 0, $_.c); //#29028
        $_.barcode = $s($_.cws.length * 4); //#29029
        for (var _Cg = 0, _Cf = $_.cws.length - 1; _Cg <= _Cf; _Cg += 1) { //#29035
            $_.i = _Cg; //#29031
            var _Ci = $strcpy($s(4), "^000"); //#29032
            var _Cn = $cvrs($s(4), $get($_.cws, $_.i), 10); //#29032
            $puti(_Ci, 4 - _Cn.length, _Cn); //#29033
            $puti($_.barcode, $_.i * 4, _Ci); //#29034
        } //#29034
        delete $_.options["parse"]; //#29036
        $put($_.options, "dontdraw", true); //#29037
        $put($_.options, "cca", true); //#29038
        $put($_.options, "columns", $_.cccolumns); //#29039
        $k[$j++] = 'args'; //#29040
        $k[$j++] = $_.barcode; //#29040
        $k[$j++] = $_.options; //#29040
        bwipp_micropdf417(); //#29040
        var _Cx = $k[--$j]; //#29040
        $_[$k[--$j]] = _Cx; //#29040
    } //#29040
    if ($_.ccversion == "b") { //#29055
        $_.barcode = $s(~~($_.bits.length / 8)); //#29044
        for (var _D4 = 0, _D3 = $_.barcode.length - 1; _D4 <= _D3; _D4 += 1) { //#29049
            $_.i = _D4; //#29046
            var _D7 = $geti($_.bits, $_.i * 8, 8); //#29047
            $k[$j++] = 0; //#29047
            for (var _D8 = 0, _D9 = _D7.length; _D8 < _D9; _D8++) { //#29047
                var _DB = $k[--$j]; //#29047
                $k[$j++] = $f(_DB + $get(_D7, _D8)) * 2; //#29047
            } //#29047
            $put($_.barcode, $_.i, ~~($k[--$j] / 2)); //#29048
        } //#29048
        delete $_.options["parse"]; //#29050
        $put($_.options, "dontdraw", true); //#29051
        $put($_.options, "ccb", true); //#29052
        $put($_.options, "columns", $_.cccolumns); //#29053
        $k[$j++] = 'args'; //#29054
        $k[$j++] = $_.barcode; //#29054
        $k[$j++] = $_.options; //#29054
        bwipp_micropdf417(); //#29054
        var _DM = $k[--$j]; //#29054
        $_[$k[--$j]] = _DM; //#29054
    } //#29054
    if ($_.ccversion == "c") { //#29070
        $_.barcode = $s(~~($_.bits.length / 8)); //#29058
        for (var _DT = 0, _DS = $_.barcode.length - 1; _DT <= _DS; _DT += 1) { //#29063
            $_.i = _DT; //#29060
            var _DW = $geti($_.bits, $_.i * 8, 8); //#29061
            $k[$j++] = 0; //#29061
            for (var _DX = 0, _DY = _DW.length; _DX < _DY; _DX++) { //#29061
                var _Da = $k[--$j]; //#29061
                $k[$j++] = $f(_Da + $get(_DW, _DX)) * 2; //#29061
            } //#29061
            $put($_.barcode, $_.i, ~~($k[--$j] / 2)); //#29062
        } //#29062
        delete $_.options["parse"]; //#29064
        $put($_.options, "dontdraw", true); //#29065
        $put($_.options, "ccc", true); //#29066
        $put($_.options, "columns", $_.cccolumns); //#29067
        $put($_.options, "eclevel", (~~(Math.log($_.eccws) / Math.log(2))) - 1); //#29068
        $k[$j++] = 'args'; //#29069
        $k[$j++] = $_.barcode; //#29069
        $k[$j++] = $_.options; //#29069
        bwipp_pdf417(); //#29069
        var _Dn = $k[--$j]; //#29069
        $_[$k[--$j]] = _Dn; //#29069
    } //#29069
    $k[$j++] = $_.args; //#29073
    if (!$_.dontdraw) { //#29073
        bwipp_renmatrix(); //#29073
    } //#29073
    $_ = Object.getPrototypeOf($_); //#29075
    $_ = Object.getPrototypeOf($_); //#29077
} //bwipp_gs1_cc
function bwipp_ean13composite() {
    $_ = Object.create($_); //#29109
    $_.dontdraw = false; //#29112
    $_.usematrix = false; //#29113
    $_.parse = false; //#29114
    $_.dontlint = false; //#29115
    $_.lintreqs = true; //#29116
    $k[$j++] = $_; //#29118
    bwipp_processoptions(); //#29118
    $_.options = $k[--$j]; //#29118
    $_.barcode = $k[--$j]; //#29119
    if ($_.dontdraw) { //#29121
        $_.usematrix = true; //#29121
    } //#29121
    $search($_.barcode, "|"); //#29124
    if ($k[--$j]) { //#29129
        $_.linear = $k[--$j]; //#29125
        $j--; //#29126
        $_.comp = $k[--$j]; //#29127
    } else { //#29129
        $j--; //#29129
        $k[$j++] = 'bwipp.missingCompositeComponent#29129'; //#29129
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29129
        bwipp_raiseerror(); //#29129
    } //#29129
    $put($_.options, "lintype", "ean13"); //#29132
    $put($_.options, "inkspreadv", 0); //#29133
    $put($_.options, "dontdraw", true); //#29134
    $put($_.options, "dontlint", true); //#29135
    var _C = $s($_.comp.length + 18); //#29138
    $puti(_C, 0, "(01)00000000000000"); //#29139
    $puti(_C, 18, $_.comp); //#29140
    $k[$j++] = _C; //#29141
    $k[$j++] = 'ai'; //#29141
    bwipp_gs1process(); //#29141
    $j -= 3; //#29141
    $k[$j++] = $_.linear; //#29144
    $k[$j++] = $_.options; //#29144
    bwipp_ean13(); //#29144
    if (!$_.usematrix) { //#29236
        $$.save(); //#29146
        bwipp_renlinear(); //#29148
        var _H = $$.currpos(); //#29150
        $$.rmoveto(-3, 78); //#29153
        $k[$j++] = _H.x; //#29153
        $k[$j++] = _H.y; //#29153
        $k[$j++] = $_.comp; //#29153
        $k[$j++] = $_.options; //#29153
        bwipp_gs1_cc(); //#29153
        bwipp_renmatrix(); //#29153
        var _K = $k[--$j]; //#29156
        $$.moveto($f($k[--$j] - 1), $f(_K + 72)); //#29156
        $k[$j++] = Infinity; //#29156
        $k[$j++] = Infinity; //#29158
        $k[$j++] = 0; //#29159
        $k[$j++] = 1; //#29159
        for (var _M = 0, _N = 93; _M < _N; _M++) { //#29159
            $k[$j++] = 0; //#29159
        } //#29159
        $k[$j++] = 1; //#29160
        $k[$j++] = 0; //#29160
        $k[$j++] = 1; //#29160
        $k[$j++] = 0; //#29160
        for (var _O = 0, _P = 93; _O < _P; _O++) { //#29160
            $k[$j++] = 0; //#29160
        } //#29160
        $k[$j++] = 0; //#29161
        $k[$j++] = 1; //#29161
        $k[$j++] = 0; //#29161
        $k[$j++] = 1; //#29161
        for (var _Q = 0, _R = 93; _Q < _R; _Q++) { //#29161
            $k[$j++] = 0; //#29161
        } //#29161
        $k[$j++] = 1; //#29161
        $k[$j++] = 0; //#29161
        var _S = $a(); //#29161
        $k[$j++] = 'ren'; //#29167
        $k[$j++] = 'renmatrix'; //#29167
        $k[$j++] = 'pixs'; //#29167
        $k[$j++] = _S; //#29167
        $k[$j++] = 'pixx'; //#29167
        $k[$j++] = 97; //#29167
        $k[$j++] = 'pixy'; //#29167
        $k[$j++] = 3; //#29167
        $k[$j++] = 'height'; //#29167
        $k[$j++] = 6 / 72; //#29167
        $k[$j++] = 'width'; //#29167
        $k[$j++] = 97 / 72; //#29167
        $k[$j++] = 'opt'; //#29167
        $k[$j++] = $_.options; //#29167
        var _U = $d(); //#29167
        $k[$j++] = _U; //#29168
        bwipp_renmatrix(); //#29168
        $$.restore(); //#29170
    } else { //#29236
        $_.linsym = $k[--$j]; //#29172
        $_.sbs = $get($_.linsym, 'sbs'); //#29173
        $_.bhs = $get($_.linsym, 'bhs'); //#29174
        $_.bbs = $get($_.linsym, 'bbs'); //#29175
        $k[$j++] = 'linwidth'; //#29176
        $k[$j++] = 0; //#29176
        $forall($_.sbs, function() { //#29176
            var _d = $k[--$j]; //#29176
            var _e = $k[--$j]; //#29176
            $k[$j++] = $f(_e + $cvi(_d)); //#29176
        }); //#29176
        var _f = $k[--$j]; //#29176
        var _g = $k[--$j]; //#29176
        $_[_g] = _f; //#29176
        $k[$j++] = 'compsym'; //#29178
        $k[$j++] = $_.comp; //#29178
        $k[$j++] = $_.options; //#29178
        bwipp_gs1_cc(); //#29178
        var _j = $k[--$j]; //#29178
        $_[$k[--$j]] = _j; //#29178
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29179
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29180
        $k[$j++] = Infinity; //#29182
        for (var _q = 0, _r = $f($_.ccpixx - 97); _q < _r; _q++) { //#29182
            $k[$j++] = 0; //#29182
        } //#29182
        $_.linpad = $a(); //#29182
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 1)) - $_.ccpixx); //#29184
        if ($_.diff > 0) { //#29190
            $k[$j++] = Infinity; //#29186
            for (var _y = 0, _z = $_.diff; _y < _z; _y++) { //#29186
                $k[$j++] = 0; //#29186
            } //#29186
            $_.ccrpad = $a(); //#29186
            $_.pixx = $f($_.ccpixx + $_.diff); //#29187
        } else { //#29190
            $_.ccrpad = $a(0); //#29189
            $_.pixx = $_.ccpixx; //#29190
        } //#29190
        $k[$j++] = Infinity; //#29193
        for (var _18 = 0, _19 = $_.ccpixx, _17 = $_.ccpixs.length - 1; _19 < 0 ? _18 >= _17 : _18 <= _17; _18 += _19) { //#29197
            $_.i = _18; //#29195
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29196
            $aload($_.ccrpad); //#29196
        } //#29196
        for (var _1F = 0, _1G = 2; _1F < _1G; _1F++) { //#29198
            $aload($_.linpad); //#29198
            $k[$j++] = 0; //#29198
            $k[$j++] = 1; //#29198
            for (var _1I = 0, _1J = 93; _1I < _1J; _1I++) { //#29198
                $k[$j++] = 0; //#29198
            } //#29198
            $k[$j++] = 1; //#29198
            $k[$j++] = 0; //#29198
            $aload($_.ccrpad); //#29198
        } //#29198
        for (var _1L = 0, _1M = 2; _1L < _1M; _1L++) { //#29199
            $aload($_.linpad); //#29199
            $k[$j++] = 1; //#29199
            $k[$j++] = 0; //#29199
            for (var _1O = 0, _1P = 93; _1O < _1P; _1O++) { //#29199
                $k[$j++] = 0; //#29199
            } //#29199
            $k[$j++] = 0; //#29199
            $k[$j++] = 1; //#29199
            $aload($_.ccrpad); //#29199
        } //#29199
        for (var _1R = 0, _1S = 2; _1R < _1S; _1R++) { //#29200
            $aload($_.linpad); //#29200
            $k[$j++] = 0; //#29200
            $k[$j++] = 1; //#29200
            for (var _1U = 0, _1V = 93; _1U < _1V; _1U++) { //#29200
                $k[$j++] = 0; //#29200
            } //#29200
            $k[$j++] = 1; //#29200
            $k[$j++] = 0; //#29200
            $aload($_.ccrpad); //#29200
        } //#29200
        for (var _1X = 71; _1X >= 0; _1X -= 1) { //#29219
            $_.y = _1X; //#29202
            $aload($_.linpad); //#29203
            $k[$j++] = 0; //#29217
            for (var _1b = 0, _1a = $_.sbs.length - 1; _1b <= _1a; _1b += 1) { //#29217
                $_.i = _1b; //#29206
                if (($_.i % 2) == 0) { //#29215
                    var _1g = $get($_.bbs, ~~($_.i / 2)) * 72; //#29209
                    if ((_1g > $_.y) || (($f(_1g + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#29212
                        for (var _1p = 0, _1q = $cvi($get($_.sbs, $_.i)); _1p < _1q; _1p++) { //#29210
                            $k[$j++] = 0; //#29210
                        } //#29210
                    } else { //#29212
                        for (var _1u = 0, _1v = $cvi($get($_.sbs, $_.i)); _1u < _1v; _1u++) { //#29212
                            $k[$j++] = 1; //#29212
                        } //#29212
                    } //#29212
                } else { //#29215
                    for (var _1z = 0, _20 = $cvi($get($_.sbs, $_.i)); _1z < _20; _1z++) { //#29215
                        $k[$j++] = 0; //#29215
                    } //#29215
                } //#29215
            } //#29215
            if ($_.diff < 0) { //#29218
                $k[$j++] = 0; //#29218
            } //#29218
        } //#29218
        $_.pixs = $a(); //#29218
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29222
        var _2B = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29230
        $k[$j++] = _2B; //#29237
        if (!$_.dontdraw) { //#29237
            $$.save(); //#29234
            bwipp_renmatrix(); //#29235
            $$.restore(); //#29236
        } //#29236
    } //#29236
    $_ = Object.getPrototypeOf($_); //#29240
} //bwipp_ean13composite
function bwipp_ean8composite() {
    $_ = Object.create($_); //#29272
    $_.dontdraw = false; //#29275
    $_.usematrix = false; //#29276
    $_.parse = false; //#29277
    $_.dontlint = false; //#29278
    $_.lintreqs = true; //#29279
    $k[$j++] = $_; //#29281
    bwipp_processoptions(); //#29281
    $_.options = $k[--$j]; //#29281
    $_.barcode = $k[--$j]; //#29282
    if ($_.dontdraw) { //#29284
        $_.usematrix = true; //#29284
    } //#29284
    $search($_.barcode, "|"); //#29287
    if ($k[--$j]) { //#29292
        $_.linear = $k[--$j]; //#29288
        $j--; //#29289
        $_.comp = $k[--$j]; //#29290
    } else { //#29292
        $j--; //#29292
        $k[$j++] = 'bwipp.missingCompositeComponent#29292'; //#29292
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29292
        bwipp_raiseerror(); //#29292
    } //#29292
    $put($_.options, "lintype", "ean8"); //#29296
    $put($_.options, "inkspreadv", 0); //#29297
    $put($_.options, "dontdraw", true); //#29298
    $put($_.options, "dontlint", true); //#29299
    var _C = $s($_.comp.length + 18); //#29302
    $puti(_C, 0, "(01)00000000000000"); //#29303
    $puti(_C, 18, $_.comp); //#29304
    $k[$j++] = _C; //#29305
    $k[$j++] = 'ai'; //#29305
    bwipp_gs1process(); //#29305
    $j -= 3; //#29305
    $k[$j++] = $_.linear; //#29308
    $k[$j++] = $_.options; //#29308
    bwipp_ean8(); //#29308
    if (!$_.usematrix) { //#29402
        $$.save(); //#29310
        bwipp_renlinear(); //#29312
        var _H = $$.currpos(); //#29314
        $k[$j++] = _H.x; //#29317
        $k[$j++] = _H.y; //#29317
        $k[$j++] = $_.comp; //#29317
        $k[$j++] = $_.options; //#29317
        bwipp_gs1_cc(); //#29317
        var _K = $k[--$j]; //#29318
        $$.rmoveto($f(70 - $get(_K, "pixx")), 78); //#29318
        $k[$j++] = _K; //#29319
        bwipp_renmatrix(); //#29319
        var _M = $k[--$j]; //#29322
        $$.moveto($f($k[--$j] - 1), $f(_M + 72)); //#29322
        $k[$j++] = Infinity; //#29322
        $k[$j++] = Infinity; //#29324
        $k[$j++] = 0; //#29325
        $k[$j++] = 1; //#29325
        for (var _O = 0, _P = 65; _O < _P; _O++) { //#29325
            $k[$j++] = 0; //#29325
        } //#29325
        $k[$j++] = 1; //#29326
        $k[$j++] = 0; //#29326
        $k[$j++] = 1; //#29326
        $k[$j++] = 0; //#29326
        for (var _Q = 0, _R = 65; _Q < _R; _Q++) { //#29326
            $k[$j++] = 0; //#29326
        } //#29326
        $k[$j++] = 0; //#29327
        $k[$j++] = 1; //#29327
        $k[$j++] = 0; //#29327
        $k[$j++] = 1; //#29327
        for (var _S = 0, _T = 65; _S < _T; _S++) { //#29327
            $k[$j++] = 0; //#29327
        } //#29327
        $k[$j++] = 1; //#29327
        $k[$j++] = 0; //#29327
        var _U = $a(); //#29327
        $k[$j++] = 'ren'; //#29333
        $k[$j++] = 'renmatrix'; //#29333
        $k[$j++] = 'pixs'; //#29333
        $k[$j++] = _U; //#29333
        $k[$j++] = 'pixx'; //#29333
        $k[$j++] = 69; //#29333
        $k[$j++] = 'pixy'; //#29333
        $k[$j++] = 3; //#29333
        $k[$j++] = 'height'; //#29333
        $k[$j++] = 6 / 72; //#29333
        $k[$j++] = 'width'; //#29333
        $k[$j++] = 69 / 72; //#29333
        $k[$j++] = 'opt'; //#29333
        $k[$j++] = $_.options; //#29333
        var _W = $d(); //#29333
        $k[$j++] = _W; //#29334
        bwipp_renmatrix(); //#29334
        $$.restore(); //#29336
    } else { //#29402
        $_.linsym = $k[--$j]; //#29338
        $_.sbs = $get($_.linsym, 'sbs'); //#29339
        $_.bhs = $get($_.linsym, 'bhs'); //#29340
        $_.bbs = $get($_.linsym, 'bbs'); //#29341
        $k[$j++] = 'linwidth'; //#29342
        $k[$j++] = 0; //#29342
        $forall($_.sbs, function() { //#29342
            var _f = $k[--$j]; //#29342
            var _g = $k[--$j]; //#29342
            $k[$j++] = $f(_g + $cvi(_f)); //#29342
        }); //#29342
        var _h = $k[--$j]; //#29342
        $_[$k[--$j]] = _h; //#29342
        $k[$j++] = 'compsym'; //#29344
        $k[$j++] = $_.comp; //#29344
        $k[$j++] = $_.options; //#29344
        bwipp_gs1_cc(); //#29344
        var _l = $k[--$j]; //#29344
        $_[$k[--$j]] = _l; //#29344
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29345
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29346
        $k[$j++] = Infinity; //#29348
        for (var _s = 0, _t = $f($_.ccpixx - 69); _s < _t; _s++) { //#29348
            $k[$j++] = 0; //#29348
        } //#29348
        $_.linpad = $a(); //#29348
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 1)) - $_.ccpixx); //#29350
        if ($_.diff > 0) { //#29356
            $k[$j++] = Infinity; //#29352
            for (var _10 = 0, _11 = $_.diff; _10 < _11; _10++) { //#29352
                $k[$j++] = 0; //#29352
            } //#29352
            $_.ccrpad = $a(); //#29352
            $_.pixx = $f($_.ccpixx + $_.diff); //#29353
        } else { //#29356
            $_.ccrpad = $a(0); //#29355
            $_.pixx = $_.ccpixx; //#29356
        } //#29356
        $k[$j++] = Infinity; //#29359
        for (var _1A = 0, _1B = $_.ccpixx, _19 = $_.ccpixs.length - 1; _1B < 0 ? _1A >= _19 : _1A <= _19; _1A += _1B) { //#29363
            $_.i = _1A; //#29361
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29362
            $aload($_.ccrpad); //#29362
        } //#29362
        for (var _1H = 0, _1I = 2; _1H < _1I; _1H++) { //#29364
            $aload($_.linpad); //#29364
            $k[$j++] = 0; //#29364
            $k[$j++] = 1; //#29364
            for (var _1K = 0, _1L = 65; _1K < _1L; _1K++) { //#29364
                $k[$j++] = 0; //#29364
            } //#29364
            $k[$j++] = 1; //#29364
            $k[$j++] = 0; //#29364
            $aload($_.ccrpad); //#29364
        } //#29364
        for (var _1N = 0, _1O = 2; _1N < _1O; _1N++) { //#29365
            $aload($_.linpad); //#29365
            $k[$j++] = 1; //#29365
            $k[$j++] = 0; //#29365
            for (var _1Q = 0, _1R = 65; _1Q < _1R; _1Q++) { //#29365
                $k[$j++] = 0; //#29365
            } //#29365
            $k[$j++] = 0; //#29365
            $k[$j++] = 1; //#29365
            $aload($_.ccrpad); //#29365
        } //#29365
        for (var _1T = 0, _1U = 2; _1T < _1U; _1T++) { //#29366
            $aload($_.linpad); //#29366
            $k[$j++] = 0; //#29366
            $k[$j++] = 1; //#29366
            for (var _1W = 0, _1X = 65; _1W < _1X; _1W++) { //#29366
                $k[$j++] = 0; //#29366
            } //#29366
            $k[$j++] = 1; //#29366
            $k[$j++] = 0; //#29366
            $aload($_.ccrpad); //#29366
        } //#29366
        for (var _1Z = 71; _1Z >= 0; _1Z -= 1) { //#29385
            $_.y = _1Z; //#29368
            $aload($_.linpad); //#29369
            $k[$j++] = 0; //#29383
            for (var _1d = 0, _1c = $_.sbs.length - 1; _1d <= _1c; _1d += 1) { //#29383
                $_.i = _1d; //#29372
                if (($_.i % 2) == 0) { //#29381
                    var _1i = $get($_.bbs, ~~($_.i / 2)) * 72; //#29375
                    if ((_1i > $_.y) || (($f(_1i + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#29378
                        for (var _1r = 0, _1s = $cvi($get($_.sbs, $_.i)); _1r < _1s; _1r++) { //#29376
                            $k[$j++] = 0; //#29376
                        } //#29376
                    } else { //#29378
                        for (var _1w = 0, _1x = $cvi($get($_.sbs, $_.i)); _1w < _1x; _1w++) { //#29378
                            $k[$j++] = 1; //#29378
                        } //#29378
                    } //#29378
                } else { //#29381
                    for (var _21 = 0, _22 = $cvi($get($_.sbs, $_.i)); _21 < _22; _21++) { //#29381
                        $k[$j++] = 0; //#29381
                    } //#29381
                } //#29381
            } //#29381
            if ($_.diff < 0) { //#29384
                $k[$j++] = 0; //#29384
            } //#29384
        } //#29384
        $_.pixs = $a(); //#29384
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29388
        var _2D = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29396
        $k[$j++] = _2D; //#29403
        if (!$_.dontdraw) { //#29403
            $$.save(); //#29400
            bwipp_renmatrix(); //#29401
            $$.restore(); //#29402
        } //#29402
    } //#29402
    $_ = Object.getPrototypeOf($_); //#29406
} //bwipp_ean8composite
function bwipp_upcacomposite() {
    $_ = Object.create($_); //#29438
    $_.dontdraw = false; //#29441
    $_.usematrix = false; //#29442
    $_.parse = false; //#29443
    $_.dontlint = false; //#29444
    $_.lintreqs = true; //#29445
    $k[$j++] = $_; //#29447
    bwipp_processoptions(); //#29447
    $_.options = $k[--$j]; //#29447
    $_.barcode = $k[--$j]; //#29448
    if ($_.dontdraw) { //#29450
        $_.usematrix = true; //#29450
    } //#29450
    $search($_.barcode, "|"); //#29453
    if ($k[--$j]) { //#29458
        $_.linear = $k[--$j]; //#29454
        $j--; //#29455
        $_.comp = $k[--$j]; //#29456
    } else { //#29458
        $j--; //#29458
        $k[$j++] = 'bwipp.missingCompositeComponent#29458'; //#29458
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29458
        bwipp_raiseerror(); //#29458
    } //#29458
    $put($_.options, "lintype", "ean13"); //#29461
    $put($_.options, "inkspreadv", 0); //#29462
    $put($_.options, "dontdraw", true); //#29463
    $put($_.options, "dontlint", true); //#29464
    var _C = $s($_.comp.length + 18); //#29467
    $puti(_C, 0, "(01)00000000000000"); //#29468
    $puti(_C, 18, $_.comp); //#29469
    $k[$j++] = _C; //#29470
    $k[$j++] = 'ai'; //#29470
    bwipp_gs1process(); //#29470
    $j -= 3; //#29470
    $k[$j++] = $_.linear; //#29473
    $k[$j++] = $_.options; //#29473
    bwipp_upca(); //#29473
    if (!$_.usematrix) { //#29565
        $$.save(); //#29475
        bwipp_renlinear(); //#29477
        var _H = $$.currpos(); //#29479
        $$.rmoveto(-3, 78); //#29482
        $k[$j++] = _H.x; //#29482
        $k[$j++] = _H.y; //#29482
        $k[$j++] = $_.comp; //#29482
        $k[$j++] = $_.options; //#29482
        bwipp_gs1_cc(); //#29482
        bwipp_renmatrix(); //#29482
        var _K = $k[--$j]; //#29485
        $$.moveto($f($k[--$j] - 1), $f(_K + 72)); //#29485
        $k[$j++] = Infinity; //#29485
        $k[$j++] = Infinity; //#29487
        $k[$j++] = 0; //#29488
        $k[$j++] = 1; //#29488
        for (var _M = 0, _N = 93; _M < _N; _M++) { //#29488
            $k[$j++] = 0; //#29488
        } //#29488
        $k[$j++] = 1; //#29489
        $k[$j++] = 0; //#29489
        $k[$j++] = 1; //#29489
        $k[$j++] = 0; //#29489
        for (var _O = 0, _P = 93; _O < _P; _O++) { //#29489
            $k[$j++] = 0; //#29489
        } //#29489
        $k[$j++] = 0; //#29490
        $k[$j++] = 1; //#29490
        $k[$j++] = 0; //#29490
        $k[$j++] = 1; //#29490
        for (var _Q = 0, _R = 93; _Q < _R; _Q++) { //#29490
            $k[$j++] = 0; //#29490
        } //#29490
        $k[$j++] = 1; //#29490
        $k[$j++] = 0; //#29490
        var _S = $a(); //#29490
        $k[$j++] = 'ren'; //#29496
        $k[$j++] = 'renmatrix'; //#29496
        $k[$j++] = 'pixs'; //#29496
        $k[$j++] = _S; //#29496
        $k[$j++] = 'pixx'; //#29496
        $k[$j++] = 97; //#29496
        $k[$j++] = 'pixy'; //#29496
        $k[$j++] = 3; //#29496
        $k[$j++] = 'height'; //#29496
        $k[$j++] = 6 / 72; //#29496
        $k[$j++] = 'width'; //#29496
        $k[$j++] = 97 / 72; //#29496
        $k[$j++] = 'opt'; //#29496
        $k[$j++] = $_.options; //#29496
        var _U = $d(); //#29496
        $k[$j++] = _U; //#29497
        bwipp_renmatrix(); //#29497
        $$.restore(); //#29499
    } else { //#29565
        $_.linsym = $k[--$j]; //#29501
        $_.sbs = $get($_.linsym, 'sbs'); //#29502
        $_.bhs = $get($_.linsym, 'bhs'); //#29503
        $_.bbs = $get($_.linsym, 'bbs'); //#29504
        $k[$j++] = 'linwidth'; //#29505
        $k[$j++] = 0; //#29505
        $forall($_.sbs, function() { //#29505
            var _d = $k[--$j]; //#29505
            var _e = $k[--$j]; //#29505
            $k[$j++] = $f(_e + $cvi(_d)); //#29505
        }); //#29505
        var _f = $k[--$j]; //#29505
        var _g = $k[--$j]; //#29505
        $_[_g] = _f; //#29505
        $k[$j++] = 'compsym'; //#29507
        $k[$j++] = $_.comp; //#29507
        $k[$j++] = $_.options; //#29507
        bwipp_gs1_cc(); //#29507
        var _j = $k[--$j]; //#29507
        $_[$k[--$j]] = _j; //#29507
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29508
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29509
        $k[$j++] = Infinity; //#29511
        for (var _q = 0, _r = $f($_.ccpixx - 97); _q < _r; _q++) { //#29511
            $k[$j++] = 0; //#29511
        } //#29511
        $_.linpad = $a(); //#29511
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 1)) - $_.ccpixx); //#29513
        if ($_.diff > 0) { //#29519
            $k[$j++] = Infinity; //#29515
            for (var _y = 0, _z = $_.diff; _y < _z; _y++) { //#29515
                $k[$j++] = 0; //#29515
            } //#29515
            $_.ccrpad = $a(); //#29515
            $_.pixx = $f($_.ccpixx + $_.diff); //#29516
        } else { //#29519
            $_.ccrpad = $a(0); //#29518
            $_.pixx = $_.ccpixx; //#29519
        } //#29519
        $k[$j++] = Infinity; //#29522
        for (var _18 = 0, _19 = $_.ccpixx, _17 = $_.ccpixs.length - 1; _19 < 0 ? _18 >= _17 : _18 <= _17; _18 += _19) { //#29526
            $_.i = _18; //#29524
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29525
            $aload($_.ccrpad); //#29525
        } //#29525
        for (var _1F = 0, _1G = 2; _1F < _1G; _1F++) { //#29527
            $aload($_.linpad); //#29527
            $k[$j++] = 0; //#29527
            $k[$j++] = 1; //#29527
            for (var _1I = 0, _1J = 93; _1I < _1J; _1I++) { //#29527
                $k[$j++] = 0; //#29527
            } //#29527
            $k[$j++] = 1; //#29527
            $k[$j++] = 0; //#29527
            $aload($_.ccrpad); //#29527
        } //#29527
        for (var _1L = 0, _1M = 2; _1L < _1M; _1L++) { //#29528
            $aload($_.linpad); //#29528
            $k[$j++] = 1; //#29528
            $k[$j++] = 0; //#29528
            for (var _1O = 0, _1P = 93; _1O < _1P; _1O++) { //#29528
                $k[$j++] = 0; //#29528
            } //#29528
            $k[$j++] = 0; //#29528
            $k[$j++] = 1; //#29528
            $aload($_.ccrpad); //#29528
        } //#29528
        for (var _1R = 0, _1S = 2; _1R < _1S; _1R++) { //#29529
            $aload($_.linpad); //#29529
            $k[$j++] = 0; //#29529
            $k[$j++] = 1; //#29529
            for (var _1U = 0, _1V = 93; _1U < _1V; _1U++) { //#29529
                $k[$j++] = 0; //#29529
            } //#29529
            $k[$j++] = 1; //#29529
            $k[$j++] = 0; //#29529
            $aload($_.ccrpad); //#29529
        } //#29529
        for (var _1X = 71; _1X >= 0; _1X -= 1) { //#29548
            $_.y = _1X; //#29531
            $aload($_.linpad); //#29532
            $k[$j++] = 0; //#29546
            for (var _1b = 0, _1a = $_.sbs.length - 1; _1b <= _1a; _1b += 1) { //#29546
                $_.i = _1b; //#29535
                if (($_.i % 2) == 0) { //#29544
                    var _1g = $get($_.bbs, ~~($_.i / 2)) * 72; //#29538
                    if ((_1g > $_.y) || (($f(_1g + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#29541
                        for (var _1p = 0, _1q = $cvi($get($_.sbs, $_.i)); _1p < _1q; _1p++) { //#29539
                            $k[$j++] = 0; //#29539
                        } //#29539
                    } else { //#29541
                        for (var _1u = 0, _1v = $cvi($get($_.sbs, $_.i)); _1u < _1v; _1u++) { //#29541
                            $k[$j++] = 1; //#29541
                        } //#29541
                    } //#29541
                } else { //#29544
                    for (var _1z = 0, _20 = $cvi($get($_.sbs, $_.i)); _1z < _20; _1z++) { //#29544
                        $k[$j++] = 0; //#29544
                    } //#29544
                } //#29544
            } //#29544
            if ($_.diff < 0) { //#29547
                $k[$j++] = 0; //#29547
            } //#29547
        } //#29547
        $_.pixs = $a(); //#29547
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29551
        var _2B = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29559
        $k[$j++] = _2B; //#29566
        if (!$_.dontdraw) { //#29566
            $$.save(); //#29563
            bwipp_renmatrix(); //#29564
            $$.restore(); //#29565
        } //#29565
    } //#29565
    $_ = Object.getPrototypeOf($_); //#29569
} //bwipp_upcacomposite
function bwipp_upcecomposite() {
    $_ = Object.create($_); //#29601
    $_.dontdraw = false; //#29604
    $_.usematrix = false; //#29605
    $_.parse = false; //#29606
    $_.dontlint = false; //#29607
    $_.lintreqs = true; //#29608
    $k[$j++] = $_; //#29610
    bwipp_processoptions(); //#29610
    $_.options = $k[--$j]; //#29610
    $_.barcode = $k[--$j]; //#29611
    if ($_.dontdraw) { //#29613
        $_.usematrix = true; //#29613
    } //#29613
    $search($_.barcode, "|"); //#29616
    if ($k[--$j]) { //#29621
        $_.linear = $k[--$j]; //#29617
        $j--; //#29618
        $_.comp = $k[--$j]; //#29619
    } else { //#29621
        $j--; //#29621
        $k[$j++] = 'bwipp.missingCompositeComponent#29621'; //#29621
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29621
        bwipp_raiseerror(); //#29621
    } //#29621
    $put($_.options, "lintype", "upce"); //#29624
    $put($_.options, "inkspreadv", 0); //#29625
    $put($_.options, "dontdraw", true); //#29626
    $put($_.options, "dontlint", true); //#29627
    var _C = $s($_.comp.length + 18); //#29630
    $puti(_C, 0, "(01)00000000000000"); //#29631
    $puti(_C, 18, $_.comp); //#29632
    $k[$j++] = _C; //#29633
    $k[$j++] = 'ai'; //#29633
    bwipp_gs1process(); //#29633
    $j -= 3; //#29633
    $k[$j++] = $_.linear; //#29636
    $k[$j++] = $_.options; //#29636
    bwipp_upce(); //#29636
    if (!$_.usematrix) { //#29728
        $$.save(); //#29638
        bwipp_renlinear(); //#29640
        var _H = $$.currpos(); //#29642
        $$.rmoveto(-3, 78); //#29645
        $k[$j++] = _H.x; //#29645
        $k[$j++] = _H.y; //#29645
        $k[$j++] = $_.comp; //#29645
        $k[$j++] = $_.options; //#29645
        bwipp_gs1_cc(); //#29645
        bwipp_renmatrix(); //#29645
        var _K = $k[--$j]; //#29648
        $$.moveto($f($k[--$j] - 1), $f(_K + 72)); //#29648
        $k[$j++] = Infinity; //#29648
        $k[$j++] = Infinity; //#29650
        $k[$j++] = 0; //#29651
        $k[$j++] = 1; //#29651
        for (var _M = 0, _N = 49; _M < _N; _M++) { //#29651
            $k[$j++] = 0; //#29651
        } //#29651
        $k[$j++] = 1; //#29652
        $k[$j++] = 0; //#29652
        $k[$j++] = 1; //#29652
        $k[$j++] = 0; //#29652
        for (var _O = 0, _P = 49; _O < _P; _O++) { //#29652
            $k[$j++] = 0; //#29652
        } //#29652
        $k[$j++] = 0; //#29653
        $k[$j++] = 1; //#29653
        $k[$j++] = 0; //#29653
        $k[$j++] = 1; //#29653
        for (var _Q = 0, _R = 49; _Q < _R; _Q++) { //#29653
            $k[$j++] = 0; //#29653
        } //#29653
        $k[$j++] = 1; //#29653
        $k[$j++] = 0; //#29653
        var _S = $a(); //#29653
        $k[$j++] = 'ren'; //#29659
        $k[$j++] = 'renmatrix'; //#29659
        $k[$j++] = 'pixs'; //#29659
        $k[$j++] = _S; //#29659
        $k[$j++] = 'pixx'; //#29659
        $k[$j++] = 53; //#29659
        $k[$j++] = 'pixy'; //#29659
        $k[$j++] = 3; //#29659
        $k[$j++] = 'height'; //#29659
        $k[$j++] = 6 / 72; //#29659
        $k[$j++] = 'width'; //#29659
        $k[$j++] = 53 / 72; //#29659
        $k[$j++] = 'opt'; //#29659
        $k[$j++] = $_.options; //#29659
        var _U = $d(); //#29659
        $k[$j++] = _U; //#29660
        bwipp_renmatrix(); //#29660
        $$.restore(); //#29662
    } else { //#29728
        $_.linsym = $k[--$j]; //#29664
        $_.sbs = $get($_.linsym, 'sbs'); //#29665
        $_.bhs = $get($_.linsym, 'bhs'); //#29666
        $_.bbs = $get($_.linsym, 'bbs'); //#29667
        $k[$j++] = 'linwidth'; //#29668
        $k[$j++] = 0; //#29668
        $forall($_.sbs, function() { //#29668
            var _d = $k[--$j]; //#29668
            var _e = $k[--$j]; //#29668
            $k[$j++] = $f(_e + $cvi(_d)); //#29668
        }); //#29668
        var _f = $k[--$j]; //#29668
        var _g = $k[--$j]; //#29668
        $_[_g] = _f; //#29668
        $k[$j++] = 'compsym'; //#29670
        $k[$j++] = $_.comp; //#29670
        $k[$j++] = $_.options; //#29670
        bwipp_gs1_cc(); //#29670
        var _j = $k[--$j]; //#29670
        $_[$k[--$j]] = _j; //#29670
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29671
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29672
        $k[$j++] = Infinity; //#29674
        for (var _q = 0, _r = $f($_.ccpixx - 53); _q < _r; _q++) { //#29674
            $k[$j++] = 0; //#29674
        } //#29674
        $_.linpad = $a(); //#29674
        $_.diff = $f(($f($f($_.linwidth + $_.linpad.length) + 1)) - $_.ccpixx); //#29676
        if ($_.diff > 0) { //#29682
            $k[$j++] = Infinity; //#29678
            for (var _y = 0, _z = $_.diff; _y < _z; _y++) { //#29678
                $k[$j++] = 0; //#29678
            } //#29678
            $_.ccrpad = $a(); //#29678
            $_.pixx = $f($_.ccpixx + $_.diff); //#29679
        } else { //#29682
            $_.ccrpad = $a(0); //#29681
            $_.pixx = $_.ccpixx; //#29682
        } //#29682
        $k[$j++] = Infinity; //#29685
        for (var _18 = 0, _19 = $_.ccpixx, _17 = $_.ccpixs.length - 1; _19 < 0 ? _18 >= _17 : _18 <= _17; _18 += _19) { //#29689
            $_.i = _18; //#29687
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29688
            $aload($_.ccrpad); //#29688
        } //#29688
        for (var _1F = 0, _1G = 2; _1F < _1G; _1F++) { //#29690
            $aload($_.linpad); //#29690
            $k[$j++] = 0; //#29690
            $k[$j++] = 1; //#29690
            for (var _1I = 0, _1J = 49; _1I < _1J; _1I++) { //#29690
                $k[$j++] = 0; //#29690
            } //#29690
            $k[$j++] = 1; //#29690
            $k[$j++] = 0; //#29690
            $aload($_.ccrpad); //#29690
        } //#29690
        for (var _1L = 0, _1M = 2; _1L < _1M; _1L++) { //#29691
            $aload($_.linpad); //#29691
            $k[$j++] = 1; //#29691
            $k[$j++] = 0; //#29691
            for (var _1O = 0, _1P = 49; _1O < _1P; _1O++) { //#29691
                $k[$j++] = 0; //#29691
            } //#29691
            $k[$j++] = 0; //#29691
            $k[$j++] = 1; //#29691
            $aload($_.ccrpad); //#29691
        } //#29691
        for (var _1R = 0, _1S = 2; _1R < _1S; _1R++) { //#29692
            $aload($_.linpad); //#29692
            $k[$j++] = 0; //#29692
            $k[$j++] = 1; //#29692
            for (var _1U = 0, _1V = 49; _1U < _1V; _1U++) { //#29692
                $k[$j++] = 0; //#29692
            } //#29692
            $k[$j++] = 1; //#29692
            $k[$j++] = 0; //#29692
            $aload($_.ccrpad); //#29692
        } //#29692
        for (var _1X = 71; _1X >= 0; _1X -= 1) { //#29711
            $_.y = _1X; //#29694
            $aload($_.linpad); //#29695
            $k[$j++] = 0; //#29709
            for (var _1b = 0, _1a = $_.sbs.length - 1; _1b <= _1a; _1b += 1) { //#29709
                $_.i = _1b; //#29698
                if (($_.i % 2) == 0) { //#29707
                    var _1g = $get($_.bbs, ~~($_.i / 2)) * 72; //#29701
                    if ((_1g > $_.y) || (($f(_1g + ($get($_.bhs, ~~($_.i / 2)) * 72))) < $_.y)) { //#29704
                        for (var _1p = 0, _1q = $cvi($get($_.sbs, $_.i)); _1p < _1q; _1p++) { //#29702
                            $k[$j++] = 0; //#29702
                        } //#29702
                    } else { //#29704
                        for (var _1u = 0, _1v = $cvi($get($_.sbs, $_.i)); _1u < _1v; _1u++) { //#29704
                            $k[$j++] = 1; //#29704
                        } //#29704
                    } //#29704
                } else { //#29707
                    for (var _1z = 0, _20 = $cvi($get($_.sbs, $_.i)); _1z < _20; _1z++) { //#29707
                        $k[$j++] = 0; //#29707
                    } //#29707
                } //#29707
            } //#29707
            if ($_.diff < 0) { //#29710
                $k[$j++] = 0; //#29710
            } //#29710
        } //#29710
        $_.pixs = $a(); //#29710
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29714
        var _2B = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29722
        $k[$j++] = _2B; //#29729
        if (!$_.dontdraw) { //#29729
            $$.save(); //#29726
            bwipp_renmatrix(); //#29727
            $$.restore(); //#29728
        } //#29728
    } //#29728
    $_ = Object.getPrototypeOf($_); //#29732
} //bwipp_upcecomposite
function bwipp_databaromnicomposite() {
    $_ = Object.create($_); //#29764
    $_.dontdraw = false; //#29767
    $_.usematrix = false; //#29768
    $_.parse = false; //#29769
    $_.dontlint = false; //#29770
    $_.lintreqs = true; //#29771
    $k[$j++] = $_; //#29773
    bwipp_processoptions(); //#29773
    $_.options = $k[--$j]; //#29773
    $_.barcode = $k[--$j]; //#29774
    if ($_.dontdraw) { //#29776
        $_.usematrix = true; //#29776
    } //#29776
    $search($_.barcode, "|"); //#29779
    if ($k[--$j]) { //#29784
        $_.linear = $k[--$j]; //#29780
        $j--; //#29781
        $_.comp = $k[--$j]; //#29782
    } else { //#29784
        $j--; //#29784
        $k[$j++] = 'bwipp.missingCompositeComponent#29784'; //#29784
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29784
        bwipp_raiseerror(); //#29784
    } //#29784
    if (!$_.usematrix) { //#29787
        $$.save(); //#29787
    } //#29787
    $put($_.options, "lintype", "databaromni"); //#29789
    $put($_.options, "linkage", true); //#29790
    $put($_.options, "inkspreadv", 0); //#29791
    $put($_.options, "dontdraw", true); //#29792
    $put($_.options, "dontlint", true); //#29793
    var _F = $s($_.linear.length + $_.comp.length); //#29796
    $puti(_F, 0, $_.linear); //#29797
    $puti(_F, $_.linear.length, $_.comp); //#29798
    $k[$j++] = _F; //#29799
    $k[$j++] = 'ai'; //#29799
    bwipp_gs1process(); //#29799
    $j -= 3; //#29799
    $k[$j++] = $_.linear; //#29802
    $k[$j++] = $_.options; //#29802
    bwipp_databaromni(); //#29802
    var _L = $k[--$j]; //#29803
    $_.linsbs = $get(_L, "sbs"); //#29803
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#29804
    $k[$j++] = _L; //#29805
    if (!$_.usematrix) { //#29805
        bwipp_renlinear(); //#29805
    } else { //#29805
        $j--; //#29805
    } //#29805
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29809
        for (var _U = $_.fp, _T = $f($_.fp + 12); _U <= _T; _U += 1) { //#29822
            $_.i = _U; //#29811
            if ($get($_.bot, $_.i) == 0) { //#29819
                if ($get($_.bot, $_.i - 1) == 1) { //#29816
                    $k[$j++] = 1; //#29814
                } else { //#29816
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29816
                    $k[$j++] = _e; //#29816
                } //#29816
            } else { //#29819
                $k[$j++] = 0; //#29819
            } //#29819
            $put($_.sep, $_.i, $k[--$j]); //#29821
        } //#29821
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#29823
        $k[$j++] = true; //#29824
        for (var _j = 0; _j <= 12; _j += 1) { //#29824
            var _p = $k[--$j]; //#29824
            $k[$j++] = _p && $eq($get($_.bot, $f(_j + $_.fp)), $get($_.f3, _j)); //#29824
        } //#29824
        if ($k[--$j]) { //#29827
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#29826
        } //#29826
    }; //#29826
    $k[$j++] = Infinity; //#29829
    $k[$j++] = 0; //#29830
    $forall($_.linsbs, function() { //#29830
        var _v = $k[--$j]; //#29830
        var _w = $k[--$j]; //#29830
        var _x = (_w == 1) ? 0 : 1; //#29830
        $k[$j++] = _w; //#29830
        for (var _y = 0, _z = _v; _y < _z; _y++) { //#29830
            $k[$j++] = _x //#29830
        } //#29830
    }); //#29830
    $astore($a($counttomark() - 1)); //#29831
    $_.bot = $k[--$j]; //#29831
    $j -= 2; //#29831
    $k[$j++] = Infinity; //#29832
    $forall($_.bot, function() { //#29832
        var _14 = $k[--$j]; //#29832
        $k[$j++] = $f(1 - _14); //#29832
    }); //#29832
    $_.sep = $a(); //#29832
    $puti($_.sep, 0, $a([0, 0, 0])); //#29833
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29834
    $k[$j++] = 18; //#29835
    $_.sepfinder(); //#29835
    $k[$j++] = 64; //#29835
    $_.sepfinder(); //#29835
    if (!$_.usematrix) { //#29890
        var _1C = $$.currpos(); //#29839
        $$.rmoveto(-5, $f($_.linheight + 1)); //#29842
        $k[$j++] = _1C.x; //#29842
        $k[$j++] = _1C.y; //#29842
        $k[$j++] = $_.comp; //#29842
        $k[$j++] = $_.options; //#29842
        bwipp_gs1_cc(); //#29842
        bwipp_renmatrix(); //#29842
        var _1H = $k[--$j]; //#29844
        $$.moveto($k[--$j], $f(_1H + $_.linheight)); //#29844
        var _1N = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#29851
        $k[$j++] = _1N; //#29852
        bwipp_renmatrix(); //#29852
        $$.restore(); //#29854
    } else { //#29890
        $k[$j++] = 'compsym'; //#29856
        $k[$j++] = $_.comp; //#29856
        $k[$j++] = $_.options; //#29856
        bwipp_gs1_cc(); //#29856
        var _1Q = $k[--$j]; //#29856
        $_[$k[--$j]] = _1Q; //#29856
        $_.ccpixs = $get($_.compsym, 'pixs'); //#29857
        $_.ccpixx = $get($_.compsym, 'pixx'); //#29858
        $k[$j++] = Infinity; //#29860
        $k[$j++] = 0; //#29861
        $forall($_.linsbs, function() { //#29861
            var _1X = $k[--$j]; //#29861
            var _1Y = $k[--$j]; //#29861
            var _1Z = (_1Y == 0) ? 1 : 0; //#29861
            $k[$j++] = _1Y; //#29861
            for (var _1a = 0, _1b = $cvi(_1X); _1a < _1b; _1a++) { //#29861
                $k[$j++] = _1Z //#29861
            } //#29861
        }); //#29861
        $_.linpixs = $a(); //#29861
        $k[$j++] = Infinity; //#29863
        $k[$j++] = 0; //#29863
        $aload($_.sep); //#29863
        $_.sep = $a(); //#29863
        $_.linheight = ~~$_.linheight; //#29865
        $k[$j++] = Infinity; //#29867
        for (var _1j = 0, _1k = $_.ccpixx, _1i = $_.ccpixs.length - 1; _1k < 0 ? _1j >= _1i : _1j <= _1i; _1j += _1k) { //#29871
            $_.i = _1j; //#29869
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#29870
            $k[$j++] = 0; //#29870
        } //#29870
        $k[$j++] = 0; //#29872
        $k[$j++] = 0; //#29872
        $k[$j++] = 0; //#29872
        $k[$j++] = 0; //#29872
        $aload($_.sep); //#29872
        for (var _1r = 0, _1s = $_.linheight; _1r < _1s; _1r++) { //#29872
            $k[$j++] = 0; //#29872
            $k[$j++] = 0; //#29872
            $k[$j++] = 0; //#29872
            $k[$j++] = 0; //#29872
            $aload($_.linpixs); //#29872
        } //#29872
        $_.pixs = $a(); //#29872
        $_.pixx = $f($_.ccpixx + 1); //#29874
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#29876
        var _24 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#29884
        $k[$j++] = _24; //#29891
        if (!$_.dontdraw) { //#29891
            $$.save(); //#29888
            bwipp_renmatrix(); //#29889
            $$.restore(); //#29890
        } //#29890
    } //#29890
    $_ = Object.getPrototypeOf($_); //#29894
} //bwipp_databaromnicomposite
function bwipp_databarstackedcomposite() {
    $_ = Object.create($_); //#29925
    $_.dontdraw = false; //#29928
    $_.usematrix = false; //#29929
    $_.parse = false; //#29930
    $_.dontlint = false; //#29931
    $_.lintreqs = true; //#29932
    $k[$j++] = $_; //#29934
    bwipp_processoptions(); //#29934
    $_.options = $k[--$j]; //#29934
    $_.barcode = $k[--$j]; //#29935
    if ($_.dontdraw) { //#29937
        $_.usematrix = true; //#29937
    } //#29937
    $search($_.barcode, "|"); //#29940
    if ($k[--$j]) { //#29945
        $_.linear = $k[--$j]; //#29941
        $j--; //#29942
        $_.comp = $k[--$j]; //#29943
    } else { //#29945
        $j--; //#29945
        $k[$j++] = 'bwipp.missingCompositeComponent#29945'; //#29945
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#29945
        bwipp_raiseerror(); //#29945
    } //#29945
    if (!$_.usematrix) { //#29948
        $$.save(); //#29948
    } //#29948
    $put($_.options, "lintype", "databarstacked"); //#29950
    $put($_.options, "linkage", true); //#29951
    $put($_.options, "inkspreadv", 0); //#29952
    $put($_.options, "dontdraw", true); //#29953
    $put($_.options, "dontlint", true); //#29954
    var _F = $s($_.linear.length + $_.comp.length); //#29957
    $puti(_F, 0, $_.linear); //#29958
    $puti(_F, $_.linear.length, $_.comp); //#29959
    $k[$j++] = _F; //#29960
    $k[$j++] = 'ai'; //#29960
    bwipp_gs1process(); //#29960
    $j -= 3; //#29960
    $k[$j++] = $_.linear; //#29963
    $k[$j++] = $_.options; //#29963
    bwipp_databarstacked(); //#29963
    var _L = $k[--$j]; //#29964
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#29964
    $_.linheight = $get(_L, "pixy"); //#29965
    $k[$j++] = _L; //#29966
    if (!$_.usematrix) { //#29966
        bwipp_renmatrix(); //#29966
    } else { //#29966
        $_.linpixs = $get($k[--$j], 'pixs'); //#29966
    } //#29966
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#29970
        for (var _X = $_.fp, _W = $f($_.fp + 12); _X <= _W; _X += 1) { //#29983
            $_.i = _X; //#29972
            if ($get($_.bot, $_.i) == 0) { //#29980
                if ($get($_.bot, $_.i - 1) == 1) { //#29977
                    $k[$j++] = 1; //#29975
                } else { //#29977
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#29977
                    $k[$j++] = _h; //#29977
                } //#29977
            } else { //#29980
                $k[$j++] = 0; //#29980
            } //#29980
            $put($_.sep, $_.i, $k[--$j]); //#29982
        } //#29982
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#29984
        $k[$j++] = true; //#29985
        for (var _m = 0; _m <= 12; _m += 1) { //#29985
            var _s = $k[--$j]; //#29985
            $k[$j++] = _s && $eq($get($_.bot, $f(_m + $_.fp)), $get($_.f3, _m)); //#29985
        } //#29985
        if ($k[--$j]) { //#29988
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#29987
        } //#29987
    }; //#29987
    $k[$j++] = Infinity; //#29990
    var _x = $_.bot; //#29990
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#29990
        $k[$j++] = $f(1 - $get(_x, _y)); //#29990
    } //#29990
    $_.sep = $a(); //#29990
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#29991
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#29992
    $k[$j++] = 18; //#29993
    $_.sepfinder(); //#29993
    if (!$_.usematrix) { //#30047
        var _18 = $$.currpos(); //#29997
        $$.rmoveto(1, $f($_.linheight + 1)); //#30000
        $k[$j++] = _18.x; //#30000
        $k[$j++] = _18.y; //#30000
        $k[$j++] = $_.comp; //#30000
        $k[$j++] = $_.options; //#30000
        bwipp_gs1_cc(); //#30000
        bwipp_renmatrix(); //#30000
        var _1D = $k[--$j]; //#30002
        $$.moveto($k[--$j], $f(_1D + $_.linheight)); //#30002
        var _1J = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30009
        $k[$j++] = _1J; //#30010
        bwipp_renmatrix(); //#30010
        $$.restore(); //#30012
    } else { //#30047
        $k[$j++] = 'compsym'; //#30014
        $k[$j++] = $_.comp; //#30014
        $k[$j++] = $_.options; //#30014
        bwipp_gs1_cc(); //#30014
        var _1M = $k[--$j]; //#30014
        $_[$k[--$j]] = _1M; //#30014
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30015
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30016
        $_.linwidth = $_.sep.length; //#30018
        $k[$j++] = Infinity; //#30020
        for (var _1W = 0, _1X = $_.ccpixx, _1V = $_.ccpixs.length - 1; _1X < 0 ? _1W >= _1V : _1W <= _1V; _1W += _1X) { //#30024
            $_.i = _1W; //#30022
            $k[$j++] = 0; //#30023
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30023
        } //#30023
        $aload($_.sep); //#30025
        $k[$j++] = 0; //#30029
        $k[$j++] = 0; //#30029
        $k[$j++] = 0; //#30029
        $k[$j++] = 0; //#30029
        $k[$j++] = 0; //#30029
        $k[$j++] = 0; //#30029
        for (var _1g = 0, _1h = $_.linwidth, _1f = $_.linpixs.length - 1; _1h < 0 ? _1g >= _1f : _1g <= _1f; _1g += _1h) { //#30029
            $_.i = _1g; //#30027
            $aload($geti($_.linpixs, $_.i, $_.linwidth)); //#30028
            $k[$j++] = 0; //#30028
            $k[$j++] = 0; //#30028
            $k[$j++] = 0; //#30028
            $k[$j++] = 0; //#30028
            $k[$j++] = 0; //#30028
            $k[$j++] = 0; //#30028
        } //#30028
        $_.pixs = $a(); //#30028
        $_.pixx = $f($_.ccpixx + 1); //#30031
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30033
        var _1w = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30041
        $k[$j++] = _1w; //#30048
        if (!$_.dontdraw) { //#30048
            $$.save(); //#30045
            bwipp_renmatrix(); //#30046
            $$.restore(); //#30047
        } //#30047
    } //#30047
    $_ = Object.getPrototypeOf($_); //#30051
} //bwipp_databarstackedcomposite
function bwipp_databarstackedomnicomposite() {
    $_ = Object.create($_); //#30082
    $_.dontdraw = false; //#30085
    $_.usematrix = false; //#30086
    $_.parse = false; //#30087
    $_.dontlint = false; //#30088
    $_.lintreqs = true; //#30089
    $k[$j++] = $_; //#30091
    bwipp_processoptions(); //#30091
    $_.options = $k[--$j]; //#30091
    $_.barcode = $k[--$j]; //#30092
    if ($_.dontdraw) { //#30094
        $_.usematrix = true; //#30094
    } //#30094
    $search($_.barcode, "|"); //#30097
    if ($k[--$j]) { //#30102
        $_.linear = $k[--$j]; //#30098
        $j--; //#30099
        $_.comp = $k[--$j]; //#30100
    } else { //#30102
        $j--; //#30102
        $k[$j++] = 'bwipp.missingCompositeComponent#30102'; //#30102
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30102
        bwipp_raiseerror(); //#30102
    } //#30102
    if (!$_.usematrix) { //#30105
        $$.save(); //#30105
    } //#30105
    $put($_.options, "lintype", "databarstackedomni"); //#30107
    $put($_.options, "linkage", true); //#30108
    $put($_.options, "inkspreadv", 0); //#30109
    $put($_.options, "dontdraw", true); //#30110
    $put($_.options, "dontlint", true); //#30111
    var _F = $s($_.linear.length + $_.comp.length); //#30114
    $puti(_F, 0, $_.linear); //#30115
    $puti(_F, $_.linear.length, $_.comp); //#30116
    $k[$j++] = _F; //#30117
    $k[$j++] = 'ai'; //#30117
    bwipp_gs1process(); //#30117
    $j -= 3; //#30117
    $k[$j++] = $_.linear; //#30120
    $k[$j++] = $_.options; //#30120
    bwipp_databarstackedomni(); //#30120
    var _L = $k[--$j]; //#30121
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#30121
    $_.linheight = $get(_L, "pixy"); //#30122
    $k[$j++] = _L; //#30123
    if (!$_.usematrix) { //#30123
        bwipp_renmatrix(); //#30123
    } else { //#30123
        $_.linpixs = $get($k[--$j], 'pixs'); //#30123
    } //#30123
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#30127
        for (var _X = $_.fp, _W = $f($_.fp + 12); _X <= _W; _X += 1) { //#30140
            $_.i = _X; //#30129
            if ($get($_.bot, $_.i) == 0) { //#30137
                if ($get($_.bot, $_.i - 1) == 1) { //#30134
                    $k[$j++] = 1; //#30132
                } else { //#30134
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#30134
                    $k[$j++] = _h; //#30134
                } //#30134
            } else { //#30137
                $k[$j++] = 0; //#30137
            } //#30137
            $put($_.sep, $_.i, $k[--$j]); //#30139
        } //#30139
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#30141
        $k[$j++] = true; //#30142
        for (var _m = 0; _m <= 12; _m += 1) { //#30142
            var _s = $k[--$j]; //#30142
            $k[$j++] = _s && $eq($get($_.bot, $f(_m + $_.fp)), $get($_.f3, _m)); //#30142
        } //#30142
        if ($k[--$j]) { //#30145
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#30144
        } //#30144
    }; //#30144
    $k[$j++] = Infinity; //#30147
    var _x = $_.bot; //#30147
    for (var _y = 0, _z = _x.length; _y < _z; _y++) { //#30147
        $k[$j++] = $f(1 - $get(_x, _y)); //#30147
    } //#30147
    $_.sep = $a(); //#30147
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#30148
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#30149
    $k[$j++] = 18; //#30150
    $_.sepfinder(); //#30150
    if (!$_.usematrix) { //#30204
        var _18 = $$.currpos(); //#30154
        $$.rmoveto(1, $f($_.linheight + 1)); //#30157
        $k[$j++] = _18.x; //#30157
        $k[$j++] = _18.y; //#30157
        $k[$j++] = $_.comp; //#30157
        $k[$j++] = $_.options; //#30157
        bwipp_gs1_cc(); //#30157
        bwipp_renmatrix(); //#30157
        var _1D = $k[--$j]; //#30159
        $$.moveto($k[--$j], $f(_1D + $_.linheight)); //#30159
        var _1J = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30166
        $k[$j++] = _1J; //#30167
        bwipp_renmatrix(); //#30167
        $$.restore(); //#30169
    } else { //#30204
        $k[$j++] = 'compsym'; //#30171
        $k[$j++] = $_.comp; //#30171
        $k[$j++] = $_.options; //#30171
        bwipp_gs1_cc(); //#30171
        var _1M = $k[--$j]; //#30171
        $_[$k[--$j]] = _1M; //#30171
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30172
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30173
        $_.linwidth = $_.sep.length; //#30175
        $k[$j++] = Infinity; //#30177
        for (var _1W = 0, _1X = $_.ccpixx, _1V = $_.ccpixs.length - 1; _1X < 0 ? _1W >= _1V : _1W <= _1V; _1W += _1X) { //#30181
            $_.i = _1W; //#30179
            $k[$j++] = 0; //#30180
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30180
        } //#30180
        $aload($_.sep); //#30182
        $k[$j++] = 0; //#30186
        $k[$j++] = 0; //#30186
        $k[$j++] = 0; //#30186
        $k[$j++] = 0; //#30186
        $k[$j++] = 0; //#30186
        $k[$j++] = 0; //#30186
        for (var _1g = 0, _1h = $_.linwidth, _1f = $_.linpixs.length - 1; _1h < 0 ? _1g >= _1f : _1g <= _1f; _1g += _1h) { //#30186
            $_.i = _1g; //#30184
            $aload($geti($_.linpixs, $_.i, $_.linwidth)); //#30185
            $k[$j++] = 0; //#30185
            $k[$j++] = 0; //#30185
            $k[$j++] = 0; //#30185
            $k[$j++] = 0; //#30185
            $k[$j++] = 0; //#30185
            $k[$j++] = 0; //#30185
        } //#30185
        $_.pixs = $a(); //#30185
        $_.pixx = $f($_.ccpixx + 1); //#30188
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30190
        var _1w = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30198
        $k[$j++] = _1w; //#30205
        if (!$_.dontdraw) { //#30205
            $$.save(); //#30202
            bwipp_renmatrix(); //#30203
            $$.restore(); //#30204
        } //#30204
    } //#30204
    $_ = Object.getPrototypeOf($_); //#30208
} //bwipp_databarstackedomnicomposite
function bwipp_databartruncatedcomposite() {
    $_ = Object.create($_); //#30240
    $_.dontdraw = false; //#30243
    $_.usematrix = false; //#30244
    $_.parse = false; //#30245
    $_.dontlint = false; //#30246
    $_.lintreqs = true; //#30247
    $k[$j++] = $_; //#30249
    bwipp_processoptions(); //#30249
    $_.options = $k[--$j]; //#30249
    $_.barcode = $k[--$j]; //#30250
    if ($_.dontdraw) { //#30252
        $_.usematrix = true; //#30252
    } //#30252
    $search($_.barcode, "|"); //#30255
    if ($k[--$j]) { //#30260
        $_.linear = $k[--$j]; //#30256
        $j--; //#30257
        $_.comp = $k[--$j]; //#30258
    } else { //#30260
        $j--; //#30260
        $k[$j++] = 'bwipp.missingCompositeComponent#30260'; //#30260
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30260
        bwipp_raiseerror(); //#30260
    } //#30260
    if (!$_.usematrix) { //#30263
        $$.save(); //#30263
    } //#30263
    $put($_.options, "lintype", "databartruncated"); //#30265
    $put($_.options, "linkage", true); //#30266
    $put($_.options, "inkspreadv", 0); //#30267
    $put($_.options, "dontdraw", true); //#30268
    $put($_.options, "dontlint", true); //#30269
    var _F = $s($_.linear.length + $_.comp.length); //#30272
    $puti(_F, 0, $_.linear); //#30273
    $puti(_F, $_.linear.length, $_.comp); //#30274
    $k[$j++] = _F; //#30275
    $k[$j++] = 'ai'; //#30275
    bwipp_gs1process(); //#30275
    $j -= 3; //#30275
    $k[$j++] = $_.linear; //#30278
    $k[$j++] = $_.options; //#30278
    bwipp_databartruncated(); //#30278
    var _L = $k[--$j]; //#30279
    $_.linsbs = $get(_L, "sbs"); //#30279
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#30280
    $k[$j++] = _L; //#30281
    if (!$_.usematrix) { //#30281
        bwipp_renlinear(); //#30281
    } else { //#30281
        $j--; //#30281
    } //#30281
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#30285
        for (var _U = $_.fp, _T = $f($_.fp + 12); _U <= _T; _U += 1) { //#30298
            $_.i = _U; //#30287
            if ($get($_.bot, $_.i) == 0) { //#30295
                if ($get($_.bot, $_.i - 1) == 1) { //#30292
                    $k[$j++] = 1; //#30290
                } else { //#30292
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#30292
                    $k[$j++] = _e; //#30292
                } //#30292
            } else { //#30295
                $k[$j++] = 0; //#30295
            } //#30295
            $put($_.sep, $_.i, $k[--$j]); //#30297
        } //#30297
        $_.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#30299
        $k[$j++] = true; //#30300
        for (var _j = 0; _j <= 12; _j += 1) { //#30300
            var _p = $k[--$j]; //#30300
            $k[$j++] = _p && $eq($get($_.bot, $f(_j + $_.fp)), $get($_.f3, _j)); //#30300
        } //#30300
        if ($k[--$j]) { //#30303
            $puti($_.sep, $_.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#30302
        } //#30302
    }; //#30302
    $k[$j++] = Infinity; //#30305
    $k[$j++] = 0; //#30306
    $forall($_.linsbs, function() { //#30306
        var _v = $k[--$j]; //#30306
        var _w = $k[--$j]; //#30306
        var _x = (_w == 1) ? 0 : 1; //#30306
        $k[$j++] = _w; //#30306
        for (var _y = 0, _z = _v; _y < _z; _y++) { //#30306
            $k[$j++] = _x //#30306
        } //#30306
    }); //#30306
    $astore($a($counttomark() - 1)); //#30307
    $_.bot = $k[--$j]; //#30307
    $j -= 2; //#30307
    $k[$j++] = Infinity; //#30308
    $forall($_.bot, function() { //#30308
        var _14 = $k[--$j]; //#30308
        $k[$j++] = $f(1 - _14); //#30308
    }); //#30308
    $_.sep = $a(); //#30308
    $puti($_.sep, 0, $a([0, 0, 0])); //#30309
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#30310
    $k[$j++] = 18; //#30311
    $_.sepfinder(); //#30311
    $k[$j++] = 64; //#30311
    $_.sepfinder(); //#30311
    if (!$_.usematrix) { //#30366
        var _1C = $$.currpos(); //#30315
        $$.rmoveto(-5, $f($_.linheight + 1)); //#30318
        $k[$j++] = _1C.x; //#30318
        $k[$j++] = _1C.y; //#30318
        $k[$j++] = $_.comp; //#30318
        $k[$j++] = $_.options; //#30318
        bwipp_gs1_cc(); //#30318
        bwipp_renmatrix(); //#30318
        var _1H = $k[--$j]; //#30320
        $$.moveto($k[--$j], $f(_1H + $_.linheight)); //#30320
        var _1N = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30327
        $k[$j++] = _1N; //#30328
        bwipp_renmatrix(); //#30328
        $$.restore(); //#30330
    } else { //#30366
        $k[$j++] = 'compsym'; //#30332
        $k[$j++] = $_.comp; //#30332
        $k[$j++] = $_.options; //#30332
        bwipp_gs1_cc(); //#30332
        var _1Q = $k[--$j]; //#30332
        $_[$k[--$j]] = _1Q; //#30332
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30333
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30334
        $k[$j++] = Infinity; //#30336
        $k[$j++] = 0; //#30337
        $forall($_.linsbs, function() { //#30337
            var _1X = $k[--$j]; //#30337
            var _1Y = $k[--$j]; //#30337
            var _1Z = (_1Y == 0) ? 1 : 0; //#30337
            $k[$j++] = _1Y; //#30337
            for (var _1a = 0, _1b = $cvi(_1X); _1a < _1b; _1a++) { //#30337
                $k[$j++] = _1Z //#30337
            } //#30337
        }); //#30337
        $_.linpixs = $a(); //#30337
        $k[$j++] = Infinity; //#30339
        $k[$j++] = 0; //#30339
        $aload($_.sep); //#30339
        $_.sep = $a(); //#30339
        $_.linheight = ~~$_.linheight; //#30341
        $k[$j++] = Infinity; //#30343
        for (var _1j = 0, _1k = $_.ccpixx, _1i = $_.ccpixs.length - 1; _1k < 0 ? _1j >= _1i : _1j <= _1i; _1j += _1k) { //#30347
            $_.i = _1j; //#30345
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30346
            $k[$j++] = 0; //#30346
        } //#30346
        $k[$j++] = 0; //#30348
        $k[$j++] = 0; //#30348
        $k[$j++] = 0; //#30348
        $k[$j++] = 0; //#30348
        $aload($_.sep); //#30348
        for (var _1r = 0, _1s = $_.linheight; _1r < _1s; _1r++) { //#30348
            $k[$j++] = 0; //#30348
            $k[$j++] = 0; //#30348
            $k[$j++] = 0; //#30348
            $k[$j++] = 0; //#30348
            $aload($_.linpixs); //#30348
        } //#30348
        $_.pixs = $a(); //#30348
        $_.pixx = $f($_.ccpixx + 1); //#30350
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30352
        var _24 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30360
        $k[$j++] = _24; //#30367
        if (!$_.dontdraw) { //#30367
            $$.save(); //#30364
            bwipp_renmatrix(); //#30365
            $$.restore(); //#30366
        } //#30366
    } //#30366
    $_ = Object.getPrototypeOf($_); //#30370
} //bwipp_databartruncatedcomposite
function bwipp_databarlimitedcomposite() {
    $_ = Object.create($_); //#30402
    $_.dontdraw = false; //#30405
    $_.usematrix = false; //#30406
    $_.parse = false; //#30407
    $_.dontlint = false; //#30408
    $_.lintreqs = true; //#30409
    $k[$j++] = $_; //#30411
    bwipp_processoptions(); //#30411
    $_.options = $k[--$j]; //#30411
    $_.barcode = $k[--$j]; //#30412
    if ($_.dontdraw) { //#30414
        $_.usematrix = true; //#30414
    } //#30414
    $search($_.barcode, "|"); //#30417
    if ($k[--$j]) { //#30422
        $_.linear = $k[--$j]; //#30418
        $j--; //#30419
        $_.comp = $k[--$j]; //#30420
    } else { //#30422
        $j--; //#30422
        $k[$j++] = 'bwipp.missingCompositeComponent#30422'; //#30422
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30422
        bwipp_raiseerror(); //#30422
    } //#30422
    if (!$_.usematrix) { //#30425
        $$.save(); //#30425
    } //#30425
    $put($_.options, "lintype", "databarlimited"); //#30427
    $put($_.options, "linkage", true); //#30428
    $put($_.options, "inkspreadv", 0); //#30429
    $put($_.options, "dontdraw", true); //#30430
    $put($_.options, "dontlint", true); //#30431
    var _F = $s($_.linear.length + $_.comp.length); //#30434
    $puti(_F, 0, $_.linear); //#30435
    $puti(_F, $_.linear.length, $_.comp); //#30436
    $k[$j++] = _F; //#30437
    $k[$j++] = 'ai'; //#30437
    bwipp_gs1process(); //#30437
    $j -= 3; //#30437
    $k[$j++] = $_.linear; //#30440
    $k[$j++] = $_.options; //#30440
    bwipp_databarlimited(); //#30440
    var _L = $k[--$j]; //#30441
    $_.linsbs = $get(_L, "sbs"); //#30441
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#30442
    $k[$j++] = _L; //#30443
    if (!$_.usematrix) { //#30443
        bwipp_renlinear(); //#30443
    } else { //#30443
        $j--; //#30443
    } //#30443
    $k[$j++] = Infinity; //#30446
    $k[$j++] = 1; //#30447
    $forall($_.linsbs, function() { //#30447
        var _R = $k[--$j]; //#30447
        var _S = $k[--$j]; //#30447
        var _T = (_S == 0) ? 1 : 0; //#30447
        $k[$j++] = _S; //#30447
        for (var _U = 0, _V = _R; _U < _V; _U++) { //#30447
            $k[$j++] = _T //#30447
        } //#30447
    }); //#30447
    $astore($a($counttomark() - 1)); //#30448
    $_.sep = $k[--$j]; //#30448
    $j -= 2; //#30448
    $puti($_.sep, 0, $a([0, 0, 0])); //#30449
    var _c = $_.sep; //#30450
    $puti($_.sep, _c.length - 9, $a([0, 0, 0, 0, 0, 0, 0, 0, 0])); //#30450
    if (!$_.usematrix) { //#30518
        var _f = $$.currpos(); //#30454
        var _g = $_.comp; //#30457
        $k[$j++] = _f.x; //#30457
        $k[$j++] = _f.y; //#30457
        $k[$j++] = _g; //#30457
        $k[$j++] = $_.options; //#30457
        bwipp_gs1_cc(); //#30457
        var _i = $k[--$j]; //#30458
        $$.rmoveto($f(72 - $get(_i, "pixx")), $f($_.linheight + 1)); //#30458
        $k[$j++] = _i; //#30459
        bwipp_renmatrix(); //#30459
        var _m = $k[--$j]; //#30461
        $$.moveto($k[--$j], $f(_m + $_.linheight)); //#30461
        var _r = $_.options; //#30468
        var _s = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", _r]
        ]); //#30468
        $k[$j++] = _s; //#30469
        bwipp_renmatrix(); //#30469
        $$.restore(); //#30471
    } else { //#30518
        $k[$j++] = 'compsym'; //#30473
        $k[$j++] = $_.comp; //#30473
        $k[$j++] = $_.options; //#30473
        bwipp_gs1_cc(); //#30473
        var _v = $k[--$j]; //#30473
        $_[$k[--$j]] = _v; //#30473
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30474
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30475
        $k[$j++] = Infinity; //#30477
        $k[$j++] = 0; //#30478
        $forall($_.linsbs, function() { //#30478
            var _12 = $k[--$j]; //#30478
            var _13 = $k[--$j]; //#30478
            var _14 = (_13 == 0) ? 1 : 0; //#30478
            $k[$j++] = _13; //#30478
            for (var _15 = 0, _16 = $cvi(_12); _15 < _16; _15++) { //#30478
                $k[$j++] = _14 //#30478
            } //#30478
        }); //#30478
        $_.linpixs = $a(); //#30478
        $k[$j++] = Infinity; //#30480
        $k[$j++] = 0; //#30480
        $aload($_.sep); //#30480
        $_.sep = $a(); //#30480
        $_.linheight = ~~$_.linheight; //#30482
        if ($_.ccpixx == 72) { //#30501
            $k[$j++] = Infinity; //#30485
            for (var _1F = 0, _1G = $_.ccpixx, _1E = $_.ccpixs.length - 1; _1G < 0 ? _1F >= _1E : _1F <= _1E; _1F += _1G) { //#30489
                $_.i = _1F; //#30487
                $k[$j++] = 0; //#30488
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30488
                $k[$j++] = 0; //#30488
                $k[$j++] = 0; //#30488
                $k[$j++] = 0; //#30488
                $k[$j++] = 0; //#30488
                $k[$j++] = 0; //#30488
                $k[$j++] = 0; //#30488
            } //#30488
            $aload($_.sep); //#30490
            for (var _1N = 0, _1O = $_.linheight; _1N < _1O; _1N++) { //#30490
                $aload($_.linpixs); //#30490
            } //#30490
            $_.pixs = $a(); //#30490
            $_.pixx = $_.linpixs.length; //#30492
        } else { //#30501
            $k[$j++] = Infinity; //#30494
            for (var _1V = 0, _1W = $_.ccpixx, _1U = $_.ccpixs.length - 1; _1W < 0 ? _1V >= _1U : _1V <= _1U; _1V += _1W) { //#30498
                $_.i = _1V; //#30496
                $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30497
                $k[$j++] = 0; //#30497
                $k[$j++] = 0; //#30497
                $k[$j++] = 0; //#30497
                $k[$j++] = 0; //#30497
                $k[$j++] = 0; //#30497
                $k[$j++] = 0; //#30497
            } //#30497
            $k[$j++] = 0; //#30499
            $k[$j++] = 0; //#30499
            $k[$j++] = 0; //#30499
            $k[$j++] = 0; //#30499
            $k[$j++] = 0; //#30499
            $k[$j++] = 0; //#30499
            $k[$j++] = 0; //#30499
            $k[$j++] = 0; //#30499
            $k[$j++] = 0; //#30499
            $aload($_.sep); //#30499
            for (var _1d = 0, _1e = $_.linheight; _1d < _1e; _1d++) { //#30499
                $k[$j++] = 0; //#30499
                $k[$j++] = 0; //#30499
                $k[$j++] = 0; //#30499
                $k[$j++] = 0; //#30499
                $k[$j++] = 0; //#30499
                $k[$j++] = 0; //#30499
                $k[$j++] = 0; //#30499
                $k[$j++] = 0; //#30499
                $k[$j++] = 0; //#30499
                $aload($_.linpixs); //#30499
            } //#30499
            $_.pixs = $a(); //#30499
            $_.pixx = $f($_.ccpixx + 6); //#30501
        } //#30501
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30504
        var _1q = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30512
        $k[$j++] = _1q; //#30519
        if (!$_.dontdraw) { //#30519
            $$.save(); //#30516
            bwipp_renmatrix(); //#30517
            $$.restore(); //#30518
        } //#30518
    } //#30518
    $_ = Object.getPrototypeOf($_); //#30522
} //bwipp_databarlimitedcomposite
function bwipp_databarexpandedcomposite() {
    $_ = Object.create($_); //#30554
    $_.dontdraw = false; //#30557
    $_.usematrix = false; //#30558
    $_.parse = false; //#30559
    $_.dontlint = false; //#30560
    $_.lintreqs = true; //#30561
    $k[$j++] = $_; //#30563
    bwipp_processoptions(); //#30563
    $_.options = $k[--$j]; //#30563
    $_.barcode = $k[--$j]; //#30564
    if ($_.dontdraw) { //#30566
        $_.usematrix = true; //#30566
    } //#30566
    $search($_.barcode, "|"); //#30569
    if ($k[--$j]) { //#30574
        $_.linear = $k[--$j]; //#30570
        $j--; //#30571
        $_.comp = $k[--$j]; //#30572
    } else { //#30574
        $j--; //#30574
        $k[$j++] = 'bwipp.missingCompositeComponent#30574'; //#30574
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30574
        bwipp_raiseerror(); //#30574
    } //#30574
    if (!$_.usematrix) { //#30577
        $$.save(); //#30577
    } //#30577
    $put($_.options, "lintype", "databarexpanded"); //#30579
    $put($_.options, "linkage", true); //#30580
    $put($_.options, "inkspreadv", 0); //#30581
    $put($_.options, "dontdraw", true); //#30582
    $put($_.options, "dontlint", true); //#30583
    var _F = $s($_.linear.length + $_.comp.length); //#30586
    $puti(_F, 0, $_.linear); //#30587
    $puti(_F, $_.linear.length, $_.comp); //#30588
    $k[$j++] = _F; //#30589
    $k[$j++] = 'ai'; //#30589
    bwipp_gs1process(); //#30589
    $j -= 3; //#30589
    $k[$j++] = $_.linear; //#30592
    $k[$j++] = $_.options; //#30592
    bwipp_databarexpanded(); //#30592
    var _L = $k[--$j]; //#30593
    $_.linsbs = $get(_L, "sbs"); //#30593
    $_.linheight = $get($get(_L, "bhs"), 0) * 72; //#30594
    $k[$j++] = _L; //#30595
    if (!$_.usematrix) { //#30595
        bwipp_renlinear(); //#30595
    } else { //#30595
        $j--; //#30595
    } //#30595
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#30599
        for (var _U = $_.fp, _T = $f($_.fp + 12); _U <= _T; _U += 1) { //#30612
            $_.i = _U; //#30601
            if ($get($_.bot, $_.i) == 0) { //#30609
                if ($get($_.bot, $_.i - 1) == 1) { //#30606
                    $k[$j++] = 1; //#30604
                } else { //#30606
                    var _e = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#30606
                    $k[$j++] = _e; //#30606
                } //#30606
            } else { //#30609
                $k[$j++] = 0; //#30609
            } //#30609
            $put($_.sep, $_.i, $k[--$j]); //#30611
        } //#30611
    }; //#30611
    $k[$j++] = Infinity; //#30614
    $k[$j++] = 0; //#30615
    $forall($_.linsbs, function() { //#30615
        var _j = $k[--$j]; //#30615
        var _k = $k[--$j]; //#30615
        var _l = (_k == 1) ? 0 : 1; //#30615
        $k[$j++] = _k; //#30615
        for (var _m = 0, _n = _j; _m < _n; _m++) { //#30615
            $k[$j++] = _l //#30615
        } //#30615
    }); //#30615
    $astore($a($counttomark() - 1)); //#30616
    $_.bot = $k[--$j]; //#30616
    $j -= 2; //#30616
    $k[$j++] = Infinity; //#30617
    $forall($_.bot, function() { //#30617
        var _s = $k[--$j]; //#30617
        $k[$j++] = $f(1 - _s); //#30617
    }); //#30617
    $_.sep = $a(); //#30617
    $puti($_.sep, 0, $a([0, 0, 0])); //#30618
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#30619
    $k[$j++] = Infinity; //#30620
    for (var _11 = 18, _10 = $_.bot.length - 13; _11 <= _10; _11 += 98) { //#30621
        $k[$j++] = _11; //#30621
    } //#30621
    for (var _14 = 69, _13 = $_.bot.length - 13; _14 <= _13; _14 += 98) { //#30622
        $k[$j++] = _14; //#30622
    } //#30622
    var _15 = $a(); //#30622
    for (var _16 = 0, _17 = _15.length; _16 < _17; _16++) { //#30623
        $k[$j++] = $get(_15, _16); //#30623
        $_.sepfinder(); //#30623
    } //#30623
    if (!$_.usematrix) { //#30679
        var _1A = $$.currpos(); //#30627
        $$.rmoveto(1, $f($_.linheight + 1)); //#30630
        $k[$j++] = _1A.x; //#30630
        $k[$j++] = _1A.y; //#30630
        $k[$j++] = $_.comp; //#30630
        $k[$j++] = $_.options; //#30630
        bwipp_gs1_cc(); //#30630
        bwipp_renmatrix(); //#30630
        var _1F = $k[--$j]; //#30632
        $$.moveto($k[--$j], $f(_1F + $_.linheight)); //#30632
        var _1L = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30639
        $k[$j++] = _1L; //#30640
        bwipp_renmatrix(); //#30640
        $$.restore(); //#30642
    } else { //#30679
        $k[$j++] = 'compsym'; //#30644
        $k[$j++] = $_.comp; //#30644
        $k[$j++] = $_.options; //#30644
        bwipp_gs1_cc(); //#30644
        var _1O = $k[--$j]; //#30644
        $_[$k[--$j]] = _1O; //#30644
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30645
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30646
        $k[$j++] = Infinity; //#30648
        $k[$j++] = 0; //#30649
        $forall($_.linsbs, function() { //#30649
            var _1V = $k[--$j]; //#30649
            var _1W = $k[--$j]; //#30649
            var _1X = (_1W == 0) ? 1 : 0; //#30649
            $k[$j++] = _1W; //#30649
            for (var _1Y = 0, _1Z = $cvi(_1V); _1Y < _1Z; _1Y++) { //#30649
                $k[$j++] = _1X //#30649
            } //#30649
        }); //#30649
        $_.linpixs = $a(); //#30649
        $k[$j++] = Infinity; //#30651
        $k[$j++] = 0; //#30651
        $aload($_.sep); //#30651
        $_.sep = $a(); //#30651
        $_.linheight = ~~$_.linheight; //#30653
        $_.diff = $f($_.linpixs.length - $_.ccpixx); //#30654
        $k[$j++] = Infinity; //#30655
        for (var _1h = 0, _1i = $f($_.diff - 2); _1h < _1i; _1h++) { //#30655
            $k[$j++] = 0; //#30655
        } //#30655
        $_.ccrpad = $a(); //#30655
        $k[$j++] = Infinity; //#30656
        for (var _1n = 0, _1o = $_.ccpixx, _1m = $_.ccpixs.length - 1; _1o < 0 ? _1n >= _1m : _1n <= _1m; _1n += _1o) { //#30660
            $_.i = _1n; //#30658
            $k[$j++] = 0; //#30659
            $k[$j++] = 0; //#30659
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30659
            $aload($_.ccrpad); //#30659
        } //#30659
        $aload($_.sep); //#30661
        for (var _1w = 0, _1x = $_.linheight; _1w < _1x; _1w++) { //#30661
            $aload($_.linpixs); //#30661
        } //#30661
        $_.pixs = $a(); //#30661
        $_.pixx = $_.linpixs.length; //#30664
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30665
        var _29 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30673
        $k[$j++] = _29; //#30680
        if (!$_.dontdraw) { //#30680
            $$.save(); //#30677
            bwipp_renmatrix(); //#30678
            $$.restore(); //#30679
        } //#30679
    } //#30679
    $_ = Object.getPrototypeOf($_); //#30683
} //bwipp_databarexpandedcomposite
function bwipp_databarexpandedstackedcomposite() {
    $_ = Object.create($_); //#30714
    $_.dontdraw = false; //#30717
    $_.usematrix = false; //#30718
    $_.parse = false; //#30719
    $_.dontlint = false; //#30720
    $_.lintreqs = true; //#30721
    $k[$j++] = $_; //#30723
    bwipp_processoptions(); //#30723
    $_.options = $k[--$j]; //#30723
    $_.barcode = $k[--$j]; //#30724
    if ($_.dontdraw) { //#30726
        $_.usematrix = true; //#30726
    } //#30726
    $search($_.barcode, "|"); //#30729
    if ($k[--$j]) { //#30734
        $_.linear = $k[--$j]; //#30730
        $j--; //#30731
        $_.comp = $k[--$j]; //#30732
    } else { //#30734
        $j--; //#30734
        $k[$j++] = 'bwipp.missingCompositeComponent#30734'; //#30734
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30734
        bwipp_raiseerror(); //#30734
    } //#30734
    if (!$_.usematrix) { //#30737
        $$.save(); //#30737
    } //#30737
    $put($_.options, "lintype", "databarexpandedstacked"); //#30739
    $put($_.options, "linkage", true); //#30740
    $put($_.options, "inkspreadv", 0); //#30741
    $put($_.options, "dontdraw", true); //#30742
    $put($_.options, "dontlint", true); //#30743
    var _F = $s($_.linear.length + $_.comp.length); //#30746
    $puti(_F, 0, $_.linear); //#30747
    $puti(_F, $_.linear.length, $_.comp); //#30748
    $k[$j++] = _F; //#30749
    $k[$j++] = 'ai'; //#30749
    bwipp_gs1process(); //#30749
    $j -= 3; //#30749
    $k[$j++] = $_.linear; //#30752
    $k[$j++] = $_.options; //#30752
    bwipp_databarexpandedstacked(); //#30752
    var _L = $k[--$j]; //#30753
    $_.bot = $geti($get(_L, "pixs"), 0, $get(_L, "pixx")); //#30753
    $_.linheight = $get(_L, "pixy"); //#30754
    $k[$j++] = _L; //#30755
    if (!$_.usematrix) { //#30755
        bwipp_renmatrix(); //#30755
    } else { //#30755
        $_.linpixs = $get($k[--$j], 'pixs'); //#30755
    } //#30755
    $_.sepfinder = function() {
        $_.fp = $k[--$j]; //#30759
        for (var _X = $_.fp, _W = $f($_.fp + 12); _X <= _W; _X += 1) { //#30772
            $_.i = _X; //#30761
            if ($get($_.bot, $_.i) == 0) { //#30769
                if ($get($_.bot, $_.i - 1) == 1) { //#30766
                    $k[$j++] = 1; //#30764
                } else { //#30766
                    var _h = ($get($_.sep, $_.i - 1) == 0) ? 1 : 0; //#30766
                    $k[$j++] = _h; //#30766
                } //#30766
            } else { //#30769
                $k[$j++] = 0; //#30769
            } //#30769
            $put($_.sep, $_.i, $k[--$j]); //#30771
        } //#30771
    }; //#30771
    $k[$j++] = Infinity; //#30774
    var _l = $_.bot; //#30774
    for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#30774
        $k[$j++] = $f(1 - $get(_l, _m)); //#30774
    } //#30774
    $_.sep = $a(); //#30774
    $puti($_.sep, 0, $a([0, 0, 0, 0])); //#30775
    $puti($_.sep, $_.sep.length - 4, $a([0, 0, 0, 0])); //#30776
    $k[$j++] = Infinity; //#30777
    for (var _x = 19, _w = $_.bot.length - 13; _x <= _w; _x += 98) { //#30778
        $k[$j++] = _x; //#30778
    } //#30778
    for (var _10 = 70, _z = $_.bot.length - 13; _10 <= _z; _10 += 98) { //#30779
        $k[$j++] = _10; //#30779
    } //#30779
    var _11 = $a(); //#30779
    for (var _12 = 0, _13 = _11.length; _12 < _13; _12++) { //#30780
        $k[$j++] = $get(_11, _12); //#30780
        $_.sepfinder(); //#30780
    } //#30780
    if (!$_.usematrix) { //#30831
        var _16 = $$.currpos(); //#30784
        var _19 = ($get($_.bot, 0) == 0) ? 2 : 0; //#30787
        $$.rmoveto(_19, $f($_.linheight + 1)); //#30787
        $k[$j++] = _16.x; //#30788
        $k[$j++] = _16.y; //#30788
        $k[$j++] = $_.comp; //#30788
        $k[$j++] = $_.options; //#30788
        bwipp_gs1_cc(); //#30788
        bwipp_renmatrix(); //#30788
        var _1E = $k[--$j]; //#30790
        $$.moveto($k[--$j], $f(_1E + $_.linheight)); //#30790
        var _1K = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30797
        $k[$j++] = _1K; //#30798
        bwipp_renmatrix(); //#30798
        $$.restore(); //#30800
    } else { //#30831
        $k[$j++] = 'compsym'; //#30802
        $k[$j++] = $_.comp; //#30802
        $k[$j++] = $_.options; //#30802
        bwipp_gs1_cc(); //#30802
        var _1N = $k[--$j]; //#30802
        $_[$k[--$j]] = _1N; //#30802
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30803
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30804
        $_.pixx = $_.sep.length; //#30806
        $k[$j++] = Infinity; //#30807
        for (var _1W = 0, _1X = ~~(($f($f($_.pixx - $_.ccpixx) + 1)) / 2); _1W < _1X; _1W++) { //#30807
            $k[$j++] = 0; //#30807
        } //#30807
        $_.cclpad = $a(); //#30807
        $k[$j++] = Infinity; //#30808
        for (var _1b = 0, _1c = ~~($f($_.pixx - $_.ccpixx) / 2); _1b < _1c; _1b++) { //#30808
            $k[$j++] = 0; //#30808
        } //#30808
        $_.ccrpad = $a(); //#30808
        $k[$j++] = Infinity; //#30809
        for (var _1h = 0, _1i = $_.ccpixx, _1g = $_.ccpixs.length - 1; _1i < 0 ? _1h >= _1g : _1h <= _1g; _1h += _1i) { //#30813
            $_.i = _1h; //#30811
            $aload($_.cclpad); //#30812
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30812
            $aload($_.ccrpad); //#30812
        } //#30812
        $aload($_.sep); //#30814
        $aload($_.linpixs); //#30814
        $_.pixs = $a(); //#30814
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30817
        var _20 = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#30825
        $k[$j++] = _20; //#30832
        if (!$_.dontdraw) { //#30832
            $$.save(); //#30829
            bwipp_renmatrix(); //#30830
            $$.restore(); //#30831
        } //#30831
    } //#30831
    $_ = Object.getPrototypeOf($_); //#30835
} //bwipp_databarexpandedstackedcomposite
function bwipp_gs1_128composite() {
    $_ = Object.create($_); //#30867
    $_.dontdraw = false; //#30870
    $_.usematrix = false; //#30871
    $_.parse = false; //#30872
    $_.dontlint = false; //#30873
    $_.lintreqs = true; //#30874
    $k[$j++] = $_; //#30876
    bwipp_processoptions(); //#30876
    $_.options = $k[--$j]; //#30876
    $_.barcode = $k[--$j]; //#30877
    if ($_.dontdraw) { //#30879
        $_.usematrix = true; //#30879
    } //#30879
    $search($_.barcode, "|"); //#30882
    if ($k[--$j]) { //#30887
        $_.linear = $k[--$j]; //#30883
        $j--; //#30884
        $_.comp = $k[--$j]; //#30885
    } else { //#30887
        $j--; //#30887
        $k[$j++] = 'bwipp.missingCompositeComponent#30887'; //#30887
        $k[$j++] = "A Composite Component must be provided following a pipe character"; //#30887
        bwipp_raiseerror(); //#30887
    } //#30887
    if (!$_.usematrix) { //#30890
        $$.save(); //#30890
    } //#30890
    $put($_.options, "inkspreadv", 0); //#30892
    $put($_.options, "dontdraw", true); //#30893
    $put($_.options, "dontlint", true); //#30894
    var _D = $s($_.linear.length + $_.comp.length); //#30897
    $puti(_D, 0, $_.linear); //#30898
    $puti(_D, $_.linear.length, $_.comp); //#30899
    $k[$j++] = _D; //#30900
    $k[$j++] = 'ai'; //#30900
    bwipp_gs1process(); //#30900
    $j -= 3; //#30900
    $put($_.options, "linkagea", true); //#30903
    $k[$j++] = $_.linear; //#30904
    $k[$j++] = Infinity; //#30904
    $forall($_.options); //#30904
    var _K = $d(); //#30904
    $k[$j++] = _K; //#30904
    bwipp_gs1_128(); //#30904
    var _M = $get($k[--$j], "sbs"); //#30905
    $k[$j++] = 0; //#30905
    $forall(_M, function() { //#30905
        var _N = $k[--$j]; //#30905
        var _O = $k[--$j]; //#30905
        $k[$j++] = $f(_O + _N); //#30905
    }); //#30905
    $_.linwidth = $k[--$j]; //#30905
    $put($_.options, "lintype", "gs1-128"); //#30908
    $put($_.options, "linwidth", $_.linwidth); //#30909
    $k[$j++] = $_.comp; //#30910
    $k[$j++] = Infinity; //#30910
    $forall($_.options); //#30910
    var _V = $d(); //#30910
    $k[$j++] = _V; //#30910
    bwipp_gs1_cc(); //#30910
    $_.compsym = $k[--$j]; //#30910
    if ($get($_.compsym, "pixx") == 99) { //#30911
        $k[$j++] = "a"; //#30911
    } else { //#30911
        $k[$j++] = "c"; //#30911
    } //#30911
    $_.linktype = $k[--$j]; //#30911
    $put($_.compsym, "borderbottom", 0); //#30912
    if ($eq($_.linktype, "a")) { //#30920
        $put($_.options, "linkagea", true); //#30916
        $put($_.options, "linkagec", false); //#30917
    } else { //#30920
        $put($_.options, "linkagea", false); //#30919
        $put($_.options, "linkagec", true); //#30920
    } //#30920
    var _g = $_.linear; //#30922
    $k[$j++] = _g; //#30922
    $k[$j++] = Infinity; //#30922
    $forall($_.options); //#30922
    var _i = $d(); //#30922
    $k[$j++] = _i; //#30922
    bwipp_gs1_128(); //#30922
    var _j = $k[--$j]; //#30923
    $_.linsbs = $get(_j, "sbs"); //#30923
    $_.linheight = $get($get(_j, "bhs"), 0) * 72; //#30924
    $k[$j++] = _j; //#30925
    if (!$_.usematrix) { //#30925
        bwipp_renlinear(); //#30925
    } else { //#30925
        $j--; //#30925
    } //#30925
    $k[$j++] = Infinity; //#30928
    $k[$j++] = 1; //#30929
    $forall($_.linsbs, function() { //#30929
        var _p = $k[--$j]; //#30929
        var _q = $k[--$j]; //#30929
        var _r = (_q == 0) ? 1 : 0; //#30929
        $k[$j++] = _q; //#30929
        for (var _s = 0, _t = _p; _s < _t; _s++) { //#30929
            $k[$j++] = _r //#30929
        } //#30929
    }); //#30929
    $astore($a($counttomark() - 1)); //#30930
    $_.sep = $k[--$j]; //#30930
    $j -= 2; //#30930
    if ($eq($_.linktype, "a")) { //#30938
        $_.s = ~~($f($_.linwidth - 2) / 11); //#30934
        $_.p = ~~(($_.s - 9) / 2); //#30935
        $k[$j++] = 'x'; //#30936
        $k[$j++] = ((($_.s - $_.p) - 1) * 11) + 10; //#30936
        if ($_.p == 0) { //#30936
            var _13 = $k[--$j]; //#30936
            $k[$j++] = $f(_13 + 2); //#30936
        } //#30936
        var _14 = $k[--$j]; //#30936
        $_[$k[--$j]] = $f(_14 - 99); //#30936
    } else { //#30938
        $_.x = -7; //#30938
    } //#30938
    if (!$_.usematrix) { //#31008
        var _17 = $$.currpos(); //#30943
        $$.rmoveto($_.x, $f($_.linheight + 1)); //#30945
        $k[$j++] = _17.x; //#30945
        $k[$j++] = _17.y; //#30945
        $k[$j++] = $_.compsym; //#30945
        bwipp_renmatrix(); //#30945
        var _1C = $k[--$j]; //#30947
        $$.moveto($k[--$j], $f(_1C + $_.linheight)); //#30947
        var _1I = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.sep],
            ["pixx", $_.sep.length],
            ["pixy", 1],
            ["height", 1 / 72],
            ["width", $_.sep.length / 72],
            ["opt", $_.options]
        ]); //#30954
        $k[$j++] = _1I; //#30955
        bwipp_renmatrix(); //#30955
        $$.restore(); //#30957
    } else { //#31008
        $_.ccpixs = $get($_.compsym, 'pixs'); //#30959
        $_.ccpixx = $get($_.compsym, 'pixx'); //#30960
        $k[$j++] = Infinity; //#30962
        $forall($_.linsbs, function() { //#30963
            var _1O = $k[--$j]; //#30963
            var _1P = $k[--$j]; //#30963
            var _1Q = (_1P == 1) ? 0 : 1; //#30963
            $k[$j++] = _1P; //#30963
            for (var _1R = 0, _1S = _1O; _1R < _1S; _1R++) { //#30963
                $k[$j++] = _1Q //#30963
            } //#30963
        }); //#30963
        $_.linpixs = $a(); //#30963
        if ($_.x > 0) { //#30971
            $k[$j++] = Infinity; //#30967
            for (var _1W = 0, _1X = $_.x; _1W < _1X; _1W++) { //#30967
                $k[$j++] = 0; //#30967
            } //#30967
            $_.cclpad = $a(); //#30967
            $_.linlpad = $a(0); //#30968
        } else { //#30971
            $_.cclpad = $a(0); //#30970
            $k[$j++] = Infinity; //#30971
            for (var _1c = 0, _1d = -$_.x; _1c < _1d; _1c++) { //#30971
                $k[$j++] = 0; //#30971
            } //#30971
            $_.linlpad = $a(); //#30971
        } //#30971
        $_.diff = $f($_.linwidth - $f($_.ccpixx + $_.x)); //#30974
        if ($_.diff > 0) { //#30980
            $k[$j++] = Infinity; //#30976
            for (var _1k = 0, _1l = $_.diff; _1k < _1l; _1k++) { //#30976
                $k[$j++] = 0; //#30976
            } //#30976
            $_.ccrpad = $a(); //#30976
            $_.linrpad = $a(0); //#30977
        } else { //#30980
            $_.ccrpad = $a(0); //#30979
            $k[$j++] = Infinity; //#30980
            for (var _1q = 0, _1r = -$_.diff; _1q < _1r; _1q++) { //#30980
                $k[$j++] = 0; //#30980
            } //#30980
            $_.linrpad = $a(); //#30980
        } //#30980
        $_.linheight = ~~$_.linheight; //#30983
        $k[$j++] = Infinity; //#30984
        for (var _1x = 0, _1y = $_.ccpixx, _1w = $_.ccpixs.length - 1; _1y < 0 ? _1x >= _1w : _1x <= _1w; _1x += _1y) { //#30988
            $_.i = _1x; //#30986
            $aload($_.cclpad); //#30987
            $aload($geti($_.ccpixs, $_.i, $_.ccpixx)); //#30987
            $aload($_.ccrpad); //#30987
        } //#30987
        $aload($_.linlpad); //#30989
        $aload($_.sep); //#30989
        $aload($_.linrpad); //#30989
        for (var _29 = 0, _2A = $_.linheight; _29 < _2A; _29++) { //#30990
            $aload($_.linlpad); //#30990
            $aload($_.linpixs); //#30990
            $aload($_.linrpad); //#30990
        } //#30990
        $_.pixs = $a(); //#30990
        $_.pixx = $f($f($_.cclpad.length + $_.ccpixx) + $_.ccrpad.length); //#30993
        $_.pixy = ~~($_.pixs.length / $_.pixx); //#30994
        var _2Q = new Map([
            ["ren", 'renmatrix'],
            ["pixs", $_.pixs],
            ["pixx", $_.pixx],
            ["pixy", $_.pixy],
            ["height", $_.pixy / 72],
            ["width", $_.pixx / 72],
            ["opt", $_.options]
        ]); //#31002
        $k[$j++] = _2Q; //#31009
        if (!$_.dontdraw) { //#31009
            $$.save(); //#31006
            bwipp_renmatrix(); //#31007
            $$.restore(); //#31008
        } //#31008
    } //#31008
    $_ = Object.getPrototypeOf($_); //#31012
} //bwipp_gs1_128composite
function bwipp_gs1datamatrix() {
    $_ = Object.create($_); //#31042
    $_.dontdraw = false; //#31045
    $_.parse = false; //#31046
    $_.dontlint = false; //#31047
    $_.lintreqs = true; //#31048
    $_.gssep = false; //#31049
    $k[$j++] = $_; //#31051
    bwipp_processoptions(); //#31051
    $_.options = $k[--$j]; //#31051
    $_.barcode = $k[--$j]; //#31052
    $k[$j++] = $_.barcode; //#31054
    $k[$j++] = 'ai'; //#31054
    bwipp_gs1process(); //#31054
    $_.fncs = $k[--$j]; //#31055
    $_.vals = $k[--$j]; //#31056
    $_.ais = $k[--$j]; //#31057
    $_.fnc1 = -1; //#31060
    $_.dmtx = $a([$_.fnc1]); //#31061
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#31077
        $_.i = _A; //#31063
        $_.ai = $get($_.ais, $_.i); //#31064
        $_.val = $get($_.vals, $_.i); //#31065
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#31066
        $puti(_K, 0, $_.dmtx); //#31067
        $k[$j++] = _K; //#31068
        $k[$j++] = _K; //#31068
        $k[$j++] = $_.dmtx.length; //#31068
        $k[$j++] = $_.ai; //#31068
        $k[$j++] = Infinity; //#31068
        var _O = $k[--$j]; //#31068
        var _P = $k[--$j]; //#31068
        $k[$j++] = _O; //#31068
        $forall(_P); //#31068
        var _Q = $a(); //#31068
        var _R = $k[--$j]; //#31068
        $puti($k[--$j], _R, _Q); //#31068
        var _T = $k[--$j]; //#31069
        $k[$j++] = _T; //#31069
        $k[$j++] = _T; //#31069
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#31069
        $k[$j++] = $_.val; //#31069
        $k[$j++] = Infinity; //#31069
        var _X = $k[--$j]; //#31069
        var _Y = $k[--$j]; //#31069
        $k[$j++] = _X; //#31069
        $forall(_Y); //#31069
        var _Z = $a(); //#31069
        var _a = $k[--$j]; //#31069
        $puti($k[--$j], _a, _Z); //#31069
        $_.dmtx = $k[--$j]; //#31070
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#31076
            var _j = $a($_.dmtx.length + 1); //#31072
            $puti(_j, 0, $_.dmtx); //#31073
            $k[$j++] = _j; //#31074
            $k[$j++] = _j; //#31074
            $k[$j++] = $_.dmtx.length; //#31074
            if ($_.gssep) { //#31074
                $k[$j++] = 29; //#31074
            } else { //#31074
                $k[$j++] = $_.fnc1; //#31074
            } //#31074
            var _o = $k[--$j]; //#31074
            var _p = $k[--$j]; //#31074
            $put($k[--$j], _p, _o); //#31074
            $_.dmtx = $k[--$j]; //#31075
        } //#31075
    } //#31075
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#31080
    $_.i = 0; //#31081
    $_.j = 0; //#31081
    for (;;) { //#31091
        if ($_.i == $_.dmtx.length) { //#31082
            break; //#31082
        } //#31082
        var _y = $get($_.dmtx, $_.i); //#31083
        $k[$j++] = _y; //#31088
        if (_y == $_.fnc1) { //#31087
            $j--; //#31084
            $puti($_.barcode, $_.j, "^FNC1"); //#31084
            $_.j = $_.j + 4; //#31085
        } else { //#31087
            $put($_.barcode, $_.j, $k[--$j]); //#31087
        } //#31087
        $_.i = $_.i + 1; //#31089
        $_.j = $_.j + 1; //#31090
    } //#31090
    $_.barcode = $geti($_.barcode, 0, $_.j); //#31092
    delete $_.options["parse"]; //#31095
    $put($_.options, "dontdraw", true); //#31096
    $put($_.options, "parsefnc", true); //#31097
    $k[$j++] = 'args'; //#31098
    $k[$j++] = $_.barcode; //#31098
    $k[$j++] = $_.options; //#31098
    bwipp_datamatrix(); //#31098
    var _1G = $k[--$j]; //#31098
    $_[$k[--$j]] = _1G; //#31098
    $put($_.args, "opt", $_.options); //#31100
    $k[$j++] = $_.args; //#31103
    if (!$_.dontdraw) { //#31103
        bwipp_renmatrix(); //#31103
    } //#31103
    $_ = Object.getPrototypeOf($_); //#31105
} //bwipp_gs1datamatrix
function bwipp_gs1datamatrixrectangular() {
    $_ = Object.create($_); //#31135
    $_.parse = false; //#31138
    $_.dontlint = false; //#31139
    $_.lintreqs = true; //#31140
    $_.dontdraw = false; //#31141
    $_.gssep = false; //#31142
    $k[$j++] = $_; //#31144
    bwipp_processoptions(); //#31144
    $_.options = $k[--$j]; //#31144
    $_.barcode = $k[--$j]; //#31145
    $k[$j++] = $_.barcode; //#31147
    $k[$j++] = 'ai'; //#31147
    bwipp_gs1process(); //#31147
    $_.fncs = $k[--$j]; //#31148
    $_.vals = $k[--$j]; //#31149
    $_.ais = $k[--$j]; //#31150
    $_.fnc1 = -1; //#31153
    $_.dmtx = $a([$_.fnc1]); //#31154
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#31170
        $_.i = _A; //#31156
        $_.ai = $get($_.ais, $_.i); //#31157
        $_.val = $get($_.vals, $_.i); //#31158
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#31159
        $puti(_K, 0, $_.dmtx); //#31160
        $k[$j++] = _K; //#31161
        $k[$j++] = _K; //#31161
        $k[$j++] = $_.dmtx.length; //#31161
        $k[$j++] = $_.ai; //#31161
        $k[$j++] = Infinity; //#31161
        var _O = $k[--$j]; //#31161
        var _P = $k[--$j]; //#31161
        $k[$j++] = _O; //#31161
        $forall(_P); //#31161
        var _Q = $a(); //#31161
        var _R = $k[--$j]; //#31161
        $puti($k[--$j], _R, _Q); //#31161
        var _T = $k[--$j]; //#31162
        $k[$j++] = _T; //#31162
        $k[$j++] = _T; //#31162
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#31162
        $k[$j++] = $_.val; //#31162
        $k[$j++] = Infinity; //#31162
        var _X = $k[--$j]; //#31162
        var _Y = $k[--$j]; //#31162
        $k[$j++] = _X; //#31162
        $forall(_Y); //#31162
        var _Z = $a(); //#31162
        var _a = $k[--$j]; //#31162
        $puti($k[--$j], _a, _Z); //#31162
        $_.dmtx = $k[--$j]; //#31163
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#31169
            var _j = $a($_.dmtx.length + 1); //#31165
            $puti(_j, 0, $_.dmtx); //#31166
            $k[$j++] = _j; //#31167
            $k[$j++] = _j; //#31167
            $k[$j++] = $_.dmtx.length; //#31167
            if ($_.gssep) { //#31167
                $k[$j++] = 29; //#31167
            } else { //#31167
                $k[$j++] = $_.fnc1; //#31167
            } //#31167
            var _o = $k[--$j]; //#31167
            var _p = $k[--$j]; //#31167
            $put($k[--$j], _p, _o); //#31167
            $_.dmtx = $k[--$j]; //#31168
        } //#31168
    } //#31168
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#31173
    $_.i = 0; //#31174
    $_.j = 0; //#31174
    for (;;) { //#31184
        if ($_.i == $_.dmtx.length) { //#31175
            break; //#31175
        } //#31175
        var _y = $get($_.dmtx, $_.i); //#31176
        $k[$j++] = _y; //#31181
        if (_y == $_.fnc1) { //#31180
            $j--; //#31177
            $puti($_.barcode, $_.j, "^FNC1"); //#31177
            $_.j = $_.j + 4; //#31178
        } else { //#31180
            $put($_.barcode, $_.j, $k[--$j]); //#31180
        } //#31180
        $_.i = $_.i + 1; //#31182
        $_.j = $_.j + 1; //#31183
    } //#31183
    $_.barcode = $geti($_.barcode, 0, $_.j); //#31185
    delete $_.options["parse"]; //#31188
    $put($_.options, "dontdraw", true); //#31189
    $put($_.options, "parsefnc", true); //#31190
    $put($_.options, "format", "rectangle"); //#31191
    $k[$j++] = 'args'; //#31192
    $k[$j++] = $_.barcode; //#31192
    $k[$j++] = $_.options; //#31192
    bwipp_datamatrix(); //#31192
    var _1H = $k[--$j]; //#31192
    $_[$k[--$j]] = _1H; //#31192
    $put($_.args, "opt", $_.options); //#31194
    $k[$j++] = $_.args; //#31197
    if (!$_.dontdraw) { //#31197
        bwipp_renmatrix(); //#31197
    } //#31197
    $_ = Object.getPrototypeOf($_); //#31199
} //bwipp_gs1datamatrixrectangular
function bwipp_gs1dldatamatrix() {
    $_ = Object.create($_); //#31229
    $_.parse = false; //#31232
    $_.dontlint = false; //#31233
    $_.lintreqs = true; //#31234
    $_.dontdraw = false; //#31235
    $k[$j++] = $_; //#31237
    bwipp_processoptions(); //#31237
    $_.options = $k[--$j]; //#31237
    $_.barcode = $k[--$j]; //#31238
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#31244
    $_.fncvals = _3; //#31245
    $k[$j++] = 'barcode'; //#31246
    $k[$j++] = $_.barcode; //#31246
    $k[$j++] = $_.fncvals; //#31246
    bwipp_parseinput(); //#31246
    var _6 = $k[--$j]; //#31246
    $_[$k[--$j]] = _6; //#31246
    $k[$j++] = $_.barcode; //#31248
    $k[$j++] = 'dl'; //#31248
    bwipp_gs1process(); //#31248
    $j--; //#31248
    $_.val = $get($k[--$j], 0); //#31249
    $_.key = $get($k[--$j], 0); //#31250
    $_.hri = $s(($_.key.length + $_.val.length) + 2); //#31252
    $put($_.hri, 0, 40); //#31253
    $puti($_.hri, 1, $_.key); //#31254
    $put($_.hri, $_.key.length + 1, 41); //#31255
    $puti($_.hri, $_.key.length + 2, $_.val); //#31256
    delete $_.options["parse"]; //#31259
    $put($_.options, "dontdraw", true); //#31260
    $k[$j++] = 'args'; //#31261
    $k[$j++] = $_.barcode; //#31261
    $k[$j++] = $_.options; //#31261
    bwipp_datamatrix(); //#31261
    var _S = $k[--$j]; //#31261
    $_[$k[--$j]] = _S; //#31261
    $put($_.args, "opt", $_.options); //#31263
    $put($_.args, "alttext", $_.hri); //#31264
    $put($_.args, "textyoffset", 1); //#31265
    $put($_.args, "textfont", "OCR-B"); //#31266
    $put($_.args, "textsize", 5); //#31267
    $k[$j++] = $_.args; //#31270
    if (!$_.dontdraw) { //#31270
        bwipp_renmatrix(); //#31270
    } //#31270
    $_ = Object.getPrototypeOf($_); //#31272
} //bwipp_gs1dldatamatrix
function bwipp_gs1qrcode() {
    $_ = Object.create($_); //#31301
    $_.parse = false; //#31304
    $_.dontlint = false; //#31305
    $_.lintreqs = true; //#31306
    $_.dontdraw = false; //#31307
    $k[$j++] = $_; //#31309
    bwipp_processoptions(); //#31309
    $_.options = $k[--$j]; //#31309
    $_.barcode = $k[--$j]; //#31310
    $k[$j++] = $_.barcode; //#31312
    $k[$j++] = 'ai'; //#31312
    bwipp_gs1process(); //#31312
    $_.fncs = $k[--$j]; //#31313
    $_.vals = $k[--$j]; //#31314
    $_.ais = $k[--$j]; //#31315
    $_.fnc1 = -1; //#31318
    $_.qrc = $a([$_.fnc1]); //#31319
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#31335
        $_.i = _A; //#31321
        $_.ai = $get($_.ais, $_.i); //#31322
        $_.val = $get($_.vals, $_.i); //#31323
        var _K = $a(($_.qrc.length + $_.ai.length) + $_.val.length); //#31324
        $puti(_K, 0, $_.qrc); //#31325
        $k[$j++] = _K; //#31326
        $k[$j++] = _K; //#31326
        $k[$j++] = $_.qrc.length; //#31326
        $k[$j++] = $_.ai; //#31326
        $k[$j++] = Infinity; //#31326
        var _O = $k[--$j]; //#31326
        var _P = $k[--$j]; //#31326
        $k[$j++] = _O; //#31326
        $forall(_P); //#31326
        var _Q = $a(); //#31326
        var _R = $k[--$j]; //#31326
        $puti($k[--$j], _R, _Q); //#31326
        var _T = $k[--$j]; //#31327
        $k[$j++] = _T; //#31327
        $k[$j++] = _T; //#31327
        $k[$j++] = $_.qrc.length + $_.ai.length; //#31327
        $k[$j++] = $_.val; //#31327
        $k[$j++] = Infinity; //#31327
        var _X = $k[--$j]; //#31327
        var _Y = $k[--$j]; //#31327
        $k[$j++] = _X; //#31327
        $forall(_Y); //#31327
        var _Z = $a(); //#31327
        var _a = $k[--$j]; //#31327
        $puti($k[--$j], _a, _Z); //#31327
        $_.qrc = $k[--$j]; //#31328
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#31334
            var _j = $a($_.qrc.length + 1); //#31330
            $puti(_j, 0, $_.qrc); //#31331
            $put(_j, $_.qrc.length, $_.fnc1); //#31332
            $_.qrc = _j; //#31333
        } //#31333
    } //#31333
    $_.barcode = $s(($_.qrc.length + 1) * 5); //#31338
    $_.i = 0; //#31339
    $_.j = 0; //#31339
    for (;;) { //#31349
        if ($_.i == $_.qrc.length) { //#31340
            break; //#31340
        } //#31340
        var _t = $get($_.qrc, $_.i); //#31341
        $k[$j++] = _t; //#31346
        if (_t == $_.fnc1) { //#31345
            $j--; //#31342
            $puti($_.barcode, $_.j, "^FNC1"); //#31342
            $_.j = $_.j + 4; //#31343
        } else { //#31345
            $put($_.barcode, $_.j, $k[--$j]); //#31345
        } //#31345
        $_.i = $_.i + 1; //#31347
        $_.j = $_.j + 1; //#31348
    } //#31348
    $_.barcode = $geti($_.barcode, 0, $_.j); //#31350
    delete $_.options["parse"]; //#31353
    $put($_.options, "dontdraw", true); //#31354
    $put($_.options, "parsefnc", true); //#31355
    $k[$j++] = 'args'; //#31356
    $k[$j++] = $_.barcode; //#31356
    $k[$j++] = $_.options; //#31356
    bwipp_qrcode(); //#31356
    var _1B = $k[--$j]; //#31356
    $_[$k[--$j]] = _1B; //#31356
    $put($_.args, "opt", $_.options); //#31358
    $k[$j++] = $_.args; //#31361
    if (!$_.dontdraw) { //#31361
        bwipp_renmatrix(); //#31361
    } //#31361
    $_ = Object.getPrototypeOf($_); //#31363
} //bwipp_gs1qrcode
function bwipp_gs1dlqrcode() {
    $_ = Object.create($_); //#31393
    $_.parse = false; //#31396
    $_.dontlint = false; //#31397
    $_.lintreqs = true; //#31398
    $_.dontdraw = false; //#31399
    $k[$j++] = $_; //#31401
    bwipp_processoptions(); //#31401
    $_.options = $k[--$j]; //#31401
    $_.barcode = $k[--$j]; //#31402
    var _3 = new Map([
        ["parse", $_.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#31408
    $_.fncvals = _3; //#31409
    $k[$j++] = 'barcode'; //#31410
    $k[$j++] = $_.barcode; //#31410
    $k[$j++] = $_.fncvals; //#31410
    bwipp_parseinput(); //#31410
    var _6 = $k[--$j]; //#31410
    $_[$k[--$j]] = _6; //#31410
    $k[$j++] = $_.barcode; //#31412
    $k[$j++] = 'dl'; //#31412
    bwipp_gs1process(); //#31412
    $j--; //#31412
    $_.val = $get($k[--$j], 0); //#31413
    $_.key = $get($k[--$j], 0); //#31414
    $_.hri = $s(($_.key.length + $_.val.length) + 2); //#31416
    $put($_.hri, 0, 40); //#31417
    $puti($_.hri, 1, $_.key); //#31418
    $put($_.hri, $_.key.length + 1, 41); //#31419
    $puti($_.hri, $_.key.length + 2, $_.val); //#31420
    delete $_.options["parse"]; //#31423
    $put($_.options, "dontdraw", true); //#31424
    $k[$j++] = 'args'; //#31425
    $k[$j++] = $_.barcode; //#31425
    $k[$j++] = $_.options; //#31425
    bwipp_qrcode(); //#31425
    var _S = $k[--$j]; //#31425
    $_[$k[--$j]] = _S; //#31425
    $put($_.args, "opt", $_.options); //#31427
    $put($_.args, "alttext", $_.hri); //#31428
    $put($_.args, "textyoffset", 4); //#31429
    $put($_.args, "textfont", "OCR-B"); //#31430
    $put($_.args, "textsize", 5); //#31431
    $k[$j++] = $_.args; //#31434
    if (!$_.dontdraw) { //#31434
        bwipp_renmatrix(); //#31434
    } //#31434
    $_ = Object.getPrototypeOf($_); //#31436
} //bwipp_gs1dlqrcode
function bwipp_gs1dotcode() {
    $_ = Object.create($_); //#31466
    $_.dontdraw = false; //#31469
    $_.parse = false; //#31470
    $_.dontlint = false; //#31471
    $_.lintreqs = true; //#31472
    $k[$j++] = $_; //#31474
    bwipp_processoptions(); //#31474
    $_.options = $k[--$j]; //#31474
    $_.barcode = $k[--$j]; //#31475
    $k[$j++] = $_.barcode; //#31477
    $k[$j++] = 'ai'; //#31477
    bwipp_gs1process(); //#31477
    $_.fncs = $k[--$j]; //#31478
    $_.vals = $k[--$j]; //#31479
    $_.ais = $k[--$j]; //#31480
    $_.fnc1 = -1; //#31483
    $_.dmtx = $a([$_.fnc1]); //#31484
    for (var _A = 0, _9 = $_.ais.length - 1; _A <= _9; _A += 1) { //#31500
        $_.i = _A; //#31486
        $_.ai = $get($_.ais, $_.i); //#31487
        $_.val = $get($_.vals, $_.i); //#31488
        var _K = $a(($_.dmtx.length + $_.ai.length) + $_.val.length); //#31489
        $puti(_K, 0, $_.dmtx); //#31490
        $k[$j++] = _K; //#31491
        $k[$j++] = _K; //#31491
        $k[$j++] = $_.dmtx.length; //#31491
        $k[$j++] = $_.ai; //#31491
        $k[$j++] = Infinity; //#31491
        var _O = $k[--$j]; //#31491
        var _P = $k[--$j]; //#31491
        $k[$j++] = _O; //#31491
        $forall(_P); //#31491
        var _Q = $a(); //#31491
        var _R = $k[--$j]; //#31491
        $puti($k[--$j], _R, _Q); //#31491
        var _T = $k[--$j]; //#31492
        $k[$j++] = _T; //#31492
        $k[$j++] = _T; //#31492
        $k[$j++] = $_.dmtx.length + $_.ai.length; //#31492
        $k[$j++] = $_.val; //#31492
        $k[$j++] = Infinity; //#31492
        var _X = $k[--$j]; //#31492
        var _Y = $k[--$j]; //#31492
        $k[$j++] = _X; //#31492
        $forall(_Y); //#31492
        var _Z = $a(); //#31492
        var _a = $k[--$j]; //#31492
        $puti($k[--$j], _a, _Z); //#31492
        $_.dmtx = $k[--$j]; //#31493
        if (($_.i != ($_.ais.length - 1)) && $get($_.fncs, $_.i)) { //#31499
            var _j = $a($_.dmtx.length + 1); //#31495
            $puti(_j, 0, $_.dmtx); //#31496
            $put(_j, $_.dmtx.length, $_.fnc1); //#31497
            $_.dmtx = _j; //#31498
        } //#31498
    } //#31498
    $_.barcode = $s(($_.dmtx.length + 1) * 5); //#31503
    $_.i = 0; //#31504
    $_.j = 0; //#31504
    for (;;) { //#31514
        if ($_.i == $_.dmtx.length) { //#31505
            break; //#31505
        } //#31505
        var _t = $get($_.dmtx, $_.i); //#31506
        $k[$j++] = _t; //#31511
        if (_t == $_.fnc1) { //#31510
            $j--; //#31507
            $puti($_.barcode, $_.j, "^FNC1"); //#31507
            $_.j = $_.j + 4; //#31508
        } else { //#31510
            $put($_.barcode, $_.j, $k[--$j]); //#31510
        } //#31510
        $_.i = $_.i + 1; //#31512
        $_.j = $_.j + 1; //#31513
    } //#31513
    $_.barcode = $geti($_.barcode, 0, $_.j); //#31515
    delete $_.options["parse"]; //#31518
    $put($_.options, "dontdraw", true); //#31519
    $put($_.options, "parsefnc", true); //#31520
    $k[$j++] = 'args'; //#31521
    $k[$j++] = $_.barcode; //#31521
    $k[$j++] = $_.options; //#31521
    bwipp_dotcode(); //#31521
    var _1B = $k[--$j]; //#31521
    $_[$k[--$j]] = _1B; //#31521
    $put($_.args, "opt", $_.options); //#31523
    $k[$j++] = $_.args; //#31526
    if (!$_.dontdraw) { //#31526
        bwipp_renmatrix(); //#31526
    } //#31526
    $_ = Object.getPrototypeOf($_); //#31528
} //bwipp_gs1dotcode
function bwipp_hibccode39() {
    $_ = Object.create($_); //#31559
    $_.dontdraw = false; //#31562
    $_.textfont = "OCR-B"; //#31563
    $_.textsize = 10; //#31564
    $_.textyoffset = -8; //#31565
    $_.textxoffset = 0; //#31566
    $_.validatecheck = false; //#31567
    $k[$j++] = $_; //#31569
    bwipp_processoptions(); //#31569
    $_.options = $k[--$j]; //#31569
    $_.barcode = $k[--$j]; //#31570
    if ($eq($_.barcode, "")) { //#31574
        $k[$j++] = 'bwipp.hibccode39emptyData#31573'; //#31573
        $k[$j++] = "The data must not be empty"; //#31573
        bwipp_raiseerror(); //#31573
    } //#31573
    bwipp_loadctx(bwipp_hibccode39); //#31576
    if (!bwipp_hibccode39.__31583__) { //#31583
        $_ = Object.create($_); //#31583
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31580
        $_.charvals = new Map; //#31581
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31582
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31582
        } //#31582
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibccode39.$ctx[id] = $_[id]); //#31582
        bwipp_hibccode39.__31583__ = 1; //#31582
        $_ = Object.getPrototypeOf($_); //#31582
    } //#31582
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31590
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31587
        if (!_E) { //#31589
            $k[$j++] = 'bwipp.hibccode39badCharacter#31588'; //#31588
            $k[$j++] = "HIBC Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31588
            bwipp_raiseerror(); //#31588
        } //#31588
    } //#31588
    $k[$j++] = 'barlen'; //#31592
    $k[$j++] = $_.barcode.length; //#31592
    if ($_.validatecheck) { //#31592
        var _H = $k[--$j]; //#31592
        $k[$j++] = $f(_H - 1); //#31592
    } //#31592
    var _I = $k[--$j]; //#31592
    $_[$k[--$j]] = _I; //#31592
    $_.checksum = 41; //#31594
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31598
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31597
    } //#31597
    $_.checksum = $_.checksum % 43; //#31599
    if ($_.validatecheck) { //#31605
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31603
            $k[$j++] = 'bwipp.hibccode39badCheckDigit#31602'; //#31602
            $k[$j++] = "Incorrect HIBC Code 39 check digit provided"; //#31602
            bwipp_raiseerror(); //#31602
        } //#31602
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31604
    } //#31604
    var _e = $s($f($_.barlen + 2)); //#31607
    $puti(_e, 1, $_.barcode); //#31607
    $_.barcode = _e; //#31607
    $put($_.barcode, 0, 43); //#31608
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31609
    $_.text = $s($f($_.barlen + 4)); //#31611
    $put($_.text, 0, 42); //#31612
    $puti($_.text, 1, $_.barcode); //#31613
    var _v = $get($_.barcode, $f($_.barlen + 1)); //#31614
    $k[$j++] = $_.text; //#31614
    $k[$j++] = $f($_.barlen + 2); //#31614
    $k[$j++] = _v; //#31614
    if (_v == 32) { //#31614
        $j--; //#31614
        $k[$j++] = 95; //#31614
    } //#31614
    var _w = $k[--$j]; //#31614
    var _x = $k[--$j]; //#31614
    $put($k[--$j], _x, _w); //#31614
    $put($_.text, $f($_.barlen + 3), 42); //#31615
    $put($_.options, "dontdraw", true); //#31618
    $put($_.options, "includecheck", false); //#31619
    $put($_.options, "validatecheck", false); //#31620
    $k[$j++] = 'args'; //#31621
    $k[$j++] = $_.barcode; //#31621
    $k[$j++] = $_.options; //#31621
    bwipp_code39(); //#31621
    var _16 = $k[--$j]; //#31621
    $_[$k[--$j]] = _16; //#31621
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#31623
    $put($_.args, "textxalign", "center"); //#31624
    $put($_.args, "opt", $_.options); //#31625
    $k[$j++] = $_.args; //#31628
    if (!$_.dontdraw) { //#31628
        bwipp_renlinear(); //#31628
    } //#31628
    $_ = Object.getPrototypeOf($_); //#31630
    $_ = Object.getPrototypeOf($_); //#31632
} //bwipp_hibccode39
function bwipp_hibccode128() {
    $_ = Object.create($_); //#31663
    $_.dontdraw = false; //#31666
    $_.textfont = "OCR-B"; //#31667
    $_.textsize = 10; //#31668
    $_.textyoffset = -8; //#31669
    $_.textxoffset = 0; //#31670
    $_.validatecheck = false; //#31671
    $k[$j++] = $_; //#31673
    bwipp_processoptions(); //#31673
    $_.options = $k[--$j]; //#31673
    $_.barcode = $k[--$j]; //#31674
    if ($eq($_.barcode, "")) { //#31678
        $k[$j++] = 'bwipp.hibccode128emptyData#31677'; //#31677
        $k[$j++] = "The data must not be empty"; //#31677
        bwipp_raiseerror(); //#31677
    } //#31677
    bwipp_loadctx(bwipp_hibccode128); //#31680
    if (!bwipp_hibccode128.__31687__) { //#31687
        $_ = Object.create($_); //#31687
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31684
        $_.charvals = new Map; //#31685
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31686
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31686
        } //#31686
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibccode128.$ctx[id] = $_[id]); //#31686
        bwipp_hibccode128.__31687__ = 1; //#31686
        $_ = Object.getPrototypeOf($_); //#31686
    } //#31686
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31694
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31691
        if (!_E) { //#31693
            $k[$j++] = 'bwipp.hibccode128badCharacter#31692'; //#31692
            $k[$j++] = "HIBC Code 128 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31692
            bwipp_raiseerror(); //#31692
        } //#31692
    } //#31692
    $k[$j++] = 'barlen'; //#31696
    $k[$j++] = $_.barcode.length; //#31696
    if ($_.validatecheck) { //#31696
        var _H = $k[--$j]; //#31696
        $k[$j++] = $f(_H - 1); //#31696
    } //#31696
    var _I = $k[--$j]; //#31696
    $_[$k[--$j]] = _I; //#31696
    $_.checksum = 41; //#31698
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31702
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31701
    } //#31701
    $_.checksum = $_.checksum % 43; //#31703
    if ($_.validatecheck) { //#31709
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31707
            $k[$j++] = 'bwipp.hibccode128badCheckDigit#31706'; //#31706
            $k[$j++] = "Incorrect HIBC Code 128 check digit provided"; //#31706
            bwipp_raiseerror(); //#31706
        } //#31706
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31708
    } //#31708
    var _e = $s($f($_.barlen + 2)); //#31711
    $puti(_e, 1, $_.barcode); //#31711
    $_.barcode = _e; //#31711
    $put($_.barcode, 0, 43); //#31712
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31713
    $_.text = $s($f($_.barlen + 4)); //#31715
    $put($_.text, 0, 42); //#31716
    $puti($_.text, 1, $_.barcode); //#31717
    var _v = $get($_.barcode, $f($_.barlen + 1)); //#31718
    $k[$j++] = $_.text; //#31718
    $k[$j++] = $f($_.barlen + 2); //#31718
    $k[$j++] = _v; //#31718
    if (_v == 32) { //#31718
        $j--; //#31718
        $k[$j++] = 95; //#31718
    } //#31718
    var _w = $k[--$j]; //#31718
    var _x = $k[--$j]; //#31718
    $put($k[--$j], _x, _w); //#31718
    $put($_.text, $f($_.barlen + 3), 42); //#31719
    $put($_.options, "dontdraw", true); //#31722
    $put($_.options, "validatecheck", false); //#31723
    $k[$j++] = 'args'; //#31724
    $k[$j++] = $_.barcode; //#31724
    $k[$j++] = $_.options; //#31724
    bwipp_code128(); //#31724
    var _15 = $k[--$j]; //#31724
    $_[$k[--$j]] = _15; //#31724
    $put($_.args, "txt", $a([$a([$_.text, $_.textxoffset, $_.textyoffset, $_.textfont, $_.textsize])])); //#31726
    $put($_.args, "textxalign", "center"); //#31727
    $put($_.args, "opt", $_.options); //#31728
    $k[$j++] = $_.args; //#31731
    if (!$_.dontdraw) { //#31731
        bwipp_renlinear(); //#31731
    } //#31731
    $_ = Object.getPrototypeOf($_); //#31733
    $_ = Object.getPrototypeOf($_); //#31735
} //bwipp_hibccode128
function bwipp_hibcdatamatrix() {
    $_ = Object.create($_); //#31766
    $_.dontdraw = false; //#31769
    $_.validatecheck = false; //#31770
    $k[$j++] = $_; //#31772
    bwipp_processoptions(); //#31772
    $_.options = $k[--$j]; //#31772
    $_.barcode = $k[--$j]; //#31773
    if ($eq($_.barcode, "")) { //#31777
        $k[$j++] = 'bwipp.hibcdatamatrixEmptyData#31776'; //#31776
        $k[$j++] = "The data must not be empty"; //#31776
        bwipp_raiseerror(); //#31776
    } //#31776
    bwipp_loadctx(bwipp_hibcdatamatrix); //#31779
    if (!bwipp_hibcdatamatrix.__31786__) { //#31786
        $_ = Object.create($_); //#31786
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31783
        $_.charvals = new Map; //#31784
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31785
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31785
        } //#31785
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcdatamatrix.$ctx[id] = $_[id]); //#31785
        bwipp_hibcdatamatrix.__31786__ = 1; //#31785
        $_ = Object.getPrototypeOf($_); //#31785
    } //#31785
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31793
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31790
        if (!_E) { //#31792
            $k[$j++] = 'bwipp.hibcdatamatrixBadCharacter#31791'; //#31791
            $k[$j++] = "HIBC Data Matrix must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31791
            bwipp_raiseerror(); //#31791
        } //#31791
    } //#31791
    $k[$j++] = 'barlen'; //#31795
    $k[$j++] = $_.barcode.length; //#31795
    if ($_.validatecheck) { //#31795
        var _H = $k[--$j]; //#31795
        $k[$j++] = $f(_H - 1); //#31795
    } //#31795
    var _I = $k[--$j]; //#31795
    $_[$k[--$j]] = _I; //#31795
    $_.checksum = 41; //#31797
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31801
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31800
    } //#31800
    $_.checksum = $_.checksum % 43; //#31802
    if ($_.validatecheck) { //#31808
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31806
            $k[$j++] = 'bwipp.hibcdatamatrixBadCheckDigit#31805'; //#31805
            $k[$j++] = "Incorrect HIBC Data Matrix check digit provided"; //#31805
            bwipp_raiseerror(); //#31805
        } //#31805
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31807
    } //#31807
    var _d = $_.barlen; //#31810
    var _e = $s($f(_d + 2)); //#31810
    $puti(_e, 1, $_.barcode); //#31810
    $_.barcode = _e; //#31810
    $put($_.barcode, 0, 43); //#31811
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31812
    $put($_.options, "dontdraw", true); //#31815
    $put($_.options, "validatecheck", false); //#31816
    $k[$j++] = 'args'; //#31817
    $k[$j++] = $_.barcode; //#31817
    $k[$j++] = $_.options; //#31817
    bwipp_datamatrix(); //#31817
    var _q = $k[--$j]; //#31817
    var _r = $k[--$j]; //#31817
    $_[_r] = _q; //#31817
    $put($_.args, "opt", $_.options); //#31819
    $k[$j++] = $_.args; //#31822
    if (!$_.dontdraw) { //#31822
        bwipp_renmatrix(); //#31822
    } //#31822
    $_ = Object.getPrototypeOf($_); //#31824
    $_ = Object.getPrototypeOf($_); //#31826
} //bwipp_hibcdatamatrix
function bwipp_hibcdatamatrixrectangular() {
    $_ = Object.create($_); //#31857
    $_.dontdraw = false; //#31860
    $_.validatecheck = false; //#31861
    $k[$j++] = $_; //#31863
    bwipp_processoptions(); //#31863
    $_.options = $k[--$j]; //#31863
    $_.barcode = $k[--$j]; //#31864
    if ($eq($_.barcode, "")) { //#31868
        $k[$j++] = 'bwipp.hibcdatamatrixrectangularEmptyData#31867'; //#31867
        $k[$j++] = "The data must not be empty"; //#31867
        bwipp_raiseerror(); //#31867
    } //#31867
    bwipp_loadctx(bwipp_hibcdatamatrixrectangular); //#31870
    if (!bwipp_hibcdatamatrixrectangular.__31877__) { //#31877
        $_ = Object.create($_); //#31877
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31874
        $_.charvals = new Map; //#31875
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31876
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31876
        } //#31876
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcdatamatrixrectangular.$ctx[id] = $_[id]); //#31876
        bwipp_hibcdatamatrixrectangular.__31877__ = 1; //#31876
        $_ = Object.getPrototypeOf($_); //#31876
    } //#31876
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31884
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31881
        if (!_E) { //#31883
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCharacter#31882'; //#31882
            $k[$j++] = "HIBC Data Matrix Rectangular must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31882
            bwipp_raiseerror(); //#31882
        } //#31882
    } //#31882
    $k[$j++] = 'barlen'; //#31886
    $k[$j++] = $_.barcode.length; //#31886
    if ($_.validatecheck) { //#31886
        var _H = $k[--$j]; //#31886
        $k[$j++] = $f(_H - 1); //#31886
    } //#31886
    var _I = $k[--$j]; //#31886
    $_[$k[--$j]] = _I; //#31886
    $_.checksum = 41; //#31888
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31892
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31891
    } //#31891
    $_.checksum = $_.checksum % 43; //#31893
    if ($_.validatecheck) { //#31899
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31897
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCheckDigit#31896'; //#31896
            $k[$j++] = "Incorrect HIBC Data Matrix Rectangular check digit provided"; //#31896
            bwipp_raiseerror(); //#31896
        } //#31896
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31898
    } //#31898
    var _d = $_.barlen; //#31901
    var _e = $s($f(_d + 2)); //#31901
    $puti(_e, 1, $_.barcode); //#31901
    $_.barcode = _e; //#31901
    $put($_.barcode, 0, 43); //#31902
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31903
    $put($_.options, "dontdraw", true); //#31906
    $put($_.options, "validatecheck", false); //#31907
    $put($_.options, "format", "rectangle"); //#31908
    $k[$j++] = 'args'; //#31909
    $k[$j++] = $_.barcode; //#31909
    $k[$j++] = $_.options; //#31909
    bwipp_datamatrix(); //#31909
    var _r = $k[--$j]; //#31909
    $_[$k[--$j]] = _r; //#31909
    $put($_.args, "opt", $_.options); //#31911
    $k[$j++] = $_.args; //#31914
    if (!$_.dontdraw) { //#31914
        bwipp_renmatrix(); //#31914
    } //#31914
    $_ = Object.getPrototypeOf($_); //#31916
    $_ = Object.getPrototypeOf($_); //#31918
} //bwipp_hibcdatamatrixrectangular
function bwipp_hibcpdf417() {
    $_ = Object.create($_); //#31949
    $_.dontdraw = false; //#31952
    $_.columns = 2; //#31953
    $_.validatecheck = false; //#31954
    $k[$j++] = $_; //#31956
    bwipp_processoptions(); //#31956
    $_.options = $k[--$j]; //#31956
    $_.barcode = $k[--$j]; //#31957
    if ($eq($_.barcode, "")) { //#31961
        $k[$j++] = 'bwipp.hibcpdf417EmptyData#31960'; //#31960
        $k[$j++] = "The data must not be empty"; //#31960
        bwipp_raiseerror(); //#31960
    } //#31960
    bwipp_loadctx(bwipp_hibcpdf417); //#31963
    if (!bwipp_hibcpdf417.__31970__) { //#31970
        $_ = Object.create($_); //#31970
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#31967
        $_.charvals = new Map; //#31968
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#31969
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#31969
        } //#31969
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcpdf417.$ctx[id] = $_[id]); //#31969
        bwipp_hibcpdf417.__31970__ = 1; //#31969
        $_ = Object.getPrototypeOf($_); //#31969
    } //#31969
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#31977
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#31974
        if (!_E) { //#31976
            $k[$j++] = 'bwipp.hibcpdf417BadCharacter#31975'; //#31975
            $k[$j++] = "HIBC PDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#31975
            bwipp_raiseerror(); //#31975
        } //#31975
    } //#31975
    $k[$j++] = 'barlen'; //#31979
    $k[$j++] = $_.barcode.length; //#31979
    if ($_.validatecheck) { //#31979
        var _H = $k[--$j]; //#31979
        $k[$j++] = $f(_H - 1); //#31979
    } //#31979
    var _I = $k[--$j]; //#31979
    $_[$k[--$j]] = _I; //#31979
    $_.checksum = 41; //#31981
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#31985
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#31984
    } //#31984
    $_.checksum = $_.checksum % 43; //#31986
    if ($_.validatecheck) { //#31992
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#31990
            $k[$j++] = 'bwipp.hibcpdf417BadCheckDigit#31989'; //#31989
            $k[$j++] = "Incorrect HIBC PDF417 check digit provided"; //#31989
            bwipp_raiseerror(); //#31989
        } //#31989
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#31991
    } //#31991
    var _e = $s($f($_.barlen + 2)); //#31994
    $puti(_e, 1, $_.barcode); //#31994
    $_.barcode = _e; //#31994
    $put($_.barcode, 0, 43); //#31995
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#31996
    $put($_.options, "dontdraw", true); //#31999
    $put($_.options, "columns", $_.columns); //#32000
    var _p = $_.options; //#32001
    $put(_p, "validatecheck", false); //#32001
    var _r = $_.options; //#32002
    $k[$j++] = 'args'; //#32002
    $k[$j++] = $_.barcode; //#32002
    $k[$j++] = _r; //#32002
    bwipp_pdf417(); //#32002
    var _s = $k[--$j]; //#32002
    $_[$k[--$j]] = _s; //#32002
    $put($_.args, "opt", $_.options); //#32004
    $k[$j++] = $_.args; //#32007
    if (!$_.dontdraw) { //#32007
        bwipp_renmatrix(); //#32007
    } //#32007
    $_ = Object.getPrototypeOf($_); //#32009
    $_ = Object.getPrototypeOf($_); //#32011
} //bwipp_hibcpdf417
function bwipp_hibcmicropdf417() {
    $_ = Object.create($_); //#32042
    $_.dontdraw = false; //#32045
    $_.columns = 2; //#32046
    $_.validatecheck = false; //#32047
    $k[$j++] = $_; //#32049
    bwipp_processoptions(); //#32049
    $_.options = $k[--$j]; //#32049
    $_.barcode = $k[--$j]; //#32050
    if ($eq($_.barcode, "")) { //#32054
        $k[$j++] = 'bwipp.hibcmicropdf417EmptyData#32053'; //#32053
        $k[$j++] = "The data must not be empty"; //#32053
        bwipp_raiseerror(); //#32053
    } //#32053
    bwipp_loadctx(bwipp_hibcmicropdf417); //#32056
    if (!bwipp_hibcmicropdf417.__32063__) { //#32063
        $_ = Object.create($_); //#32063
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#32060
        $_.charvals = new Map; //#32061
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#32062
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#32062
        } //#32062
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcmicropdf417.$ctx[id] = $_[id]); //#32062
        bwipp_hibcmicropdf417.__32063__ = 1; //#32062
        $_ = Object.getPrototypeOf($_); //#32062
    } //#32062
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#32070
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#32067
        if (!_E) { //#32069
            $k[$j++] = 'bwipp.hibcmicropdf417BadCharacter#32068'; //#32068
            $k[$j++] = "HIBC MicroPDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#32068
            bwipp_raiseerror(); //#32068
        } //#32068
    } //#32068
    $k[$j++] = 'barlen'; //#32072
    $k[$j++] = $_.barcode.length; //#32072
    if ($_.validatecheck) { //#32072
        var _H = $k[--$j]; //#32072
        $k[$j++] = $f(_H - 1); //#32072
    } //#32072
    var _I = $k[--$j]; //#32072
    $_[$k[--$j]] = _I; //#32072
    $_.checksum = 41; //#32074
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#32078
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#32077
    } //#32077
    $_.checksum = $_.checksum % 43; //#32079
    if ($_.validatecheck) { //#32085
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#32083
            $k[$j++] = 'bwipp.hibcmicropdf417BadCheckDigit#32082'; //#32082
            $k[$j++] = "Incorrect HIBC MicroPDF417 check digit provided"; //#32082
            bwipp_raiseerror(); //#32082
        } //#32082
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#32084
    } //#32084
    var _e = $s($f($_.barlen + 2)); //#32087
    $puti(_e, 1, $_.barcode); //#32087
    $_.barcode = _e; //#32087
    $put($_.barcode, 0, 43); //#32088
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#32089
    var _m = $_.options; //#32092
    $put(_m, "dontdraw", true); //#32092
    $put($_.options, "columns", $_.columns); //#32093
    $put($_.options, "validatecheck", false); //#32094
    var _r = $_.options; //#32095
    $k[$j++] = 'args'; //#32095
    $k[$j++] = $_.barcode; //#32095
    $k[$j++] = _r; //#32095
    bwipp_micropdf417(); //#32095
    var _s = $k[--$j]; //#32095
    $_[$k[--$j]] = _s; //#32095
    $put($_.args, "opt", $_.options); //#32097
    $k[$j++] = $_.args; //#32100
    if (!$_.dontdraw) { //#32100
        bwipp_renmatrix(); //#32100
    } //#32100
    $_ = Object.getPrototypeOf($_); //#32102
    $_ = Object.getPrototypeOf($_); //#32104
} //bwipp_hibcmicropdf417
function bwipp_hibcqrcode() {
    $_ = Object.create($_); //#32135
    $_.dontdraw = false; //#32138
    $_.validatecheck = false; //#32139
    $k[$j++] = $_; //#32141
    bwipp_processoptions(); //#32141
    $_.options = $k[--$j]; //#32141
    $_.barcode = $k[--$j]; //#32142
    if ($eq($_.barcode, "")) { //#32146
        $k[$j++] = 'bwipp.hibcqrcodeEmptyData#32145'; //#32145
        $k[$j++] = "The data must not be empty"; //#32145
        bwipp_raiseerror(); //#32145
    } //#32145
    bwipp_loadctx(bwipp_hibcqrcode); //#32148
    if (!bwipp_hibcqrcode.__32155__) { //#32155
        $_ = Object.create($_); //#32155
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#32152
        $_.charvals = new Map; //#32153
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#32154
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#32154
        } //#32154
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcqrcode.$ctx[id] = $_[id]); //#32154
        bwipp_hibcqrcode.__32155__ = 1; //#32154
        $_ = Object.getPrototypeOf($_); //#32154
    } //#32154
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#32162
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#32159
        if (!_E) { //#32161
            $k[$j++] = 'bwipp.hibcqrcodeBadCharacter#32160'; //#32160
            $k[$j++] = "HIBC QR Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#32160
            bwipp_raiseerror(); //#32160
        } //#32160
    } //#32160
    $k[$j++] = 'barlen'; //#32164
    $k[$j++] = $_.barcode.length; //#32164
    if ($_.validatecheck) { //#32164
        var _H = $k[--$j]; //#32164
        $k[$j++] = $f(_H - 1); //#32164
    } //#32164
    var _I = $k[--$j]; //#32164
    $_[$k[--$j]] = _I; //#32164
    $_.checksum = 41; //#32166
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#32170
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#32169
    } //#32169
    $_.checksum = $_.checksum % 43; //#32171
    if ($_.validatecheck) { //#32177
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#32175
            $k[$j++] = 'bwipp.hibcqrcodeBadCheckDigit#32174'; //#32174
            $k[$j++] = "Incorrect HIBC QR Code check digit provided"; //#32174
            bwipp_raiseerror(); //#32174
        } //#32174
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#32176
    } //#32176
    var _e = $s($f($_.barlen + 2)); //#32179
    $puti(_e, 1, $_.barcode); //#32179
    $_.barcode = _e; //#32179
    $put($_.barcode, 0, 43); //#32180
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#32181
    $put($_.options, "dontdraw", true); //#32184
    $put($_.options, "validatecheck", false); //#32185
    $k[$j++] = 'args'; //#32186
    $k[$j++] = $_.barcode; //#32186
    $k[$j++] = $_.options; //#32186
    bwipp_qrcode(); //#32186
    var _q = $k[--$j]; //#32186
    var _r = $k[--$j]; //#32186
    $_[_r] = _q; //#32186
    $put($_.args, "opt", $_.options); //#32188
    $k[$j++] = $_.args; //#32191
    if (!$_.dontdraw) { //#32191
        bwipp_renmatrix(); //#32191
    } //#32191
    $_ = Object.getPrototypeOf($_); //#32193
    $_ = Object.getPrototypeOf($_); //#32195
} //bwipp_hibcqrcode
function bwipp_hibccodablockf() {
    $_ = Object.create($_); //#32226
    $_.dontdraw = false; //#32229
    $_.validatecheck = false; //#32230
    $k[$j++] = $_; //#32232
    bwipp_processoptions(); //#32232
    $_.options = $k[--$j]; //#32232
    $_.barcode = $k[--$j]; //#32233
    if ($eq($_.barcode, "")) { //#32237
        $k[$j++] = 'bwipp.hibccodablockfEmptyData#32236'; //#32236
        $k[$j++] = "The data must not be empty"; //#32236
        bwipp_raiseerror(); //#32236
    } //#32236
    bwipp_loadctx(bwipp_hibccodablockf); //#32239
    if (!bwipp_hibccodablockf.__32246__) { //#32246
        $_ = Object.create($_); //#32246
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#32243
        $_.charvals = new Map; //#32244
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#32245
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#32245
        } //#32245
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibccodablockf.$ctx[id] = $_[id]); //#32245
        bwipp_hibccodablockf.__32246__ = 1; //#32245
        $_ = Object.getPrototypeOf($_); //#32245
    } //#32245
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#32253
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#32250
        if (!_E) { //#32252
            $k[$j++] = 'bwipp.hibccodablockfBadCharacter#32251'; //#32251
            $k[$j++] = "HIBC Codablock F must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#32251
            bwipp_raiseerror(); //#32251
        } //#32251
    } //#32251
    $k[$j++] = 'barlen'; //#32255
    $k[$j++] = $_.barcode.length; //#32255
    if ($_.validatecheck) { //#32255
        var _H = $k[--$j]; //#32255
        $k[$j++] = $f(_H - 1); //#32255
    } //#32255
    var _I = $k[--$j]; //#32255
    $_[$k[--$j]] = _I; //#32255
    $_.checksum = 41; //#32257
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#32261
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#32260
    } //#32260
    $_.checksum = $_.checksum % 43; //#32262
    if ($_.validatecheck) { //#32268
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#32266
            $k[$j++] = 'bwipp.hibccodablockfBadCheckDigit#32265'; //#32265
            $k[$j++] = "Incorrect HIBC Codablock F check digit provided"; //#32265
            bwipp_raiseerror(); //#32265
        } //#32265
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#32267
    } //#32267
    var _e = $s($f($_.barlen + 2)); //#32270
    $puti(_e, 1, $_.barcode); //#32270
    $_.barcode = _e; //#32270
    $put($_.barcode, 0, 43); //#32271
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#32272
    $put($_.options, "dontdraw", true); //#32275
    $put($_.options, "validatecheck", false); //#32276
    $k[$j++] = 'args'; //#32277
    $k[$j++] = $_.barcode; //#32277
    $k[$j++] = $_.options; //#32277
    bwipp_codablockf(); //#32277
    var _q = $k[--$j]; //#32277
    var _r = $k[--$j]; //#32277
    $_[_r] = _q; //#32277
    $put($_.args, "opt", $_.options); //#32279
    $k[$j++] = $_.args; //#32282
    if (!$_.dontdraw) { //#32282
        bwipp_renmatrix(); //#32282
    } //#32282
    $_ = Object.getPrototypeOf($_); //#32284
    $_ = Object.getPrototypeOf($_); //#32286
} //bwipp_hibccodablockf
function bwipp_hibcazteccode() {
    $_ = Object.create($_); //#32317
    $_.dontdraw = false; //#32320
    $_.validatecheck = false; //#32321
    $k[$j++] = $_; //#32323
    bwipp_processoptions(); //#32323
    $_.options = $k[--$j]; //#32323
    $_.barcode = $k[--$j]; //#32324
    if ($eq($_.barcode, "")) { //#32328
        $k[$j++] = 'bwipp.hibcazteccodeEmptyData#32327'; //#32327
        $k[$j++] = "The data must not be empty"; //#32327
        bwipp_raiseerror(); //#32327
    } //#32327
    bwipp_loadctx(bwipp_hibcazteccode); //#32330
    if (!bwipp_hibcazteccode.__32337__) { //#32337
        $_ = Object.create($_); //#32337
        $_.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#32334
        $_.charvals = new Map; //#32335
        for (var _3 = 0; _3 <= 42; _3 += 1) { //#32336
            $put($_.charvals, $geti($_.barchars, _3, 1), _3); //#32336
        } //#32336
        for (var id in $_) $_.hasOwnProperty(id) && (bwipp_hibcazteccode.$ctx[id] = $_[id]); //#32336
        bwipp_hibcazteccode.__32337__ = 1; //#32336
        $_ = Object.getPrototypeOf($_); //#32336
    } //#32336
    for (var _A = 0, _9 = $_.barcode.length - 1; _A <= _9; _A += 1) { //#32344
        var _E = $get($_.charvals, $geti($_.barcode, _A, 1)) !== undefined; //#32341
        if (!_E) { //#32343
            $k[$j++] = 'bwipp.hibcazteccodeBadCharacter#32342'; //#32342
            $k[$j++] = "HIBC Aztec Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#32342
            bwipp_raiseerror(); //#32342
        } //#32342
    } //#32342
    $k[$j++] = 'barlen'; //#32346
    $k[$j++] = $_.barcode.length; //#32346
    if ($_.validatecheck) { //#32346
        var _H = $k[--$j]; //#32346
        $k[$j++] = $f(_H - 1); //#32346
    } //#32346
    var _I = $k[--$j]; //#32346
    $_[$k[--$j]] = _I; //#32346
    $_.checksum = 41; //#32348
    for (var _M = 0, _L = $f($_.barlen - 1); _M <= _L; _M += 1) { //#32352
        $_.checksum = $f($get($_.charvals, $geti($_.barcode, _M, 1)) + $_.checksum); //#32351
    } //#32351
    $_.checksum = $_.checksum % 43; //#32353
    if ($_.validatecheck) { //#32359
        if ($get($_.barcode, $_.barlen) != $get($_.barchars, $_.checksum)) { //#32357
            $k[$j++] = 'bwipp.hibcazteccodeBadCheckDigit#32356'; //#32356
            $k[$j++] = "Incorrect HIBC Aztec Code check digit provided"; //#32356
            bwipp_raiseerror(); //#32356
        } //#32356
        $_.barcode = $geti($_.barcode, 0, $_.barlen); //#32358
    } //#32358
    var _e = $s($f($_.barlen + 2)); //#32361
    $puti(_e, 1, $_.barcode); //#32361
    $_.barcode = _e; //#32361
    $put($_.barcode, 0, 43); //#32362
    $put($_.barcode, $f($_.barlen + 1), $get($_.barchars, $_.checksum)); //#32363
    $put($_.options, "dontdraw", true); //#32366
    $put($_.options, "validatecheck", false); //#32367
    $k[$j++] = 'args'; //#32368
    $k[$j++] = $_.barcode; //#32368
    $k[$j++] = $_.options; //#32368
    bwipp_azteccode(); //#32368
    var _q = $k[--$j]; //#32368
    var _r = $k[--$j]; //#32368
    $_[_r] = _q; //#32368
    $put($_.args, "opt", $_.options); //#32370
    $k[$j++] = $_.args; //#32373
    if (!$_.dontdraw) { //#32373
        bwipp_renmatrix(); //#32373
    } //#32373
    $_ = Object.getPrototypeOf($_); //#32375
    $_ = Object.getPrototypeOf($_); //#32377
} //bwipp_hibcazteccode
function bwipp_channelcode() {
    $_ = Object.create($_); //#32405
    $_.options = $k[--$j]; //#32407
    $_.barcode = $k[--$j]; //#32408
    $_.dontdraw = false; //#32410
    $_.shortfinder = false; //#32411
    $_.includetext = false; //#32412
    $_.includecheck = false; //#32413
    $_.height = 1; //#32414
    $forall($_.options, function() { //#32425
        var _3 = $k[--$j]; //#32425
        $_[$k[--$j]] = _3; //#32425
    }); //#32425
    $_.height = +$_.height; //#32427
    if (($_.barcode.length < 2) || ($_.barcode.length > 7)) { //#32432
        $k[$j++] = 'bwipp.channelcodeBadLength#32431'; //#32431
        $k[$j++] = "Channel Code must be 2 to 7 digits"; //#32431
        bwipp_raiseerror(); //#32431
    } //#32431
    $forall($_.barcode, function() { //#32437
        var _9 = $k[--$j]; //#32434
        if ((_9 < 48) || (_9 > 57)) { //#32436
            $k[$j++] = 'bwipp.channelcodeBadCharacter#32435'; //#32435
            $k[$j++] = "Channel Code must contain only digits"; //#32435
            bwipp_raiseerror(); //#32435
        } //#32435
    }); //#32435
    if ($cvi($_.barcode) > $get($a([26, 292, 3493, 44072, 576688, 7742862]), $_.barcode.length - 2)) { //#32440
        $k[$j++] = 'bwipp.channelcodeTooBig#32439'; //#32439
        $k[$j++] = "The Channel Code value is too big for the number of channels"; //#32439
        bwipp_raiseerror(); //#32439
    } //#32439
    $_.nextb = function() {
        var _E = $k[--$j]; //#32443
        var _N = (($f($get($_.s, _E) + ($f($get($_.b, $f(_E - 1)) + $f($get($_.b, $f(_E - 2)) + $get($_.s, $f(_E - 1))))))) > 4) ? 1 : 2; //#32448
        $k[$j++] = _E; //#32464
        $k[$j++] = _N; //#32464
        if (_E < $f($_.chan + 2)) { //#32462
            var _P = $k[--$j]; //#32450
            var _Q = $k[--$j]; //#32450
            var _R = $k[--$j]; //#32450
            $k[$j++] = _R; //#32453
            $k[$j++] = _Q; //#32453
            $k[$j++] = _P; //#32453
            for (var _T = _P, _S = _R; _T <= _S; _T += 1) { //#32453
                var _V = $k[--$j]; //#32451
                var _W = $k[--$j]; //#32451
                $put($_.b, _W, _T); //#32451
                var _X = $k[--$j]; //#32452
                var _Y = $k[--$j]; //#32452
                $k[$j++] = _Y; //#32452
                $k[$j++] = _X; //#32452
                $k[$j++] = _W; //#32452
                $k[$j++] = _V; //#32452
                $k[$j++] = $f($f(_X - _T) + 1); //#32452
                $k[$j++] = _Y; //#32452
                $k[$j++] = $f(_W + 1); //#32452
                $_.nexts(); //#32452
            } //#32452
        } else { //#32462
            var _Z = $k[--$j]; //#32455
            var _a = $k[--$j]; //#32455
            var _b = $k[--$j]; //#32455
            $k[$j++] = _b; //#32463
            $k[$j++] = _a; //#32463
            $k[$j++] = _Z; //#32463
            if ($le(_Z, _b)) { //#32463
                var _d = $k[--$j]; //#32456
                var _e = $k[--$j]; //#32456
                var _f = $k[--$j]; //#32456
                $put($_.b, _e, _f); //#32456
                $k[$j++] = _f; //#32461
                $k[$j++] = _e; //#32461
                $k[$j++] = _d; //#32461
                if ($_.value == $_.target) { //#32461
                    $k[$j++] = Infinity; //#32458
                    for (var _i = 3; _i <= 10; _i += 1) { //#32459
                        $k[$j++] = $get($_.s, _i); //#32459
                        $k[$j++] = $get($_.b, _i); //#32459
                    } //#32459
                    $_.out = $geti($a(), 0, $_.chan * 2); //#32460
                } //#32460
                $_.value = $_.value + 1; //#32462
            } //#32462
        } //#32462
        $j -= 4; //#32465
    }; //#32466
    $_.nexts = function() {
        var _r = $k[--$j]; //#32469
        $k[$j++] = _r; //#32469
        if (_r < $f($_.chan + 2)) { //#32469
            $k[$j++] = 1; //#32469
        } else { //#32469
            var _t = $k[--$j]; //#32469
            var _u = $k[--$j]; //#32469
            $k[$j++] = _u; //#32469
            $k[$j++] = _t; //#32469
            $k[$j++] = _u; //#32469
        } //#32469
        var _v = $k[--$j]; //#32469
        var _w = $k[--$j]; //#32469
        var _x = $k[--$j]; //#32469
        $k[$j++] = _x; //#32472
        $k[$j++] = _w; //#32472
        for (var _z = _v, _y = _x; _z <= _y; _z += 1) { //#32472
            var _11 = $k[--$j]; //#32470
            $put($_.s, _11, _z); //#32470
            var _12 = $k[--$j]; //#32471
            var _13 = $k[--$j]; //#32471
            $k[$j++] = _13; //#32471
            $k[$j++] = _12; //#32471
            $k[$j++] = _11; //#32471
            $k[$j++] = $f($f(_12 - _z) + 1); //#32471
            $k[$j++] = _13; //#32471
            $k[$j++] = _11; //#32471
            $_.nextb(); //#32471
        } //#32471
        $j -= 3; //#32473
    }; //#32474
    $_.encode = function() {
        $_.chan = $k[--$j]; //#32477
        $_.target = $k[--$j]; //#32478
        $_.value = 0; //#32479
        $_.out = -1; //#32480
        $_.b = $a([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#32481
        $_.s = $a([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#32482
        var _18 = $_.chan; //#32483
        $k[$j++] = _18; //#32483
        $k[$j++] = _18; //#32483
        $k[$j++] = 3; //#32483
        $_.nexts(); //#32483
        $k[$j++] = $_.out; //#32484
    }; //#32485
    $_.barlen = $_.barcode.length; //#32487
    $k[$j++] = 'finder'; //#32490
    if ($_.shortfinder) { //#32490
        $k[$j++] = $a([1, 1, 1, 1, 1]); //#32490
    } else { //#32490
        $k[$j++] = $a([1, 1, 1, 1, 1, 1, 1, 1, 1]); //#32490
    } //#32490
    var _1E = $k[--$j]; //#32490
    $_[$k[--$j]] = _1E; //#32490
    $k[$j++] = 'data'; //#32493
    $k[$j++] = $cvi($_.barcode); //#32493
    $k[$j++] = $_.barlen + 1; //#32493
    $_.encode(); //#32493
    var _1I = $k[--$j]; //#32493
    $_[$k[--$j]] = _1I; //#32493
    $_.check = $a([]); //#32496
    if ($_.includecheck) { //#32512
        $_.mod23 = $get($a([$a([]), $a([]), $a([13, 12, 4, 9, 3, 1]), $a([13, 2, 12, 3, 18, 16, 4, 1]), $a([11, 16, 17, 8, 20, 4, 10, 2, 5, 1]), $a([1, 4, 16, 18, 3, 12, 2, 8, 9, 13, 6, 1]), $a([20, 16, 22, 13, 15, 12, 5, 4, 8, 9, 21, 3, 7, 1]), $a([2, 6, 18, 8, 1, 3, 9, 4, 12, 13, 16, 2, 6, 18, 8, 1])]), $_.barlen); //#32506
        $k[$j++] = 0; //#32510
        for (var _1Z = 0, _1Y = $_.data.length - 1; _1Z <= _1Y; _1Z += 1) { //#32510
            var _1e = $k[--$j]; //#32509
            $k[$j++] = $f(_1e + ($f($get($_.data, _1Z) - 1) * $get($_.mod23, _1Z))); //#32509
        } //#32509
        var _1f = $k[--$j]; //#32511
        $k[$j++] = _1f % 23; //#32511
        $k[$j++] = 3; //#32511
        $_.encode(); //#32511
        $_.check = $k[--$j]; //#32511
    } //#32511
    $k[$j++] = Infinity; //#32515
    $aload($_.finder); //#32516
    $aload($_.data); //#32517
    $aload($_.check); //#32518
    $_.sbs = $a(); //#32518
    $_.txt = $a($_.barlen); //#32522
    for (var _1p = 0, _1o = $_.barlen - 1; _1p <= _1o; _1p += 1) { //#32526
        $_.i = _1p; //#32524
        $put($_.txt, $_.i, $a([$geti($_.barcode, $_.i, 1), 0, 0, "", 0])); //#32525
    } //#32525
    $k[$j++] = Infinity; //#32529
    var _1w = $_.sbs; //#32531
    $k[$j++] = Infinity; //#32532
    for (var _1y = 0, _1z = ~~(($_.sbs.length + 1) / 2); _1y < _1z; _1y++) { //#32532
        $k[$j++] = $_.height; //#32532
    } //#32532
    var _21 = $a(); //#32532
    $k[$j++] = Infinity; //#32533
    for (var _23 = 0, _24 = ~~(($_.sbs.length + 1) / 2); _23 < _24; _23++) { //#32533
        $k[$j++] = 0; //#32533
    } //#32533
    var _25 = $a(); //#32533
    $k[$j++] = 'ren'; //#32536
    $k[$j++] = bwipp_renlinear; //#32536
    $k[$j++] = 'sbs'; //#32536
    $k[$j++] = _1w; //#32536
    $k[$j++] = 'bhs'; //#32536
    $k[$j++] = _21; //#32536
    $k[$j++] = 'bbs'; //#32536
    $k[$j++] = _25; //#32536
    $k[$j++] = 'txt'; //#32536
    $k[$j++] = $_.txt; //#32536
    $k[$j++] = 'textxalign'; //#32536
    $k[$j++] = "center"; //#32536
    $k[$j++] = 'opt'; //#32536
    $k[$j++] = $_.options; //#32536
    var _28 = $d(); //#32536
    $k[$j++] = _28; //#32539
    if (!$_.dontdraw) { //#32539
        bwipp_renlinear(); //#32539
    } //#32539
    $_ = Object.getPrototypeOf($_); //#32541
} //bwipp_channelcode
function bwipp_renlinear() {
    if ($_.bwipjs_dontdraw) { //#32568
        return; //#32568
    } //#32568
    $_ = Object.create($_); //#32569
    $_.sbs = $a([]); //#32574
    $_.bhs = $a([]); //#32575
    $_.bbs = $a([]); //#32576
    $_.txt = $a([]); //#32577
    $_.barcolor = "unset"; //#32578
    $_.includetext = false; //#32579
    $_.textcolor = "unset"; //#32580
    $_.textxalign = "unset"; //#32581
    $_.textyalign = "unset"; //#32582
    $_.textfont = "OCR-B"; //#32583
    $_.textsize = 10; //#32584
    $_.textxoffset = 0; //#32585
    $_.textyoffset = 0; //#32586
    $_.textgaps = 0; //#32587
    $_.alttext = ""; //#32588
    $_.extratext = ""; //#32589
    $_.extratextcolor = "unset"; //#32590
    $_.extratextxalign = "left"; //#32591
    $_.extratextyalign = "above"; //#32592
    $_.extratextfont = "OCR-B"; //#32593
    $_.extratextsize = 10; //#32594
    $_.extratextxoffset = 0; //#32595
    $_.extratextyoffset = 0; //#32596
    $_.extratextgaps = 0; //#32597
    $_.bordercolor = "unset"; //#32598
    $_.backgroundcolor = "unset"; //#32599
    $_.inkspread = 0; //#32600
    $_.width = 0; //#32601
    $_.barratio = 1; //#32602
    $_.spaceratio = 1; //#32603
    $_.showborder = false; //#32604
    $_.showbearer = false; //#32605
    $_.borderleft = 10; //#32606
    $_.borderright = 10; //#32607
    $_.bordertop = 1; //#32608
    $_.borderbottom = 1; //#32609
    $_.borderwidth = 0.5; //#32610
    $_.guardwhitespace = false; //#32611
    $_.guardleftpos = 0; //#32612
    $_.guardleftypos = 0; //#32613
    $_.guardrightpos = 0; //#32614
    $_.guardrightypos = 0; //#32615
    $_.guardwidth = 7; //#32616
    $_.guardheight = 7; //#32617
    $forall($k[--$j], function() { //#32619
        var _6 = $k[--$j]; //#32619
        $_[$k[--$j]] = _6; //#32619
    }); //#32619
    $k[$j++] = $_.opt; //#32620
    delete $_['opt']; //#32620
    $k[$j++] = $_; //#32620
    bwipp_processoptions(); //#32620
    $j--; //#32620
    if ($_.textsize <= 0) { //#32624
        $k[$j++] = 'bwipp.renlinearBadTextsize#32623'; //#32623
        $k[$j++] = "The font size must be greater than zero"; //#32623
        bwipp_raiseerror(); //#32623
    } //#32623
    $_.bars = $a(~~(($_.sbs.length + 1) / 2)); //#32627
    $_.pixx = 0; //#32628
    $_.pixy = 0; //#32628
    for (var _E = 0, _D = ((~~(($_.sbs.length + 1) / 2)) * 2) - 2; _E <= _D; _E += 1) { //#32647
        $_.i = _E; //#32630
        if (($_.i % 2) == 0) { //#32644
            $_.d = $f(($f(($get($_.sbs, $_.i) * $_.barratio) - $_.barratio)) + 1); //#32632
            if ($get($_.sbs, $_.i) != 0) { //#32641
                $_.h = $get($_.bhs, ~~($_.i / 2)) * 72; //#32634
                $_.c = $f(($_.d / 2) + $_.pixx); //#32635
                $_.y = $get($_.bbs, ~~($_.i / 2)) * 72; //#32636
                $_.w = $f($_.d - $_.inkspread); //#32637
                $put($_.bars, ~~($_.i / 2), $a([$_.h, $_.c, $_.y, $_.w])); //#32638
                if ($f($_.h + $_.y) > $_.pixy) { //#32639
                    $_.pixy = $f($_.h + $_.y); //#32639
                } //#32639
            } else { //#32641
                $put($_.bars, ~~($_.i / 2), -1); //#32641
            } //#32641
        } else { //#32644
            $_.d = $f(($f(($get($_.sbs, $_.i) * $_.spaceratio) - $_.spaceratio)) + 1); //#32644
        } //#32644
        $_.pixx = $f($_.pixx + $_.d); //#32646
    } //#32646
    $$.save(); //#32649
    var _t = $$.currpos(); //#32651
    $$.translate(_t.x, _t.y); //#32651
    if ($_.width != 0) { //#32656
        $$.scale(($_.width * 72) / $_.pixx, 1); //#32655
    } //#32655
    $_.tl = $a([-($f($_.borderleft + ($_.borderwidth / 2))), $f($f($_.pixy + $_.bordertop) + ($_.borderwidth / 2))]); //#32666
    $_.tr = $a([$f($f($_.pixx + $_.borderright) + ($_.borderwidth / 2)), $f($f($_.pixy + $_.bordertop) + ($_.borderwidth / 2))]); //#32667
    $_.bl = $a([-($f($_.borderleft + ($_.borderwidth / 2))), -($f($_.borderbottom + ($_.borderwidth / 2)))]); //#32668
    $_.br = $a([$f($f($_.pixx + $_.borderright) + ($_.borderwidth / 2)), -($f($_.borderbottom + ($_.borderwidth / 2)))]); //#32669
    if ($_.showbearer) { //#32694
        $$.save(); //#32671
        $$.newpath(); //#32672
        $aload($_.bl); //#32673
        var _1N = $k[--$j]; //#32673
        $$.moveto($k[--$j], _1N); //#32673
        $aload($_.br); //#32673
        var _1Q = $k[--$j]; //#32673
        $$.lineto($k[--$j], _1Q); //#32673
        $aload($_.tl); //#32674
        var _1T = $k[--$j]; //#32674
        $$.moveto($k[--$j], _1T); //#32674
        $aload($_.tr); //#32674
        var _1W = $k[--$j]; //#32674
        $$.lineto($k[--$j], _1W); //#32674
        if ($ne($_.bordercolor, "unset")) { //#32675
            $$.setcolor($_.bordercolor); //#32675
        } //#32675
        $$.setlinewidth($f($_.borderwidth - ($_.inkspread * 2))); //#32676
        $$.stroke(); //#32676
        $$.restore(); //#32677
    } else { //#32694
        if ($_.showborder) { //#32695
            $$.save(); //#32690
            $$.newpath(); //#32691
            $aload($_.bl); //#32691
            var _1e = $k[--$j]; //#32691
            $$.moveto($k[--$j], _1e); //#32691
            var _1j = $a([$_.br, $_.tr, $_.tl]); //#32691
            for (var _1k = 0, _1l = _1j.length; _1k < _1l; _1k++) { //#32691
                $aload($get(_1j, _1k)); //#32691
                var _1n = $k[--$j]; //#32691
                $$.lineto($k[--$j], _1n); //#32691
            } //#32691
            $$.closepath(); //#32691
            if ($ne($_.bordercolor, "unset")) { //#32692
                $$.setcolor($_.bordercolor); //#32692
            } //#32692
            $$.setlinewidth($_.borderwidth); //#32693
            $$.stroke(); //#32693
            $$.restore(); //#32694
        } //#32694
    } //#32694
    $$.save(); //#32698
    if ($ne($_.barcolor, "unset")) { //#32700
        $$.setcolor($_.barcolor); //#32700
    } //#32700
    var _1u = $_.bars; //#32701
    for (var _1v = 0, _1w = _1u.length; _1v < _1w; _1v++) { //#32707
        var _1x = $get(_1u, _1v); //#32707
        $k[$j++] = _1x; //#32706
        if (_1x != -1) { //#32705
            $aload($k[--$j]); //#32703
            $$.newpath(); //#32703
            $$.setlinewidth($k[--$j]); //#32703
            var _20 = $k[--$j]; //#32703
            $$.moveto($k[--$j], _20); //#32703
            $$.rlineto(0, $k[--$j]); //#32703
            $$.stroke(); //#32703
        } else { //#32705
            $j--; //#32705
        } //#32705
    } //#32705
    $$.restore(); //#32708
    if ($ne($_.textcolor, "unset")) { //#32711
        $$.setcolor($_.textcolor); //#32711
    } //#32711
    if ($_.includetext) { //#32768
        if (($eq($_.textxalign, "unset") && $eq($_.textyalign, "unset")) && $eq($_.alttext, "")) { //#32766
            $_.s = 0; //#32714
            $_.fn = ""; //#32714
            var _29 = $_.txt; //#32715
            for (var _2A = 0, _2B = _29.length; _2A < _2B; _2A++) { //#32724
                $forall($get(_29, _2A)); //#32716
                var _2D = $k[--$j]; //#32717
                var _2E = $k[--$j]; //#32717
                $k[$j++] = _2E; //#32722
                $k[$j++] = _2D; //#32722
                if ((_2D != $_.s) || $ne(_2E, $_.fn)) { //#32721
                    var _2H = $k[--$j]; //#32718
                    var _2I = $k[--$j]; //#32718
                    $_.s = _2H; //#32718
                    $_.fn = _2I; //#32718
                    $$.selectfont(_2I, _2H); //#32719
                } else { //#32721
                    $j -= 2; //#32721
                } //#32721
                var _2J = $k[--$j]; //#32723
                $$.moveto($k[--$j], _2J); //#32723
                $$.show($k[--$j], 0, 0); //#32723
            } //#32723
        } else { //#32766
            $$.selectfont($_.textfont, $_.textsize); //#32726
            if ($eq($_.alttext, "")) { //#32732
                $k[$j++] = Infinity; //#32728
                var _2P = $_.txt; //#32728
                for (var _2Q = 0, _2R = _2P.length; _2Q < _2R; _2Q++) { //#32728
                    $forall($get($get(_2P, _2Q), 0)); //#32728
                } //#32728
                $_.txt = $a(); //#32728
                $_.tstr = $s($_.txt.length); //#32729
                for (var _2Z = 0, _2Y = $_.txt.length - 1; _2Z <= _2Y; _2Z += 1) { //#32730
                    $put($_.tstr, _2Z, $get($_.txt, _2Z)); //#32730
                } //#32730
            } else { //#32732
                $_.tstr = $_.alttext; //#32732
            } //#32732
            if ($_.tstr.length == 0) { //#32742
                $k[$j++] = 0; //#32737
            } else { //#32742
                $$.save(); //#32739
                $$.newpath(); //#32740
                $$.moveto(0, 0); //#32740
                $$.charpath("0", false); //#32740
                var _2f = $$.pathbbox(); //#32740
                $$.restore(); //#32742
                $k[$j++] = _2f.ury; //#32742
            } //#32742
            $_.textascent = $k[--$j]; //#32751
            var _2i = $$.stringwidth($_.tstr); //#32752
            $_.textwidth = $f(_2i.w + (($_.tstr.length - 1) * $_.textgaps)); //#32752
            $_.textxpos = $f($_.textxoffset + ($f($_.pixx - $_.textwidth) / 2)); //#32754
            if ($eq($_.textxalign, "left")) { //#32755
                $_.textxpos = $_.textxoffset; //#32755
            } //#32755
            if ($eq($_.textxalign, "right")) { //#32756
                $_.textxpos = $f($f($_.pixx - $_.textxoffset) - $_.textwidth); //#32756
            } //#32756
            if ($eq($_.textxalign, "offleft")) { //#32757
                $_.textxpos = -$f($_.textwidth + $_.textxoffset); //#32757
            } //#32757
            if ($eq($_.textxalign, "offright")) { //#32758
                $_.textxpos = $f($_.pixx + $_.textxoffset); //#32758
            } //#32758
            if ($eq($_.textxalign, "justify") && ($_.textwidth < $_.pixx)) { //#32762
                $_.textxpos = 0; //#32760
                $_.textgaps = $f($_.pixx - $_.textwidth) / ($_.tstr.length - 1); //#32761
            } //#32761
            $_.textypos = -($f($f($_.textyoffset + $_.textascent) + 1)); //#32763
            if ($eq($_.textyalign, "above")) { //#32764
                $_.textypos = $f($f($_.textyoffset + $_.pixy) + 1); //#32764
            } //#32764
            if ($eq($_.textyalign, "center")) { //#32765
                $_.textypos = $f($_.textyoffset + ($f($_.pixy - $_.textascent) / 2)); //#32765
            } //#32765
            $$.moveto($_.textxpos, $_.textypos); //#32766
            $$.show($_.tstr, $_.textgaps, 0); //#32766
        } //#32766
    } //#32766
    if ($_.guardwhitespace) { //#32781
        $$.selectfont("OCR-B", $_.guardheight * 2); //#32772
        if ($_.guardleftpos != 0) { //#32776
            $$.moveto((-$_.guardleftpos) - 2, $f(($f($_.guardleftypos - ($_.guardheight / 2))) - 1.25)); //#32774
            $$.show("<", 0, 0); //#32775
        } //#32775
        if ($_.guardrightpos != 0) { //#32780
            $$.moveto($f(($f($f($_.guardrightpos + $_.pixx) - $_.guardwidth)) + 1), $f(($f($_.guardrightypos - ($_.guardheight / 2))) - 1.25)); //#32778
            $$.show(">", 0, 0); //#32779
        } //#32779
    } //#32779
    if ($ne($_.extratext, "")) { //#32816
        if ($ne($_.extratextcolor, "unset")) { //#32785
            $$.setcolor($_.extratextcolor); //#32785
        } //#32785
        $$.selectfont($_.extratextfont, $_.extratextsize); //#32786
        $$.save(); //#32789
        $$.newpath(); //#32790
        $$.moveto(0, 0); //#32790
        $$.charpath("0", false); //#32790
        var _3a = $$.pathbbox(); //#32790
        $$.restore(); //#32792
        $_.textascent = _3a.ury; //#32800
        var _3c = $$.stringwidth($_.extratext); //#32801
        $_.textwidth = $f(_3c.w + (($_.extratext.length - 1) * $_.extratextgaps)); //#32801
        $_.extratextxpos = $f($_.extratextxoffset + ($f($_.pixx - $_.textwidth) / 2)); //#32803
        if ($eq($_.extratextxalign, "left")) { //#32804
            $_.textxpos = $_.extratextxoffset; //#32804
        } //#32804
        if ($eq($_.extratextxalign, "right")) { //#32805
            $_.textxpos = $f($f($_.pixx - $_.extratextxoffset) - $_.textwidth); //#32805
        } //#32805
        if ($eq($_.extratextxalign, "offleft")) { //#32806
            $_.textxpos = -$f($_.textwidth + $_.extratextxoffset); //#32806
        } //#32806
        if ($eq($_.extratextxalign, "offright")) { //#32807
            $_.textxpos = $f($_.pixx + $_.extratextxoffset); //#32807
        } //#32807
        if ($eq($_.extratextxalign, "justify") && ($_.textwidth < $_.pixx)) { //#32811
            $_.textxpos = 0; //#32809
            $_.extratextgaps = $f($_.pixx - $_.textwidth) / ($_.extratext.length - 1); //#32810
        } //#32810
        $_.textypos = -($f($f($_.extratextyoffset + $_.textascent) + 1)); //#32812
        if ($eq($_.extratextyalign, "above")) { //#32813
            $_.textypos = $f($f($_.extratextyoffset + $_.pixy) + 1); //#32813
        } //#32813
        if ($eq($_.extratextyalign, "center")) { //#32814
            $_.textypos = $f($_.extratextyoffset + ($f($_.pixy - $_.textascent) / 2)); //#32814
        } //#32814
        $$.moveto($_.textxpos, $_.textypos); //#32815
        $$.show($_.extratext, $_.extratextgaps, 0); //#32815
    } //#32815
    $$.restore(); //#32818
    $_ = Object.getPrototypeOf($_); //#32820
} //bwipp_renlinear
function bwipp_renmaximatrix() {
    if ($_.bwipjs_dontdraw) { //#32838
        return; //#32838
    } //#32838
    $_ = Object.create($_); //#32840
    $_.args = $k[--$j]; //#32842
    $_.barcolor = "unset"; //#32845
    $_.backgroundcolor = "unset"; //#32846
    $forall($_.args, function() { //#32849
        var _3 = $k[--$j]; //#32849
        $_[$k[--$j]] = _3; //#32849
    }); //#32849
    var _5 = $_.opt; //#32850
    for (var _A = _5.size, _9 = _5.keys(), _8 = 0; _8 < _A; _8++) { //#32850
        var _6 = _9.next().value; //#32850
        $_[_6] = _5.get(_6); //#32850
    } //#32850
    $_.barcolor = "" + $_.barcolor; //#32852
    $_.backgroundcolor = "" + $_.backgroundcolor; //#32853
    $$.save(); //#32855
    if ($ne($_.barcolor, "unset")) { //#32857
        $$.setcolor($_.barcolor); //#32857
    } //#32857
    $$.showmaxicode($_.pixs); //#32858
    $$.restore(); //#32860
    $_ = Object.getPrototypeOf($_); //#32862
} //bwipp_renmaximatrix
// bwip-js/barcode-ftr.js
//
// This code is injected below the cross-compiled barcode.js.

// `encoder` is one of the bwipp_ functions
function bwipp_encode(bwipjs, encoder, text, opts, dontdraw) {
    if (typeof text !== 'string') {
        throw new Error('bwipp.typeError: barcode text not a string (' +
            text + ')');
    }
    opts = opts || {};
    if (typeof opts === 'string') {
        var tmp = opts.split(' ');
        opts = {};
        for (var i = 0; i < tmp.length; i++) {
            if (!tmp[i]) {
                continue;
            }
            var eq = tmp[i].indexOf('=');
            if (eq == -1) {
                if (tmp[i][0] == '!') {
                    // boolean !name
                    opts[tmp[i].substr(1)] = false;
                } else {
                    // boolean name
                    opts[tmp[i]] = true;
                }
            } else {
                opts[tmp[i].substr(0, eq)] = tmp[i].substr(eq + 1);
            }
        }
    } else if (typeof opts !== 'object' || opts.constructor !== Object) {
        throw new Error('bwipp.typeError: options not an object');
    }

    // Convert utf-16 to utf-8 unless caller has pre-encoded the text.
    if (opts.binarytext) {
        // No 16-bit chars allowed.
        if (/[\u0100-\uffff]/.test(text)) {
            throw new Error('bwip-js: 16-bit chars not allowed with binarytext');
        }
    } else if (/[\u0080-\uffff]/.test(text)) {
        text = unescape(encodeURIComponent(text));
    }

    // Convert opts to a Map
    var map = new Map;
    for (var id in opts) {
        if (opts.hasOwnProperty(id)) {
            map.set(id, opts[id]);
        }
    }

    // Set up the initial postscript state and invoke the encoder
    $$ = bwipjs;
    $k = [text, map];
    $j = 2;
    $_ = {
        bwipjs_dontdraw: opts.dontdraw || dontdraw || false
    };
    encoder();

    // Return what is left on the stack.  This branch should only be taken
    // when running with the dontdraw option.
    if ($j) {
        return $k.splice(0, $j);
    }

    return true;
}

function bwipp_lookup(symbol) {
    if (!symbol) {
        throw new Error("bwipp.undefinedEncoder: bcid is not defined");
    }
    switch (symbol.replace(/-/g, "_")) {
        case "auspost":
            return bwipp_auspost;
        case "azteccode":
            return bwipp_azteccode;
        case "azteccodecompact":
            return bwipp_azteccodecompact;
        case "aztecrune":
            return bwipp_aztecrune;
        case "bc412":
            return bwipp_bc412;
        case "channelcode":
            return bwipp_channelcode;
        case "codablockf":
            return bwipp_codablockf;
        case "code11":
            return bwipp_code11;
        case "code128":
            return bwipp_code128;
        case "code16k":
            return bwipp_code16k;
        case "code2of5":
            return bwipp_code2of5;
        case "code32":
            return bwipp_code32;
        case "code39":
            return bwipp_code39;
        case "code39ext":
            return bwipp_code39ext;
        case "code49":
            return bwipp_code49;
        case "code93":
            return bwipp_code93;
        case "code93ext":
            return bwipp_code93ext;
        case "codeone":
            return bwipp_codeone;
        case "coop2of5":
            return bwipp_coop2of5;
        case "daft":
            return bwipp_daft;
        case "databarexpanded":
            return bwipp_databarexpanded;
        case "databarexpandedcomposite":
            return bwipp_databarexpandedcomposite;
        case "databarexpandedstacked":
            return bwipp_databarexpandedstacked;
        case "databarexpandedstackedcomposite":
            return bwipp_databarexpandedstackedcomposite;
        case "databarlimited":
            return bwipp_databarlimited;
        case "databarlimitedcomposite":
            return bwipp_databarlimitedcomposite;
        case "databaromni":
            return bwipp_databaromni;
        case "databaromnicomposite":
            return bwipp_databaromnicomposite;
        case "databarstacked":
            return bwipp_databarstacked;
        case "databarstackedcomposite":
            return bwipp_databarstackedcomposite;
        case "databarstackedomni":
            return bwipp_databarstackedomni;
        case "databarstackedomnicomposite":
            return bwipp_databarstackedomnicomposite;
        case "databartruncated":
            return bwipp_databartruncated;
        case "databartruncatedcomposite":
            return bwipp_databartruncatedcomposite;
        case "datalogic2of5":
            return bwipp_datalogic2of5;
        case "datamatrix":
            return bwipp_datamatrix;
        case "datamatrixrectangular":
            return bwipp_datamatrixrectangular;
        case "datamatrixrectangularextension":
            return bwipp_datamatrixrectangularextension;
        case "dotcode":
            return bwipp_dotcode;
        case "ean13":
            return bwipp_ean13;
        case "ean13composite":
            return bwipp_ean13composite;
        case "ean14":
            return bwipp_ean14;
        case "ean2":
            return bwipp_ean2;
        case "ean5":
            return bwipp_ean5;
        case "ean8":
            return bwipp_ean8;
        case "ean8composite":
            return bwipp_ean8composite;
        case "flattermarken":
            return bwipp_flattermarken;
        case "gs1_128":
            return bwipp_gs1_128;
        case "gs1_128composite":
            return bwipp_gs1_128composite;
        case "gs1_cc":
            return bwipp_gs1_cc;
        case "gs1datamatrix":
            return bwipp_gs1datamatrix;
        case "gs1datamatrixrectangular":
            return bwipp_gs1datamatrixrectangular;
        case "gs1dldatamatrix":
            return bwipp_gs1dldatamatrix;
        case "gs1dlqrcode":
            return bwipp_gs1dlqrcode;
        case "gs1dotcode":
            return bwipp_gs1dotcode;
        case "gs1northamericancoupon":
            return bwipp_gs1northamericancoupon;
        case "gs1qrcode":
            return bwipp_gs1qrcode;
        case "hanxin":
            return bwipp_hanxin;
        case "hibcazteccode":
            return bwipp_hibcazteccode;
        case "hibccodablockf":
            return bwipp_hibccodablockf;
        case "hibccode128":
            return bwipp_hibccode128;
        case "hibccode39":
            return bwipp_hibccode39;
        case "hibcdatamatrix":
            return bwipp_hibcdatamatrix;
        case "hibcdatamatrixrectangular":
            return bwipp_hibcdatamatrixrectangular;
        case "hibcmicropdf417":
            return bwipp_hibcmicropdf417;
        case "hibcpdf417":
            return bwipp_hibcpdf417;
        case "hibcqrcode":
            return bwipp_hibcqrcode;
        case "iata2of5":
            return bwipp_iata2of5;
        case "identcode":
            return bwipp_identcode;
        case "industrial2of5":
            return bwipp_industrial2of5;
        case "interleaved2of5":
            return bwipp_interleaved2of5;
        case "isbn":
            return bwipp_isbn;
        case "ismn":
            return bwipp_ismn;
        case "issn":
            return bwipp_issn;
        case "itf14":
            return bwipp_itf14;
        case "jabcode":
            return bwipp_jabcode;
        case "japanpost":
            return bwipp_japanpost;
        case "kix":
            return bwipp_kix;
        case "leitcode":
            return bwipp_leitcode;
        case "mailmark":
            return bwipp_mailmark;
        case "mands":
            return bwipp_mands;
        case "matrix2of5":
            return bwipp_matrix2of5;
        case "maxicode":
            return bwipp_maxicode;
        case "micropdf417":
            return bwipp_micropdf417;
        case "microqrcode":
            return bwipp_microqrcode;
        case "msi":
            return bwipp_msi;
        case "onecode":
            return bwipp_onecode;
        case "pdf417":
            return bwipp_pdf417;
        case "pdf417compact":
            return bwipp_pdf417compact;
        case "pharmacode":
            return bwipp_pharmacode;
        case "pharmacode2":
            return bwipp_pharmacode2;
        case "planet":
            return bwipp_planet;
        case "plessey":
            return bwipp_plessey;
        case "posicode":
            return bwipp_posicode;
        case "postnet":
            return bwipp_postnet;
        case "pzn":
            return bwipp_pzn;
        case "qrcode":
            return bwipp_qrcode;
        case "rationalizedCodabar":
            return bwipp_rationalizedCodabar;
        case "raw":
            return bwipp_raw;
        case "rectangularmicroqrcode":
            return bwipp_rectangularmicroqrcode;
        case "royalmail":
            return bwipp_royalmail;
        case "sscc18":
            return bwipp_sscc18;
        case "swissqrcode":
            return bwipp_swissqrcode;
        case "symbol":
            return bwipp_symbol;
        case "telepen":
            return bwipp_telepen;
        case "telepennumeric":
            return bwipp_telepennumeric;
        case "ultracode":
            return bwipp_ultracode;
        case "upca":
            return bwipp_upca;
        case "upcacomposite":
            return bwipp_upcacomposite;
        case "upce":
            return bwipp_upce;
        case "upcecomposite":
            return bwipp_upcecomposite;
    }
    throw new Error("bwipp.unknownEncoder: unknown encoder name: " + symbol);
}
var BWIPP_VERSION = '2025-04-19';
// file : bwipjs.js
//
// Graphics-context interface to the BWIPP cross-compiled code

var BWIPJS = (function() {

// Math.floor(), etc. are notoriously slow.  Caching seems to help.
var floor = Math.floor;
var round = Math.round;
var ceil  = Math.ceil;
var min   = Math.min;
var max   = Math.max;

function BWIPJS(drawing) {
    if (this.constructor !== BWIPJS) {
        return new BWIPJS(drawing);
    }
    this.gstk    = [];      // Graphics save/restore stack
    this.cmds    = [];      // Graphics primitives to replay when rendering
    this.drawing = drawing; // Drawing interface

    this.reset();

    // Drawing surface bounding box
    this.minx = this.miny = Infinity;
    this.maxx = this.maxy = -Infinity;
};

// All graphics state that must be saved/restored is given a prefix of g_
BWIPJS.prototype.reset = function() {
    // Current Transform Matrix - since we don't do rotation, we can fake
    // the matrix math
    this.g_tdx  = 0;        // CTM x-offset
    this.g_tdy  = 0;        // CTM y-offset
    this.g_tsx  = 1;        // CTM x-scale factor
    this.g_tsy  = 1;        // CTM y-scale factor

    this.g_posx = 0;        // current x position
    this.g_posy = 0;        // current y position
    this.g_penw = 1;        // current line/pen width
    this.g_path = [];       // current path
    this.g_font = null;     // current font object
    this.g_rgb  = [0,0,0];  // current color (black)
    this.g_clip = false;    // clip region active
};
BWIPJS.prototype.save = function() {
    // clone all g_ properties
    var ctx = {};
    for (var id in this) {
        if (id.indexOf('g_') == 0) {
            ctx[id] = clone(this[id]);
        }
    }
    this.gstk.push(ctx);

    // Perform a deep clone of the graphics state properties
    function clone(v) {
        if (v instanceof Array) {
            var t = [];
            for (var i = 0; i < v.length; i++)
                t[i] = clone(v[i]);
            return t;
        }
        if (v instanceof Object) {
            var t = {};
            for (var id in v)
                t[id] = clone(v[id]);
            return t;
        }
        return v;
    }
};
BWIPJS.prototype.restore = function() {
    if (!this.gstk.length) {
        throw new Error('grestore: stack underflow');
    }
    var ctx  = this.gstk.pop();
    var self = this;
    if (this.g_clip && !ctx.g_clip) {
        this.cmds.push(function() {
                self.drawing.unclip();
            });
    }
    for (var id in ctx) {
        this[id] = ctx[id];
    }
};
// Per the postscript spec:
//  As discussed in Section 4.4.1, Current Path, points entered into a path
//  are immediately converted to device coordinates by the current
//  transformation matrix (CTM); subsequent modifications to the CTM do not
//  affect existing points.  `currentpoint` computes the user space
//  coordinates corresponding to the current point according to the current
//  value of the CTM. Thus, if a current point is set and then the CTM is
//  changed, the coordinates returned by currentpoint will be different
//  from those that were originally specified for the point.
BWIPJS.prototype.currpos = function() {
    return { x:(this.g_posx-this.g_tdx)/this.g_tsx,
             y:(this.g_posy-this.g_tdy)/this.g_tsy
        };
};
BWIPJS.prototype.currfont = function() {
    return this.g_font;
};
BWIPJS.prototype.translate = function(x, y) {
    this.g_tdx = this.g_tsx * x;
    this.g_tdy = this.g_tsy * y;
};
BWIPJS.prototype.scale = function(x, y) {
    this.g_tsx *= x;
    this.g_tsy *= y;
    var sxy = this.drawing.scale(this.g_tsx, this.g_tsy);
    if (sxy && sxy[0] && sxy[1]) {
        this.g_tsx = sxy[0];
        this.g_tsy = sxy[1];
    }
};
BWIPJS.prototype.setlinewidth = function(w) {
    this.g_penw = w;
};
BWIPJS.prototype.selectfont = function(f, z) {
    this.g_font = { FontName:this.jsstring(f), FontSize:+z };
};
BWIPJS.prototype.getfont = function() {
    return this.g_font.FontName;
};
// Special function for converting a Uint8Array string to string.
BWIPJS.prototype.jsstring = function(s) {
    if (s instanceof Uint8Array) {
        // Postscript (like C) treats nul-char as end of string.
        //for (var i = 0, l = s.length; i < l && s[i]; i++);
        //if (i < l) {
        //  return String.fromCharCode.apply(null,s.subarray(0, i));
        //}
        return String.fromCharCode.apply(null,s)
    }
    return ''+s;
};
// Special function to replace setanycolor in BWIPP.
// Converts a string of hex digits either rgb, rrggbb or ccmmyykk.
// Or CSS-style #rgb and #rrggbb.
BWIPJS.prototype.setcolor = function(s) {
    if (s instanceof Uint8Array) {
        s = this.jsstring(s);
    }
    if (!s) {
        return;
    }
    if (!/^(?:#?[0-9a-fA-F]{3}(?:[0-9a-fA-F]{3})?|[0-9a-fA-F]{8})$/.test(s)) {
        throw new Error('bwip-js: invalid color: ' + s);
    }
    if (s[0] == '#') {
        s = s.substr(1);
    }
    if (s.length == 3) {
        var r = parseInt(s[0], 16);
        var g = parseInt(s[1], 16);
        var b = parseInt(s[2], 16);
        this.g_rgb = [ r<<4|r, g<<4|g, b<<4|b ];
    } else if (s.length == 6) {
        var r = parseInt(s.substr(0,2), 16);
        var g = parseInt(s.substr(2,2), 16);
        var b = parseInt(s.substr(4,2), 16);
        this.g_rgb = [ r, g, b ];
    } else {
        var c = parseInt(s.substr(0,2), 16) / 255;
        var m = parseInt(s.substr(2,2), 16) / 255;
        var y = parseInt(s.substr(4,2), 16) / 255;
        var k = parseInt(s.substr(6,2), 16) / 255;
        var r = round((1-c) * (1-k) * 255);
        var g = round((1-m) * (1-k) * 255);
        var b = round((1-y) * (1-k) * 255);
        this.g_rgb = [ r, g, b ];
    }
};
// Used only by swissqrcode
BWIPJS.prototype.setrgbcolor = function(r,g,b) {
    this.g_rgb = [ r, g, b ];
};
// Returns the current rgb values as a 'RRGGBB'
BWIPJS.prototype.getRGB = function() {
    var r = this.g_rgb[0].toString(16);
    var g = this.g_rgb[1].toString(16);
    var b = this.g_rgb[2].toString(16);
    return '00'.substr(r.length) + r + '00'.substr(g.length) + g + '00'.substr(b.length) + b;
};
BWIPJS.prototype.newpath = function() {
    this.g_path = [];
};
BWIPJS.prototype.closepath = function() {
    var path = this.g_path;
    var plen = path.length;
    if (!plen) return;

    var f = plen-1;
    for ( ; f >= 0 && path[f].op == 'l'; f--);
    f++;
    if (f < plen-1) {
        var poly = [];
        var xmin = Infinity;
        var ymin = Infinity;
        var xmax = -Infinity;
        var ymax = -Infinity;
        for (var i = f; i < plen; i++) {
            var a = path[i];
            poly.push([ a.x0, a.y0 ]);
            if (xmin > a.x0) xmin = a.x0;
            if (xmax < a.x0) xmax = a.x0;
            if (ymin > a.y0) ymin = a.y0;
            if (ymax < a.y0) ymax = a.y0;
        }
        var a = path[plen-1];
        var b = path[f];
        if (a.x1 != b.x0 || a.y1 != b.y0) {
            poly.push([ a.x1, a.y1 ]);
            if (xmin > a.x1) xmin = a.x1;
            if (xmax < a.x1) xmax = a.x1;
            if (ymin > a.y1) ymin = a.y1;
            if (ymax < a.y1) ymax = a.y1;
        }
        path.splice(f, plen-f,
                    { op:'p', x0:xmin, y0:ymin, x1:xmax, y1:ymax, poly:poly });
    } else {
        path.push({ op:'c' });
    }
};
BWIPJS.prototype.moveto = function(x,y) {
    this.g_posx = this.g_tdx + this.g_tsx * x;
    this.g_posy = this.g_tdy + this.g_tsy * y;
};
BWIPJS.prototype.rmoveto = function(x,y) {
    this.g_posx += this.g_tsx * x;
    this.g_posy += this.g_tsy * y;
};
BWIPJS.prototype.lineto = function(x,y) {
    var x0 = round(this.g_posx);
    var y0 = round(this.g_posy);
    this.g_posx = this.g_tdx + this.g_tsx * x;
    this.g_posy = this.g_tdy + this.g_tsy * y;
    var x1 = round(this.g_posx);
    var y1 = round(this.g_posy);

    this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
BWIPJS.prototype.rlineto = function(x,y) {
    var x0 = round(this.g_posx);
    var y0 = round(this.g_posy);
    this.g_posx += this.g_tsx * x;
    this.g_posy += this.g_tsy * y;
    var x1 = round(this.g_posx);
    var y1 = round(this.g_posy);

    this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
// implements both arc and arcn
BWIPJS.prototype.arc = function(x,y,r,sa,ea,ccw) {
    if (sa == ea) {
        return;
    }
    // For now, we only implement full circles...
    if (sa != 0 && sa != 360 || ea != 0 && ea != 360) {
        throw new Error('arc: not a full circle (' + sa + ',' + ea + ')');
    }

    x = this.g_tdx + this.g_tsx * x;
    y = this.g_tdy + this.g_tsy * y;

    // e == ellipse
    var rx = r * this.g_tsx;
    var ry = r * this.g_tsy;
    this.g_path.push({ op:'e', x0:x-rx, y0:y-ry, x1:x+rx, y1:y+ry,
                                x:x, y:y, rx:rx, ry:ry, sa:sa, ea:ea, ccw:ccw });
};
BWIPJS.prototype.stringwidth = function(str) {
    var tsx  = this.g_tsx;
    var tsy  = this.g_tsy;
    var size = +this.g_font.FontSize || 10;

    // The string can be either a uint8-string or regular string
    str = this.toUCS2(this.jsstring(str));

    var bbox = this.drawing.measure(str, this.g_font.FontName, size*tsx, size*tsy);

    return { w:bbox.width/tsx, h:(bbox.ascent+bbox.descent)/tsy,
             a:bbox.ascent/tsy, d:bbox.descent/tsy };
};
BWIPJS.prototype.charpath = function(str, b) {
    var sw = this.stringwidth(str);

    // Emulate the char-path by placing a rectangle around it
    this.rlineto(0, sw.a);
    this.rlineto(sw.w, 0);
    this.rlineto(0, -sw.h);
};
BWIPJS.prototype.pathbbox = function() {
    if (!this.g_path.length)    throw new Error('pathbbox: --nocurrentpoint--');
    var path = this.g_path;
    var llx = Infinity;
    var lly = Infinity;
    var urx = -Infinity;
    var ury = -Infinity;
    for (var i = 0; i < path.length; i++) {
        var a = path[i];
        if (a.op == 'c') {
            continue;
        }
        if (a.x0 < a.x1) {
            if (llx > a.x0) llx = a.x0;
            if (urx < a.x1) urx = a.x1;
        } else {
            if (llx > a.x1) llx = a.x1;
            if (urx < a.x0) urx = a.x0;
        }
        if (a.y0 < a.y1) {
            if (lly > a.y0) lly = a.y0;
            if (ury < a.y1) ury = a.y1;
        } else {
            if (lly > a.y1) lly = a.y1;
            if (ury < a.y0) ury = a.y0;
        }
    }

    // Convert to user-space coordinates
    var rv = {  llx:(llx-this.g_tdx)/this.g_tsx,
                lly:(lly-this.g_tdy)/this.g_tsy,
                urx:(urx-this.g_tdx)/this.g_tsx,
                ury:(ury-this.g_tdy)/this.g_tsy };
    return rv;
};
// Tranforms the pts array to standard (not y-inverted), unscalled values.
BWIPJS.prototype.transform = function(pts) {
    var minx = this.minx;
    var maxy = this.maxy;

    for (var i = 0; i < pts.length; i++) {
        var pt = pts[i];
        pt[0] = pt[0] - minx;
        pt[1] = maxy - pt[1];
    }
};
BWIPJS.prototype.stroke = function() {
    var tsx  = this.g_tsx;
    var tsy  = this.g_tsy;
    var path = this.g_path;
    var rgb  = this.getRGB();
    this.g_path = [];

    // This is a "super majority" round i.e. if over .66 round up.
    var penw = floor(this.g_penw * tsx + 0.66);
    var penh = floor(this.g_penw * tsy + 0.66);

    // Calculate the bounding boxes
    var nlines = 0, npolys = 0;
    for (var i = 0; i < path.length; i++) {
        var a = path[i];
        if (a.op == 'l') {
            // We only stroke vertical and horizontal lines.  Complex shapes are
            // always filled.
            if (a.x0 != a.x1 && a.y0 != a.y1) {
                throw new Error('stroke: --not-orthogonal--');
            }
            var x0 = a.x0;
            var y0 = a.y0;
            var x1 = a.x1;
            var y1 = a.y1;

            // Half widths (may be factional)
            var penw2 = penw/2;
            var penh2 = penh/2;

            if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
            if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }
            if (x0 == x1) {
                this.bbox(x0-penw2, y0, x0+penw-penw2-1, y1);   // vertical line
            } else {
                this.bbox(x0, y0-penh+penh2+1, x1, y1+penh2);   // horizontal line
            }
            nlines++;
        } else if (a.op == 'p') {
            // Closed (rectangular) poly (border around the barcode)
            var minx = Infinity;
            var miny = Infinity;
            var maxx = -Infinity;
            var maxy = -Infinity;
            var pts  = a.poly;
            if (pts.length != 4) {
                throw new Error('stroke: --not-a-rect--');
            }
            for (var i = 0, j = pts.length-1; i < pts.length; j = i++) {
                var xj = pts[j][0];
                var yj = pts[j][1];
                var xi = pts[i][0];
                var yi = pts[i][1];

                if (xi != xj && yi != yj) {
                    throw new Error('stroke: --not-orthogonal--');
                }

                if (xi < minx) minx = xi;
                if (xi > maxx) maxx = xi;
                if (yi < miny) miny = yi;
                if (yi > maxy) maxy = yi;
            }

            // Half widths (integer)
            var penw2 = ceil(penw/2);
            var penh2 = ceil(penh/2);

            // We render these as two polygons plus a fill.
            // When border width is odd, allocate the bigger half to the outside.
            this.bbox(minx-penw2, miny-penh2, maxx+penw2, maxy+penh2);
            npolys++;
        } else {
            throw new Error('stroke: --not-a-line--');
        }
    }

    // Draw the lines
    var self = this;
    this.cmds.push(function() {
        // Half widths (big half and remaining half)
        var bigw2 = ceil(penw/2);
        var bigh2 = ceil(penh/2);
        var remw2 = penw - bigw2;
        var remh2 = penh - bigh2;

        for (var i = 0; i < path.length; i++) {
            var a = path[i]
            if (a.op == 'l') {
                var pts = [ [ a.x0, a.y0 ], [ a.x1, a.y1 ] ];
                self.transform(pts);
                self.drawing.line(pts[0][0], pts[0][1], pts[1][0], pts[1][1],
                            a.x0 == a.x1 ? penw : penh, rgb);
                self.fill(rgb);
            } else {
                var pts = a.poly;
                self.transform(pts);
                var x0 = min(pts[0][0], pts[2][0]);
                var x1 = max(pts[0][0], pts[2][0]);
                var y0 = min(pts[0][1], pts[2][1]);
                var y1 = max(pts[0][1], pts[2][1]);

                // Top and left edges are "inside" the polygon.
                // Bottom and right edges are outside.

                // outside, counter-clockwise
                self.drawing.polygon([
                        [ x0-bigw2, y0-bigh2 ],
                        [ x0-bigw2, y1+bigh2+1 ],
                        [ x1+bigw2+1, y1+bigh2+1 ],
                        [ x1+bigw2+1, y0-bigh2 ],
                    ]);
                // inside, clockwise
                self.drawing.polygon([
                        [ x0+remw2, y0+remh2 ],
                        [ x1-remw2+1, y0+remh2 ],
                        [ x1-remw2+1, y1-remh2+1 ],
                        [ x0+remw2, y1-remh2+1 ],
                    ]);
                self.drawing.fill(rgb);
            }
        }
    });
};
BWIPJS.prototype.fill = function() {
    var path = this.g_path;
    var rgb  = this.getRGB();
    this.g_path = [];

    // Calculate the bounding boxes
    for (var p = 0; p < path.length; p++) {
        var a = path[p];
        if (a.op == 'p') {  // polygon
            var minx = Infinity;
            var miny = Infinity;
            var maxx = -Infinity;
            var maxy = -Infinity;
            var pts  = a.poly;
            for (var i = 0; i < pts.length; i++) {
                var xi = pts[i][0];
                var yi = pts[i][1];

                if (xi < minx) minx = xi;
                if (xi > maxx) maxx = xi;
                if (yi < miny) miny = yi;
                if (yi > maxy) maxy = yi;
            }
            // With polygons, the right and bottom edges are "outside" and do not
            // contribute to the bounding box.  But we are in postscript inverted-y
            // mode.
            this.bbox(minx, miny+1, maxx-1, maxy);
        } else if (a.op == 'e') {   // ellipse
            this.bbox(a.x - a.rx, a.y - a.ry, a.x + a.rx, a.y + a.ry);
        } else {
            throw new Error('fill: --not-a-polygon--');
        }
    }

    // Render the poly
    var self = this;
    this.cmds.push(function() {
        for (var i = 0; i < path.length; i++) {
            var a = path[i];
            if (a.op == 'p') {
                var pts = a.poly
                self.transform(pts);
                self.drawing.polygon(pts);
            } else if (a.op == 'e') {
                var pts = [ [ a.x, a.y ] ];
                self.transform(pts);
                self.drawing.ellipse(pts[0][0], pts[0][1], a.rx, a.ry, a.ccw);
            }
        }
        self.drawing.fill(rgb);
    });
};
BWIPJS.prototype.clip = function() {
    var path = this.g_path;
    this.g_path = [];
    this.g_clip = true;

    var self = this;
    this.cmds.push(function() {
        var polys = [];
        for (var i = 0; i < path.length; i++) {
            var a = path[i];
            if (a.op == 'p') {
                var pts = a.poly
                self.transform(pts);
                polys.push(pts);
            } else {
                throw new Error('clip: only polygon regions supported');
            }
        }
        self.drawing.clip(polys);
    });
};

// The pix array is in standard (not y-inverted postscript) orientation.
BWIPJS.prototype.showmaxicode = function(pix) {
    var tsx = this.g_tsx;
    var tsy = this.g_tsy;
    var rgb = this.getRGB();

    // Module width.  Module height is an integer multiple of tsy.
    var twidth = 1.04 * tsx * 100;
    var mwidth = (twidth / 30)|0;
    if (twidth - (mwidth*30-1) > 9) {
        mwidth++;
    }

    // Dimensions needed for plotting the hexagons.  These must be integer values.
    var w, h, wgap, hgap;
    // if (opts.??? ) {
    //  // Create a one or two pixel gap
    //  wgap = (mwidth & 1) ? 1 : 2;
    //  hgap = 1;
    //  w = mwidth - gap;
    //  h = 4 * tsy;
    // } else {
        // Create a 1/8mm gap
        wgap = (tsx/2)|0;
        hgap = (tsy/2)|0;
        w = mwidth - wgap;
        if (w & 1) {
            w--;
        }
        h = ((4*tsy)|0) - hgap;
    //}

    // These must be integer values
    var w2 = w / 2 - 1;         // half width
    var qh = ((w2+1) / 2)|0;    // quarter height
    var vh = h - 2 - 2 * qh;    // side height

    // Bounding box
    this.bbox(0, 0, mwidth*30 - wgap, tsy * 3 * 32 + tsy * 4 - hgap);

    // Render the elements
    var self = this;
    this.cmds.push(function() {
        // Draw the hexagons
        for (var i = 0; i < pix.length; i++) {
            var c = pix[i];
            var x = c % 30;
            var y = (c / 30)|0;

            // Adjust x,y to the top of hexagon
            x *= mwidth;
            x += (y & 1) ? mwidth : mwidth/2;
            x = x|0;

            y = 33 - y; // invert for postscript notation
            y *= tsy * 3;
            y += tsy * 2 - h/2;
            y = y|0;

            // Build bottom up so the drawing is top-down.
            var pts = [ [ x-0.5, y-- ] ];
            y -= qh-1;
            pts.push([x-1-w2, y--]);
            y -= vh;
            pts.push([x-1-w2, y--]);
            y -= qh-1;
            pts.push([x-0.5, y++]);
            y += qh-1;
            pts.push([x+w2, y++]);
            y += vh;
            pts.push([x+w2, y++]);

            self.transform(pts);
            self.drawing.hexagon(pts, rgb);
        }
        self.drawing.fill(rgb);


        // Draw the rings
        var x = (14 * mwidth + mwidth/2 + 0.01)|0;
        var y = ((12 * 4 + 3) * tsy - qh/2 + 0.01)|0;
        self.drawing.ellipse(x, y, (0.5774*3.5*tsx+0.01)|0, (0.5774*3.5*tsy+0.01)|0, true);
        self.drawing.ellipse(x, y, (1.3359*3.5*tsx+0.01)|0, (1.3359*3.5*tsy+0.01)|0, false);
        self.drawing.fill(rgb);
        self.drawing.ellipse(x, y, (2.1058*3.5*tsx+0.01)|0, (2.1058*3.5*tsy+0.01)|0, true);
        self.drawing.ellipse(x, y, (2.8644*3.5*tsx+0.01)|0, (2.8644*3.5*tsy+0.01)|0, false);
        self.drawing.fill(rgb);
        self.drawing.ellipse(x, y, (3.6229*3.5*tsx+0.01)|0, (3.6229*3.5*tsy+0.01)|0, true);
        self.drawing.ellipse(x, y, (4.3814*3.5*tsx+0.01)|0, (4.3814*3.5*tsy+0.01)|0, false);
        self.drawing.fill(rgb);

    });
};
// UTF-8 to UCS-2 (no surrogates)
BWIPJS.prototype.toUCS2 = function(str) {
    return str.replace(/[\xc0-\xdf][\x80-\xbf]|[\xe0-\xff][\x80-\xbf]{2}/g,
                      function(s) {
                          var code;
                          if (s.length == 2) {
                              code = ((s.charCodeAt(0)&0x1f)<<6)|
                                     (s.charCodeAt(1)&0x3f);
                          } else {
                              code = ((s.charCodeAt(0)&0x0f)<<12)|
                                     ((s.charCodeAt(1)&0x3f)<<6)|
                                     (s.charCodeAt(2)&0x3f);
                          }
                          return String.fromCharCode(code);
                      });
};
// dx,dy are inter-character gaps
BWIPJS.prototype.show = function(str, dx, dy) {
    if (!str.length) {
        return;
    }

    // Capture current graphics state
    var tsx  = this.g_tsx;
    var tsy  = this.g_tsy;
    var name = this.g_font.FontName || 'OCR-B';
    var size = (this.g_font.FontSize || 10);
    var szx  = size * tsx;
    var szy  = size * tsy;
    var posx = this.g_posx;
    var posy = this.g_posy;
    var rgb  = this.getRGB();

    // The string can be either a uint8-string or regular string.
    str = this.toUCS2(this.jsstring(str));

    // Convert dx,dy to device space
    dx = tsx * dx || 0;
    dy = tsy * dy || 0;

    // Bounding box.
    var base = posy + dy;
    var bbox = this.drawing.measure(str, name, szx, szy);
    var width = bbox.width + (str.length-1) * dx;
    this.bbox(posx, base-bbox.descent+1, posx+width-1, base+bbox.ascent);
    this.g_posx += width;

    var self = this;
    self.cmds.push(function() {
        // self.transform()
        var x = posx - self.minx;
        var y = self.maxy - posy;
        self.drawing.text(x, y, str, rgb, { name:name, width:szx, height:szy, dx:dx });
    });
};
// drawing surface bounding box
BWIPJS.prototype.bbox = function(x0, y0, x1, y1) {
    if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
    if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }

    x0 = floor(x0);
    y0 = floor(y0);
    x1 = ceil(x1);
    y1 = ceil(y1);

    if (this.minx > x0) this.minx = x0;
    if (this.maxx < x1) this.maxx = x1;
    if (this.miny > y0) this.miny = y0;
    if (this.maxy < y1) this.maxy = y1;
};
BWIPJS.prototype.render = function() {
    if (this.minx === Infinity) {
        // Most likely, `dontdraw` was set in the options
        return false;
    }
    // Draw the image
    this.drawing.init(this.maxx - this.minx + 1, this.maxy - this.miny + 1,
                      this.g_tsx, this.g_tsy);
    for (var i = 0, l = this.cmds.length; i < l; i++) {
        this.cmds[i]();
    }
    return this.drawing.end();
};

return BWIPJS;
})();   // BWIPJS closure
// drawing-builtin.js
//
// The aliased (except the fonts) graphics used by drawing-canvas.js and
// drawing-zlibpng.js
//
// All x,y and lengths are integer values.
//
// For the methods that take a color `rgb` parameter, the value is always a
// string with format RRGGBB.
function DrawingBuiltin() {
    var floor = Math.floor;

    // Unrolled x,y rotate/translate matrix
    var tx0 = 0, tx1 = 0, tx2 = 0, tx3 = 0;
    var ty0 = 0, ty1 = 0, ty2 = 0, ty3 = 0;

    var opts;                   // see setopts()
    var gs_image, gs_rowbyte;   // rowbyte will be 1 for png's, 0 for canvas
    var gs_width, gs_height;    // image size, in pixels
    var gs_dx, gs_dy;           // x,y translate (padding)
    var gs_r, gs_g, gs_b;       // rgb
    var gs_xymap;               // edge map
    var gs_xyclip;              // clip region map (similar to xymap)

    return {
        // setopts() is called after the options are fixed-up/normalized,
        // but before calling into BWIPP.
        // This method allows omitting the options in the constructor call.
        // The method is optional.
        setopts(options) {
            opts = options;
        },

        // Ensure compliant bar codes by always using integer scaling factors.
        scale : function(sx, sy) {
            // swissqrcode requires clipping and drawing that are not scaled to the
            // the barcode module size.
            if (opts.bcid == 'swissqrcode') {
                return [ sx, sy ];
            } else {
                return [ (sx|0)||1, (sy|0)||1 ];
            }
        },

        // Measure text.  This and scale() are the only drawing primitives that
        // are called before init().
        //
        // `font` is the font name typically OCR-A or OCR-B.
        // `fwidth` and `fheight` are the requested font cell size.  They will
        // usually be the same, except when the scaling is not symetric.
        measure : function(str, font, fwidth, fheight) {
            fwidth = fwidth|0;
            fheight = fheight|0;

            var fontid = FontLib.lookup(font);
            var width = 0;
            var ascent = 0;
            var descent = 0;
            for (var i = 0, l = str.length; i < l; i++) {
                var ch = str.charCodeAt(i);
                var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

                ascent  = Math.max(ascent, glyph.top);
                descent = Math.max(descent, glyph.height - glyph.top);

                if (i == l-1) {
                    width += glyph.left + glyph.width;
                } else {
                    width += glyph.advance;
                }
            }
            return { width:width, ascent:ascent, descent:descent };
        },

        // width and height represent the maximum bounding box the graphics will occupy.
        // The dimensions are for an unrotated rendering.  Adjust as necessary.
        init : function(width, height) {
            // Add in the effects of padding.  These are always set before the
            // drawing constructor is called.
            var padl = opts.paddingleft;
            var padr = opts.paddingright;
            var padt = opts.paddingtop;
            var padb = opts.paddingbottom;
            var rot  = opts.rotate || 'N';

            width  += padl + padr;
            height += padt + padb;

            if (+opts.sizelimit && +opts.sizelimit < width * height) {
                throw new Error('Image size over limit');
            }

            // Transform indexes are: x, y, w, h
            switch (rot) {
            // tx = w-y, ty = x
            case 'R': tx1 = -1; tx2 = 1; ty0 = 1; break;
            // tx = w-x, ty = h-y
            case 'I': tx0 = -1; tx2 = 1; ty1 = -1; ty3 = 1; break;
            // tx = y, ty = h-x
            case 'L': tx1 = 1; ty0 = -1; ty3 = 1; break;
            // tx = x, ty = y
            default:  tx0 = ty1 = 1; break;
            }

            // Setup the graphics state
            var swap = rot == 'L' || rot == 'R';
            gs_width  = swap ? height : width;
            gs_height = swap ? width : height;
            gs_dx = padl;
            gs_dy = padt;
            gs_xymap = [];
            gs_xymap.min = Infinity;
            gs_xyclip = null;
            gs_r = gs_g = gs_b = 0;

            // Get the rgba image from the constructor
            var res = this.image(gs_width, gs_height);
            gs_image   = res.buffer;
            gs_rowbyte = res.ispng ? 1 : 0;
        },
        // Unconnected stroked lines are used to draw the bars in linear barcodes;
        // and the border around a linear barcode (e.g. ITF-14)
        // No line cap should be applied.  These lines are always orthogonal.
        line : function(x0, y0, x1, y1, lw, rgb) {
            x0 = x0|0;
            y0 = y0|0;
            x1 = x1|0;
            y1 = y1|0;

            // Most linear barcodes, the line width will be integral.  The exceptions
            // are variable width barcodes (e.g. code39) and the postal 4-state codes.
            lw = Math.round(lw) || 1;

            if (y1 < y0) { var t = y0; y0 = y1; y1 = t; }
            if (x1 < x0) { var t = x0; x0 = x1; x1 = t; }

            gs_r = parseInt(rgb.substr(0,2), 16);
            gs_g = parseInt(rgb.substr(2,2), 16);
            gs_b = parseInt(rgb.substr(4,2), 16);

            // Horizontal or vertical line?
            var w2 = (lw/2)|0;
            if (x0 == x1) {
                // Vertical line
                x0 = x0 - lw + w2;  // big half
                x1 = x1 + w2 - 1;   // small half
            } else {
                // Horizontal line (inverted halves)
                y0 = y0 - w2;
                y1 = y1 + lw - w2 - 1;
            }
            for (var y = y0; y <= y1; y++) {
                for (var x = x0; x <= x1; x++) {
                    set(x, y, 255);
                }
            }
        },

        // Polygons are used to draw the connected regions in a 2d barcode.
        // These will always be unstroked, filled, orthogonal shapes.
        //
        // You will see a series of polygon() calls, followed by a fill().
        polygon : function(pts) {
            var npts = pts.length;
            for (var j = npts-1, i = 0; i < npts; j = i++) {
                if (pts[j][0] == pts[i][0]) {
                    // Vertical lines do not get their end points. End points
                    // are added by the horizontal line logic.
                    var xj = pts[j][0]|0;   // i or j, doesn't matter
                    var yj = pts[j][1]|0;
                    var yi = pts[i][1]|0;
                    if (yj > yi) {
                        for (var y = yi+1; y < yj; y++) {
                            addPoint(xj, y);
                        }
                    } else {
                        for (var y = yj+1; y < yi; y++) {
                            addPoint(xj, y);
                        }
                    }
                } else {
                    var xj = pts[j][0]|0;
                    var xi = pts[i][0]|0;
                    var yj = pts[j][1]|0;   // i or j, doesn't matter

                    // Horizontal lines are tricky.  As a rule, top lines get filled,
                    // bottom lines do not (similar to how left edges get filled and
                    // right edges do not).
                    //
                    // Where it gets complex is deciding whether the line actually
                    // adds edges.  There are cases where a horizontal line does
                    // not add anything to the scanline plotting.  And it doesn't
                    // actually matter whether the line is a top or bottom edge,
                    // the logic is the same.
                    //
                    // A left edge is added if the edge to its left is below.
                    // A right edge is added if the edge to its right is below.
                    if (xj < xi) {
                        var yl = pts[j == 0 ? npts-1 : j-1][1]; // left edge
                        var yr = pts[i == npts-1 ? 0 : i+1][1]; // right edge
                        if (yl > yj) {
                            addPoint(xj, yj);
                        }
                        if (yr > yj) {
                            addPoint(xi, yj);
                        }
                    } else {
                        var yl = pts[i == npts-1 ? 0 : i+1][1]; // left edge
                        var yr = pts[j == 0 ? npts-1 : j-1][1]; // right edge
                        if (yl > yj) {
                            addPoint(xi, yj);
                        }
                        if (yr > yj) {
                            addPoint(xj, yj);
                        }
                    }
                }
            }
        },
        // An unstroked, filled hexagon used by maxicode.  You can choose to fill
        // each individually, or wait for the final fill().
        //
        // The hexagon is drawn from the top, counter-clockwise.
        //
        // The X-coordinate for the top and bottom points on the hexagon is always
        // .5 pixels.  We draw our hexagons with a 2 pixel flat top.
        //
        // All other points of the polygon/hexagon are guaranteed to be integer values.
        hexagon : function(pts, rgb) {
            var x = pts[0][0]|0;
            var y = pts[0][1]|0;
            var qh = (pts[1][1] - pts[0][1])|0;     // height of triangle (quarter height)
            var vh = (pts[2][1] - pts[1][1] - 1)|0; // height of vertical side
            var xl = (pts[2][0])|0;                 // left side
            var xr = (pts[4][0])|0;                 // right side

            gs_r = parseInt(rgb.substr(0,2), 16);
            gs_g = parseInt(rgb.substr(2,2), 16);
            gs_b = parseInt(rgb.substr(4,2), 16);

            fillSegment(x, x+1, y++);
            for (var k = 1; k < qh; k++) {
                fillSegment(x-2*k, x+1+2*k, y++);
            }
            for (var k = 0; k <= vh; k++) {
                fillSegment(xl, xr, y++);
            }
            for (var k = qh-1; k >= 1; k--) {
                fillSegment(x-2*k, x+1+2*k, y++);
            }
            fillSegment(x, x+1, y);
        },
        // An unstroked, filled ellipse.  Used by dotcode and maxicode at present.
        // maxicode issues pairs of ellipse calls (one cw, one ccw) followed by a fill()
        // to create the bullseye rings.  dotcode issues all of its ellipses then a
        // fill().
        ellipse : function(x, y, rx, ry, ccw) {
            drawEllipse((x-rx)|0, (y-ry)|0, (x+rx)|0, (y+ry)|0, ccw);
        },
        // PostScript's default fill rule is non-zero but since there are never
        // intersecting regions, we use the easier to implement even-odd.
        fill : function(rgb) {
            gs_r = parseInt(rgb.substr(0,2), 16);
            gs_g = parseInt(rgb.substr(2,2), 16);
            gs_b = parseInt(rgb.substr(4,2), 16);

            evenodd();
            gs_xymap = [];
            gs_xymap.min = Infinity;
        },
        // Currently only used by swissqrcode.  The `polys` area is an array of
        // arrays of points.  Each array of points is identical to the `pts`
        // parameter passed to polygon().  The postscript default clipping rule,
        // like the fill rule, is even-odd winding.
        clip : function(polys) {
            if (!gs_xyclip) {
                gs_xyclip = [];
                gs_xyclip.min = Infinity;
            }
            // Swap out the xymap for the clip map so addPoint() works on it.
            var xymap = gs_xymap;
            gs_xymap = gs_xyclip;

            // Now just use the polygon() logic to fill in the clipping regions.
            for (var i = 0, l = polys.length; i < l; i++) {
                this.polygon(polys[i]);
            }

            // Restore
            gs_xymap = xymap;
        },
        unclip : function() {
            gs_xyclip = null;
        },
        // Draw text with optional inter-character spacing.  `y` is the baseline.
        // font is an object with properties { name, width, height, dx }
        // width and height are the font cell size.
        // dx is extra space requested between characters (usually zero).
        text : function(x, y, str, rgb, font) {
            x = x|0;
            y = y|0;

            gs_r = parseInt(rgb.substr(0,2), 16);
            gs_g = parseInt(rgb.substr(2,2), 16);
            gs_b = parseInt(rgb.substr(4,2), 16);

            var fontid  = FontLib.lookup(font.name);
            var fwidth  = font.width|0;
            var fheight = font.height|0;
            var dx      = font.dx|0;
            for (var k = 0; k < str.length; k++) {
                var ch = str.charCodeAt(k);
                var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

                var gt = y - glyph.top;
                var gl = glyph.left;
                var gw = glyph.width;
                var gh = glyph.height;
                var gb = glyph.bytes;
                var go = glyph.offset;      // offset into bytes

                for (var i = 0; i < gw; i++) {
                    for (var j = 0; j < gh; j++) {
                        var a = gb[go + j * gw + i];
                        if (a) {
                            set(x+gl+i, gt+j, a);
                        }
                    }
                }
                x += glyph.advance + dx;
            }
        },
        // Called after all drawing is complete.
        end : function() {
        },
    };

    // This code is specialized to deal with two types of RGBA buffers:
    // - canvas style, which is true RGBA
    // - PNG style, which has a one-byte "filter code" prefixing each row.
    function set(x, y, a) {
        if (gs_xyclip && clipped(x, y)) {
            return;
        }
        // translate/rotate
        x += gs_dx;
        y += gs_dy;
        var tx = tx0 * x + tx1 * y + tx2 * (gs_width-1) + tx3 * (gs_height-1);
        var ty = ty0 * x + ty1 * y + ty2 * (gs_width-1) + ty3 * (gs_height-1);

        // https://en.wikipedia.org/wiki/Alpha_compositing
        var offs = (ty * gs_width + tx) * 4 + (ty+1) * gs_rowbyte;
        var dsta = gs_image[offs+3] / 255;
        var srca = a / 255;
        var inva = (1 - srca) * dsta;
        var outa = srca + inva;

        gs_image[offs+0] = ((gs_r * srca + gs_image[offs+0] * inva) / outa)|0;
        gs_image[offs+1] = ((gs_g * srca + gs_image[offs+1] * inva) / outa)|0;
        gs_image[offs+2] = ((gs_b * srca + gs_image[offs+2] * inva) / outa)|0;
        gs_image[offs+3] = (255 * outa)|0;
    }

    // Add a point on an edge to the scanline map.
    function addPoint(x, y) {
        if (gs_xymap.min > y) gs_xymap.min = y;
        if (!gs_xymap[y]) {
            gs_xymap[y] = [ x ];
        } else {
            gs_xymap[y].push(x);
        }
    }

    function fillSegment(x0, x1, y) {
        while (x0 <= x1) {
            set(x0++, y, 255);
        }
    }

    // even-odd fill
    //
    // This implementation is optimized for BWIPP's simple usage.
    // It is not a general purpose scanline fill.  It relies heavily on
    // polygon() creating the correct intersections.
    function evenodd() {
        var ymin = gs_xymap.min;
        var ymax = gs_xymap.length-1;

        for (var y = ymin; y <= ymax; y++) {
            var pts = gs_xymap[y];
            if (!pts) {
                continue
            }
            pts.sort(function(a, b) { return a - b; });

            var wn = false;
            var xl = 0;
            for (var n = 0, npts = pts.length; n < npts; n++) {
                var x = pts[n];
                if (wn) {
                    fillSegment(xl, x-1, y);
                } else {
                    xl = x;
                }
                wn = !wn;
            }
        }
    }

    function drawEllipse(x0, y0, x1, y1, dir) {
        x0 = x0|0;
        y0 = y0|0;
        x1 = x1|0;
        y1 = y1|0;

        var a = Math.abs(x1-x0);
        var b = Math.abs(y1-y0);
        var b1 = b & 1;
        var dx = 4*(1-a)*b*b;
        var dy = 4*(b1+1)*a*a;
        var err = dx + dy + b1*a*a;
        var e2;

        // Left and right edges
        var left = [], right = [];
        left.min = right.min = Infinity;

        if (x0 > x1) { x0 = x1; x1 += a; }
        if (y0 > y1) y0 = y1;
        y0 += ((b+1)/2)|0;
        y1 = y0 - b1;
        a *= 8*a; b1 = 8*b*b;

        do {
            maxedge(right, x1, y0); // 1st quadrant
            minedge(left, x0, y0);  // 2nd quadrant
            minedge(left, x0, y1);  // 3rd quadrant
            maxedge(right, x1, y1); // 4th quadrant
            e2 = 2*err;
            if (e2 >= dx) { x0++; x1--; dx += b1; err += dx; }
            if (e2 <= dy) { y0++; y1--; dy += a;  err += dy; }
        } while (x0 <= x1);

        while (y0-y1 < b) { // too early stop of flat ellipse
            maxedge(right, x1+1, y0);
            minedge(left, x0-1, y0++);
            minedge(left, x0-1, y1);
            maxedge(right, x1+1, y1--);
        }

        for (var y = left.min, max = left.length-1; y <= max; y++) {
            addPoint(left[y], y);
        }
        // The points we calculated are "inside".  The fill algorithm excludes
        // right edges, so +1 on each x.
        for (var y = right.min, max = right.length-1; y <= max; y++) {
            addPoint(right[y]+1, y);
        }

        function minedge(e, x, y) {
            if (e.min > y) e.min = y;
            var ey = e[y];
            if (ey == null || ey > x) {
                e[y] = x;
            }
        }

        function maxedge(e, x, y) {
            if (e.min > y) e.min = y;
            var ey = e[y];
            if (ey == null || ey < x) {
                e[y] = x;
            }
        }
    }

    // Returns true if outside the clipping region.
    function clipped(x, y) {
        var pts = gs_xyclip[y];
        if (!pts) {
            return true;
        }
        if (!pts.sorted) {
            pts.sort(function(a, b) { return a - b; });
            pts.sorted = true;
        }

        var wn = false;
        for (var n = 0, npts = pts.length; n < npts; n++) {
            var xn = pts[n];
            if (xn > x) {
                return !wn;
            } else if (xn == x) {
                return wn;
            }
            wn = !wn;
        }
        return true;
    }

    // Returns 1 if clockwise, -1 if ccw.
    function polydir(pts) {
        var xp = 0;
        for (var i = 0, l = pts.length, j = l-1; i < l; j = i++) {
            xp += pts[j][0] * pts[i][1] - pts[i][0] * pts[j][1];
        }
        return xp > 0 ? 1 : -1;
    }
}
// drawing-canvas.js
//
// `maybe` maybe the canvas, pre v4.0.
function DrawingCanvas(canvas, maybe) {
    // Pre setops() backward compatibility
    if (maybe && maybe instanceof HTMLCanvasElement) {
        canvas = maybe;
    }

    var img;
    var ctx = canvas.getContext('2d', { willReadFrequently:true });
    var drawing = DrawingBuiltin();

    // Provide our specializations for the builtin drawing
    drawing.image = image;
    drawing.end = end;

    // Reflect setopts() into the super
    var opts;
    var _setopts = drawing.setopts;
    drawing.setopts = function (options) {
        opts = options;
        _setopts && _setopts.call(drawing, options);
    };

    return drawing;


    // Called by DrawingBuiltin.init() to get the ARGB bitmap for rendering.
    function image(width, height) {
        canvas.width  = width;
        canvas.height = height;

        // Set background
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        if (/^[0-9a-fA-F]{6}$/.test(''+opts.backgroundcolor)) {
            ctx.fillStyle = '#' + opts.backgroundcolor;
            ctx.fillRect(0, 0, width, height);
        } else {
            ctx.clearRect(0, 0, width, height);
        }

        // Prepare the bitmap
        img = ctx.getImageData(0, 0, width, height);

        // The return value is designed for both canvas pure-RGBA and PNG RGBA
        return { buffer:img.data, ispng:false };
    }

    function end() {
        ctx.putImageData(img, 0, 0);
        return canvas;
    }
}
// drawing-svg.js
//
// Converts the drawing primitives into the equivalent SVG.  Linear barcodes
// are rendered as a series of stroked paths.  2D barcodes are rendered as a 
// series of filled paths.
//
// Rotation is handled during drawing.  The resulting SVG will contain the 
// already-rotated barcode without an SVG transform.
//
// If the requested barcode image contains text, the glyph paths are 
// extracted from the font file (via the builtin FontLib and stb_truetype.js)
// and added as filled SVG paths.
//
function DrawingSVG() {
    // Unrolled x,y rotate/translate matrix
    var tx0 = 0, tx1 = 0, tx2 = 0, tx3 = 0;
    var ty0 = 0, ty1 = 0, ty2 = 0, ty3 = 0;

    var opts;
    var svg = '';
    var path;
    var clipid = '';
    var clips = [];
    var lines = {};

    // We adjust the drawing coordinates by 0.5px when stroke width is odd.
    // But this creates an odd effect with scale.  When scale is even, we
    // need to add 0.5; when scale is odd, subtract 0.5.
    var scalex, scaley;

    // Magic number to approximate an ellipse/circle using 4 cubic beziers.
    var ELLIPSE_MAGIC = 0.55228475 - 0.00045;

    // Global graphics state
    var gs_width, gs_height;    // image size, in pixels
    var gs_dx, gs_dy;           // x,y translate (padding)

    return {
        // setopts() is called after the options are fixed-up/normalized,
        // but before calling into BWIPP.
        // This allows omitting the options in the constructor call.
        // It is also your last chance to amend the options before usage.
        setopts(options) {
            opts = options;
        },

        // measure() and scale() are the only drawing primitives that are called before init().

        // Make no adjustments
        scale(sx, sy) {
            scalex = sx;
            scaley = sy;
        },
        // Measure text.
        // `font` is the font name typically OCR-A or OCR-B.
        // `fwidth` and `fheight` are the requested font cell size.  They will
        // usually be the same, except when the scaling is not symetric.
        measure(str, font, fwidth, fheight) {
            fwidth = fwidth|0;
            fheight = fheight|0;

            var fontid = FontLib.lookup(font);
            var width = 0;
            var ascent = 0;
            var descent = 0;
            for (var i = 0, l = str.length; i < l; i++) {
                var ch = str.charCodeAt(i);
                var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);
                if (!glyph) {
                    continue;
                }
                ascent  = Math.max(ascent, glyph.top);
                descent = Math.max(descent, glyph.height - glyph.top);
                if (i == l-1) {
                    width += glyph.left + glyph.width;
                } else {
                    width += glyph.advance;
                }
            }
            return { width, ascent, descent };
        },

        // `width` and `height` represent the maximum bounding box the graphics will
        // occupy.  The dimensions are for an unrotated rendering.  Adjust as necessary.
        init(width, height) {
            // Add in the effects of padding.  These are always set before the
            // drawing constructor is called.
            var padl = opts.paddingleft;
            var padr = opts.paddingright;
            var padt = opts.paddingtop;
            var padb = opts.paddingbottom;
            var rot  = opts.rotate || 'N';

            width  += padl + padr;
            height += padt + padb;

            // Transform indexes are: x, y, w, h
            switch (rot) {
            // tx = w-y, ty = x
            case 'R': tx1 = -1; tx2 = 1; ty0 = 1; break;
            // tx = w-x, ty = h-y
            case 'I': tx0 = -1; tx2 = 1; ty1 = -1; ty3 = 1; break;
            // tx = y, ty = h-x
            case 'L': tx1 = 1; ty0 = -1; ty3 = 1; break;
            // tx = x, ty = y
            default:  tx0 = ty1 = 1; break;
            }

            // Setup the graphics state
            var swap = rot == 'L' || rot == 'R';
            gs_width  = swap ? height : width;
            gs_height = swap ? width : height;
            gs_dx = padl;
            gs_dy = padt;
        },
        // Unconnected stroked lines are used to draw the bars in linear barcodes.
        // No line cap should be applied.  These lines are always orthogonal.
        line(x0, y0, x1, y1, lw, rgb) {
            x0 = x0|0;
            y0 = y0|0;
            x1 = x1|0;
            y1 = y1|0;
            lw = Math.round(lw) || 1;

            // Try to keep the lines "crisp" by using with the SVG line drawing spec to
            // our advantage and adjust the coordinates by half pixel when stroke width
            // is odd.  Work around an odd effect with scale.  When scale is even, we
            // need to add 0.5; when scale is odd, subtract 0.5.
            if (lw & 1) {
                if (x0 == x1) {
                    let dx = (scalex&1) ? -0.5 : 0.5;
                    x0 += dx;
                    x1 += dx;
                }
                if (y0 == y1) {
                    let dy = (scaley&1) ? -0.5 : 0.5;
                    y0 += dy;
                    y1 += dy;
                }
            }
            // The svg path does not include the start pixel, but the built-in drawing does.
            if (x0 == x1) {
                y0++;
            } else if (y0 == y1) {
                x0++;
            }

            // Group together all lines of the same width and emit as single paths.
            // Dramatically reduces the svg text size.
            var key = '' + lw + '#' + rgb;
            if (!lines[key]) {
                lines[key] = '<path stroke="#' + rgb + '" stroke-width="' + lw + '" d="';
            }
            lines[key] += 'M' + transform(x0, y0) + 'L' + transform(x1, y1);
        },
        // Polygons are used to draw the connected regions in a 2d barcode.
        // These will always be unstroked, filled, non-intersecting,
        // orthogonal shapes.
        // You will see a series of polygon() calls, followed by a fill().
        polygon(pts) {
            if (!path) {
                path = '<path d="';
            }
            path += 'M' + transform(pts[0][0], pts[0][1]);
            for (var i = 1, n = pts.length; i < n; i++) {
                var p = pts[i];
                path += 'L' + transform(p[0], p[1]);
            }
            path += 'Z';
        },
        // An unstroked, filled hexagon used by maxicode.  You can choose to fill
        // each individually, or wait for the final fill().
        //
        // The hexagon is drawn from the top, counter-clockwise.
        hexagon(pts, rgb) {
            this.polygon(pts); // A hexagon is just a polygon...
        },
        // An unstroked, filled ellipse.  Used by dotcode and maxicode at present.
        // maxicode issues pairs of ellipse calls (one cw, one ccw) followed by a fill()
        // to create the bullseye rings.  dotcode issues all of its ellipses then a
        // fill().
        ellipse(x, y, rx, ry, ccw) {
            if (!path) {
                path = '<path d="';
            }
            var dx = rx * ELLIPSE_MAGIC;
            var dy = ry * ELLIPSE_MAGIC;

            // Since there are never overlapping regions, we don't worry about cw/ccw.
            path += 'M' + transform(x - rx, y) +
                    'C' + transform(x - rx, y - dy) + ' ' +
                          transform(x - dx, y - ry) + ' ' +
                          transform(x,      y - ry) +
                    'C' + transform(x + dx, y - ry) + ' ' +
                          transform(x + rx, y - dy) + ' ' +
                          transform(x + rx, y) + 
                    'C' + transform(x + rx, y + dy) + ' ' +
                          transform(x + dx, y + ry) + ' ' +
                          transform(x,      y + ry) +  
                    'C' + transform(x - dx, y + ry) + ' ' +
                          transform(x - rx, y + dy) + ' ' +
                          transform(x - rx, y) + 
                    'Z';
        },
        // PostScript's default fill rule is non-zero but there are never intersecting
        // regions. The built-in drawing uses even-odd for simplicity - we match that
        // to be consistent.
        fill(rgb) {
            if (path) {
                svg += path + '" fill="#' + rgb + '" fill-rule="evenodd"' +
                       (clipid ? ' clip-path="url(#' + clipid + ')"' : '') +
                       ' />\n';
                path = null;
            }
        },
        // Currently only used by swissqrcode.  The `polys` area is an array of
        // arrays of points.  Each array of points is identical to the `pts`
        // parameter passed to polygon().  The clipping rule, like the fill rule,
        // defaults to non-zero winding.
        clip : function(polys) {
            var path = '<clipPath id="clip' + clips.length + '"><path d="';
            for (let j = 0; j < polys.length; j++) {
                let pts = polys[j];
                path += 'M' + transform(pts[0][0], pts[0][1]);
                for (var i = 1, n = pts.length; i < n; i++) {
                    var p = pts[i];
                    path += 'L' + transform(p[0], p[1]);
                }
                path += 'Z';
            }
            path += '" clip-rule="nonzero" /></clipPath>';
            clipid = "clip" + clips.length;
            clips.push(path);
        },
        unclip : function() {
            clipid = '';
        },
        // Draw text with optional inter-character spacing.  `y` is the baseline.
        // font is an object with properties { name, width, height, dx }
        // width and height are the font cell size.
        // dx is extra space requested between characters (usually zero).
        text(x, y, str, rgb, font) {
            var fontid  = FontLib.lookup(font.name);
            var fwidth  = font.width|0;
            var fheight = font.height|0;
            var dx      = font.dx|0;
            var path = '';
            for (var k = 0; k < str.length; k++) {
                var ch = str.charCodeAt(k);
                var glyph = FontLib.getpaths(fontid, ch, fwidth, fheight);
                if (!glyph) {
                    continue;
                }
                if (glyph.length) {
                    // A glyph is composed of sequence of curve and line segments.
                    // M is move-to
                    // L is line-to
                    // Q is quadratic bezier curve-to
                    // C is cubic bezier curve-to
                    for (var i = 0, l = glyph.length; i < l; i++) {
                        let seg = glyph[i];
                        if (seg.type == 'M' || seg.type == 'L') {
                            path += seg.type + transform(seg.x + x, y - seg.y);
                        } else if (seg.type == 'Q') {
                            path += seg.type + transform(seg.cx + x, y - seg.cy) + ' ' +
                                               transform(seg.x + x,  y - seg.y);
                        } else if (seg.type == 'C') {
                            path += seg.type + transform(seg.cx1 + x, y - seg.cy1) + ' ' +
                                               transform(seg.cx2 + x, y - seg.cy2) + ' ' +
                                               transform(seg.x + x,   y - seg.y);
                        }
                    }
                    // Close the shape
                    path += 'Z';
                }
                // getglyph() provides slightly different metrics than getpaths().  Keep
                // it consistent with the built-in drawing.
                x += FontLib.getglyph(fontid, ch, fwidth, fheight).advance + dx;
            }
            if (path) {
                svg += '<path d="' + path + '" fill="#' + rgb + '" />\n';
            }
        },
        // Called after all drawing is complete.  The return value from this method
        // will be the return value from `bwipjs.render()`.
        end() {
            var linesvg = '';
            for (var key in lines) {
                linesvg += lines[key] + '" />\n';
            }
            var bg = opts.backgroundcolor;
            return '<svg viewBox="0 0 ' + gs_width + ' ' + gs_height + '" xmlns="http://www.w3.org/2000/svg">\n' +
                        (clips.length ? '<defs>' + clips.join('') + '</defs>' : '') +
                        (/^[0-9A-Fa-f]{6}$/.test(''+bg)
                            ? '<rect width="100%" height="100%" fill="#' + bg + '" />\n'
                            : '') +
                        linesvg + svg + '</svg>\n';
        },
    };

    // translate/rotate and return as an SVG coordinate pair
    function transform(x, y) {
        x += gs_dx;
        y += gs_dy;
        var tx = tx0 * x + tx1 * y + tx2 * (gs_width-1) + tx3 * (gs_height-1);
        var ty = ty0 * x + ty1 * y + ty2 * (gs_width-1) + ty3 * (gs_height-1);
        return '' + ((tx|0) == tx ? tx : tx.toFixed(2)) + ' ' +
                    ((ty|0) == ty ? ty : ty.toFixed(2));
    }
}
// fontlib.js
var FontLib = (function() {
    var fonts = [];
    var names = {};
    var glyphcache = {};
    var glyphmru = {};
    var glyphcount = 0;

    // Sentinel to simplify moving entries around in the list.
    glyphmru.next = glyphmru;
    glyphmru.prev = glyphmru;

    return {
        lookup:lookup,
        monochrome:monochrome,
        getglyph:getglyph,
        getpaths:getpaths,
        loadFont:loadFont,
    };

    // loadFont(name, data)
    // loadFont(name, mult, data)
    // loadFont(name, multy, multx, data)   // note order: y,x
    // data must be the font data, either a binary or base64 encoded string.
    function loadFont(name /*...args*/) {
        var multx = 100;
        var multy = 100;
        var data = null;

        if (arguments.length == 2) {
            data = arguments[1];
        } else if (arguments.length == 3) {
            multx = multy = +arguments[1] || 100;
            data = arguments[2];
        } else if (arguments.length == 4) {
            multy = +arguments[1] || 100;
            multx = +arguments[2] || 100;
            data = arguments[3];
        } else {
            throw new Error("bwipjs: loadFont: invalid number of arguments");
        }

        var font = STBTT.InitFont(toUint8Array(data));
        font.bwipjs_name = name;
        font.bwipjs_multx = multx;
        font.bwipjs_multy = multy;

        var fontid = fonts.push(font)-1;
        names[name.toUpperCase()] = fontid;
        return fontid;
    }

    // Always returns a valid font-id (default OCR-B)
    function lookup(name) {
        var fontid = names[name.toUpperCase()];
        return fontid === undefined ? 1 : fontid;       // OCR B default
    }

    // Not supported by stbtt
    function monochrome(mono) {
        if (mono) {
            throw new Error('bwipjs: monochrome fonts not implemented');
        }
    }

    function getglyph(fontid, charcode, width, height) {
        fontid   = fontid|0;
        charcode = charcode|0;
        width    = +width;
        height   = +height;
        if (!width || width < 8) {
            width = 8;
        }
        if (!height || height < 8) {
            height = width;
        }
        if (fontid < 0 || fontid >= fonts.length) {
            fontid = 1;     // OCR B default
        }
        if (!charcode || charcode < 32) {
            charcode = 32;
        }

        // In the cache?
        var cachekey = '' + fontid + 'c' + charcode + 'w' + width + 'h' + height;
        var glyph = glyphcache[cachekey];
        if (glyph) {
            // Unthread from the MRU
            glyph.prev.next = glyph.next;
            glyph.next.prev = glyph.prev;

            // Thread back onto the top
            var sntl = glyphmru;
            sntl.next.prev = glyph;
            glyph.next = sntl.next;
            glyph.prev = sntl;
            sntl.next = glyph;

            return glyph;
        }

        var font = fonts[fontid];
        var glyph = STBTT.GetGlyph(font, charcode, width * font.bwipjs_multx / 100,
                                                   height * font.bwipjs_multy / 100) ||
                    STBTT.GetGlyph(font, 0, width * font.bwipjs_multx / 100,
                                                   height * font.bwipjs_multy / 100);

        glyph.bytes = glyph.pixels;
        glyph.cachekey = cachekey;
        glyph.offset = 0;

        //glyph = {
        //      top:font.GlyphTop(),
        //      left:font.GlyphLeft(),
        //      width:font.GlyphWidth(),
        //      height:font.GlyphHeight(),
        //      advance:font.GlyphAdvance(),
        //      bitmap:font.GlyphBitmap(),
        //      offset:0,
        //      cachekey:cachekey,
        //  };

        // Purge old
        if (glyphcount > 250) {
            var sntl = glyphmru;
            var temp = sntl.prev;
            temp.prev.next = sntl;
            sntl.prev = temp.prev;
            temp.next = temp.prev = null;
            delete glyphcache[temp.cachekey];
        } else {
            glyphcount++;
        }

        // Add to cache and to the top of the MRU
        glyphcache[cachekey] = glyph;

        var sntl = glyphmru;
        sntl.next.prev = glyph;
        glyph.next = sntl.next;
        glyph.prev = sntl;
        sntl.next = glyph;

        return glyph;
    }

    function getpaths(fontid, charcode, width, height) {
        fontid   = fontid|0;
        charcode = charcode|0;
        width    = +width;
        height   = +height;
        if (!width || width < 8) {
            width = 8;
        }
        if (!height || height < 8) {
            height = width;
        }
        if (fontid < 0 || fontid >= fonts.length) {
            fontid = 1;     // OCR B default
        }
        if (!charcode || charcode < 32) {
            charcode = 32;
        }

        var font = fonts[fontid];
        return STBTT.GetPaths(font, charcode, width * font.bwipjs_multx / 100,
                                              height * font.bwipjs_multy / 100);
    }
})();

// This is needed to make the default exports traceable by esbuild
// during its tree shaking phase.  See issue #298.
function LoadFont() {
    return FontLib.loadFont.apply(FontLib, Array.prototype.slice.call(arguments));
}
// bwip-js/stb_trutype.js
//
// JavaScript implementation of stb_truetype.h @ https://github.com/nothings/stb.
//
// This file is part of the bwip-js project available at:
//
//      http://metafloor.github.io/bwip-js
//
// Copyright (c) 2019 Mark Warren : MIT LICENSE

// Copyright notice from stb_truetype.h:
//
// MIT License
//
// Copyright (c) 2017 Sean Barrett
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

var STBTT = (function () {

var STBTT_vmove  = 1,
    STBTT_vline  = 2,
    STBTT_vcurve = 3,
    STBTT_vcubic = 4,

    STBTT_PLATFORM_ID_UNICODE   = 0,
    STBTT_PLATFORM_ID_MAC       = 1,
    STBTT_PLATFORM_ID_ISO       = 2,
    STBTT_PLATFORM_ID_MICROSOFT = 3,

    STBTT_UNICODE_EID_UNICODE_1_0       = 0,
    STBTT_UNICODE_EID_UNICODE_1_1       = 1,
    STBTT_UNICODE_EID_ISO_10646         = 2,
    STBTT_UNICODE_EID_UNICODE_2_0_BMP   = 3,
    STBTT_UNICODE_EID_UNICODE_2_0_FULL  = 4,

    STBTT_MS_EID_SYMBOL         = 0,
    STBTT_MS_EID_UNICODE_BMP    = 1,
    STBTT_MS_EID_SHIFTJIS       = 2,
    STBTT_MS_EID_UNICODE_FULL   = 10;

var floor = Math.floor;
var ceil  = Math.ceil;
var sqrt  = Math.sqrt;
var abs   = Math.abs;

// Allocate an array of objects - replaces malloc(sizeof struct * n)
function oalloc(n) {
    var o = [];
    for (var i = 0; i < n; i++) {
        o.push({});
    }
    return o;
}

//static unsigned char stbtt__buf_get8(stbtt__buf * b)
function stbtt__buf_get8(b) {
    return b[b.cursor++]||0;
}

//static unsigned char stbtt__buf_peek8(stbtt__buf * b)
function stbtt__buf_peek8(b) {
    return b[b.cursor];
}

//static void stbtt__buf_seek(stbtt__buf * b, int o)
function stbtt__buf_seek(b, o) {
    b.cursor = (o > b.length || o < 0) ? b.length : o;
}

//static void stbtt__buf_skip(stbtt__buf * b, int o)
function stbtt__buf_skip(b, o) {
    stbtt__buf_seek(b, b.cursor + o);
}

//static unsigned int stbtt__buf_get(stbtt__buf * b, int n)
function stbtt__buf_get(b, n) {
    var v = 0;
    for (var i = 0; i < n; i++) {
        v = (v << 8) | stbtt__buf_get8(b);
    }
    return v;
}

// This function is only called once with a real 'p', all other uses are
// for a NULL buffer.  The for real usage, the code is inlined.
//static stbtt__buf stbtt__new_buf(const void *p, int size)
function stbtt__null_buf() {
    return { length:0 };
}

//static stbtt__buf stbtt__buf_range(const stbtt__buf * b, int o, int s)
function stbtt__buf_range(b, o, s) {
    if (o < 0 || s < 0 || o > b.length || s > b.length - o) {
        return stbtt__null_buf();
    }
    var r = b.subarray(o, o + s);
    r.cursor = 0;
    return r;
}

//static stbtt__buf stbtt__cff_get_index(stbtt__buf * b)
function stbtt__cff_get_index(b) {
    var start = b.cursor;
    var count = stbtt__buf_get(b, 2);
    if (count) {
        var offsize = stbtt__buf_get8(b);
        stbtt__buf_skip(b, offsize * count);
        stbtt__buf_skip(b, stbtt__buf_get(b, offsize) - 1);
    }
    return stbtt__buf_range(b, start, b.cursor - start);
}

//static unsigned int stbtt__cff_int(stbtt__buf * b)
function stbtt__cff_int(b) {
    var b0 = stbtt__buf_get8(b);
    if (b0 >= 32 && b0 <= 246) {
        return b0 - 139;
    } else if (b0 >= 247 && b0 <= 250) {
        return (b0 - 247) * 256 + stbtt__buf_get8(b) + 108;
    } else if (b0 >= 251 && b0 <= 254) {
        return -(b0 - 251) * 256 - stbtt__buf_get8(b) - 108;
    } else if (b0 == 28) {
        return stbtt__buf_get(b, 2);
    } else if (b0 == 29) {
        return stbtt__buf_get(b, 4);
    }
    return 0;
}

//static void stbtt__cff_skip_operand(stbtt__buf * b)
function stbtt__cff_skip_operand(b) {
    var b0 = stbtt__buf_peek8(b);
    if (b0 == 30) {
        stbtt__buf_skip(b, 1);
        while (b.cursor < b.length) {
            var v = stbtt__buf_get8(b);
            if ((v & 0xF) == 0xF || (v >> 4) == 0xF) {
                break;
            }
        }
    } else {
        stbtt__cff_int(b);
    }
}

//static stbtt__buf stbtt__dict_get(stbtt__buf * b, int key)
function stbtt__dict_get(b, key) {
    stbtt__buf_seek(b, 0);
    while (b.cursor < b.length) {
        var start = b.cursor, end, op;
        while (stbtt__buf_peek8(b) >= 28) {
            stbtt__cff_skip_operand(b);
        }
        end = b.cursor;
        op = stbtt__buf_get8(b);
        if (op == 12) {
            op = stbtt__buf_get8(b) | 0x100;
        }
        if (op == key) {
            return stbtt__buf_range(b, start, end - start);
        }
    }
    return stbtt__buf_range(b, 0, 0);
}

//static void stbtt__dict_get_ints(stbtt__buf * b, int key, int outcount, unsigned int *out)
function stbtt__dict_get_ints(b, key, outcount, out) {
    var operands = stbtt__dict_get(b, key);
    for (var i = 0; i < outcount && operands.cursor < operands.length; i++) {
        out[i] = stbtt__cff_int(operands);
    }
}
// single-integer format of above since javascript doesn't have address-of
function stbtt__dict_get_int(b, key, out) {
    var operands = stbtt__dict_get(b, key);
    if (operands.cursor < operands.length) {
        out = stbtt__cff_int(operands);
    }
    return out;
}

//static int stbtt__cff_index_count(stbtt__buf * b)
function stbtt__cff_index_count(b) {
    stbtt__buf_seek(b, 0);
    return stbtt__buf_get(b, 2);
}

//static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)
function stbtt__cff_index_get(b, i) {
    var count, offsize, start, end;
    stbtt__buf_seek(b, 0);
    count = stbtt__buf_get(b, 2);
    offsize = stbtt__buf_get8(b);
    stbtt__buf_skip(b, i * offsize);
    start = stbtt__buf_get(b, offsize);
    end = stbtt__buf_get(b, offsize);
    return stbtt__buf_range(b, 2 + (count + 1) * offsize + start, end - start);
}

// Convert sign-extend a 16-bit integer to JS number
function INT16(n) {
    return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned short ttUSHORT(unsigned char *p)
function ttUSHORT(b, o) {
    return b[o] * 256 + b[o+1];
}

//static short ttSHORT(unsigned char *p)
function ttSHORT(b, o) {
    var n = b[o] * 256 + b[o+1];
    return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned int ttULONG(unsigned char *p)
function ttULONG(b, o) {
    return (b[o] << 24) + (b[o+1] << 16) + (b[o+2] << 8) + b[o+3];
}

//static unsigned int stbtt__find_table(unsigned char *data, unsigned int fontstart, const char *tag)
function stbtt__find_table(data, fontstart, tag) {
    var num_tables = ttUSHORT(data, fontstart + 4);
    var tabledir = fontstart + 12;
    for (var i = 0; i < num_tables; ++i) {
        var loc = tabledir + 16 * i;
        if (data[loc] == tag[0] && data[loc+1] == tag[1] && data[loc+2] == tag[2] && data[loc+3] == tag[3]) {
            return ttULONG(data, loc + 8);
        }
    }
    return 0;
}

//static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)
function stbtt__get_subrs(cff, fontdict) {
    var private_loc = [ 0, 0 ];
    stbtt__dict_get_ints(fontdict, 18, 2, private_loc);
    if (!private_loc[1] || !private_loc[0]) {
        return stbtt__null_buf();
    }
    var pdict = stbtt__buf_range(cff, private_loc[1], private_loc[0]);
    var subrsoff = stbtt__dict_get_int(pdict, 19, 0);
    if (!subrsoff) {
        return stbtt__null_buf();
    }
    stbtt__buf_seek(cff, private_loc[1] + subrsoff);
    return stbtt__cff_get_index(cff);
}

//static int stbtt_InitFont_internal(stbtt_fontinfo * info, unsigned char *data, int fontstart)
function stbtt_InitFont_internal(info, data, fontstart) {
    var cmap, t, i, numTables;

    info.data = data;
    info.fontstart = fontstart;
    info.cff = stbtt__null_buf();

    cmap = stbtt__find_table(data, fontstart, [ 99, 109, 97, 112 ]);        //"cmap"
    info.loca = stbtt__find_table(data, fontstart, [ 108, 111, 99, 97 ]);   //"loca"
    info.head = stbtt__find_table(data, fontstart, [ 104, 101, 97, 100 ]);  //"head"
    info.glyf = stbtt__find_table(data, fontstart, [ 103, 108, 121, 102 ]); //"glyf"
    info.hhea = stbtt__find_table(data, fontstart, [ 104, 104, 101, 97 ]);  //"hhea"
    info.hmtx = stbtt__find_table(data, fontstart, [ 104, 109, 116, 120 ]); //"hmtx"
    info.kern = stbtt__find_table(data, fontstart, [ 107, 101, 114, 110 ]); //"kern"

    if (!cmap || !info.head || !info.hhea || !info.hmtx) {
        return 0;
    }
    if (info.glyf) {
        if (!info.loca) {
            return 0;
        }
    } else {
        var b, topdict, topdictidx, cff,
            cstype = 2, charstrings = 0, fdarrayoff = 0, fdselectoff = 0;

        cff = stbtt__find_table(data, fontstart, [ 67, 70, 70, 32 ]);   //"CFF "
        if (!cff) {
            return 0;
        }

        info.fontdicts = stbtt__null_buf();
        info.fdselect = stbtt__null_buf();

        info.cff = data.subarray(cff); //stbtt__new_buf(data + cff, 512 * 1024 * 1024);
        info.cff.cursor = 0;
        b = info.cff;

        stbtt__buf_skip(b, 2);
        stbtt__buf_seek(b, stbtt__buf_get8(b));

        stbtt__cff_get_index(b);
        topdictidx = stbtt__cff_get_index(b);
        topdict = stbtt__cff_index_get(topdictidx, 0);
        stbtt__cff_get_index(b);
        info.gsubrs = stbtt__cff_get_index(b);

        charstrings = stbtt__dict_get_int(topdict, 17, charstrings);
        cstype = stbtt__dict_get_int(topdict, 0x100 | 6, cstype);
        fdarrayoff = stbtt__dict_get_int(topdict, 0x100 | 36, fdarrayoff);
        fdselectoff = stbtt__dict_get_int(topdict, 0x100 | 37, fdselectoff);
        info.subrs = stbtt__get_subrs(b, topdict);

        if (cstype != 2) {
            return 0;
        }
        if (charstrings == 0) {
            return 0;
        }

        if (fdarrayoff) {
            if (!fdselectoff) {
                return 0;
            }
            stbtt__buf_seek(b, fdarrayoff);
            info.fontdicts = stbtt__cff_get_index(b);
            info.fdselect = stbtt__buf_range(b, fdselectoff, b.length - fdselectoff);
        }

        stbtt__buf_seek(b, charstrings);
        info.charstrings = stbtt__cff_get_index(b);
    }

    t = stbtt__find_table(data, fontstart, [ 109, 97, 120, 112 ]);  //"maxp"
    if (t) {
        info.numGlyphs = ttUSHORT(data, t + 4);
    }
    else {
        info.numGlyphs = 0xffff;
    }

    numTables = ttUSHORT(data, cmap + 2);
    info.index_map = 0;
    for (i = 0; i < numTables; ++i) {
        var encoding_record = cmap + 4 + 8 * i;

        switch (ttUSHORT(data, encoding_record)) {
        case STBTT_PLATFORM_ID_MICROSOFT:
            switch (ttUSHORT(data, encoding_record + 2)) {
            case STBTT_MS_EID_UNICODE_BMP:
            case STBTT_MS_EID_UNICODE_FULL:
                info.index_map = cmap + ttULONG(data, encoding_record + 4);
                break;
            }
            break;
        case STBTT_PLATFORM_ID_UNICODE:
            info.index_map = cmap + ttULONG(data, encoding_record + 4);
            break;
        }
    }
    if (info.index_map == 0) {
        return 0;
    }

    info.indexToLocFormat = ttUSHORT(data, info.head + 50);
    return 1;
}

//extern int stbtt_FindGlyphIndex(const stbtt_fontinfo * info, int unicode_codepoint)
function stbtt_FindGlyphIndex(info, unicode_codepoint) {
    var data = info.data, index_map = info.index_map;

    var format = ttUSHORT(data, index_map + 0);
    if (format == 0) {
        var bytes = ttUSHORT(data, index_map + 2);
        if (unicode_codepoint < bytes - 6) {
            return data[index_map + 6 + unicode_codepoint];
        }
        return 0;
    } else if (format == 6) {
        var first = ttUSHORT(data, index_map + 6),
            count = ttUSHORT(data, index_map + 8);
        if (unicode_codepoint >= first && unicode_codepoint < first + count) {
            return ttUSHORT(data, index_map + 10 + (unicode_codepoint - first) * 2);
        }
        return 0;
    } else if (format == 2) {
        return 0;
    } else if (format == 4) {
        var segcount = ttUSHORT(data, index_map + 6) >> 1,
            searchRange = ttUSHORT(data, index_map + 8) >> 1,
            entrySelector = ttUSHORT(data, index_map + 10),
            rangeShift = ttUSHORT(data, index_map + 12) >> 1,
            endCount = index_map + 14,
            search = endCount;

        if (unicode_codepoint > 0xffff) {
            return 0;
        }

        if (unicode_codepoint >= ttUSHORT(data, search + rangeShift * 2)) {
            search += rangeShift * 2;
        }

        search -= 2;
        while (entrySelector) {
            searchRange >>= 1;
            var end = ttUSHORT(data, search + searchRange * 2);
            if (unicode_codepoint > end) {
                search += searchRange * 2;
            }
            --entrySelector;
        }
        search += 2;

        var offset, start, item = (search - endCount) >>> 1;

        start = ttUSHORT(data, index_map + 14 + segcount * 2 + 2 + 2 * item);
        if (unicode_codepoint < start) {
            return 0;
        }

        offset = ttUSHORT(data, index_map + 14 + segcount * 6 + 2 + 2 * item);
        if (offset == 0) {
            return unicode_codepoint + ttSHORT(data, index_map + 14 + segcount * 4 + 2 + 2 * item);
        }
        return ttUSHORT(data, offset + (unicode_codepoint - start) * 2 +
                                index_map + 14 + segcount * 6 + 2 + 2 * item);
    } else if (format == 12 || format == 13) {
        var ngroups = ttULONG(data, index_map + 12),
            low = 0, high = ngroups;
         while (low < high) {
            var mid = low + ((high - low) >> 1);
            var start_char = ttULONG(data, index_map + 16 + mid * 12);
            var end_char = ttULONG(data, index_map + 16 + mid * 12 + 4);
            if (unicode_codepoint < start_char) {
                high = mid;
            } else if (unicode_codepoint > end_char) {
                low = mid + 1;
            } else {
                var start_glyph = ttULONG(data, index_map + 16 + mid * 12 + 8);
                if (format == 12) {
                    return start_glyph + unicode_codepoint - start_char;
                } else {
                    return start_glyph;
                }
            }
        }
        return 0;
    }
    return 0;
}

//static void stbtt_setvertex(stbtt_vertex * v, unsigned char type, int x, int y, int cx, int cy)
function stbtt_setvertex(v, type, x, y, cx, cy) {
    v.type = type;
    v.x = x;
    v.y = y;
    v.cx = cx;
    v.cy = cy;
}

//static int stbtt__GetGlyfOffset(const stbtt_fontinfo * info, int glyph_index)
function stbtt__GetGlyfOffset(info, glyph_index) {
    var  g1, g2;
    if (glyph_index >= info.numGlyphs) {
        return -1;
    }
    if (info.indexToLocFormat >= 2) {
        return -1;
    }

    if (info.indexToLocFormat == 0) {
        g1 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2) * 2;
        g2 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2 + 2) * 2;
    } else {
        g1 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4);
        g2 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4 + 4);
    }

    return g1 == g2 ? -1 : g1;
}

//extern int stbtt_GetGlyphBox(const stbtt_fontinfo * info, int glyph_index, int *x0, int *y0, int *x1, int *y1)
function stbtt_GetGlyphBox(info, glyph_index, out) {
    if (info.cff.length) {
        stbtt__GetGlyphInfoT2(info, glyph_index, out);
    } else {
        var g = stbtt__GetGlyfOffset(info, glyph_index);
        if (g < 0) {
            return 0;
        }
        out.x0 = ttSHORT(info.data, g + 2);
        out.y0 = ttSHORT(info.data, g + 4);
        out.x1 = ttSHORT(info.data, g + 6);
        out.y1 = ttSHORT(info.data, g + 8);
    }
    return 1;
}

//static int stbtt__close_shape(stbtt_vertex * vertices, int num_vertices, int was_off,
//                   int start_off, int sx, int sy, int scx, int scy, int cx, int cy)
function stbtt__close_shape(vertices, num_vertices, was_off, start_off, sx, sy, scx, scy, cx, cy) {
    if (start_off) {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                            (cx + scx) >> 1, (cy + scy) >> 1, cx, cy);
        }
        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, scx, scy);
    } else {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, cx, cy);
        } else {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vline, sx, sy, 0, 0);
        }
    }
    return num_vertices;
}

//static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo * info, int glyph_index, stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeTT(info, glyph_index) {
    var data = info.data,
        g = stbtt__GetGlyfOffset(info, glyph_index);

    if (g < 0) {
        return null;
    }

    var vertices = [];
    var numberOfContours = ttSHORT(data, g);
    if (numberOfContours > 0) {
        var flags = 0, flagcount,
            i, j = 0, m, n, next_move, was_off = 0, off, start_off = 0,
            x, y, cx, cy, sx, sy, scx, scy;
        var endPtsOfContours = g + 10;
        var ins = ttUSHORT(data, g + 10 + numberOfContours * 2);
        var points = data.subarray(g + 10 + numberOfContours * 2 + 2 + ins);
        var ptsoff = 0;

        n = 1 + ttUSHORT(data, endPtsOfContours + numberOfContours * 2 - 2);
        m = n + 2 * numberOfContours;

        vertices = oalloc(m);
        next_move = 0;
        flagcount = 0;
        off = m - n;

        for (i = 0; i < n; ++i) {
            if (flagcount == 0) {
                flags = points[ptsoff++];
                if (flags & 8) {
                    flagcount = points[ptsoff++];
                }
            } else {
                --flagcount;
            }
            vertices[off + i].type = flags;
        }

        x = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 2) {
                var dx = points[ptsoff++];
                x += (flags & 16) ? dx : -dx;
            } else {
                if (!(flags & 16)) {
                    x = x + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].x = x;
        }

        y = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 4) {
                var dy = points[ptsoff++];
                y += (flags & 32) ? dy : -dy;
            } else {
                if (!(flags & 32)) {
                    y = y + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].y = y;
        }

        var num_vertices = 0;
        sx = sy = cx = cy = scx = scy = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            x = vertices[off + i].x;
            y = vertices[off + i].y;

            if (next_move == i) {
                if (i != 0) {
                    num_vertices = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
                                            sx, sy, scx, scy, cx, cy);
                }
                start_off = !(flags & 1);
                if (start_off) {
                    scx = x;
                    scy = y;
                    if (!(vertices[off + i + 1].type & 1)) {
                        sx = (x + vertices[off + i + 1].x) >> 1;
                        sy = (y + vertices[off + i + 1].y) >> 1;
                    } else {
                        sx = vertices[off + i + 1].x;
                        sy = vertices[off + i + 1].y;
                        ++i;
                    }
                } else {
                    sx = x;
                    sy = y;
                }
                stbtt_setvertex(vertices[num_vertices++], STBTT_vmove, sx, sy, 0, 0);
                was_off = 0;
                next_move = 1 + ttUSHORT(data, endPtsOfContours + j * 2);
                ++j;
            } else {
                if (!(flags & 1)) {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                                        (cx + x) >> 1, (cy + y) >> 1, cx, cy);
                    }
                    cx = x;
                    cy = y;
                    was_off = 1;
                } else {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, x, y, cx, cy);
                    } else {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vline, x, y, 0, 0);
                    }
                    was_off = 0;
                }
            }
        }
        vertices.length = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
                                                sx, sy, scx, scy, cx, cy);
    } else if (numberOfContours == -1) {
        var more = 1;
        var comp = g + 10;
         while (more) {
            var flags, gidx, mtx = [ 1, 0, 0, 1, 0, 0 ];

            flags = ttSHORT(data, comp);
            comp += 2;
            gidx = ttSHORT(data, comp);
            comp += 2;

            if (flags & 2) {
                if (flags & 1) {
                    mtx[4] = ttSHORT(data, comp);
                    comp += 2;
                    mtx[5] = ttSHORT(data, comp);
                    comp += 2;
                } else {
                    mtx[4] = stbtt__buf_get8(data, comp);
                    comp += 1;
                    mtx[5] = stbtt__buf_get8(data, comp);
                    comp += 1;
                }
            }
            if (flags & (1 << 3)) {
                mtx[0] = mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
            } else if (flags & (1 << 6)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            } else if (flags & (1 << 7)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[2] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            }

            var m = sqrt(mtx[0] * mtx[0] + mtx[1] * mtx[1]);
            var n = sqrt(mtx[2] * mtx[2] + mtx[3] * mtx[3]);
            var comp_verts = stbtt_GetGlyphShape(info, gidx);
            if (comp_verts.length > 0) {
                for (var i = 0, l = comp_verts.length; i < l; ++i) {
                    var v = comp_verts[i], x, y;
                    x = v.x;
                    y = v.y;
                    v.x = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.y = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                    x = v.cx;
                    y = v.cy;
                    v.cx = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.cy = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                }

                vertices = vertices.concat(comp_verts);
            }
            more = flags & (1 << 5);
        }
    }
    //console.log('vertices(' + vertices.length + ')');
    //for (var i = 0; i < vertices.length; i++) {
    //  var pt = vertices[i];
    //  console.log(`${i}: ${pt.x},${pt.y} / ${pt.cx},${pt.cy} / ${pt.type}`);
    //}

    return vertices;
}

//static void stbtt__track_vertex(stbtt__csctx * c, int x, int y)
function stbtt__track_vertex(c, x, y) {
    if (x > c.max_x || !c.started) {
        c.max_x = x;
    }
    if (y > c.max_y || !c.started) {
        c.max_y = y;
    }
    if (x < c.min_x || !c.started) {
        c.min_x = x;
    }
    if (y < c.min_y || !c.started) {
        c.min_y = y;
    }
    c.started = 1;
}

//static void stbtt__csctx_v(stbtt__csctx * c, unsigned char type, int x, int y, int cx, int cy, int cx1, int cy1)
function stbtt__csctx_v(c, type, x, y, cx, cy, cx1, cy1) {
    stbtt__track_vertex(c, x, y);
    if (type == STBTT_vcubic) {
        stbtt__track_vertex(c, cx, cy);
        stbtt__track_vertex(c, cx1, cy1);
    }
    var v = {};
    stbtt_setvertex(v, type, x, y, cx, cy);
    v.cx1 = cx1;
    v.cy1 = cy1;
    c.vertices.push(v);
 }

//static void stbtt__csctx_close_shape(stbtt__csctx * ctx)
function stbtt__csctx_close_shape(ctx) {
    if (ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
        stbtt__csctx_v(ctx, STBTT_vline, ctx.first_x, ctx.first_y, 0, 0, 0, 0);
    }
}

//static void stbtt__csctx_rmove_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rmove_to(ctx, dx, dy) {
    stbtt__csctx_close_shape(ctx);
    ctx.first_x = ctx.x = ctx.x + dx;
    ctx.first_y = ctx.y = ctx.y + dy;
    stbtt__csctx_v(ctx, STBTT_vmove, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rline_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rline_to(ctx, dx, dy) {
    ctx.x += dx;
    ctx.y += dy;
    stbtt__csctx_v(ctx, STBTT_vline, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rccurve_to(stbtt__csctx * ctx, float dx1, float dy1, float dx2,
//                                  float dy2, float dx3, float dy3)
function stbtt__csctx_rccurve_to(ctx, dx1, dy1, dx2, dy2, dx3, dy3) {
    var cx1 = ctx.x + dx1,
        cy1 = ctx.y + dy1,
        cx2 = cx1 + dx2,
        cy2 = cy1 + dy2;
    ctx.x = cx2 + dx3;
    ctx.y = cy2 + dy3;
    stbtt__csctx_v(ctx, STBTT_vcubic, ctx.x, ctx.y, cx1, cy1, cx2, cy2);
}

//static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)
function stbtt__get_subr(b, n) {
    var count = stbtt__cff_index_count(b);
    var bias = 107;
    if (count >= 33900) {
        bias = 32768;
    } else if (count >= 1240) {
        bias = 1131;
    }
    n += bias;
    if (n < 0 || n >= count) {
        return stbtt__null_buf();
    }
    return stbtt__cff_index_get(b, n);
}

//static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo * info, int glyph_index)
function stbtt__cid_get_glyph_subrs(info, glyph_index) {
    var fdselect = info.fdselect;
    var nranges, start, end, v, fmt, fdselector = -1, i;

    stbtt__buf_seek(fdselect, 0);
    fmt = stbtt__buf_get8(fdselect);
    if (fmt == 0) {
        stbtt__buf_skip(fdselect, glyph_index);
        fdselector = stbtt__buf_get8(fdselect);
    } else if (fmt == 3) {
        nranges = stbtt__buf_get(fdselect, 2);
        start = stbtt__buf_get(fdselect, 2);
        for (i = 0; i < nranges; i++) {
            v = stbtt__buf_get8(fdselect);
            end = stbtt__buf_get(fdselect, 2);
            if (glyph_index >= start && glyph_index < end) {
                fdselector = v;
                break;
            }
            start = end;
        }
    }
    if (fdselector == -1) {
        stbtt__null_buf();
    }
    return stbtt__get_subrs(info.cff, stbtt__cff_index_get(info.fontdicts, fdselector));
}

//static int stbtt__run_charstring(const stbtt_fontinfo * info, int glyph_index,
//                                 stbtt__csctx * c)
function stbtt__run_charstring(info, glyph_index, c) {
    var in_header = 1, maskbits = 0, subr_stack_height = 0, sp = 0, v, i, b0,
        has_subrs = 0, clear_stack,
        s = [], subr_stack = [], subrs = info.subrs, b, f;

    b = stbtt__cff_index_get(info.charstrings, glyph_index);
    while (b.cursor < b.length) {
        i = 0;
        clear_stack = 1;
        b0 = stbtt__buf_get8(b);
        switch (b0) {
        case 0x13:
        case 0x14:
            if (in_header) {
                maskbits += (sp / 2)|0;
            }
            in_header = 0;
            stbtt__buf_skip(b, ((maskbits + 7) / 8)|0);
            break;

        case 0x01:
        case 0x03:
        case 0x12:
        case 0x17:
            maskbits += (sp / 2)|0;
            break;

        case 0x15:
            in_header = 0;
            if (sp < 2) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 2], s[sp - 1]);
            break;
        case 0x04:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, 0, s[sp - 1]);
            break;
        case 0x16:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 1], 0);
            break;

        case 0x05:
            if (sp < 2) {
                return 0;
            }
            for (; i + 1 < sp; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            break;

        case 0x07:
            if (sp < 1) {
                return 0;
            }
            for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
            }
            break;
        case 0x06:
            if (sp < 1) {
                return 0;
            }
            for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
            }
            break;

        case 0x1F:
            if (sp < 4) {
                return 0;
            }
            for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
            }
            break;
        case 0x1E:
            if (sp < 4) {
                return 0;
            }
            for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
            }
            break;

        case 0x08:
            if (sp < 6) {
                return 0;
            }
            for (; i + 5 < sp; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
            }
            break;

        case 0x18:
            if (sp < 8) {
                return 0;
            }
            for (; i + 5 < sp - 2; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
            }
            if (i + 1 >= sp) {
                return 0;
            }
            stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            break;

        case 0x19:
            if (sp < 8) {
                return 0;
            }
            for (; i + 1 < sp - 6; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            if (i + 5 >= sp) {
                return 0;
            }
            stbtt__csctx_rccurve_to(c, s[i], s[i + 1], s[i + 2],
                                    s[i + 3], s[i + 4], s[i + 5]);
            break;

        case 0x1A:
        case 0x1B:
            if (sp < 4) {
                return 0;
            }
            f = 0.0;
            if (sp & 1) {
                f = s[i];
                i++;
            }
            for (; i + 3 < sp; i += 4) {
                if (b0 == 0x1B) {
                    stbtt__csctx_rccurve_to(c, s[i], f,
                                            s[i + 1],
                                            s[i + 2],
                                            s[i + 3], 0.0);
                } else {
                    stbtt__csctx_rccurve_to(c, f, s[i],
                                            s[i + 1],
                                            s[i + 2], 0.0,
                                            s[i + 3]);
                }
                f = 0.0;
            }
            break;

        case 0x0A:
            if (!has_subrs) {
                if (info.fdselect.length) {
                    subrs = stbtt__cid_get_glyph_subrs(info, glyph_index);
                }
                has_subrs = 1;
            }

        case 0x1D:
            if (sp < 1) {
                return 0;
            }
            v = s[--sp]|0;
            if (subr_stack_height >= 10) {
                return 0;
            }
            subr_stack[subr_stack_height++] = b;
            b = stbtt__get_subr(b0 == 0x0A ? subrs : info.gsubrs, v);
            if (b.length == 0) {
                return 0;
            }
            b.cursor = 0;
            clear_stack = 0;
            break;

        case 0x0B:
            if (subr_stack_height <= 0) {
                return 0;
            }
            b = subr_stack[--subr_stack_height];
            clear_stack = 0;
            break;

        case 0x0E:
            stbtt__csctx_close_shape(c);
            return 1;

        case 0x0C:
            var dx1, dx2, dx3, dx4, dx5, dx6, dy1, dy2, dy3, dy4, dy5, dy6,
                dx, dy, b1 = stbtt__buf_get8(b);
            switch (b1) {
            case 0x22:
                if (sp < 7) {
                    return 0;
                }
                dx1 = s[0];
                dx2 = s[1];
                dy2 = s[2];
                dx3 = s[3];
                dx4 = s[4];
                dx5 = s[5];
                dx6 = s[6];
                stbtt__csctx_rccurve_to(c, dx1, 0, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, -dy2, dx6, 0);
                break;

            case 0x23:
                if (sp < 13) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = s[10];
                dy6 = s[11];

                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            case 0x24:
                if (sp < 9) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dx4 = s[5];
                dx5 = s[6];
                dy5 = s[7];
                dx6 = s[8];
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, dy5, dx6, -(dy1 + dy2 + dy5));
                break;

            case 0x25:
                if (sp < 11) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = dy6 = s[10];
                dx = dx1 + dx2 + dx3 + dx4 + dx5;
                dy = dy1 + dy2 + dy3 + dy4 + dy5;
                if (abs(dx) > abs(dy)) {
                    dy6 = -dy;
                } else {
                    dx6 = -dx;
                }
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            default:
                return 0;
            }
            break;

        default:
            if (b0 != 255 && b0 != 28 && (b0 < 32 || b0 > 254)) {
                return 0;
            }
            if (b0 == 255) {
                // f = (float)(stbtt_int32)stbtt__buf_get32(&b) / 0x10000;
                f = (stbtt__buf_get(b, 4)|0) / 0x10000;
            } else {
                stbtt__buf_skip(b, -1);
                // f = (float)(stbtt_int16)stbtt__cff_int(&b);
                f = ((stbtt__cff_int(b)<<16)|0)>>16;
            }
            if (sp >= 48) {
                return 0;
            }
            s[sp++] = f;
            clear_stack = 0;
            break;
        }
        if (clear_stack) {
            sp = 0;
        }
    }
    return 0;
}

function stbtt__csctx_init() {
    return { started:0, first_x:0, first_y:0, x:0, y:0,
            min_x:0, max_x:0, min_y:0, max_y:0,
            vertices:[]
        };
}

//static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo * info, int glyph_index,
//                                  stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeT2(info, glyph_index) {
    var output_ctx = stbtt__csctx_init();
    if (stbtt__run_charstring(info, glyph_index, output_ctx)) {
        return output_ctx.vertices;
    }
    return null;
}

//static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo * info, int glyph_index, int *x0,
//                      int *y0, int *x1, int *y1)
function stbtt__GetGlyphInfoT2(info, glyph_index, out) {
    var c = stbtt__csctx_init();
    var r = stbtt__run_charstring(info, glyph_index, c);
    out.x0 = r ? c.min_x : 0;
    out.y0 = r ? c.min_y : 0;
    out.x1 = r ? c.max_x : 0;
    out.y1 = r ? c.max_y : 0;
    return r && c.vertices ? c.vertices.length : 0;
}

//extern int stbtt_GetGlyphShape(const stbtt_fontinfo * info, int glyph_index,
//                               stbtt_vertex ** pvertices)
function stbtt_GetGlyphShape(info, glyph_index) {
    if (!info.cff.length) {
        return stbtt__GetGlyphShapeTT(info, glyph_index);
    } else {
        return stbtt__GetGlyphShapeT2(info, glyph_index);
    }
}

//extern void stbtt_GetGlyphHMetrics(const stbtt_fontinfo * info, int glyph_index,
//                       int *advanceWidth, int *leftSideBearing)
function stbtt_GetGlyphHMetrics(info, glyph_index) {
    var numOfLongHorMetrics = ttUSHORT(info.data, info.hhea + 34);
    if (glyph_index < numOfLongHorMetrics) {
        return {
                advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * glyph_index),
                leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * glyph_index + 2)
            };
    } else {
        return {
                advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * (numOfLongHorMetrics - 1)),
                leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * numOfLongHorMetrics +
                                            2 * (glyph_index - numOfLongHorMetrics))
            };
    }
}

//extern void stbtt_GetCodepointHMetrics(const stbtt_fontinfo * info, int codepoint,
//                           int *advanceWidth, int *leftSideBearing)
function stbtt_GetCodepointHMetrics(info, codepoint) {
     return stbtt_GetGlyphHMetrics(info, stbtt_FindGlyphIndex(info, codepoint));
}

//extern void stbtt_GetFontVMetrics(const stbtt_fontinfo * info, int *ascent, int *descent, int *lineGap)
function stbtt_GetFontVMetrics(info) {
    return {
        ascent: ttSHORT(info.data, info.hhea + 4),
        descent:ttSHORT(info.data, info.hhea + 6),
        linegap:ttSHORT(info.data, info.hhea + 8),
    };
}

//extern void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo * font, int glyph,
//                              float scale_x, float scale_y, float shift_x, float shift_y,
//                              int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, shift_x, shift_y) {
    var tmp = {};
    if (!stbtt_GetGlyphBox(font, glyph, tmp)) {
        return { x0:0, y0:0, x1:0, y1:0 };
    }
    return {
            x0:floor(tmp.x0 * scale_x + shift_x),
            y0:floor(-tmp.y1 * scale_y + shift_y),
            x1:ceil(tmp.x1 * scale_x + shift_x),
            y1:ceil(-tmp.y0 * scale_y + shift_y),
        };
}

//extern void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo * font,
//                                    int codepoint, float scale_x, float scale_y, float shift_x,
//                                    float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, shift_x, shift_y) {
    return stbtt_GetGlyphBitmapBoxSubpixel(font, stbtt_FindGlyphIndex(font, codepoint),
                                            scale_x, scale_y, shift_x, shift_y);
}

//extern void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo * font, int codepoint,   float scale_x, float scale_y,
//                                      int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBox(font, codepoint, scale_x, scale_y) {
    return stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, 0, 0);
}

//static stbtt__active_edge *stbtt__new_active(stbtt__hheap * hh, stbtt__edge * e, int off_x, float start_point, void *userdata)
function stbtt__new_active(e, off_x, start_point) {
    var dxdy = (e.x1 - e.x0) / (e.y1 - e.y0);
    return {
        fdx:dxdy,
        fdy:dxdy != 0.0 ? (1.0 / dxdy) : 0.0,
        fx:(e.x0 + dxdy * (start_point - e.y0)) - (off_x|0),
        direction:e.invert ? 1.0 : -1.0,
        sy:e.y0,
        ey:e.y1,
        next:0,
    };
}

//static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge * e,
//                           float x0, float y0, float x1, float y1)
function stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1) {
    x = x|0;
    if (y0 == y1) {
        return;
    }
    if (y0 > e.ey) {
        return;
    }
    if (y1 < e.sy) {
        return;
    }
    if (y0 < e.sy) {
        x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
        y0 = e.sy;
    }
    if (y1 > e.ey) {
        x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
        y1 = e.ey;
    }

    if (x0 <= x && x1 <= x) {
        scanline[x] += e.direction * (y1 - y0);
    } else if (x0 >= x + 1 && x1 >= x + 1) {

    } else {
        scanline[x] += e.direction * (y1 - y0) * (1 - ((x0 - x) + (x1 - x)) / 2);
    }
}

//static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len,
//                             stbtt__active_edge * e, float y_top)
// The C implementation passed scanline_fill as a +1 pointer on the call, and then -1 in
// places in this function.  That doesn't work with array-views, so we reverse the handling.
function stbtt__fill_active_edges_new(scanline, scanline_fill, len, e, y_top) {
    var y_bottom = y_top + 1;
    while (e) {
        if (e.fdx == 0) {
            var x0 = e.fx;
            if (x0 < len) {
                if (x0 >= 0) {
                    stbtt__handle_clipped_edge(scanline, x0, e, x0, y_top, x0, y_bottom);
                    stbtt__handle_clipped_edge(scanline_fill, x0+1, e, x0, y_top, x0, y_bottom);
                } else {
                    stbtt__handle_clipped_edge(scanline_fill, 0, e, x0, y_top, x0, y_bottom);
                }
            }
        } else {
            var x0 = e.fx,
                dx = e.fdx,
                xb = x0 + dx,
                x_top, x_bottom,
                sy0, sy1,
                dy = e.fdy;

            if (e.sy > y_top) {
                x_top = x0 + dx * (e.sy - y_top);
                sy0 = e.sy;
            } else {
                x_top = x0;
                sy0 = y_top;
            }
            if (e.ey < y_bottom) {
                x_bottom = x0 + dx * (e.ey - y_top);
                sy1 = e.ey;
            } else {
                x_bottom = xb;
                sy1 = y_bottom;
            }

            if (x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
                if ((x_top|0) == (x_bottom|0)) {
                    var height = sy1 - sy0,
                        x = x_top|0;
                    scanline[x] += e.direction * (1 - ((x_top - x) + (x_bottom - x)) / 2) * height;
                    scanline_fill[x+1] += e.direction * height;
                } else {
                    var t, x, x1, x2, y_crossing, step, sign, area;
                    if (x_top > x_bottom) {
                        sy0 = y_bottom - (sy0 - y_top);
                        sy1 = y_bottom - (sy1 - y_top);
                        t = sy0, sy0 = sy1, sy1 = t;
                        t = x_bottom, x_bottom = x_top, x_top = t;
                        dx = -dx;
                        dy = -dy;
                        t = x0, x0 = xb, xb = t;
                    }

                    x1 = x_top|0;
                    x2 = x_bottom|0;
                    y_crossing = (x1 + 1 - x0) * dy + y_top;
                    sign = e.direction;
                    area = sign * (y_crossing - sy0);

                    scanline[x1] += area * (1 - ((x_top - x1) + (x1 + 1 - x1)) / 2);

                    step = sign * dy;
                    for (x = x1 + 1; x < x2; ++x) {
                        scanline[x] += area + step / 2;
                        area += step;
                    }
                    y_crossing += dy * (x2 - (x1 + 1));

                    scanline[x2] += area + sign * (1 - ((x2 - x2) + (x_bottom - x2)) / 2) *
                                                (sy1 - y_crossing);
                    scanline_fill[x2+1] += sign * (sy1 - sy0);
                }
            } else {
                for (var x = 0; x < len; ++x) {
                    var y0 = y_top,
                        x1 = x,
                        x2 = x + 1,
                        x3 = xb,
                        y3 = y_bottom,
                        y1 = (x - x0) / dx + y_top,
                        y2 = (x + 1 - x0) / dx + y_top;

                    if (x0 < x1 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x1 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x1 && x3 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x3 < x1 && x0 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x2 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x2 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x3, y3);
                    }
                }
            }
        }
        e = e.next;
    }
}

//static void stbtt__rasterize_sorted_edges(stbtt__bitmap * result, stbtt__edge * e, int n,
//                              int vsubsample, int off_x, int off_y, void *userdata)
function stbtt__rasterize_sorted_edges(result, edges, nedges, vsubsample, off_x, off_y) {
    vsubsample |= 0, off_x |= 0, off_y |= 0;
    var active = null, z;
    var y = off_y, j = 0, i;
    var scanline = new Float32Array(result.w * 2 + 1);
    var scanline2 = scanline.subarray(result.w);
    var eoff = 0;

    edges[nedges].y0 = off_y + result.h + 1;
    while (j < result.h) {
        var scan_y_top = y + 0.0,
            scan_y_bottom = y + 1.0,
            step = active;

        // F'ing IE
        if (scanline.fill) { scanline.fill(0); }
        else { for (var $i = 0, $l = scanline.length; $i < $l; $i++) scanline[$i] = 0; }

        while (step) {
            z = step;
            step = z.next;
            if (z.ey <= scan_y_top) {
                z.direction = 0;
            } else {
            }
        }

        while (edges[eoff].y0 <= scan_y_bottom) {
            if (edges[eoff].y0 != edges[eoff].y1) {
                z = stbtt__new_active(edges[eoff], off_x, scan_y_top);
                z.next = active;
                active = z;
            }
            ++eoff;
        }

        if (active) {
            // C implementation passed scanline2+1.  See function for details.
            stbtt__fill_active_edges_new(scanline, scanline2, result.w, active, scan_y_top);
        }
        for (var i = 0, sum = 0; i < result.w; ++i) {
            var k, m;
            sum += scanline2[i];
            k = scanline[i] + sum;
            k = abs(k) * 255 + 0.5;
            m = k>>>0;
            if (m > 255) {
                m = 255;
            }
            result.pixels[j * result.stride + i] = m;
        }

        step = active;
        while (step) {
            z = step;
            z.fx += z.fdx;
            step = z.next;
        }
        ++y;
        ++j;
    }
}

//static void stbtt__sort_edges_ins_sort(stbtt__edge * p, int n)
function stbtt__sort_edges_ins_sort(p, n) {
    for (var i = 1; i < n; ++i) {
        var t = p[i], j = i;
        while (j > 0 && t.y0 < p[j-1].y0) {
             p[j] = p[j - 1];
            --j;
        }
        if (i != j) {
            p[j] = t;
        }
    }
}

//static void stbtt__sort_edges_quicksort(stbtt__edge * p, int n)
// The C implementation messed with the p pointer.  JS uses an offset instead.
function stbtt__sort_edges_quicksort(p, o, n) {
    while (n > 12) {
        var t, c, i, j, z,
            m = n >> 1,
            c01 = p[o].y0 < p[o+m].y0,
            c12 = p[o+m].y0 < p[o+n-1].y0;

        if (c01 != c12) {
            c = p[o].y0 < p[o+n-11].y0;
            z = (c == c12) ? 0 : n - 1;
            t = p[o+z];
            p[o+z] = p[o+m];
            p[o+m] = t;
        }

        t = p[o];
        p[o] = p[o+m];
        p[o+m] = t;

        i = 1;
        j = n - 1;
        for (;;) {
            for ( ; p[o+i].y0 < p[o].y0; ++i) {
            }
            for ( ; p[o].y0 < p[o+j].y0; --j) {
            }
            if (i >= j) {
                break;
            }
            t = p[o+i];
            p[o+i] = p[o+j];
            p[o+j] = t;

            ++i;
            --j;
        }

        if (j < n - i) {
            stbtt__sort_edges_quicksort(p, o, j);
            o += i;
            n -= i;
        } else {
            stbtt__sort_edges_quicksort(p, o + i, n - i);
            n = j;
        }
    }
}

//static void stbtt__sort_edges(stbtt__edge * p, int n)
function stbtt__sort_edges(p, n) {
    stbtt__sort_edges_quicksort(p, 0, n);
    stbtt__sort_edges_ins_sort(p, n);
}

//static void stbtt__rasterize(stbtt__bitmap * result, stbtt__point * pts, int *wcount,
//                 int windings, float scale_x, float scale_y, float shift_x,
//                 float shift_y, int off_x, int off_y, int invert,
//                 void *userdata)
function stbtt__rasterize(result, pts, wcount, scale_x, scale_y, shift_x, shift_y, off_x, off_y, invert) {
    var y_scale_inv = invert ? -scale_y : scale_y,
        e, n, i, j, k, m,
        vsubsample = 1;

    n = 0;
    for (i = 0; i < wcount.length; ++i) {
        n += wcount[i];
    }

    e = oalloc(n + 1);
    n = 0;
    m = 0;
    for (i = 0; i < wcount.length; ++i) {
        var p = m;
        m += wcount[i];
        j = wcount[i] - 1;
        for (k = 0; k < wcount[i]; j = k++) {
            var a = k, b = j;
            if (pts[p+j].y == pts[p+k].y) {
                continue;
            }

            e[n].invert = 0;
            if (invert ? pts[p+j].y > pts[p+k].y : pts[p+j].y < pts[p+k].y) {
                e[n].invert = 1;
                a = j, b = k;
            }
            e[n].x0 = pts[p+a].x * scale_x + shift_x;
            e[n].y0 = (pts[p+a].y * y_scale_inv + shift_y) * vsubsample;
            e[n].x1 = pts[p+b].x * scale_x + shift_x;
            e[n].y1 = (pts[p+b].y * y_scale_inv + shift_y) * vsubsample;
            ++n;
        }
    }

    stbtt__sort_edges(e, n);
    stbtt__rasterize_sorted_edges(result, e, n, vsubsample, off_x, off_y);
 }

//static int stbtt__tesselate_curve(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float objspace_flatness_squared, int n)
function stbtt__tesselate_curve(points, x0, y0, x1, y1, x2, y2, objspace_flatness_squared, n) {
    var mx = (x0 + 2 * x1 + x2) / 4,
        my = (y0 + 2 * y1 + y2) / 4,
        dx = (x0 + x2) / 2 - mx,
        dy = (y0 + y2) / 2 - my;
    if (n > 16) {
        return 1;
    }
    if (dx * dx + dy * dy > objspace_flatness_squared) {
        stbtt__tesselate_curve(points, x0, y0, (x0 + x1) / 2.0, (y0 + y1) / 2.0, mx, my,
                               objspace_flatness_squared, n + 1);
        stbtt__tesselate_curve(points, mx, my, (x1 + x2) / 2.0, (y1 + y2) / 2.0, x2, y2,
                               objspace_flatness_squared, n + 1);
    } else {
        points.push({ x:x2, y:y2 });
    }
    return 1;
}

//static void stbtt__tesselate_cubic(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float x3, float y3, float objspace_flatness_squared, int n)
function stbtt__tesselate_cubic(points, x0, y0, x1, y1, x2, y2, x3, y3, objspace_flatness_squared, n) {
    var dx0 = x1 - x0,
        dy0 = y1 - y0,
        dx1 = x2 - x1,
        dy1 = y2 - y1,
        dx2 = x3 - x2,
        dy2 = y3 - y2,
        dx = x3 - x0,
        dy = y3 - y0,
        longlen = sqrt(dx0 * dx0 + dy0 * dy0) +
                  sqrt(dx1 * dx1 + dy1 * dy1) +
                  sqrt(dx2 * dx2 + dy2 * dy2),
        shortlen = sqrt(dx * dx + dy * dy),
        flatness_squared = longlen * longlen - shortlen * shortlen;
    if (n > 16) {
        return;
    }

    if (flatness_squared > objspace_flatness_squared) {
        var x01 = (x0 + x1) / 2,
            y01 = (y0 + y1) / 2,
            x12 = (x1 + x2) / 2,
            y12 = (y1 + y2) / 2,
            x23 = (x2 + x3) / 2,
            y23 = (y2 + y3) / 2,
            xa = (x01 + x12) / 2,
            ya = (y01 + y12) / 2,
            xb = (x12 + x23) / 2,
            yb = (y12 + y23) / 2,
            mx = (xa + xb) / 2,
            my = (ya + yb) / 2;

        stbtt__tesselate_cubic(points, x0, y0, x01, y01, xa, ya, mx, my,
                                objspace_flatness_squared, n + 1);
        stbtt__tesselate_cubic(points, mx, my, xb, yb, x23, y23, x3, y3,
                                objspace_flatness_squared, n + 1);
    } else {
        points.push({ x:x3, y:y3 });
    }
}

//static stbtt__point *stbtt_FlattenCurves(stbtt_vertex * vertices, int num_verts,
//        float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)
function stbtt_FlattenCurves(vertices, objspace_flatness, contour_lengths) {
    var points = [],
        objspace_flatness_squared = objspace_flatness * objspace_flatness,
        n = -1, start = 0,
        x = 0, y = 0;
    for (var i = 0, nverts = vertices.length; i < nverts; ++i) {
        switch (vertices[i].type) {
        case STBTT_vmove:
            if (n >= 0) {
                contour_lengths[n] = points.length - start;
            }
            ++n;
            start = points.length;
            x = vertices[i].x, y = vertices[i].y;
            points.push({ x:x, y:y });
            break;
        case STBTT_vline:
            x = vertices[i].x, y = vertices[i].y;
            points.push({ x:x, y:y });
            break;
        case STBTT_vcurve:
            stbtt__tesselate_curve(points, x, y, vertices[i].cx, vertices[i].cy,
                                   vertices[i].x, vertices[i].y, objspace_flatness_squared, 0);
            x = vertices[i].x, y = vertices[i].y;
            break;
        case STBTT_vcubic:
            stbtt__tesselate_cubic(points, x, y, vertices[i].cx, vertices[i].cy,
                                   vertices[i].cx1, vertices[i].cy1, vertices[i].x, vertices[i].y,
                                   objspace_flatness_squared, 0);
            x = vertices[i].x, y = vertices[i].y;
            break;
        }
    }
    contour_lengths[n] = points.length - start;

    //console.log("--cl(" + (n+1) + '):');
    //for (var i = 0; i <= n; i++) {
    //  console.log(" %d", contour_lengths[i]);
    //}
    //console.log("\n--pts(" + points.length + '):');
    //for (var i = 0; i < points.length; i++) {
    //  var pt = points[i];
    //  console.log(i + ': ' + pt.x  + ',' + pt.y);
    //}

    return points;
}

//extern void stbtt_Rasterize(stbtt__bitmap * result, float flatness_in_pixels,
//                stbtt_vertex * vertices, int num_verts, float scale_x,
//                float scale_y, float shift_x, float shift_y, int x_off,
//                int y_off, int invert, void *userdata)
function stbtt_Rasterize(result, flatness_in_pixels, vertices, scale_x, scale_y, shift_x, shift_y,
                         x_off, y_off, invert) {
    x_off |= 0, y_off |= 0;
    var scale = scale_x > scale_y ? scale_y : scale_x,
        wcount = [],
        windings = stbtt_FlattenCurves(vertices, flatness_in_pixels / scale, wcount);
    if (windings) {
        stbtt__rasterize(result, windings, wcount, scale_x, scale_y,
                         shift_x, shift_y, x_off, y_off, invert);
    }
}

//extern void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo * info,
//                              unsigned char *output, int out_w, int out_h,
//                              int out_stride, float scale_x, float scale_y,
//                              float shift_x, float shift_y, int glyph)
function stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
                                    scale_x, scale_y, shift_x, shift_y, glyph) {
    var vertices = stbtt_GetGlyphShape(info, glyph);
    var gbm = {};
    var rect = stbtt_GetGlyphBitmapBoxSubpixel(info, glyph, scale_x, scale_y, shift_x, shift_y);
    gbm.pixels = buffer;
    gbm.w = out_w|0;
    gbm.h = out_h|0;
    gbm.stride = out_stride|0;

    if (gbm.w && gbm.h) {
        stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, shift_x, shift_y, rect.x0, rect.y0, 1);
    }
}

//extern void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo * info,
//                                  unsigned char *output, int out_w,
//                                  int out_h, int out_stride, float scale_x,
//                                  float scale_y, float shift_x,
//                                  float shift_y, int codepoint)
function stbtt_MakeCodepointBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
                                    scale_x, scale_y, shift_x, shift_y, codepoint) {
    stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
                                  scale_x, scale_y, shift_x, shift_y,
                                  stbtt_FindGlyphIndex(info, codepoint));
}

//extern int stbtt_InitFont(stbtt_fontinfo * info, const unsigned char *data, int offset)
function stbtt_InitFont(font, data, offset) {
    return stbtt_InitFont_internal(font, data, offset);
}


function InitFont(data) {
    var font = {};
    if (!stbtt_InitFont_internal(font, data, 0)) {
        return null;
    }

    var vm = stbtt_GetFontVMetrics(font);

    font.ascent = vm.ascent;
    font.descent = vm.descent;
    font.linegap = vm.linegap;

    return font;
}

function GetGlyph(font, codepoint, size_x, size_y) {
    size_y = size_y || size_x;
    var scale_x = size_x / font.ascent;
    var scale_y = size_y / font.ascent;

    var glyph = stbtt_FindGlyphIndex(font, codepoint);
    if (!glyph && codepoint) {
        return null;
    }

    var vertices = stbtt_GetGlyphShape(font, glyph);
    var rect = stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, 0, 0);
    var width = rect.x1 - rect.x0;
    var height = rect.y1 - rect.y0;
    var pixels = null;

    if (width && height) {
        var gbm = {
            pixels : (pixels = new Uint8Array(width * height)),
            w : width,
            h : height,
            stride : width,
        }
        stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, 0, 0, rect.x0, rect.y0, 1);
    }

    var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);
    return {
        glyph:glyph, pixels:pixels, width:width, height:height, top:-rect.y0, left:rect.x0,
        advance:floor(hmetrics.advanceWidth * scale_x),
    }
}
function GetPaths(font, codepoint, size_x, size_y) {
    size_y = size_y || size_x;
    var scale_x = size_x / font.ascent;
    var scale_y = size_y / font.ascent;

    var glyph = stbtt_FindGlyphIndex(font, codepoint);
    if (!glyph && codepoint) {
        return null;
    }
    var vertices = stbtt_GetGlyphShape(font, glyph);
    var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);

    // The hmetrics just give us advance.  We need ascent and descent as well.
    var ascent = 0;
    var descent = 0;

    // Convert to SVG notation
    var paths = [];
    if (vertices) {
        for (var i = 0, l = vertices.length; i < l; i++) {
            var v = vertices[i];
            var path;
            if (v.type == STBTT_vmove) {
                path = { type:'M', x:v.x * scale_x, y:v.y * scale_y };
            } else if (v.type == STBTT_vline) {
                path = { type:'L', x:v.x * scale_x, y:v.y * scale_y };
            } else if (v.type == STBTT_vcurve) {
                path = { type:'Q', x:v.x * scale_x, y:v.y * scale_y,
                                  cx:v.cx * scale_x, cy:v.cy * scale_y };
            } else if (v.type == STBTT_vcubic) {
                path = { type:'C', x:v.x * scale_x, y:v.y * scale_y,
                                 cx1:v.cx * scale_x, cy1:v.cy * scale_y,
                                 cx2:v.cx1 * scale_x, cy2:v.cy1 * scale_y };
            } else {
                continue;
            }
            if (path.y > ascent)  ascent  = path.y;
            if (path.y < descent) descent = path.y;
            paths.push(path);
        }
    }

    // Add the glyph metrics to the returned array.
    paths.advance = hmetrics.advanceWidth * scale_x;
    paths.ascent  = ascent;
    paths.descent = descent;
    return paths;
}


// exports
return {
    InitFont:   InitFont,
    GetGlyph:   GetGlyph,
    GetPaths:   GetPaths,
}

})();
function toUint8Array(data) {
    if (typeof data == "string") {
        var binary = /[^A-Za-z0-9+\/=\s]/.test(data);
        var bstr = binary ? data : atob(data),
            len = bstr.length,
            bytes = new Uint8Array(len);
        for (var i = 0; i < len; i++) {
            bytes[i] = bstr.charCodeAt(i);
        }
        return bytes;
    } else if (data instanceof Uint8Array) {
        return data;
    } else if (data instanceof ArrayBuffer) {
        return new Uint8Array(data);
    }
    throw new ReferenceError("data must be a binary or base64 encoded string or Uint8Array");
}

FontLib.loadFont("OCR-A", 100, 100, "");
FontLib.loadFont("OCR-B", 96, 100, "AAEAAAAPAIAAAwBwRkZUTXxHn14AADmUAAAAHEdERUYAkwAEAAA4IAAAACBHUE9TuP+4/gAAOWQAAAAwR1NVQnZYZVQAADhAAAABJE9TLzJa+GPlAAABeAAAAGBjbWFwzJGg2QAAA2QAAAFCZ2FzcP//AAMAADgYAAAACGdseWbm+CwyAAAFeAAALwRoZWFkFgqHXQAAAPwAAAA2aGhlYQeFAeAAAAE0AAAAJGhtdHgIFCYVAAAB2AAAAYpsb2NhZAZYlAAABKgAAADObWF4cACtAGkAAAFYAAAAIG5hbWWukZg3AAA0fAAAAnlwb3N0tfQXywAANvgAAAEdAAEAAAACAADO4NltXw889QALA+gAAAAA2gMiKgAAAADaAyIqAA7/GQLWAwsAAAAIAAIAAAAAAAAAAQAABFL+sABaAtMAAP/9AtYAAQAAAAAAAAAAAAAAAAAAAF8AAQAAAGYAZgAFAAAAAAACAAAAAQABAAAAQAAAAAAAAAACAsMBkAAFAAACigK8AAAAjAKKArwAAAHgADEBAgAAAgAFCQAAAAAAAAAAAK8AAABoAAAAAAAAAABQZkVkAEAAIAB+AyD/OABaBFIBUAAAAAEAAAAAAiAC+QAAACAAAQLTAAAAAAAAAtMAAALTAAAC0wD1AtMAdALTAEQCvwA/Ar8APwLTAEQC0wDnAtMA0wLTAIgC0wBEAtMARALTAHIC0wBEAtMAxALTAIACvwA/AskAXgK/AFACvwA/Ar8APwK/AFkCvwA/Ar8APwK/AD8CvwA/AtMA1gLTAG8C0wBBAtMARALTAEEC0wBgAtMARAK/AEUCvwA/Ar8AbwK/AHICvwBtAr8AoAK/AEcCvwBbAr8AeAK/AFACvwBNAr8AWwK/AD8CvwBNAr8AQgK/AFsCvwBBAr8AZwK/AGECvwA/Ar8ATQK/AD4CvwA/Ar8AUwK/AFYCvwBbAtMApQLTAIAC0wBVAtMARALTAEQC0wC2Ar8ATQK/AEoCvwB1Ar8APwK/AE0CvwBhAr8AQgK/AGoCyQCDAskAZwK/AHsCyQDLAr8APwK/AE0CvwA/Ar8ASgK/AD8CvwCaAr8AZwK/AE0CvwBNAr8AQgK/AEECvwBhAr8APwK/AGEC0wBEAQwARABSAnICBgG2AA4AAAAAAAMAAAADAAAAHAABAAAAAAA8AAMAAQAAABwABAAgAAAABAAEAAEAAAB+//8AAAAg////4wABAAAAAAAAAQYAAAEAAAAAAAAAAQIAAAACAAAAAAAAAAAAAAAAAAAAAQAAAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALABiAMYBUAG6AkICYgKMArQC8gMaAzoDVgNwA5QEEgQ2BIgE2AUSBVYFngXSBjQGegaoBtwHDAcyB1oHxAhUCIQI2glACXgJrAnaCjQKYgqYCswLAgskC2QLlgvuDB4MgAzODUQNbA2eDcgOEg5ODoAOsg7WDvoPHA9ED2APgg/eECoQaBCyEPgRLBGUEdISAhJOEoASqBLyEygTVhOiE+gUIhSYFN4VGBVGFYYVvBXyFiAWbBaEFs4XDhcmF0QXaheCAAAAAgD1/7wBfQL9AA8AGwAAFzU0NjsBMhYdARQGKwEiJhMRNDYyFhURFAYiJvUbEi4SGxsSLhIbFxskGxomGhcuEhsbEi4SGxsBcgGHExobEv55EhsaAAAAAAIAdAHHAgkC/QASACMAABM1NDY7ATIXFhUwFQ8BDgEjIiYlNTQ2OwEyFxYdAQcOASMiJnQbEh0SDg4BHQIZEhEcASQbEhcRDg4ZBBYREhsB9NwSGw0MDwEC5BAXGxLcExoNDBAE5RAUGwAAAAIARP/4Ai4DAABEAEgAADc0NjsBNyMiJjQ2OwE3PgEzMhcWFQczNzYzMhYdAQcXHgEVFAYrAQczMhYUBisBBw4BIyImPQE3IwcOASMiJyY1NycuATczNyNEGhMVJicSGxoTOygDGRASDQ4liCgNHxIbIwUQFxsSFCUlExobEjopAxoPEhskhykDGRASDQ4mBRIXnoglh/4TGqcaJhqxDhUODhCosSMaEwqcAQMZERIbpxskG7YOFRsSCqK2DxQODRGsAQIaPqcAAwA///sCHwL9AEcAWABfAAA3JjU0NjMyFxYXFhczNScuAScuAjU0NzY/ATU0NjIWHQEXFhcxFhUUBiMiJyYvARUXFhcWFx4BFRQHBg8BFRQGIiY9ASMmJxMGFRQXFhcWFxYXHgIfATUTNzY1NC8BQQIbEhYVFwwYLQUEIS4cGyIWNjZSBBoiGgRpOAkbEhcOITUGBCwcHR8fHjc3UwQaIhoFlSi8YwMECAgFBgwMChwCB1YGZWQHoAUMExodIQYNBNwBChEPDyQ2IkwqKwoBCRMaGxIJAQ5SDA4SGhMsCwHFAQ4MDBYVPytNMDENAQYSGxoTBw1kAcoORQsKCggHBQUGBgUKAQKq/iABFEo8JAIAAAAABQA///gCHwMAAA0AHAAoADcARwAAJSIVFBcWHwEzMjc2NTQHJjU0NzYzMhcWFAcGIyIDIhUUFzsBMjc2NTQHJjU0NzYzMhcWFAcGIyICJjU0NwE2MzIWFRQHAQYjAaIhBQUOAQgRCQl6HyAfNzogICAgOjiuIxgBChEJB3wgISA6Nx8fHx83OycbBgGMDRQSGwb+exAYtTIPDxABAhAPEjKVKDg5KyspKXIqKQKuMikIEA8SMpUoODkrKykqcikp/hQbEw0JAq0MGxIMCv1dFwAAAAADAET/9wIuAwAAQgBOAFwAADc0PwEnJjU0NzYzMhcWFRQHDgEHDgIPARc3NjU0NjIWFRQPARcWFx4BFxYVFAYjIicmJyYnJicmJyYvAQcGKwEuATcUFzMyPwEnBwYHBhMUHwE3Njc2NTQnJiMiRF8EA0Q1NVhKNTQJChQYFxY+BASXBBUcJBs3AgICBwcHAwMbEgYFBgQDBAUCAQUGAQMEPlEGYnVafwYwKAShBRwPEBwwAwRMHiAcGyJozXJUAwRdVVQwMCgmRBsaGyMXGBMuAwPSCDRFExscEnxTAwIFCAgKCQgIEhsCAgEBBQUCAQcIAgICJwFyYnkCFwLhBB0bGwFXOEQEAzYlJx0eDgwAAAEA5wGIAY0C/QASAAATNDY7AR4BFTAVBwMGKwEiJyYn5xsSURAXARUIJCISDQ0BAtATGgIZDwEB/twlCwoRAAABANP/+AHpAwAAGQAAEzU2NzYzMhYVFAcGBwYHFRQXFhUUBiMiJybTA80LDhIbFE4sLQGoFBsSDgvQAXMG8I8IGhMXDjNKS20FvmsOGBMaB4wAAAABAIj/+AGfAwAAGAAANzQ3NjU0LwEmJyY1NDYzMhcWFRQHBiMiJogUqakBBwYGGxIOC9HRCw4SGyUYDm7AwnMBAgwMChIbCJDv7I4HGwAAAAEARACeAi4ChQAqAAATNDc2Mxc1NDYyFh0BNzE2MzIWFRQPARcWFRQGIyIvAQcGIyImNTQ/AScmRA4OEZsbJBuNBggSGyB6UAUaExQMV3AMFBMaCV6MHwG+Eg8OM54TGhsSni4DGxIgCymICwwTGguWlgsbEg0Ofy4MAAABAEQAagIuAo0AGwAAEjQ2OwE1NDYyFh0BMzIWFAYrARUUBiImPQEjIkQbEpsaJhqbEhsbEpsbJBubEgFpJhq3ExobErcbJBu4EhsaE7gAAAEAcv9NAeYAygASAAAXNDcTNjsBMhYdARQHAwYrASImcgWyDBVvEhsN/gwUHBMahgwKAS4MGhMfEwz++w0aAAABAEQBQQIuAbcADwAAEzU0NjMhMhYdARQGIyEiJkQaEwGQExoaE/5wExoBbhwTGhsSHBIbGgAAAAEAxP/7Aa0AtgAPAAA3NTQ2OwEyFh0BFAYrASImxBsSjxIbGxKPEhsoYRIbGhNhExobAAABAID/+AHyAwAAEwAANzQ3MwE+ATMyFhUUByMBDgEjIiaAAwEBGAQYDRIbAwH+6AQYDRIbJQoHAq4MEBsSCgf9UgwQGgAAAAACAD//+AIfAv8AJQBUAAAFIyYnLgEnJicmNTQ2Nz4BNz4CMzIeARceARceARUUDgUDFRQWFxYXHgE7ATI2Nz4BNz4BPQE0JicmJyYnJicmJyYnLgEjIg4CBw4BBw4BATMEOywsNA8QBQUDBgYVEhIySC4tSDITEhUGBgMEDRQmMEbFBQkIEBA4KBUcLA0OEgQFAwEBAQMDBQUICAsMDg8nGBknHhcICAoCAgMIARMSOy8vMC9AOVEvMEEhICYYGCYgIUIvL1I4KEFMOTYkFgGwUi1AJSUXGB8XFhUxHyA0Hy4fJRwdEBEXFw4ODw8ICQoLFB0SESkXFi8AAAABAF7/+wGMAv0AFQAAEiY1ND8BNjsBMhYVERQGIiY1EQcGI3gaDbcNECASGxskG4kNEQIJGxIVCp0LGxL9WBIbGhMCYXULAAABAFAABgILAwAANwAAEiY1NDc2MzIXFhUUBw4BBw4BBw4BBwYHBgcVITIWFAYjISImPQE0NzY3Njc2NzY1NCcmIyIHBiNrGxNbcVs9Pg0NISAgISMmIhgYCwsCASgTGhsS/qoSGwoRLy9EXhkcJSM0Wj4LDwJyGxEZDTw6OV0lIiMsGxsYFxkaGhkgHysFGyQbGxIVTiI8LzAuPyQkKDUhICwIAAEAP//4AhYC/AA3AAA3JjU0NjMyFxYzMjc2NzU0JyYnJiMiJjU0PwEhIiY0NjMhMhYdARQPARcWFxYdAQYHBiMiJyYnJlQVGxIGC0BGTDQ1BCAeLCs1ERoJuP7nEhsaEwFhEhsOoQhVNjUFUE5wHBwcIyMeEBgTGwQdJidKCjMkIw8OGxMSCswbJhobEiQQDrECFjs7WRBtQEADAwcIAAABAD//+wIfAv0AKAAANiY9ATQ3Ez4BMzIWFRQHAzM1NDYyFxYdATMyFhQGKwEVFAcGIiY9ASNaGwXVBBYMEhoFyMMaIg0OOhMaGxI6Dg0iGvWpGhMrCAsBzwsPGxIKCf5GeRIbDg0SeRskG4ESDQ4bEoEAAAIAWf/4AfcC/AAqAC0AABYmNDYzMjc2NTQnJiMiByMiJj0BEz4BMyEyFhQGKwEHMzIXFhUUBwYHBiMSIjN0GxsSyjsSIi1xHyAEEhsOAhkSARwTGhsS8ggTf01OFxgkYL4YAQEIGicacSIfSSU1AxkSAwD/EhgbJBydQUB+NS4vIVoBrQAAAAACAD//+AIfAv0AHwAvAAA3Jic1NDc2Nz4BNzYzMhYVFAcGDwE3NjMyFxYVFAcGIgMGFRQXFjMyNzY1NCcmIyKFQwNFHCgnNjILFBEaC3E1BwsdHm1BQkRE0AYoKilDQikrJyZJRzlBawx9ci80NT85DRsSEQ6ATQoCBkRFdGlCQgFkK0xEKCcoKENOKisAAAABAD//+wIfAvwAHwAAEiY0NjMhMhYVFAcGBwYHBhUUBiImNTQ3Njc2NzY/ASFaGxoTAYYTGjsSNDQWQRoiGkwXNDURGAkC/q8CoRsmGhsSTFkcQUIpeMETGxoU2o0pRUYaKBQHAAAAAAMAP//3Ah8DAAAVACQAQgAAEwYVFBYXHgEXOwE2NzY3PgE1NCcmIhMGFRQXFjsBMjc2NTQvAQMmNTQ/AScmNTQ3NjMyFxYVFAcGDwEXFhUUBgcjIuEmEhUUGxwCAhwODhQUEiYlUimXLSpAFDUmJ5ICrUWOBgZsQD9PTkBAHB0zBgaOdFIqZwKSFCYZJhAPEA4NCAgPECcZJhQU/s9PXjgfHyMjMF9OAv67Olx5YgQEQmtJLzAwMEg7KSghBARieU96BwACAD//+wIfAwAADwAtAAATBhUUFxYzMjc2NTQnJiMiAyY1NDc2MzIXFhUUBwYHBgcGIyImNDc2PwEHBiMixSwqKER3FQoqKUM/bURIRmJlRUYVFSZTeA0PERoOX0QFChogagJ1MENBKShJIShLLC3+tENlaEtLRkZyRzk5QpFvDBomDltuCgIEAAAAAAIA1v/7AZwCEAAPAB8AADc1NDY7ATIWHQEUBisBIiYRNTQ2OwEyFh0BFAYrASIm1hsSbBIbGxJsEhsbEmwSGxoTbBMaKFATGhsSUBIbGgF+UBMaGxJQEhsaAAAAAgBv/1IBswIQABIAIgAAFzQ/ATM2OwEyFhUUBwMGKwEiJhM1NDY7ATIWHQEUBisBIiZvA3wBCR9vEhsBzA4RKxIbexsSbBIbGhNsExqBDAf9GRsSDgP+9Q0aAidQExobElASGxoAAAABAEEARQIuArMAHQAAEy4BJyYnLgE1NDcBMDE2MzIWFRQHDQEWFRQGIyInTwEGAQECAQIOAZkLDhIbDf6hAV8NGxIOCwFcAQUBAgMECAcREAEPCBsSFwnq6g4SEhsIAAACAEQA3QIuAhsACwAXAAA2NDYzITIWFAYjISImNDYzITIWFAYjISJEGxIBkBIbGhP+cBMaGhMBkBMaGxL+cBL3JhobJBv+JhobJBsAAQBBAEUCLgKzABcAAAkBBiMiJjU0Ny0BJjU0NjMyFzAxARYVFAIg/mcLDhIbDQFf/qENGxIOCwGZDgFc/vEIGxISDurqCRcSGwj+8RAREgACAGD/vAH1AwEAOQBLAAATNTQ2NzYzMhcWHQEOAQcGBwYHBhUUBwYiJjU0NzY3Njc2NzY3NjU0JyMiJyYrAgYdARQHBiMiJyYTNTQ2OwEyFh0BFAcGKwEiJyZgPi8vNlA6OQEsHwcUFgkJDg0kGwoKCwwUFQgSEBFTAQUICgQDAW4NDRMSDQ2UGxIuEhsODRIuEg0OAjQMPFsVFTAwWAIxZCMIExQOCwsUDw8dFRoYFw4OFBUKEyIiG0IVAQIOUgkUDw4ODv3MMRUdHRUxFA8PDw8AAAIARP/yAi4DBABKAGUAADc1NDcyHwE3NjMyFxYVERY7ATY3Njc+AT0BNCYnLgEnJicmKwEGBw4BIyInJj0BNjc2NzMyFhcWFx4BHQEUBwYHBiMiLwEHBisBJjcUFxYXHgEXMzI3Njc9AiYnJiMiBwYHDgEVRIgvJwUCDhkSDQ4CHAETDQwEBQMDBQUXEBEbGyMJggsCGRETDQ0MPT9eCTpZGxsREQ0KCiMmNzYdAwQrPQiMWgEBBQQYEwYcEQ8NDRcXHBALCgMEAtIB7wIdAwUYDw8T/vk2AQwNFhUmHZgqPyYlNBcYDAwGVxIYDg8VB1ItLgMqIyM1NXBGfFsxMCInJgQDKAXWGw8QFBUVAREQHQGMARoTFAwMFhQiGAAAAAIARf/1AhoC9gAZABwAABYmPQETPgE7ATIWFxMUBwYjIiYvASMHDgEjEwMzYBufBBgOQg0XA6MODhIPGQMtyywDGQ+9T54LHRUOAp4OFREM/U0TDw8VD8PDDxUCov6qAAMAPwAGAh8C/QAhACsAOQAANiY1ETQ3NjsBMhcWFxYXHgEVFA8BFx4BHQEUBgcGBwYrARMVNzI9ASYnJiMDFRcyPQEmJyYnJicmI1obDQ0TpyQVFR4dFiwyOgQEIicnJCUvLz6nLXqyASspQZaWiAMODRgYGRkkBh0VApIWDw4BAgcIDRxiOVo4BAQeWDACMlkfHwsLAVr1AXwBPh0cATrVAWMLIRUWCwoDBAABAG//8gHwAwsARQAAEyYnNTQ2NzY3Njc2NzMyFxYXFRQHBiMiJyYnJicwMSYrAQYRFR4BFxYXFhceATMyNzY3PgEzMhcWHQEGBwYjIicmJyYnJnYGAQ0QERkYJyQvBTsuLQ0NDRITCQsICQsVHQWBAQQFBAoJDg4tHBwTFgQDGRASDQ0KLS09MiUoGBkREQD/NT8OQGw0MyUkFhYCJiY9ChQPDw0NFRYKEgf+6RIlOiMkGhoXFxoPDxoSFw8PFAo8JiYVFSQkMzMAAAACAHIABgIFAv4AFAAhAAA3JjURNDc2MzIXFhcWFRQHBgcGIyITJxE3Njc2NTQnJicmgA4NDRNmQ0M1RUhGayJLEkUGBmU5OyEgMysVDxUCkxQPDyssTmiFi19eFwcCkQH91AELQUB1UkFAKyQAAAAAAQBtAAYCEwL7ACIAADYmNRE0NzYzITIXFhQGIyEVMzIXFhQHBisBFSEyFxYUBiMhiBsNDRMBTBMNDRsS/uHvEg0ODQ0T7wEfEw0NGxL+tAYdFQKRFQ8ODg8qHdQPDykPDvUODyodAAABAKD/9QICAvoAHgAANyY1ETQ3NjMhMhcWFAYrARUzMhcWFAcGKwERFAcGIq4ODQ0TAQgTDQ0bEtuuEg0ODg0Srg4NJAQPFQKgFA8PDg8qHdQPDygPD/7KFQ8PAAEAR//xAg4DCAA+AAA3Jj0BNDc2NzYzMhcWFxYVFAYjIicmIyIHBgcGFRQXHgEzMj8BNSMiJyY0NjsBMhYVERQHDgEHDgEHBiMiJyZeFxcXLEZeExNYNwsbEhQOK0M+Kh8PEBwSTDUuMgNyEgwNGhGfEhsHCBIREhEQLC5sQivEV2MDYVNUME8DEEgOExQdETYxJD4+SWlYODoUAckODykdHRX+6Q4LDA4ICAYFDk0wAAAAAAEAW//1AgIDBAAdAAAWJjURNDc2MhYVETMRNDc2MhYVERQGIiY1ESMRFAZ2Gw4NJBvzDg0kGxskG/MbCx0VAqoVDw8dFv7lARsVDw8dFv1WFR0dFQEt/tMVHQAAAQB4AAYB5gL6ACMAADcmNDc2OwERIyInJjQ3NjsBMhcWFAcGKwERMzIXFhQHBiMhIoYODQ0TYEwSDQ4NDRPsEw0NDg0STGATDQ0ODRL+7BIVDykPDgIsDw8oDw8PDygPD/3UDg8pDw8AAAAAAQBQ//ABpQMHACMAADYmNTQzMhcWHQEGFRQXFjMyNzY1ETQ2MhYVERQXFBUUBiMiJ4Y2MBMMDQIcGiAeFRcbJBsBZ0EpJyBXN04ODxUKDAQpGhoYGS0CJBUdHRX95wMFBAJMchcAAAABAE3/9QIfAwcAHwAANyY1ETQ2MhYVEQE2MhYUBwMBFhUUBwYjIicBERQHBiJbDhskGwEUDiQbDvwBEw4ODRITDf7VDg0kBA8VAq0VHR0U/ucBOw8dKRD+3P6+ERIVDw8OAVv+yRQPDwAAAAABAFsACwIfAwcAEwAANyY1ETQ2MhYVESEyFxYUBwYjISJpDhskGwE9Ew0NDg0S/pYSGg8UApkUHR0U/ZkPDygPDwAAAAEAP//1Ah8DBAAoAAAWJjURNDY7ATIXFhcbAT4BOwEyFxYVERQGIiY1EQMGBwYjIiYnAxEUBlobGxJNDgwLBE1NAxgOTRINDhskG2wGCwoPDhcEbRsLHRUCqhYdCgsO/uUBGw4VDw8V/VYVHR0UAmv+cxAKChQPAY79lRQdAAAAAQBN//UCEQMIAB8AADcmNRE0NjsBMhYXExE0NjIWFREUBwYrASInAxEUBwYiWw4bEiUMFwXwGyQbDg0SJhwM7w4NJAQPFQKtFR0PDf3JAiMUHR0V/VMVDw8bAjf93xQPDwAAAAIAQv/yAhwDBwAeADkAADYmPQE0PgE3Njc2MzIXFhceAR0BFAYHBgcGIyInJicSBh0BFBYXFhcWMjc2Nz4BNTQmJyYnJiIHBgdkIhEmHRsoJy81LS4eHiEhHR4uLTY1LS4eLBESEREdHkgeHREREhERER0eSh8dEKuLRwM2bWcnJxcYIiE4OItJA0eLOjkjIyMjOQGdYSwELmItLx4fHx4vLWMtMWQtLR0dHh4vAAAAAgBb//UCHwL8ABUAHwAANyY1ETQ3NjsBMhcWFRQHBisBERQGIhMVMzI3NTQnJiNpDg0NE6hoQ0QmPYx7GyQ/e5AFKSdFBA8VAqEVDw85OWxRNVj+6BYdAqP1dAdEGxsAAgBB//UCHwMIACMAQwAANyY9ATQ3Njc2OwEyFxYXHgEVFA8BFxYVFAYjIi8BBwYjIicmEgYdARAzMj8BJyY1NDc2MzIfATc2NTQnJicmIyIHBgdfHh4ZMzFBCDYrKxsbHTACQwocEhYKOAQ1Oz03OTIMhSAeBGAKDQwRFwpRAxQPDyEiLiUbGw3DUYMDgk1BLy8fHzU1gUeMZAJfDxEUHg5SBC4uLwGzTS0D/tgZA4sPEBQPDw52CkFLRjs8KSkWFSUAAAIAZ//1AggC+AAkADEAABYmNRE0NzY7ARYXFhcWFxYHBgcGDwETFhUUBwYjIicDIxEUBwYTFTcyNzY3NjU0JyYjghsNDROfKiMkHx4REQEBICFCBYoFDg0SFgueWw4NG242GhoKCiUiOAsdFQKeFg8OAQoLFRUnJjRfOjobAv77ChEUDw8NAT7+6BUPDwKk9QIaGRwcLDAWFgAAAAEAYf/wAf0DBwBRAAA3Jic1NDYzMhYXFhcWMzI3NjU0JyYnLgEnLgInJicmJyYnJjU0NzY3MzIXFhcWFRQHBiInJicmJyYjIgcGFRQXFhcWFx4BFx4CFRQGBwYjIqU6ChsSERoCBiEfKTAlJAcHDg0WEw45IhoaDxAQDwgHPDxPBkcyNBECDQ0mCwwJCgobMC0jJBUTJBAjIyceHSEXZksSEkkiMk0IFB0YEi0YGCAcOxgUEw4OEQoIHxUQERARFxcdHCNSNTYCJydDCAQUDw4NDhUYChoZGSotGBgUCxITFxcWLUQpVXQOAwAAAQA///UCHwL4ABgAABMmNDc2MyEyFxYUBwYrAREUBwYiJjURIyJNDg0NEwGGEw0NDg0SmA0NIhqYEgKiDyoPDg8PKQ8P/ZQUDw8dFQJsAAABAE3/8gIRAwgAIAAANyY1ETQ2MhYVERQXFjMyNzY1ETQ2MhYVERQHBgcGIicmZRgbJBsyHzc+JCYbJBsYGCw1ojUscDY9AfMVHR0V/g1RJhcmJkEB8xUdHRX+Dj02NiAoKCAAAQA+//UCIAMGABgAADcDNDc2MzIWFxsBPgEzMhcWFQMOASsBIibjpQ4OEg8ZA5iXBhcPEg4OpwMYDkIOGhkCvBQODxUO/YACgA8UDw8T/UQPFRYAAQA///QCHwMFAC8AADcmAzU0NjIXFhcSHwE3NjsBMhcWHwE3NhM0NjMyFh0BAgMOAQcjIi8BBwYrASInJn4xDhskDQ0BCxgDPwsdEQ4LDAQ+AxkKHBIRHA4yAxkQBTQNPj8KIBsRDAwb9AHFAhQbDg8U/r+4GfUhCgsO6xjBATEUHR0TAv5G/wAOFgEw6/giCwsAAAEAU//1AgsDBgAlAAAWJj0BNDcTAyY1NDYzMhcbATYzMhcWFRQHAxMWFRQGIyInCwEGI24bBaCaBRsSFAyJgRMVEg0OBZqgBRsSFQ2NhxIWCx0VAQ8KAUYBMgwOFh0N/u0BBRsPDxUODP7O/roKDxUdDQEj/ukaAAEAVv/0AggC+QAeAAATJjU0NjMyFxsBMz4BMzIXFhUUBxUDERQGIiY1EQMwWwUbEhkPhIQBAxgMEg0OBakaIhqpArAIDxUdG/7rARULEA8PFA8IAf6l/tEUHR0UAS8BWwAAAAABAFsABgICAv4AHgAANyY1NDcBIyInJjQ3NjMhMhcWFRQHASEyFxYUBiMhImkOBQEL4BINDg0NEwEoEg0OBf73AQMTDQ0bEv6zEhUPFA4KAkkPDykPDw8QFA0K/bcPDyodAAAAAQCl//gCHQMAABUAADcRNDYzITIWFAYrAREzMhYUBiMhIialGxIBHhIbGhPx8RIbGxL+4hIbJQKuEhsbJBv9rBskGxsAAAAAAQCA//gB8gMAABQAABM0NjMyFhcBMDMWFRQGIyInATAjJoAbEgwZBAEYAQMbEh4L/ugBAwLTExoQDP1SBwoSGxwCrgcAAAAAAQBV//gBzQMAABUAADY0NjsBESMiJjQ2MyEyFhURFAYjISJVGxLx8RMaGxIBHhIbGxL+4hITJBsCVBskGxsS/VISGwABAEQBdAIuAvsAGAAAEzU0NxM2NzIXEzAxFhUUBiMiLwEHBiMiJkQHzg8QGAnNCBsSEw2pqAwTEhsBoQoOCwErCgEM/swLDhIbDbKyDRoAAAEARP8ZAi7/kAAPAAAXNDYzITIWHQEUBiMhIiY1RBsSAZASGxsS/nASG50TGhsSHRIbGhMAAAAAAQC2AgcBuQMAABIAAAEnJjU0PwE2MzIfAhYUBwYjIgFvqRALDw0XDgoDnwsLDRURAhGODRUQDRIQCQKmDh4NDwAAAAACAE3/7wH6AiAADQA/AAAlIhUUFxYXMzI/ATUjJgcmNTQ3Njc2NzY3PgE7AScmJyYjIgcGIyImNTQ3NjMyFxYVERQGIiY9AQcGIyIjJiMmAVixHRodCFZGAQUr7zQNDBkaHR0pKUQyBgEGGRo5PC4MEBMaEU9TWzU8GyQbCERPAgYFBD/3YCEVFQJ6ATAC1C9FKh8fExMMDQYGBAY/GRonCRoTFg06MjpY/sUSHBoTEwc9AQUAAAAAAgBK//ACHwMFAB4AMgAAFiY1ETQ2MhYdATc2MzIXHgEXFRQHBiMiJyYvARUUBjcVFhcWMzI3Nj0BJicmIyIHBg8BZRsbJBsIQkoYIE9fATo5aBEIRDsIGxsUKysxJSFAAiUlNxsdQCUBDRsTArcSGxoT+QY2CBV/XweBVVMBBzAGDhMa0gExJSUXLYgJQDIzDh9NAQAAAAABAHX/7gHwAhoAKgAANyY1NDc2MzIXFhcWFxUUBiMiJyYjIgcGFRQzMjc2Nz4BMzIWHQEGBwYjIuVwNTVjExQwIyMLGRMfDAw+JRg9bBIPMQsDGRASGg4yNDwwBz7NeElHAwYbGyoLExokIw0fgsoEDCsOFRsSCzckJQAAAgA///ECEwMFAB4AMQAANyY1NDc2NzYzMh8BNTQ2MhYVERQGIiYvAQcGIyInJhMGFRQXFjMyNzY3PQImJyYjImwtLy5RHBhKRggbJBsbJBoBAQc/TxocVUA/IiI9HB5MGRUpKTAoVEpvZkVEFwg1BvgSGxoT/UkUGhoRCgYxBhQBnCxuTzs8DiBQAYUBLyMjAAAAAAIATf/xAhECIAAkAC0AADcmNTQ3NjczMhcWFRQGIyEXFhcWMzI3Njc2MzIWFRQHBiMiJyYTByEnJicmIyJ2KT49ZgZoOjsbEv7EAQclJEMREh4UDBITGy0tPzMmTA8CAQQBCxwcPGNgSmhzTUwCR0dzEhwGSyssAwQVDRoTKxQVDRoBOgcGPBwdAAAAAQBh//MB/QMCACMAABImNDY7ATU0MzIWFAYjIgcGBwYdATMyFhQGKwETFAYiJjUDI3saGxJxzhIbGxIsICAJBHwSGxsSfAYaIhoFcQG7GyQbDt8bJBsPECINNw4bJBv+ZhIcGxMBmgACAEL/QgIGAhsANABJAAA3JjU0NzYzMhcWHwE3PgEzMhYVERUWHQEUBwYjIicmJyMmNTQ2MzIXFhcWMzI3Nj0BBwYjIhMGFRQXFjMyNjc2NzY/AT0BJicjIns5OjlmDwg/MgcBARsREhsBOzxhTjAwFQEDGxIUEBEKFkVbGAoIPlJfCCAfHjocMRISDAsPAStVDUJbR2t4S0sBBikGChEYGxP+UQEJDBdeNzcTEzEHCxMaFRgFCjgXLDsHNwF8L09CLC0UFBMQEBkCVgF3BgAAAQBq//MB9AMFACkAABYmNRE0NjIWHQE3NjMyFxYXFh0BFAYiJjURNCc0Jy4CIyIHBg8BERQGhRsbJBsIOUo4KioPChskGwEEBBAdFTEgHxoBGw0aFAK3ExobEvUHMSMjNyVb/RIcHBIBCxsRERUXGRMhHzMB/tQSHAAAAAIAg//zAZQDBQAQACAAABImNDY7ATIWFREUBiImNREjNiY9ATQ2OwEyFh0BFAYrAZ4bGhO0ExobJBuHeBsbEi0SGxsSLQGoGyQbGhP+SxMaGxIBiNUaEy4TGhoTLhMaAAIAZ/9JAZQDBAAPADQAAAAmPQE0NjsBMhYdARQGKwEDIj0BNDc2MzIXFjMyNzY3NjURIyImNDY7ATIWFREUBwYHBgcGASgbGxItEhsbEi10Xw4PFQQQEAoICD0UCmUSGxoTkhMaERMdHSciAnwaEy4TGhoTLhMa/M0uCREKCwECAQQtFkkBdBskGxsS/lJVJCUbGgYFAAAAAQB7//MCBQMFACEAABYmNRE0NjIWFREzNzM2MzIWFRQPARcWFRQGIyIvASMVFAaWGxskGwq7AQ0REhsOqssMGxIVC9kKGw0aFAK3ExobEv6Asg4cEhQNpOUOERIcDfTUEhsAAAEAy//5AfADBQAYAAA3JjUTNDYzMhYVAxQXFhcWMzIWFAYjIicm9CkGGhMSGwcQES8PQBIbGxJTMC48N28B9RMbGxP+Cj8iJAcCGyQbDQ4AAQA///MCHwIbADIAABYmNRE0NjMyHwE3NjMyHwE3NjMyFhURFAYiJjURJiMiBwYVERQGIiY1ESYjIgcGFREUBlobGxIXDgMEIig4JAMEKTQ2RxskGwIhHxUUGiIaAiAgFRQbDRsTAckTGxUEAxktBQUtTzX+ihIcGxMBbzEvLif+5BIcGxMBbzEwLib+5BIcAAAAAAEATf/zAhECGwAjAAAWJjURNDYyFh0BNzYzMhcWHQEUBiImNRE0JyYjIgcGBxURFAZoGxskGwhDWGUxMRskGxcXPzsoKBgbDRwSAckSGxoSFAc9Q0N3/RIcGxMA/08oKiopOwH+7xIcAAAAAAIAP//wAh8CIAAPABsAADcmNTQ3NjMyFxYVFAcGIyIDBhQXFjI3NjQnJiKAQUFAb2xCQkJBbW4BJycmkiYnJyeQPk96e09PT1B6eU9PAaA2pjU1NTWmNjYAAAAAAgBK/0gCHwIbABUAMwAANxcWMzI3NjU0JyYjIgciIzEGBwYHFQImNRE0NjIWHQE3NjMyFxYXFhUUBwYrASYvARUUBqQBPlQPFWohIUQDBAMDLyUlFUAaGyQbCD5LGSFWLS09PGkRRjoIGssBgAUdlVQ2NwEDJCMvAf4BGxICdRMbGhMLBzQIFkZHb3dNTQQxB7cTGgAAAAACAD//SAITAhsAHAAvAAA3JjU0NzYzMh8BNTQ2MhYVERQGIiY9AQcGIyInJhMGFRQXFjMyNzY3PQImJyYjIm0uryEZSz4IGyQbGiYaCD5OHBtTPT8jIzwZIEIjFygpMSNQRmvmLAg0BwsSGxsT/YsTGhsStgc0BxMBoCiBSzY4DR1VAX0BMiQlAAAAAAEAmv/zAg4CGwAnAAAWJjURNDYzMhYdATc2MzIWFxQGIiYnNCcjIicmIgcGKwEGBwYdARQGtRsbEhMaCDdPPE8BGyQaASMBAgQFBwcGAwE3ICIbDRwSAckSGxkTCwc0TTgTGxoSIggBAgIBCTg3QOUTGwAAAQBn//AB/QIgAFEAADcmNTQ2MzIXFhcWMzI3NjU0JyYnJicuAicuAScmJyYnJjU0NzY7ARYXFhcWFRQGIyImJyYnIyIHBgcGFRQXFhceARcWFxYXFhcWFRQHBgcjImwFGxITEhUJITIwIyYPDgwKFgs5GhkaGRISCQgHBzg4Uh02LC0MAhsSEBkDCEAZGxMUEhQ+Dx8gIhwdDxAREQcHOjxYCYVFCA8TGhUYBBESEyYTDg0EBQYDDwgJCQ8ODg8OFhUZTiUmAxsbLwkDEhsTDiIEAwIODxswEgQHCAsKCQwLEREWFx1SJygCAAABAE3/8wHjAqYAMQAAEiY0NjsBNzQ2MhYVBzMyFhQGKwEHFBUWFx4COwEyNzYzMhYVFAcGIyInJicmPQE3I2gbGxJSARkkGAKWEhsbEpcDAQMEDRsUAhAcGw0SGyMlNCofLxQUA1ABshslG2wUGRsSbBwkHO0aDQwTExENCgobEiAQEQwTLi9MDOsAAAEATf/wAhECGAAoAAA3Jj0BNDYzMhYdARQXFhczMjc2NzERNDYyFhURFAYiJj0BBwYrASYnJlcKGxESHBUVQwU7KCYVGyQbGyQbCEFYBEgwMYEmS/gSHBwS6lwrLQIsKz8BChMbHBL+NxIcGhMSBzsBJyYAAQBC//MCHAIYAB0AABMmNTQ2MzIXEzMTMDU+ATMyFhUUBzEDDgErASImJ0UDGxIfC5EKkQMZDhIbA54DGQ1GDhcEAdsGCRMbH/5eAaIBDBIcEgkG/jYMEhENAAABAEH/8wIeAhgAKAAANwM0NzYzMhYXEzc+ATsBMh8BEz4BMzIXFh0BAw4BKwEiLwEHBisBIiZ4Nw4OEhEZAiorAxcPLCAKKikDGRESDg44AhkRMCAJMTELHTERGhsBzxMNDhcR/qSWDRMglgFcEBgNDRAE/jEQGB+wryAYAAAAAAEAYf/zAf0CGAAjAAAWJjU0PwEnJjU0NjMyHwE3NjMyFhUUDwEXFhUUBiMiLwEHBiN8GwiMgQcbEhcJdXUNExIbB4KMCRsSGAmAgQwUDRwSDg3OxgwOExsMtbUMHBIODMbODg0SHAy/vwwAAAEAP/9JAh8CGAAjAAAWJjU0NjsBMj8BAyY1NDYzMhcbATYzMhYVFAcBMDEGBwYjIidTFBsSEBYHa78GGxITDaicDhQSGwX+zQ0dHSMNDrEZEBMaEMsBVAkNExsM/tcBKQwbEw0K/bccEhMDAAEAYQAEAgUCBwAcAAA2Jj0BNDcBIyImNDYzITIWHQEUBxUBITIWFAYjIXsaDAEU6hIbGhMBKhMaDf7zAQQSGxoT/rYEGxIjDw4BPBomGhoTKBEMAf7KGyQbAAAAAQBE//gCLgMAADQAABI0NjMyNzY9ATQ3Njc2MzIWFAYrASIHBgcGFRQPARcWFRQXFhcWMzIWFAYjIicmNTQnJiMiRBsSVhcRJiE0NmESGxoTIjUdHxEUMQUEMgcIGhd4EhsbEpAtVRYYUBMBaCYbGxQ9CmM1Lg0OGyQbBgYYGkl7JQMFMWE3Hh8RDhskGxsznzsXGAAAAAABAQz/ZAFmAwAACwAABRE0NjIWFREUBiImAQwbJBsaJhpvA0ITGhsS/L4SGxoAAAABAET/+AIuAwAAMwAANjQ2OwEyNzY3NjU0PwEnJjU0JyYnJiMiJjQ2MzIXFhcWFRQXFjsBMhYUBiMiBhUUBwYjIkQbEiE9HyIOCjIEBTENDScVYRMaGxJhNjQhJRIXUgQSGxsSUC9UK5ISEiYaCQkgGUhhMQUDJXs1HyELBxomGg4NLjNlRhUbHCQaLzufMxsAAAAAAQBSAhwCIALNACsAABM1Njc2MzIzFjMWFxYzMjc+ATMyFhUUBxUOASMiIyYjJicmIyIHMQ4BIyImUgonJzACBQQDLj4rICAIAxoPEhsCCkwwAgUEAy4+KiAgCQMZEBIbAlUKMB8fAQUvIicPFRsSAwUBMD8BBDAhJg8VGwAAAAABAnIB9QLWAq8ACwAAATU0NjIWHQEUBiImAnIeKB4eKB4CJ1YVHR4UVhQeHQAAAAABAgYB9QKgAq8ADwAAATQ2MzIfARYVFAYjIi8BJgIGHhQbCTwIHhQTET0HAn0VHQ5fDQ4UHg9eCwAAAAACAbYCVALWAwIACwAXAAABNTQ2MhYdARQGIiY3NTQ2MhYdARQGIiYBth4oHh0qHbweKB4dKh0ChkoVHR4UShQeHRVKFB4eFEoUHh4AAQAO/4cAcgK1AAsAABcRNDYyFhURFAYiJg4eKB4dKh1HAsoUHh4U/TYUHh4AAAAAAAAOAK4AAQAAAAAAAABDAIgAAQAAAAAAAQAEANYAAQAAAAAAAgAHAOsAAQAAAAAAAwApAUcAAQAAAAAABAANAY0AAQAAAAAABQAKAbEAAQAAAAAABgAEAcYAAwABBAkAAACGAAAAAwABBAkAAQAIAMwAAwABBAkAAgAOANsAAwABBAkAAwBSAPMAAwABBAkABAAaAXEAAwABBAkABQAUAZsAAwABBAkABgAIAbwATQBhAHQAdABoAGUAdwAgAFMAawBhAGwAYQAgACgAMgAwADEAMQApADsAIABiAGEAcwBlAGQAIABvAG4AIABjAG8AZABlACAAYgB5ACAATgBvAHIAYgBlAHIAdAAgAFMAYwBoAHcAYQByAHoAIAAoADEAOQA4ADYALAAgADIAMAAxADEAKQAATWF0dGhldyBTa2FsYSAoMjAxMSk7IGJhc2VkIG9uIGNvZGUgYnkgTm9yYmVydCBTY2h3YXJ6ICgxOTg2LCAyMDExKQAATwBDAFIAQgAAT0NSQgAAUgBlAGcAdQBsAGEAcgAAUmVndWxhcgAARgBvAG4AdABGAG8AcgBnAGUAIAAyAC4AMAAgADoAIABPAEMAUgAgAEIAIABSAGUAZwB1AGwAYQByACAAOgAgADIANwAtADkALQAyADAAMQAyAABGb250Rm9yZ2UgMi4wIDogT0NSIEIgUmVndWxhciA6IDI3LTktMjAxMgAATwBDAFIAIABCACAAUgBlAGcAdQBsAGEAcgAAT0NSIEIgUmVndWxhcgAAVgBlAHIAcwBpAG8AbgAgADIAIAAAVmVyc2lvbiAyIAAATwBDAFIAQgAAT0NSQgAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAAAAQACAAMABAAFAAYABwAIAAkAtwALAAwADQAOAA8AEAARABIAEwAUABUAFgAXABgAGQAaABsAHAAdAB4AHwAgACEAIgAjACQAJQAmACcAKAApACoAKwAsAC0ALgAvADAAMQAyADMANAA1ADYANwA4ADkAOgA7ADwAPQA+AD8AQABBAEIAtgBEAEUARgBHAEgASQBKAEsATABNAE4ATwBQAFEAUgBTAFQAVQBWAFcAWABZAFoAWwBcAF0AXgBfAGAAYQECAQMBBAEFD3F1b3Rlc2luZ2xlLmFsdAlncmF2ZS5hbHQMcXVvdGVkYmwuYWx0B2Jhci5hbHQAAAAAAAAB//8AAgABAAAADgAAABgAAAAAAAIAAQABAGUAAQAEAAAAAgAAAAEAAAAKAEAAjgACREZMVAAObGF0bgAiAAQAAAAA//8ABQAAAAEAAgADAAQABAAAAAD//wAFAAAAAQACAAMABAAFYWFsdAAgc3MwMQAmc3MwMgAsc3MwMwAyc3MwNAA4AAAAAQAAABgAAQABABYAAQACABQAAQADABIAAQAEAAABAAAAAQEAAAECAAABAwAFAAwAFAAcACQALAADAAAAAQAoAAEAAAABAFIAAQAAAAEAVgABAAAAAQBaAAEAAAABAF4AAQAmAAQADgAUABoAIAACAAUAZAACAAoAYgACAEMAYwACAF8AZQABAAQABQAKAEMAXwABAAYAIAABAAEAQwABAAYAXwABAAEABQABAAYAWAABAAEACgABAAYABgABAAEAXwABAAAACgAsAC4AAkRGTFQADmxhdG4AGAAEAAAAAP//AAAABAAAAAD//wAAAAAAAAAAAAEAAAAAzD2izwAAAADWBtqRAAAAANoDIf0=");
    return {
        toCanvas:ToCanvas, toSVG:ToSVG, render:Render, raw:ToRaw,
        drawingCanvas:DrawingCanvas, drawingSVG:DrawingSVG,
        fixupOptions:FixupOptions, loadFont:LoadFont, FontLib:FontLib,
        BWIPJS_VERSION:BWIPJS_VERSION, BWIPP_VERSION:BWIPP_VERSION,
    };
}));
